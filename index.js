(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/gpu.js/dist/gpu-browser.js
  var require_gpu_browser = __commonJS({
    "node_modules/gpu.js/dist/gpu-browser.js"(exports, module) {
      (function(f) {
        if (typeof exports === "object" && typeof module !== "undefined") {
          module.exports = f();
        } else if (typeof define === "function" && define.amd) {
          define([], f);
        } else {
          var g;
          if (typeof window !== "undefined") {
            g = window;
          } else if (typeof global !== "undefined") {
            g = global;
          } else if (typeof self !== "undefined") {
            g = self;
          } else {
            g = this;
          }
          g.GPU = f();
        }
      })(function() {
        var define2, module2, exports2;
        return (/* @__PURE__ */ function() {
          function r(e, n, t) {
            function o(i2, f) {
              if (!n[i2]) {
                if (!e[i2]) {
                  var c = "function" == typeof __require && __require;
                  if (!f && c) return c(i2, true);
                  if (u) return u(i2, true);
                  var a = new Error("Cannot find module '" + i2 + "'");
                  throw a.code = "MODULE_NOT_FOUND", a;
                }
                var p = n[i2] = { exports: {} };
                e[i2][0].call(p.exports, function(r2) {
                  var n2 = e[i2][1][r2];
                  return o(n2 || r2);
                }, p, p.exports, r, e, n, t);
              }
              return n[i2].exports;
            }
            for (var u = "function" == typeof __require && __require, i = 0; i < t.length; i++) o(t[i]);
            return o;
          }
          return r;
        }())({ 1: [function(require2, module3, exports3) {
          (function(global2, factory) {
            typeof exports3 === "object" && typeof module3 !== "undefined" ? factory(exports3) : typeof define2 === "function" && define2.amd ? define2(["exports"], factory) : (global2 = global2 || self, factory(global2.acorn = {}));
          })(this, function(exports4) {
            "use strict";
            var reservedWords = {
              3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
              5: "class enum extends super const export import",
              6: "enum",
              strict: "implements interface let package private protected public static yield",
              strictBind: "eval arguments"
            };
            var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
            var keywords = {
              5: ecma5AndLessKeywords,
              "5module": ecma5AndLessKeywords + " export import",
              6: ecma5AndLessKeywords + " const class extends export import super"
            };
            var keywordRelationalOperator = /^in(stanceof)?$/;
            var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
            var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
            var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
            var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
            nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
            var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
            var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];
            function isInAstralSet(code, set) {
              var pos = 65536;
              for (var i = 0; i < set.length; i += 2) {
                pos += set[i];
                if (pos > code) {
                  return false;
                }
                pos += set[i + 1];
                if (pos >= code) {
                  return true;
                }
              }
            }
            function isIdentifierStart(code, astral) {
              if (code < 65) {
                return code === 36;
              }
              if (code < 91) {
                return true;
              }
              if (code < 97) {
                return code === 95;
              }
              if (code < 123) {
                return true;
              }
              if (code <= 65535) {
                return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
              }
              if (astral === false) {
                return false;
              }
              return isInAstralSet(code, astralIdentifierStartCodes);
            }
            function isIdentifierChar(code, astral) {
              if (code < 48) {
                return code === 36;
              }
              if (code < 58) {
                return true;
              }
              if (code < 65) {
                return false;
              }
              if (code < 91) {
                return true;
              }
              if (code < 97) {
                return code === 95;
              }
              if (code < 123) {
                return true;
              }
              if (code <= 65535) {
                return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
              }
              if (astral === false) {
                return false;
              }
              return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
            }
            var TokenType = function TokenType2(label, conf) {
              if (conf === void 0) conf = {};
              this.label = label;
              this.keyword = conf.keyword;
              this.beforeExpr = !!conf.beforeExpr;
              this.startsExpr = !!conf.startsExpr;
              this.isLoop = !!conf.isLoop;
              this.isAssign = !!conf.isAssign;
              this.prefix = !!conf.prefix;
              this.postfix = !!conf.postfix;
              this.binop = conf.binop || null;
              this.updateContext = null;
            };
            function binop(name2, prec) {
              return new TokenType(name2, { beforeExpr: true, binop: prec });
            }
            var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
            var keywords$1 = {};
            function kw(name2, options) {
              if (options === void 0) options = {};
              options.keyword = name2;
              return keywords$1[name2] = new TokenType(name2, options);
            }
            var types = {
              num: new TokenType("num", startsExpr),
              regexp: new TokenType("regexp", startsExpr),
              string: new TokenType("string", startsExpr),
              name: new TokenType("name", startsExpr),
              eof: new TokenType("eof"),
              bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
              bracketR: new TokenType("]"),
              braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
              braceR: new TokenType("}"),
              parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
              parenR: new TokenType(")"),
              comma: new TokenType(",", beforeExpr),
              semi: new TokenType(";", beforeExpr),
              colon: new TokenType(":", beforeExpr),
              dot: new TokenType("."),
              question: new TokenType("?", beforeExpr),
              arrow: new TokenType("=>", beforeExpr),
              template: new TokenType("template"),
              invalidTemplate: new TokenType("invalidTemplate"),
              ellipsis: new TokenType("...", beforeExpr),
              backQuote: new TokenType("`", startsExpr),
              dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
              eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
              assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
              incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
              prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
              logicalOR: binop("||", 1),
              logicalAND: binop("&&", 2),
              bitwiseOR: binop("|", 3),
              bitwiseXOR: binop("^", 4),
              bitwiseAND: binop("&", 5),
              equality: binop("==/!=/===/!==", 6),
              relational: binop("</>/<=/>=", 7),
              bitShift: binop("<</>>/>>>", 8),
              plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
              modulo: binop("%", 10),
              star: binop("*", 10),
              slash: binop("/", 10),
              starstar: new TokenType("**", { beforeExpr: true }),
              _break: kw("break"),
              _case: kw("case", beforeExpr),
              _catch: kw("catch"),
              _continue: kw("continue"),
              _debugger: kw("debugger"),
              _default: kw("default", beforeExpr),
              _do: kw("do", { isLoop: true, beforeExpr: true }),
              _else: kw("else", beforeExpr),
              _finally: kw("finally"),
              _for: kw("for", { isLoop: true }),
              _function: kw("function", startsExpr),
              _if: kw("if"),
              _return: kw("return", beforeExpr),
              _switch: kw("switch"),
              _throw: kw("throw", beforeExpr),
              _try: kw("try"),
              _var: kw("var"),
              _const: kw("const"),
              _while: kw("while", { isLoop: true }),
              _with: kw("with"),
              _new: kw("new", { beforeExpr: true, startsExpr: true }),
              _this: kw("this", startsExpr),
              _super: kw("super", startsExpr),
              _class: kw("class", startsExpr),
              _extends: kw("extends", beforeExpr),
              _export: kw("export"),
              _import: kw("import", startsExpr),
              _null: kw("null", startsExpr),
              _true: kw("true", startsExpr),
              _false: kw("false", startsExpr),
              _in: kw("in", { beforeExpr: true, binop: 7 }),
              _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
              _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
              _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
              _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
            };
            var lineBreak = /\r\n?|\n|\u2028|\u2029/;
            var lineBreakG = new RegExp(lineBreak.source, "g");
            function isNewLine(code, ecma2019String) {
              return code === 10 || code === 13 || !ecma2019String && (code === 8232 || code === 8233);
            }
            var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
            var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
            var ref = Object.prototype;
            var hasOwnProperty = ref.hasOwnProperty;
            var toString = ref.toString;
            function has(obj, propName) {
              return hasOwnProperty.call(obj, propName);
            }
            var isArray = Array.isArray || function(obj) {
              return toString.call(obj) === "[object Array]";
            };
            function wordsRegexp(words) {
              return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
            }
            var Position = function Position2(line, col) {
              this.line = line;
              this.column = col;
            };
            Position.prototype.offset = function offset(n) {
              return new Position(this.line, this.column + n);
            };
            var SourceLocation = function SourceLocation2(p, start, end) {
              this.start = start;
              this.end = end;
              if (p.sourceFile !== null) {
                this.source = p.sourceFile;
              }
            };
            function getLineInfo(input, offset) {
              for (var line = 1, cur = 0; ; ) {
                lineBreakG.lastIndex = cur;
                var match = lineBreakG.exec(input);
                if (match && match.index < offset) {
                  ++line;
                  cur = match.index + match[0].length;
                } else {
                  return new Position(line, offset - cur);
                }
              }
            }
            var defaultOptions = {
              ecmaVersion: 10,
              sourceType: "script",
              onInsertedSemicolon: null,
              onTrailingComma: null,
              allowReserved: null,
              allowReturnOutsideFunction: false,
              allowImportExportEverywhere: false,
              allowAwaitOutsideFunction: false,
              allowHashBang: false,
              locations: false,
              onToken: null,
              onComment: null,
              ranges: false,
              program: null,
              sourceFile: null,
              directSourceFile: null,
              preserveParens: false
            };
            function getOptions(opts) {
              var options = {};
              for (var opt in defaultOptions) {
                options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
              }
              if (options.ecmaVersion >= 2015) {
                options.ecmaVersion -= 2009;
              }
              if (options.allowReserved == null) {
                options.allowReserved = options.ecmaVersion < 5;
              }
              if (isArray(options.onToken)) {
                var tokens = options.onToken;
                options.onToken = function(token) {
                  return tokens.push(token);
                };
              }
              if (isArray(options.onComment)) {
                options.onComment = pushComment(options, options.onComment);
              }
              return options;
            }
            function pushComment(options, array) {
              return function(block, text, start, end, startLoc, endLoc) {
                var comment = {
                  type: block ? "Block" : "Line",
                  value: text,
                  start,
                  end
                };
                if (options.locations) {
                  comment.loc = new SourceLocation(this, startLoc, endLoc);
                }
                if (options.ranges) {
                  comment.range = [start, end];
                }
                array.push(comment);
              };
            }
            var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128;
            function functionFlags(async, generator) {
              return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
            }
            var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
            var Parser = function Parser2(options, input, startPos) {
              this.options = options = getOptions(options);
              this.sourceFile = options.sourceFile;
              this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
              var reserved = "";
              if (options.allowReserved !== true) {
                for (var v = options.ecmaVersion; ; v--) {
                  if (reserved = reservedWords[v]) {
                    break;
                  }
                }
                if (options.sourceType === "module") {
                  reserved += " await";
                }
              }
              this.reservedWords = wordsRegexp(reserved);
              var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
              this.reservedWordsStrict = wordsRegexp(reservedStrict);
              this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
              this.input = String(input);
              this.containsEsc = false;
              if (startPos) {
                this.pos = startPos;
                this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
                this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
              } else {
                this.pos = this.lineStart = 0;
                this.curLine = 1;
              }
              this.type = types.eof;
              this.value = null;
              this.start = this.end = this.pos;
              this.startLoc = this.endLoc = this.curPosition();
              this.lastTokEndLoc = this.lastTokStartLoc = null;
              this.lastTokStart = this.lastTokEnd = this.pos;
              this.context = this.initialContext();
              this.exprAllowed = true;
              this.inModule = options.sourceType === "module";
              this.strict = this.inModule || this.strictDirective(this.pos);
              this.potentialArrowAt = -1;
              this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
              this.labels = [];
              this.undefinedExports = {};
              if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
                this.skipLineComment(2);
              }
              this.scopeStack = [];
              this.enterScope(SCOPE_TOP);
              this.regexpState = null;
            };
            var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
            Parser.prototype.parse = function parse2() {
              var node = this.options.program || this.startNode();
              this.nextToken();
              return this.parseTopLevel(node);
            };
            prototypeAccessors.inFunction.get = function() {
              return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
            };
            prototypeAccessors.inGenerator.get = function() {
              return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
            };
            prototypeAccessors.inAsync.get = function() {
              return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
            };
            prototypeAccessors.allowSuper.get = function() {
              return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
            };
            prototypeAccessors.allowDirectSuper.get = function() {
              return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
            };
            prototypeAccessors.treatFunctionsAsVar.get = function() {
              return this.treatFunctionsAsVarInScope(this.currentScope());
            };
            Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
              return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
            };
            Parser.extend = function extend() {
              var plugins = [], len = arguments.length;
              while (len--) plugins[len] = arguments[len];
              var cls = this;
              for (var i = 0; i < plugins.length; i++) {
                cls = plugins[i](cls);
              }
              return cls;
            };
            Parser.parse = function parse2(input, options) {
              return new this(options, input).parse();
            };
            Parser.parseExpressionAt = function parseExpressionAt2(input, pos, options) {
              var parser = new this(options, input, pos);
              parser.nextToken();
              return parser.parseExpression();
            };
            Parser.tokenizer = function tokenizer2(input, options) {
              return new this(options, input);
            };
            Object.defineProperties(Parser.prototype, prototypeAccessors);
            var pp = Parser.prototype;
            var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;
            pp.strictDirective = function(start) {
              for (; ; ) {
                skipWhiteSpace.lastIndex = start;
                start += skipWhiteSpace.exec(this.input)[0].length;
                var match = literal.exec(this.input.slice(start));
                if (!match) {
                  return false;
                }
                if ((match[1] || match[2]) === "use strict") {
                  return true;
                }
                start += match[0].length;
                skipWhiteSpace.lastIndex = start;
                start += skipWhiteSpace.exec(this.input)[0].length;
                if (this.input[start] === ";") {
                  start++;
                }
              }
            };
            pp.eat = function(type) {
              if (this.type === type) {
                this.next();
                return true;
              } else {
                return false;
              }
            };
            pp.isContextual = function(name2) {
              return this.type === types.name && this.value === name2 && !this.containsEsc;
            };
            pp.eatContextual = function(name2) {
              if (!this.isContextual(name2)) {
                return false;
              }
              this.next();
              return true;
            };
            pp.expectContextual = function(name2) {
              if (!this.eatContextual(name2)) {
                this.unexpected();
              }
            };
            pp.canInsertSemicolon = function() {
              return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
            };
            pp.insertSemicolon = function() {
              if (this.canInsertSemicolon()) {
                if (this.options.onInsertedSemicolon) {
                  this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
                }
                return true;
              }
            };
            pp.semicolon = function() {
              if (!this.eat(types.semi) && !this.insertSemicolon()) {
                this.unexpected();
              }
            };
            pp.afterTrailingComma = function(tokType, notNext) {
              if (this.type === tokType) {
                if (this.options.onTrailingComma) {
                  this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
                }
                if (!notNext) {
                  this.next();
                }
                return true;
              }
            };
            pp.expect = function(type) {
              this.eat(type) || this.unexpected();
            };
            pp.unexpected = function(pos) {
              this.raise(pos != null ? pos : this.start, "Unexpected token");
            };
            function DestructuringErrors() {
              this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
            }
            pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
              if (!refDestructuringErrors) {
                return;
              }
              if (refDestructuringErrors.trailingComma > -1) {
                this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
              }
              var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
              if (parens > -1) {
                this.raiseRecoverable(parens, "Parenthesized pattern");
              }
            };
            pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
              if (!refDestructuringErrors) {
                return false;
              }
              var shorthandAssign = refDestructuringErrors.shorthandAssign;
              var doubleProto = refDestructuringErrors.doubleProto;
              if (!andThrow) {
                return shorthandAssign >= 0 || doubleProto >= 0;
              }
              if (shorthandAssign >= 0) {
                this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
              }
              if (doubleProto >= 0) {
                this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
              }
            };
            pp.checkYieldAwaitInDefaultParams = function() {
              if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
                this.raise(this.yieldPos, "Yield expression cannot be a default value");
              }
              if (this.awaitPos) {
                this.raise(this.awaitPos, "Await expression cannot be a default value");
              }
            };
            pp.isSimpleAssignTarget = function(expr) {
              if (expr.type === "ParenthesizedExpression") {
                return this.isSimpleAssignTarget(expr.expression);
              }
              return expr.type === "Identifier" || expr.type === "MemberExpression";
            };
            var pp$1 = Parser.prototype;
            pp$1.parseTopLevel = function(node) {
              var exports5 = {};
              if (!node.body) {
                node.body = [];
              }
              while (this.type !== types.eof) {
                var stmt = this.parseStatement(null, true, exports5);
                node.body.push(stmt);
              }
              if (this.inModule) {
                for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
                  var name2 = list[i];
                  this.raiseRecoverable(this.undefinedExports[name2].start, "Export '" + name2 + "' is not defined");
                }
              }
              this.adaptDirectivePrologue(node.body);
              this.next();
              node.sourceType = this.options.sourceType;
              return this.finishNode(node, "Program");
            };
            var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
            pp$1.isLet = function(context) {
              if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
                return false;
              }
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 91) {
                return true;
              }
              if (context) {
                return false;
              }
              if (nextCh === 123) {
                return true;
              }
              if (isIdentifierStart(nextCh, true)) {
                var pos = next + 1;
                while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
                  ++pos;
                }
                var ident = this.input.slice(next, pos);
                if (!keywordRelationalOperator.test(ident)) {
                  return true;
                }
              }
              return false;
            };
            pp$1.isAsyncFunction = function() {
              if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
                return false;
              }
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input);
              var next = this.pos + skip[0].length;
              return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
            };
            pp$1.parseStatement = function(context, topLevel, exports5) {
              var starttype = this.type, node = this.startNode(), kind;
              if (this.isLet(context)) {
                starttype = types._var;
                kind = "let";
              }
              switch (starttype) {
                case types._break:
                case types._continue:
                  return this.parseBreakContinueStatement(node, starttype.keyword);
                case types._debugger:
                  return this.parseDebuggerStatement(node);
                case types._do:
                  return this.parseDoStatement(node);
                case types._for:
                  return this.parseForStatement(node);
                case types._function:
                  if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
                    this.unexpected();
                  }
                  return this.parseFunctionStatement(node, false, !context);
                case types._class:
                  if (context) {
                    this.unexpected();
                  }
                  return this.parseClass(node, true);
                case types._if:
                  return this.parseIfStatement(node);
                case types._return:
                  return this.parseReturnStatement(node);
                case types._switch:
                  return this.parseSwitchStatement(node);
                case types._throw:
                  return this.parseThrowStatement(node);
                case types._try:
                  return this.parseTryStatement(node);
                case types._const:
                case types._var:
                  kind = kind || this.value;
                  if (context && kind !== "var") {
                    this.unexpected();
                  }
                  return this.parseVarStatement(node, kind);
                case types._while:
                  return this.parseWhileStatement(node);
                case types._with:
                  return this.parseWithStatement(node);
                case types.braceL:
                  return this.parseBlock(true, node);
                case types.semi:
                  return this.parseEmptyStatement(node);
                case types._export:
                case types._import:
                  if (this.options.ecmaVersion > 10 && starttype === types._import) {
                    skipWhiteSpace.lastIndex = this.pos;
                    var skip = skipWhiteSpace.exec(this.input);
                    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                    if (nextCh === 40) {
                      return this.parseExpressionStatement(node, this.parseExpression());
                    }
                  }
                  if (!this.options.allowImportExportEverywhere) {
                    if (!topLevel) {
                      this.raise(this.start, "'import' and 'export' may only appear at the top level");
                    }
                    if (!this.inModule) {
                      this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                    }
                  }
                  return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports5);
                default:
                  if (this.isAsyncFunction()) {
                    if (context) {
                      this.unexpected();
                    }
                    this.next();
                    return this.parseFunctionStatement(node, true, !context);
                  }
                  var maybeName = this.value, expr = this.parseExpression();
                  if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
                    return this.parseLabeledStatement(node, maybeName, expr, context);
                  } else {
                    return this.parseExpressionStatement(node, expr);
                  }
              }
            };
            pp$1.parseBreakContinueStatement = function(node, keyword) {
              var isBreak = keyword === "break";
              this.next();
              if (this.eat(types.semi) || this.insertSemicolon()) {
                node.label = null;
              } else if (this.type !== types.name) {
                this.unexpected();
              } else {
                node.label = this.parseIdent();
                this.semicolon();
              }
              var i = 0;
              for (; i < this.labels.length; ++i) {
                var lab = this.labels[i];
                if (node.label == null || lab.name === node.label.name) {
                  if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                    break;
                  }
                  if (node.label && isBreak) {
                    break;
                  }
                }
              }
              if (i === this.labels.length) {
                this.raise(node.start, "Unsyntactic " + keyword);
              }
              return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
            };
            pp$1.parseDebuggerStatement = function(node) {
              this.next();
              this.semicolon();
              return this.finishNode(node, "DebuggerStatement");
            };
            pp$1.parseDoStatement = function(node) {
              this.next();
              this.labels.push(loopLabel);
              node.body = this.parseStatement("do");
              this.labels.pop();
              this.expect(types._while);
              node.test = this.parseParenExpression();
              if (this.options.ecmaVersion >= 6) {
                this.eat(types.semi);
              } else {
                this.semicolon();
              }
              return this.finishNode(node, "DoWhileStatement");
            };
            pp$1.parseForStatement = function(node) {
              this.next();
              var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
              this.labels.push(loopLabel);
              this.enterScope(0);
              this.expect(types.parenL);
              if (this.type === types.semi) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
                return this.parseFor(node, null);
              }
              var isLet = this.isLet();
              if (this.type === types._var || this.type === types._const || isLet) {
                var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
                this.next();
                this.parseVar(init$1, true, kind);
                this.finishNode(init$1, "VariableDeclaration");
                if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
                  if (this.options.ecmaVersion >= 9) {
                    if (this.type === types._in) {
                      if (awaitAt > -1) {
                        this.unexpected(awaitAt);
                      }
                    } else {
                      node.await = awaitAt > -1;
                    }
                  }
                  return this.parseForIn(node, init$1);
                }
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
                return this.parseFor(node, init$1);
              }
              var refDestructuringErrors = new DestructuringErrors();
              var init = this.parseExpression(true, refDestructuringErrors);
              if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
                if (this.options.ecmaVersion >= 9) {
                  if (this.type === types._in) {
                    if (awaitAt > -1) {
                      this.unexpected(awaitAt);
                    }
                  } else {
                    node.await = awaitAt > -1;
                  }
                }
                this.toAssignable(init, false, refDestructuringErrors);
                this.checkLVal(init);
                return this.parseForIn(node, init);
              } else {
                this.checkExpressionErrors(refDestructuringErrors, true);
              }
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }
              return this.parseFor(node, init);
            };
            pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
              this.next();
              return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
            };
            pp$1.parseIfStatement = function(node) {
              this.next();
              node.test = this.parseParenExpression();
              node.consequent = this.parseStatement("if");
              node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
              return this.finishNode(node, "IfStatement");
            };
            pp$1.parseReturnStatement = function(node) {
              if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
                this.raise(this.start, "'return' outside of function");
              }
              this.next();
              if (this.eat(types.semi) || this.insertSemicolon()) {
                node.argument = null;
              } else {
                node.argument = this.parseExpression();
                this.semicolon();
              }
              return this.finishNode(node, "ReturnStatement");
            };
            pp$1.parseSwitchStatement = function(node) {
              this.next();
              node.discriminant = this.parseParenExpression();
              node.cases = [];
              this.expect(types.braceL);
              this.labels.push(switchLabel);
              this.enterScope(0);
              var cur;
              for (var sawDefault = false; this.type !== types.braceR; ) {
                if (this.type === types._case || this.type === types._default) {
                  var isCase = this.type === types._case;
                  if (cur) {
                    this.finishNode(cur, "SwitchCase");
                  }
                  node.cases.push(cur = this.startNode());
                  cur.consequent = [];
                  this.next();
                  if (isCase) {
                    cur.test = this.parseExpression();
                  } else {
                    if (sawDefault) {
                      this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                    }
                    sawDefault = true;
                    cur.test = null;
                  }
                  this.expect(types.colon);
                } else {
                  if (!cur) {
                    this.unexpected();
                  }
                  cur.consequent.push(this.parseStatement(null));
                }
              }
              this.exitScope();
              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }
              this.next();
              this.labels.pop();
              return this.finishNode(node, "SwitchStatement");
            };
            pp$1.parseThrowStatement = function(node) {
              this.next();
              if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
                this.raise(this.lastTokEnd, "Illegal newline after throw");
              }
              node.argument = this.parseExpression();
              this.semicolon();
              return this.finishNode(node, "ThrowStatement");
            };
            var empty = [];
            pp$1.parseTryStatement = function(node) {
              this.next();
              node.block = this.parseBlock();
              node.handler = null;
              if (this.type === types._catch) {
                var clause = this.startNode();
                this.next();
                if (this.eat(types.parenL)) {
                  clause.param = this.parseBindingAtom();
                  var simple = clause.param.type === "Identifier";
                  this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
                  this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
                  this.expect(types.parenR);
                } else {
                  if (this.options.ecmaVersion < 10) {
                    this.unexpected();
                  }
                  clause.param = null;
                  this.enterScope(0);
                }
                clause.body = this.parseBlock(false);
                this.exitScope();
                node.handler = this.finishNode(clause, "CatchClause");
              }
              node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
              if (!node.handler && !node.finalizer) {
                this.raise(node.start, "Missing catch or finally clause");
              }
              return this.finishNode(node, "TryStatement");
            };
            pp$1.parseVarStatement = function(node, kind) {
              this.next();
              this.parseVar(node, false, kind);
              this.semicolon();
              return this.finishNode(node, "VariableDeclaration");
            };
            pp$1.parseWhileStatement = function(node) {
              this.next();
              node.test = this.parseParenExpression();
              this.labels.push(loopLabel);
              node.body = this.parseStatement("while");
              this.labels.pop();
              return this.finishNode(node, "WhileStatement");
            };
            pp$1.parseWithStatement = function(node) {
              if (this.strict) {
                this.raise(this.start, "'with' in strict mode");
              }
              this.next();
              node.object = this.parseParenExpression();
              node.body = this.parseStatement("with");
              return this.finishNode(node, "WithStatement");
            };
            pp$1.parseEmptyStatement = function(node) {
              this.next();
              return this.finishNode(node, "EmptyStatement");
            };
            pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
              for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
                var label = list[i$1];
                if (label.name === maybeName) {
                  this.raise(expr.start, "Label '" + maybeName + "' is already declared");
                }
              }
              var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
              for (var i = this.labels.length - 1; i >= 0; i--) {
                var label$1 = this.labels[i];
                if (label$1.statementStart === node.start) {
                  label$1.statementStart = this.start;
                  label$1.kind = kind;
                } else {
                  break;
                }
              }
              this.labels.push({ name: maybeName, kind, statementStart: this.start });
              node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
              this.labels.pop();
              node.label = expr;
              return this.finishNode(node, "LabeledStatement");
            };
            pp$1.parseExpressionStatement = function(node, expr) {
              node.expression = expr;
              this.semicolon();
              return this.finishNode(node, "ExpressionStatement");
            };
            pp$1.parseBlock = function(createNewLexicalScope, node) {
              if (createNewLexicalScope === void 0) createNewLexicalScope = true;
              if (node === void 0) node = this.startNode();
              node.body = [];
              this.expect(types.braceL);
              if (createNewLexicalScope) {
                this.enterScope(0);
              }
              while (!this.eat(types.braceR)) {
                var stmt = this.parseStatement(null);
                node.body.push(stmt);
              }
              if (createNewLexicalScope) {
                this.exitScope();
              }
              return this.finishNode(node, "BlockStatement");
            };
            pp$1.parseFor = function(node, init) {
              node.init = init;
              this.expect(types.semi);
              node.test = this.type === types.semi ? null : this.parseExpression();
              this.expect(types.semi);
              node.update = this.type === types.parenR ? null : this.parseExpression();
              this.expect(types.parenR);
              node.body = this.parseStatement("for");
              this.exitScope();
              this.labels.pop();
              return this.finishNode(node, "ForStatement");
            };
            pp$1.parseForIn = function(node, init) {
              var isForIn = this.type === types._in;
              this.next();
              if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
                this.raise(
                  init.start,
                  (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
                );
              } else if (init.type === "AssignmentPattern") {
                this.raise(init.start, "Invalid left-hand side in for-loop");
              }
              node.left = init;
              node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
              this.expect(types.parenR);
              node.body = this.parseStatement("for");
              this.exitScope();
              this.labels.pop();
              return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
            };
            pp$1.parseVar = function(node, isFor, kind) {
              node.declarations = [];
              node.kind = kind;
              for (; ; ) {
                var decl = this.startNode();
                this.parseVarId(decl, kind);
                if (this.eat(types.eq)) {
                  decl.init = this.parseMaybeAssign(isFor);
                } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
                  this.unexpected();
                } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
                  this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
                } else {
                  decl.init = null;
                }
                node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
                if (!this.eat(types.comma)) {
                  break;
                }
              }
              return node;
            };
            pp$1.parseVarId = function(decl, kind) {
              decl.id = this.parseBindingAtom();
              this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
            };
            var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
            pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
              this.initFunction(node);
              if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
                if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
                  this.unexpected();
                }
                node.generator = this.eat(types.star);
              }
              if (this.options.ecmaVersion >= 8) {
                node.async = !!isAsync;
              }
              if (statement & FUNC_STATEMENT) {
                node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();
                if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
                  this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
                }
              }
              var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              this.enterScope(functionFlags(node.async, node.generator));
              if (!(statement & FUNC_STATEMENT)) {
                node.id = this.type === types.name ? this.parseIdent() : null;
              }
              this.parseFunctionParams(node);
              this.parseFunctionBody(node, allowExpressionBody, false);
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
            };
            pp$1.parseFunctionParams = function(node) {
              this.expect(types.parenL);
              node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
              this.checkYieldAwaitInDefaultParams();
            };
            pp$1.parseClass = function(node, isStatement) {
              this.next();
              var oldStrict = this.strict;
              this.strict = true;
              this.parseClassId(node, isStatement);
              this.parseClassSuper(node);
              var classBody = this.startNode();
              var hadConstructor = false;
              classBody.body = [];
              this.expect(types.braceL);
              while (!this.eat(types.braceR)) {
                var element = this.parseClassElement(node.superClass !== null);
                if (element) {
                  classBody.body.push(element);
                  if (element.type === "MethodDefinition" && element.kind === "constructor") {
                    if (hadConstructor) {
                      this.raise(element.start, "Duplicate constructor in the same class");
                    }
                    hadConstructor = true;
                  }
                }
              }
              node.body = this.finishNode(classBody, "ClassBody");
              this.strict = oldStrict;
              return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
            };
            pp$1.parseClassElement = function(constructorAllowsSuper) {
              var this$1 = this;
              if (this.eat(types.semi)) {
                return null;
              }
              var method = this.startNode();
              var tryContextual = function(k, noLineBreak) {
                if (noLineBreak === void 0) noLineBreak = false;
                var start = this$1.start, startLoc = this$1.startLoc;
                if (!this$1.eatContextual(k)) {
                  return false;
                }
                if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
                  return true;
                }
                if (method.key) {
                  this$1.unexpected();
                }
                method.computed = false;
                method.key = this$1.startNodeAt(start, startLoc);
                method.key.name = k;
                this$1.finishNode(method.key, "Identifier");
                return false;
              };
              method.kind = "method";
              method.static = tryContextual("static");
              var isGenerator = this.eat(types.star);
              var isAsync = false;
              if (!isGenerator) {
                if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
                  isAsync = true;
                  isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
                } else if (tryContextual("get")) {
                  method.kind = "get";
                } else if (tryContextual("set")) {
                  method.kind = "set";
                }
              }
              if (!method.key) {
                this.parsePropertyName(method);
              }
              var key = method.key;
              var allowsDirectSuper = false;
              if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
                if (method.kind !== "method") {
                  this.raise(key.start, "Constructor can't have get/set modifier");
                }
                if (isGenerator) {
                  this.raise(key.start, "Constructor can't be a generator");
                }
                if (isAsync) {
                  this.raise(key.start, "Constructor can't be an async method");
                }
                method.kind = "constructor";
                allowsDirectSuper = constructorAllowsSuper;
              } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
                this.raise(key.start, "Classes may not have a static property named prototype");
              }
              this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
              if (method.kind === "get" && method.value.params.length !== 0) {
                this.raiseRecoverable(method.value.start, "getter should have no params");
              }
              if (method.kind === "set" && method.value.params.length !== 1) {
                this.raiseRecoverable(method.value.start, "setter should have exactly one param");
              }
              if (method.kind === "set" && method.value.params[0].type === "RestElement") {
                this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
              }
              return method;
            };
            pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
              method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
              return this.finishNode(method, "MethodDefinition");
            };
            pp$1.parseClassId = function(node, isStatement) {
              if (this.type === types.name) {
                node.id = this.parseIdent();
                if (isStatement) {
                  this.checkLVal(node.id, BIND_LEXICAL, false);
                }
              } else {
                if (isStatement === true) {
                  this.unexpected();
                }
                node.id = null;
              }
            };
            pp$1.parseClassSuper = function(node) {
              node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
            };
            pp$1.parseExport = function(node, exports5) {
              this.next();
              if (this.eat(types.star)) {
                this.expectContextual("from");
                if (this.type !== types.string) {
                  this.unexpected();
                }
                node.source = this.parseExprAtom();
                this.semicolon();
                return this.finishNode(node, "ExportAllDeclaration");
              }
              if (this.eat(types._default)) {
                this.checkExport(exports5, "default", this.lastTokStart);
                var isAsync;
                if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
                  var fNode = this.startNode();
                  this.next();
                  if (isAsync) {
                    this.next();
                  }
                  node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
                } else if (this.type === types._class) {
                  var cNode = this.startNode();
                  node.declaration = this.parseClass(cNode, "nullableID");
                } else {
                  node.declaration = this.parseMaybeAssign();
                  this.semicolon();
                }
                return this.finishNode(node, "ExportDefaultDeclaration");
              }
              if (this.shouldParseExportStatement()) {
                node.declaration = this.parseStatement(null);
                if (node.declaration.type === "VariableDeclaration") {
                  this.checkVariableExport(exports5, node.declaration.declarations);
                } else {
                  this.checkExport(exports5, node.declaration.id.name, node.declaration.id.start);
                }
                node.specifiers = [];
                node.source = null;
              } else {
                node.declaration = null;
                node.specifiers = this.parseExportSpecifiers(exports5);
                if (this.eatContextual("from")) {
                  if (this.type !== types.string) {
                    this.unexpected();
                  }
                  node.source = this.parseExprAtom();
                } else {
                  for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                    var spec = list[i];
                    this.checkUnreserved(spec.local);
                    this.checkLocalExport(spec.local);
                  }
                  node.source = null;
                }
                this.semicolon();
              }
              return this.finishNode(node, "ExportNamedDeclaration");
            };
            pp$1.checkExport = function(exports5, name2, pos) {
              if (!exports5) {
                return;
              }
              if (has(exports5, name2)) {
                this.raiseRecoverable(pos, "Duplicate export '" + name2 + "'");
              }
              exports5[name2] = true;
            };
            pp$1.checkPatternExport = function(exports5, pat) {
              var type = pat.type;
              if (type === "Identifier") {
                this.checkExport(exports5, pat.name, pat.start);
              } else if (type === "ObjectPattern") {
                for (var i = 0, list = pat.properties; i < list.length; i += 1) {
                  var prop = list[i];
                  this.checkPatternExport(exports5, prop);
                }
              } else if (type === "ArrayPattern") {
                for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
                  var elt = list$1[i$1];
                  if (elt) {
                    this.checkPatternExport(exports5, elt);
                  }
                }
              } else if (type === "Property") {
                this.checkPatternExport(exports5, pat.value);
              } else if (type === "AssignmentPattern") {
                this.checkPatternExport(exports5, pat.left);
              } else if (type === "RestElement") {
                this.checkPatternExport(exports5, pat.argument);
              } else if (type === "ParenthesizedExpression") {
                this.checkPatternExport(exports5, pat.expression);
              }
            };
            pp$1.checkVariableExport = function(exports5, decls) {
              if (!exports5) {
                return;
              }
              for (var i = 0, list = decls; i < list.length; i += 1) {
                var decl = list[i];
                this.checkPatternExport(exports5, decl.id);
              }
            };
            pp$1.shouldParseExportStatement = function() {
              return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
            };
            pp$1.parseExportSpecifiers = function(exports5) {
              var nodes = [], first2 = true;
              this.expect(types.braceL);
              while (!this.eat(types.braceR)) {
                if (!first2) {
                  this.expect(types.comma);
                  if (this.afterTrailingComma(types.braceR)) {
                    break;
                  }
                } else {
                  first2 = false;
                }
                var node = this.startNode();
                node.local = this.parseIdent(true);
                node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
                this.checkExport(exports5, node.exported.name, node.exported.start);
                nodes.push(this.finishNode(node, "ExportSpecifier"));
              }
              return nodes;
            };
            pp$1.parseImport = function(node) {
              this.next();
              if (this.type === types.string) {
                node.specifiers = empty;
                node.source = this.parseExprAtom();
              } else {
                node.specifiers = this.parseImportSpecifiers();
                this.expectContextual("from");
                node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
              }
              this.semicolon();
              return this.finishNode(node, "ImportDeclaration");
            };
            pp$1.parseImportSpecifiers = function() {
              var nodes = [], first2 = true;
              if (this.type === types.name) {
                var node = this.startNode();
                node.local = this.parseIdent();
                this.checkLVal(node.local, BIND_LEXICAL);
                nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
                if (!this.eat(types.comma)) {
                  return nodes;
                }
              }
              if (this.type === types.star) {
                var node$1 = this.startNode();
                this.next();
                this.expectContextual("as");
                node$1.local = this.parseIdent();
                this.checkLVal(node$1.local, BIND_LEXICAL);
                nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
                return nodes;
              }
              this.expect(types.braceL);
              while (!this.eat(types.braceR)) {
                if (!first2) {
                  this.expect(types.comma);
                  if (this.afterTrailingComma(types.braceR)) {
                    break;
                  }
                } else {
                  first2 = false;
                }
                var node$2 = this.startNode();
                node$2.imported = this.parseIdent(true);
                if (this.eatContextual("as")) {
                  node$2.local = this.parseIdent();
                } else {
                  this.checkUnreserved(node$2.imported);
                  node$2.local = node$2.imported;
                }
                this.checkLVal(node$2.local, BIND_LEXICAL);
                nodes.push(this.finishNode(node$2, "ImportSpecifier"));
              }
              return nodes;
            };
            pp$1.adaptDirectivePrologue = function(statements) {
              for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
                statements[i].directive = statements[i].expression.raw.slice(1, -1);
              }
            };
            pp$1.isDirectiveCandidate = function(statement) {
              return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
            };
            var pp$2 = Parser.prototype;
            pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
              if (this.options.ecmaVersion >= 6 && node) {
                switch (node.type) {
                  case "Identifier":
                    if (this.inAsync && node.name === "await") {
                      this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                    }
                    break;
                  case "ObjectPattern":
                  case "ArrayPattern":
                  case "RestElement":
                    break;
                  case "ObjectExpression":
                    node.type = "ObjectPattern";
                    if (refDestructuringErrors) {
                      this.checkPatternErrors(refDestructuringErrors, true);
                    }
                    for (var i = 0, list = node.properties; i < list.length; i += 1) {
                      var prop = list[i];
                      this.toAssignable(prop, isBinding);
                      if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                        this.raise(prop.argument.start, "Unexpected token");
                      }
                    }
                    break;
                  case "Property":
                    if (node.kind !== "init") {
                      this.raise(node.key.start, "Object pattern can't contain getter or setter");
                    }
                    this.toAssignable(node.value, isBinding);
                    break;
                  case "ArrayExpression":
                    node.type = "ArrayPattern";
                    if (refDestructuringErrors) {
                      this.checkPatternErrors(refDestructuringErrors, true);
                    }
                    this.toAssignableList(node.elements, isBinding);
                    break;
                  case "SpreadElement":
                    node.type = "RestElement";
                    this.toAssignable(node.argument, isBinding);
                    if (node.argument.type === "AssignmentPattern") {
                      this.raise(node.argument.start, "Rest elements cannot have a default value");
                    }
                    break;
                  case "AssignmentExpression":
                    if (node.operator !== "=") {
                      this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                    }
                    node.type = "AssignmentPattern";
                    delete node.operator;
                    this.toAssignable(node.left, isBinding);
                  case "AssignmentPattern":
                    break;
                  case "ParenthesizedExpression":
                    this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                    break;
                  case "MemberExpression":
                    if (!isBinding) {
                      break;
                    }
                  default:
                    this.raise(node.start, "Assigning to rvalue");
                }
              } else if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              return node;
            };
            pp$2.toAssignableList = function(exprList, isBinding) {
              var end = exprList.length;
              for (var i = 0; i < end; i++) {
                var elt = exprList[i];
                if (elt) {
                  this.toAssignable(elt, isBinding);
                }
              }
              if (end) {
                var last = exprList[end - 1];
                if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
                  this.unexpected(last.argument.start);
                }
              }
              return exprList;
            };
            pp$2.parseSpread = function(refDestructuringErrors) {
              var node = this.startNode();
              this.next();
              node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
              return this.finishNode(node, "SpreadElement");
            };
            pp$2.parseRestBinding = function() {
              var node = this.startNode();
              this.next();
              if (this.options.ecmaVersion === 6 && this.type !== types.name) {
                this.unexpected();
              }
              node.argument = this.parseBindingAtom();
              return this.finishNode(node, "RestElement");
            };
            pp$2.parseBindingAtom = function() {
              if (this.options.ecmaVersion >= 6) {
                switch (this.type) {
                  case types.bracketL:
                    var node = this.startNode();
                    this.next();
                    node.elements = this.parseBindingList(types.bracketR, true, true);
                    return this.finishNode(node, "ArrayPattern");
                  case types.braceL:
                    return this.parseObj(true);
                }
              }
              return this.parseIdent();
            };
            pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
              var elts = [], first2 = true;
              while (!this.eat(close)) {
                if (first2) {
                  first2 = false;
                } else {
                  this.expect(types.comma);
                }
                if (allowEmpty && this.type === types.comma) {
                  elts.push(null);
                } else if (allowTrailingComma && this.afterTrailingComma(close)) {
                  break;
                } else if (this.type === types.ellipsis) {
                  var rest = this.parseRestBinding();
                  this.parseBindingListItem(rest);
                  elts.push(rest);
                  if (this.type === types.comma) {
                    this.raise(this.start, "Comma is not permitted after the rest element");
                  }
                  this.expect(close);
                  break;
                } else {
                  var elem2 = this.parseMaybeDefault(this.start, this.startLoc);
                  this.parseBindingListItem(elem2);
                  elts.push(elem2);
                }
              }
              return elts;
            };
            pp$2.parseBindingListItem = function(param) {
              return param;
            };
            pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
              left = left || this.parseBindingAtom();
              if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
                return left;
              }
              var node = this.startNodeAt(startPos, startLoc);
              node.left = left;
              node.right = this.parseMaybeAssign();
              return this.finishNode(node, "AssignmentPattern");
            };
            pp$2.checkLVal = function(expr, bindingType, checkClashes) {
              if (bindingType === void 0) bindingType = BIND_NONE;
              switch (expr.type) {
                case "Identifier":
                  if (bindingType === BIND_LEXICAL && expr.name === "let") {
                    this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
                  }
                  if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                    this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
                  }
                  if (checkClashes) {
                    if (has(checkClashes, expr.name)) {
                      this.raiseRecoverable(expr.start, "Argument name clash");
                    }
                    checkClashes[expr.name] = true;
                  }
                  if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
                    this.declareName(expr.name, bindingType, expr.start);
                  }
                  break;
                case "MemberExpression":
                  if (bindingType) {
                    this.raiseRecoverable(expr.start, "Binding member expression");
                  }
                  break;
                case "ObjectPattern":
                  for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                    var prop = list[i];
                    this.checkLVal(prop, bindingType, checkClashes);
                  }
                  break;
                case "Property":
                  this.checkLVal(expr.value, bindingType, checkClashes);
                  break;
                case "ArrayPattern":
                  for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                    var elem2 = list$1[i$1];
                    if (elem2) {
                      this.checkLVal(elem2, bindingType, checkClashes);
                    }
                  }
                  break;
                case "AssignmentPattern":
                  this.checkLVal(expr.left, bindingType, checkClashes);
                  break;
                case "RestElement":
                  this.checkLVal(expr.argument, bindingType, checkClashes);
                  break;
                case "ParenthesizedExpression":
                  this.checkLVal(expr.expression, bindingType, checkClashes);
                  break;
                default:
                  this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
              }
            };
            var pp$3 = Parser.prototype;
            pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
              if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
                return;
              }
              if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
                return;
              }
              var key = prop.key;
              var name2;
              switch (key.type) {
                case "Identifier":
                  name2 = key.name;
                  break;
                case "Literal":
                  name2 = String(key.value);
                  break;
                default:
                  return;
              }
              var kind = prop.kind;
              if (this.options.ecmaVersion >= 6) {
                if (name2 === "__proto__" && kind === "init") {
                  if (propHash.proto) {
                    if (refDestructuringErrors) {
                      if (refDestructuringErrors.doubleProto < 0) {
                        refDestructuringErrors.doubleProto = key.start;
                      }
                    } else {
                      this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                    }
                  }
                  propHash.proto = true;
                }
                return;
              }
              name2 = "$" + name2;
              var other = propHash[name2];
              if (other) {
                var redefinition;
                if (kind === "init") {
                  redefinition = this.strict && other.init || other.get || other.set;
                } else {
                  redefinition = other.init || other[kind];
                }
                if (redefinition) {
                  this.raiseRecoverable(key.start, "Redefinition of property");
                }
              } else {
                other = propHash[name2] = {
                  init: false,
                  get: false,
                  set: false
                };
              }
              other[kind] = true;
            };
            pp$3.parseExpression = function(noIn, refDestructuringErrors) {
              var startPos = this.start, startLoc = this.startLoc;
              var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
              if (this.type === types.comma) {
                var node = this.startNodeAt(startPos, startLoc);
                node.expressions = [expr];
                while (this.eat(types.comma)) {
                  node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
                }
                return this.finishNode(node, "SequenceExpression");
              }
              return expr;
            };
            pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
              if (this.isContextual("yield")) {
                if (this.inGenerator) {
                  return this.parseYield(noIn);
                } else {
                  this.exprAllowed = false;
                }
              }
              var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
              if (refDestructuringErrors) {
                oldParenAssign = refDestructuringErrors.parenthesizedAssign;
                oldTrailingComma = refDestructuringErrors.trailingComma;
                refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
              } else {
                refDestructuringErrors = new DestructuringErrors();
                ownDestructuringErrors = true;
              }
              var startPos = this.start, startLoc = this.startLoc;
              if (this.type === types.parenL || this.type === types.name) {
                this.potentialArrowAt = this.start;
              }
              var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
              if (afterLeftParse) {
                left = afterLeftParse.call(this, left, startPos, startLoc);
              }
              if (this.type.isAssign) {
                var node = this.startNodeAt(startPos, startLoc);
                node.operator = this.value;
                node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
                if (!ownDestructuringErrors) {
                  refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
                }
                if (refDestructuringErrors.shorthandAssign >= node.left.start) {
                  refDestructuringErrors.shorthandAssign = -1;
                }
                this.checkLVal(left);
                this.next();
                node.right = this.parseMaybeAssign(noIn);
                return this.finishNode(node, "AssignmentExpression");
              } else {
                if (ownDestructuringErrors) {
                  this.checkExpressionErrors(refDestructuringErrors, true);
                }
              }
              if (oldParenAssign > -1) {
                refDestructuringErrors.parenthesizedAssign = oldParenAssign;
              }
              if (oldTrailingComma > -1) {
                refDestructuringErrors.trailingComma = oldTrailingComma;
              }
              return left;
            };
            pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
              var startPos = this.start, startLoc = this.startLoc;
              var expr = this.parseExprOps(noIn, refDestructuringErrors);
              if (this.checkExpressionErrors(refDestructuringErrors)) {
                return expr;
              }
              if (this.eat(types.question)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.test = expr;
                node.consequent = this.parseMaybeAssign();
                this.expect(types.colon);
                node.alternate = this.parseMaybeAssign(noIn);
                return this.finishNode(node, "ConditionalExpression");
              }
              return expr;
            };
            pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
              var startPos = this.start, startLoc = this.startLoc;
              var expr = this.parseMaybeUnary(refDestructuringErrors, false);
              if (this.checkExpressionErrors(refDestructuringErrors)) {
                return expr;
              }
              return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
            };
            pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
              var prec = this.type.binop;
              if (prec != null && (!noIn || this.type !== types._in)) {
                if (prec > minPrec) {
                  var logical = this.type === types.logicalOR || this.type === types.logicalAND;
                  var op = this.value;
                  this.next();
                  var startPos = this.start, startLoc = this.startLoc;
                  var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
                  var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
                  return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
                }
              }
              return left;
            };
            pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
              var node = this.startNodeAt(startPos, startLoc);
              node.left = left;
              node.operator = op;
              node.right = right;
              return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
            };
            pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
              var startPos = this.start, startLoc = this.startLoc, expr;
              if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
                expr = this.parseAwait();
                sawUnary = true;
              } else if (this.type.prefix) {
                var node = this.startNode(), update = this.type === types.incDec;
                node.operator = this.value;
                node.prefix = true;
                this.next();
                node.argument = this.parseMaybeUnary(null, true);
                this.checkExpressionErrors(refDestructuringErrors, true);
                if (update) {
                  this.checkLVal(node.argument);
                } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
                  this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
                } else {
                  sawUnary = true;
                }
                expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
              } else {
                expr = this.parseExprSubscripts(refDestructuringErrors);
                if (this.checkExpressionErrors(refDestructuringErrors)) {
                  return expr;
                }
                while (this.type.postfix && !this.canInsertSemicolon()) {
                  var node$1 = this.startNodeAt(startPos, startLoc);
                  node$1.operator = this.value;
                  node$1.prefix = false;
                  node$1.argument = expr;
                  this.checkLVal(expr);
                  this.next();
                  expr = this.finishNode(node$1, "UpdateExpression");
                }
              }
              if (!sawUnary && this.eat(types.starstar)) {
                return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
              } else {
                return expr;
              }
            };
            pp$3.parseExprSubscripts = function(refDestructuringErrors) {
              var startPos = this.start, startLoc = this.startLoc;
              var expr = this.parseExprAtom(refDestructuringErrors);
              if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
                return expr;
              }
              var result = this.parseSubscripts(expr, startPos, startLoc);
              if (refDestructuringErrors && result.type === "MemberExpression") {
                if (refDestructuringErrors.parenthesizedAssign >= result.start) {
                  refDestructuringErrors.parenthesizedAssign = -1;
                }
                if (refDestructuringErrors.parenthesizedBind >= result.start) {
                  refDestructuringErrors.parenthesizedBind = -1;
                }
              }
              return result;
            };
            pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
              var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";
              while (true) {
                var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);
                if (element === base || element.type === "ArrowFunctionExpression") {
                  return element;
                }
                base = element;
              }
            };
            pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow) {
              var computed = this.eat(types.bracketL);
              if (computed || this.eat(types.dot)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
                node.computed = !!computed;
                if (computed) {
                  this.expect(types.bracketR);
                }
                base = this.finishNode(node, "MemberExpression");
              } else if (!noCalls && this.eat(types.parenL)) {
                var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
                this.yieldPos = 0;
                this.awaitPos = 0;
                this.awaitIdentPos = 0;
                var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
                if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
                  this.checkPatternErrors(refDestructuringErrors, false);
                  this.checkYieldAwaitInDefaultParams();
                  if (this.awaitIdentPos > 0) {
                    this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
                  }
                  this.yieldPos = oldYieldPos;
                  this.awaitPos = oldAwaitPos;
                  this.awaitIdentPos = oldAwaitIdentPos;
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
                }
                this.checkExpressionErrors(refDestructuringErrors, true);
                this.yieldPos = oldYieldPos || this.yieldPos;
                this.awaitPos = oldAwaitPos || this.awaitPos;
                this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
                var node$1 = this.startNodeAt(startPos, startLoc);
                node$1.callee = base;
                node$1.arguments = exprList;
                base = this.finishNode(node$1, "CallExpression");
              } else if (this.type === types.backQuote) {
                var node$2 = this.startNodeAt(startPos, startLoc);
                node$2.tag = base;
                node$2.quasi = this.parseTemplate({ isTagged: true });
                base = this.finishNode(node$2, "TaggedTemplateExpression");
              }
              return base;
            };
            pp$3.parseExprAtom = function(refDestructuringErrors) {
              if (this.type === types.slash) {
                this.readRegexp();
              }
              var node, canBeArrow = this.potentialArrowAt === this.start;
              switch (this.type) {
                case types._super:
                  if (!this.allowSuper) {
                    this.raise(this.start, "'super' keyword outside a method");
                  }
                  node = this.startNode();
                  this.next();
                  if (this.type === types.parenL && !this.allowDirectSuper) {
                    this.raise(node.start, "super() call outside constructor of a subclass");
                  }
                  if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
                    this.unexpected();
                  }
                  return this.finishNode(node, "Super");
                case types._this:
                  node = this.startNode();
                  this.next();
                  return this.finishNode(node, "ThisExpression");
                case types.name:
                  var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
                  var id = this.parseIdent(false);
                  if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
                    return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
                  }
                  if (canBeArrow && !this.canInsertSemicolon()) {
                    if (this.eat(types.arrow)) {
                      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                    }
                    if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
                      id = this.parseIdent(false);
                      if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                        this.unexpected();
                      }
                      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                    }
                  }
                  return id;
                case types.regexp:
                  var value2 = this.value;
                  node = this.parseLiteral(value2.value);
                  node.regex = { pattern: value2.pattern, flags: value2.flags };
                  return node;
                case types.num:
                case types.string:
                  return this.parseLiteral(this.value);
                case types._null:
                case types._true:
                case types._false:
                  node = this.startNode();
                  node.value = this.type === types._null ? null : this.type === types._true;
                  node.raw = this.type.keyword;
                  this.next();
                  return this.finishNode(node, "Literal");
                case types.parenL:
                  var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
                  if (refDestructuringErrors) {
                    if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                      refDestructuringErrors.parenthesizedAssign = start;
                    }
                    if (refDestructuringErrors.parenthesizedBind < 0) {
                      refDestructuringErrors.parenthesizedBind = start;
                    }
                  }
                  return expr;
                case types.bracketL:
                  node = this.startNode();
                  this.next();
                  node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
                  return this.finishNode(node, "ArrayExpression");
                case types.braceL:
                  return this.parseObj(false, refDestructuringErrors);
                case types._function:
                  node = this.startNode();
                  this.next();
                  return this.parseFunction(node, 0);
                case types._class:
                  return this.parseClass(this.startNode(), false);
                case types._new:
                  return this.parseNew();
                case types.backQuote:
                  return this.parseTemplate();
                case types._import:
                  if (this.options.ecmaVersion >= 11) {
                    return this.parseExprImport();
                  } else {
                    return this.unexpected();
                  }
                default:
                  this.unexpected();
              }
            };
            pp$3.parseExprImport = function() {
              var node = this.startNode();
              this.next();
              switch (this.type) {
                case types.parenL:
                  return this.parseDynamicImport(node);
                default:
                  this.unexpected();
              }
            };
            pp$3.parseDynamicImport = function(node) {
              this.next();
              node.source = this.parseMaybeAssign();
              if (!this.eat(types.parenR)) {
                var errorPos = this.start;
                if (this.eat(types.comma) && this.eat(types.parenR)) {
                  this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
                } else {
                  this.unexpected(errorPos);
                }
              }
              return this.finishNode(node, "ImportExpression");
            };
            pp$3.parseLiteral = function(value2) {
              var node = this.startNode();
              node.value = value2;
              node.raw = this.input.slice(this.start, this.end);
              if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
                node.bigint = node.raw.slice(0, -1);
              }
              this.next();
              return this.finishNode(node, "Literal");
            };
            pp$3.parseParenExpression = function() {
              this.expect(types.parenL);
              var val = this.parseExpression();
              this.expect(types.parenR);
              return val;
            };
            pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
              var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
              if (this.options.ecmaVersion >= 6) {
                this.next();
                var innerStartPos = this.start, innerStartLoc = this.startLoc;
                var exprList = [], first2 = true, lastIsComma = false;
                var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
                this.yieldPos = 0;
                this.awaitPos = 0;
                while (this.type !== types.parenR) {
                  first2 ? first2 = false : this.expect(types.comma);
                  if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                    lastIsComma = true;
                    break;
                  } else if (this.type === types.ellipsis) {
                    spreadStart = this.start;
                    exprList.push(this.parseParenItem(this.parseRestBinding()));
                    if (this.type === types.comma) {
                      this.raise(this.start, "Comma is not permitted after the rest element");
                    }
                    break;
                  } else {
                    exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
                  }
                }
                var innerEndPos = this.start, innerEndLoc = this.startLoc;
                this.expect(types.parenR);
                if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
                  this.checkPatternErrors(refDestructuringErrors, false);
                  this.checkYieldAwaitInDefaultParams();
                  this.yieldPos = oldYieldPos;
                  this.awaitPos = oldAwaitPos;
                  return this.parseParenArrowList(startPos, startLoc, exprList);
                }
                if (!exprList.length || lastIsComma) {
                  this.unexpected(this.lastTokStart);
                }
                if (spreadStart) {
                  this.unexpected(spreadStart);
                }
                this.checkExpressionErrors(refDestructuringErrors, true);
                this.yieldPos = oldYieldPos || this.yieldPos;
                this.awaitPos = oldAwaitPos || this.awaitPos;
                if (exprList.length > 1) {
                  val = this.startNodeAt(innerStartPos, innerStartLoc);
                  val.expressions = exprList;
                  this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
                } else {
                  val = exprList[0];
                }
              } else {
                val = this.parseParenExpression();
              }
              if (this.options.preserveParens) {
                var par = this.startNodeAt(startPos, startLoc);
                par.expression = val;
                return this.finishNode(par, "ParenthesizedExpression");
              } else {
                return val;
              }
            };
            pp$3.parseParenItem = function(item) {
              return item;
            };
            pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
            };
            var empty$1 = [];
            pp$3.parseNew = function() {
              if (this.containsEsc) {
                this.raiseRecoverable(this.start, "Escape sequence in keyword new");
              }
              var node = this.startNode();
              var meta = this.parseIdent(true);
              if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
                node.meta = meta;
                var containsEsc = this.containsEsc;
                node.property = this.parseIdent(true);
                if (node.property.name !== "target" || containsEsc) {
                  this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
                }
                if (!this.inNonArrowFunction()) {
                  this.raiseRecoverable(node.start, "new.target can only be used in functions");
                }
                return this.finishNode(node, "MetaProperty");
              }
              var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;
              node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
              if (isImport && node.callee.type === "ImportExpression") {
                this.raise(startPos, "Cannot use new with import()");
              }
              if (this.eat(types.parenL)) {
                node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
              } else {
                node.arguments = empty$1;
              }
              return this.finishNode(node, "NewExpression");
            };
            pp$3.parseTemplateElement = function(ref2) {
              var isTagged = ref2.isTagged;
              var elem2 = this.startNode();
              if (this.type === types.invalidTemplate) {
                if (!isTagged) {
                  this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
                }
                elem2.value = {
                  raw: this.value,
                  cooked: null
                };
              } else {
                elem2.value = {
                  raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
                  cooked: this.value
                };
              }
              this.next();
              elem2.tail = this.type === types.backQuote;
              return this.finishNode(elem2, "TemplateElement");
            };
            pp$3.parseTemplate = function(ref2) {
              if (ref2 === void 0) ref2 = {};
              var isTagged = ref2.isTagged;
              if (isTagged === void 0) isTagged = false;
              var node = this.startNode();
              this.next();
              node.expressions = [];
              var curElt = this.parseTemplateElement({ isTagged });
              node.quasis = [curElt];
              while (!curElt.tail) {
                if (this.type === types.eof) {
                  this.raise(this.pos, "Unterminated template literal");
                }
                this.expect(types.dollarBraceL);
                node.expressions.push(this.parseExpression());
                this.expect(types.braceR);
                node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
              }
              this.next();
              return this.finishNode(node, "TemplateLiteral");
            };
            pp$3.isAsyncProp = function(prop) {
              return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
            };
            pp$3.parseObj = function(isPattern, refDestructuringErrors) {
              var node = this.startNode(), first2 = true, propHash = {};
              node.properties = [];
              this.next();
              while (!this.eat(types.braceR)) {
                if (!first2) {
                  this.expect(types.comma);
                  if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                    break;
                  }
                } else {
                  first2 = false;
                }
                var prop = this.parseProperty(isPattern, refDestructuringErrors);
                if (!isPattern) {
                  this.checkPropClash(prop, propHash, refDestructuringErrors);
                }
                node.properties.push(prop);
              }
              return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
            };
            pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
              var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
              if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
                if (isPattern) {
                  prop.argument = this.parseIdent(false);
                  if (this.type === types.comma) {
                    this.raise(this.start, "Comma is not permitted after the rest element");
                  }
                  return this.finishNode(prop, "RestElement");
                }
                if (this.type === types.parenL && refDestructuringErrors) {
                  if (refDestructuringErrors.parenthesizedAssign < 0) {
                    refDestructuringErrors.parenthesizedAssign = this.start;
                  }
                  if (refDestructuringErrors.parenthesizedBind < 0) {
                    refDestructuringErrors.parenthesizedBind = this.start;
                  }
                }
                prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
                if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
                  refDestructuringErrors.trailingComma = this.start;
                }
                return this.finishNode(prop, "SpreadElement");
              }
              if (this.options.ecmaVersion >= 6) {
                prop.method = false;
                prop.shorthand = false;
                if (isPattern || refDestructuringErrors) {
                  startPos = this.start;
                  startLoc = this.startLoc;
                }
                if (!isPattern) {
                  isGenerator = this.eat(types.star);
                }
              }
              var containsEsc = this.containsEsc;
              this.parsePropertyName(prop);
              if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
                isAsync = true;
                isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
                this.parsePropertyName(prop, refDestructuringErrors);
              } else {
                isAsync = false;
              }
              this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
              return this.finishNode(prop, "Property");
            };
            pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
              if ((isGenerator || isAsync) && this.type === types.colon) {
                this.unexpected();
              }
              if (this.eat(types.colon)) {
                prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
                prop.kind = "init";
              } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
                if (isPattern) {
                  this.unexpected();
                }
                prop.kind = "init";
                prop.method = true;
                prop.value = this.parseMethod(isGenerator, isAsync);
              } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types.comma && this.type !== types.braceR)) {
                if (isGenerator || isAsync) {
                  this.unexpected();
                }
                prop.kind = prop.key.name;
                this.parsePropertyName(prop);
                prop.value = this.parseMethod(false);
                var paramCount = prop.kind === "get" ? 0 : 1;
                if (prop.value.params.length !== paramCount) {
                  var start = prop.value.start;
                  if (prop.kind === "get") {
                    this.raiseRecoverable(start, "getter should have no params");
                  } else {
                    this.raiseRecoverable(start, "setter should have exactly one param");
                  }
                } else {
                  if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                    this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
                  }
                }
              } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
                if (isGenerator || isAsync) {
                  this.unexpected();
                }
                this.checkUnreserved(prop.key);
                if (prop.key.name === "await" && !this.awaitIdentPos) {
                  this.awaitIdentPos = startPos;
                }
                prop.kind = "init";
                if (isPattern) {
                  prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                } else if (this.type === types.eq && refDestructuringErrors) {
                  if (refDestructuringErrors.shorthandAssign < 0) {
                    refDestructuringErrors.shorthandAssign = this.start;
                  }
                  prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                } else {
                  prop.value = prop.key;
                }
                prop.shorthand = true;
              } else {
                this.unexpected();
              }
            };
            pp$3.parsePropertyName = function(prop) {
              if (this.options.ecmaVersion >= 6) {
                if (this.eat(types.bracketL)) {
                  prop.computed = true;
                  prop.key = this.parseMaybeAssign();
                  this.expect(types.bracketR);
                  return prop.key;
                } else {
                  prop.computed = false;
                }
              }
              return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
            };
            pp$3.initFunction = function(node) {
              node.id = null;
              if (this.options.ecmaVersion >= 6) {
                node.generator = node.expression = false;
              }
              if (this.options.ecmaVersion >= 8) {
                node.async = false;
              }
            };
            pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
              var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
              this.initFunction(node);
              if (this.options.ecmaVersion >= 6) {
                node.generator = isGenerator;
              }
              if (this.options.ecmaVersion >= 8) {
                node.async = !!isAsync;
              }
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
              this.expect(types.parenL);
              node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
              this.checkYieldAwaitInDefaultParams();
              this.parseFunctionBody(node, false, true);
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.finishNode(node, "FunctionExpression");
            };
            pp$3.parseArrowExpression = function(node, params, isAsync) {
              var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
              this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
              this.initFunction(node);
              if (this.options.ecmaVersion >= 8) {
                node.async = !!isAsync;
              }
              this.yieldPos = 0;
              this.awaitPos = 0;
              this.awaitIdentPos = 0;
              node.params = this.toAssignableList(params, true);
              this.parseFunctionBody(node, true, false);
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.finishNode(node, "ArrowFunctionExpression");
            };
            pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
              var isExpression = isArrowFunction && this.type !== types.braceL;
              var oldStrict = this.strict, useStrict = false;
              if (isExpression) {
                node.body = this.parseMaybeAssign();
                node.expression = true;
                this.checkParams(node, false);
              } else {
                var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
                if (!oldStrict || nonSimple) {
                  useStrict = this.strictDirective(this.end);
                  if (useStrict && nonSimple) {
                    this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
                  }
                }
                var oldLabels = this.labels;
                this.labels = [];
                if (useStrict) {
                  this.strict = true;
                }
                this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
                node.body = this.parseBlock(false);
                node.expression = false;
                this.adaptDirectivePrologue(node.body.body);
                this.labels = oldLabels;
              }
              this.exitScope();
              if (this.strict && node.id) {
                this.checkLVal(node.id, BIND_OUTSIDE);
              }
              this.strict = oldStrict;
            };
            pp$3.isSimpleParamList = function(params) {
              for (var i = 0, list = params; i < list.length; i += 1) {
                var param = list[i];
                if (param.type !== "Identifier") {
                  return false;
                }
              }
              return true;
            };
            pp$3.checkParams = function(node, allowDuplicates) {
              var nameHash = {};
              for (var i = 0, list = node.params; i < list.length; i += 1) {
                var param = list[i];
                this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
              }
            };
            pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
              var elts = [], first2 = true;
              while (!this.eat(close)) {
                if (!first2) {
                  this.expect(types.comma);
                  if (allowTrailingComma && this.afterTrailingComma(close)) {
                    break;
                  }
                } else {
                  first2 = false;
                }
                var elt = void 0;
                if (allowEmpty && this.type === types.comma) {
                  elt = null;
                } else if (this.type === types.ellipsis) {
                  elt = this.parseSpread(refDestructuringErrors);
                  if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                    refDestructuringErrors.trailingComma = this.start;
                  }
                } else {
                  elt = this.parseMaybeAssign(false, refDestructuringErrors);
                }
                elts.push(elt);
              }
              return elts;
            };
            pp$3.checkUnreserved = function(ref2) {
              var start = ref2.start;
              var end = ref2.end;
              var name2 = ref2.name;
              if (this.inGenerator && name2 === "yield") {
                this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
              }
              if (this.inAsync && name2 === "await") {
                this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
              }
              if (this.keywords.test(name2)) {
                this.raise(start, "Unexpected keyword '" + name2 + "'");
              }
              if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
                return;
              }
              var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
              if (re.test(name2)) {
                if (!this.inAsync && name2 === "await") {
                  this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
                }
                this.raiseRecoverable(start, "The keyword '" + name2 + "' is reserved");
              }
            };
            pp$3.parseIdent = function(liberal, isBinding) {
              var node = this.startNode();
              if (this.type === types.name) {
                node.name = this.value;
              } else if (this.type.keyword) {
                node.name = this.type.keyword;
                if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
                  this.context.pop();
                }
              } else {
                this.unexpected();
              }
              this.next(!!liberal);
              this.finishNode(node, "Identifier");
              if (!liberal) {
                this.checkUnreserved(node);
                if (node.name === "await" && !this.awaitIdentPos) {
                  this.awaitIdentPos = node.start;
                }
              }
              return node;
            };
            pp$3.parseYield = function(noIn) {
              if (!this.yieldPos) {
                this.yieldPos = this.start;
              }
              var node = this.startNode();
              this.next();
              if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
                node.delegate = false;
                node.argument = null;
              } else {
                node.delegate = this.eat(types.star);
                node.argument = this.parseMaybeAssign(noIn);
              }
              return this.finishNode(node, "YieldExpression");
            };
            pp$3.parseAwait = function() {
              if (!this.awaitPos) {
                this.awaitPos = this.start;
              }
              var node = this.startNode();
              this.next();
              node.argument = this.parseMaybeUnary(null, false);
              return this.finishNode(node, "AwaitExpression");
            };
            var pp$4 = Parser.prototype;
            pp$4.raise = function(pos, message) {
              var loc = getLineInfo(this.input, pos);
              message += " (" + loc.line + ":" + loc.column + ")";
              var err = new SyntaxError(message);
              err.pos = pos;
              err.loc = loc;
              err.raisedAt = this.pos;
              throw err;
            };
            pp$4.raiseRecoverable = pp$4.raise;
            pp$4.curPosition = function() {
              if (this.options.locations) {
                return new Position(this.curLine, this.pos - this.lineStart);
              }
            };
            var pp$5 = Parser.prototype;
            var Scope = function Scope2(flags) {
              this.flags = flags;
              this.var = [];
              this.lexical = [];
              this.functions = [];
            };
            pp$5.enterScope = function(flags) {
              this.scopeStack.push(new Scope(flags));
            };
            pp$5.exitScope = function() {
              this.scopeStack.pop();
            };
            pp$5.treatFunctionsAsVarInScope = function(scope) {
              return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
            };
            pp$5.declareName = function(name2, bindingType, pos) {
              var redeclared = false;
              if (bindingType === BIND_LEXICAL) {
                var scope = this.currentScope();
                redeclared = scope.lexical.indexOf(name2) > -1 || scope.functions.indexOf(name2) > -1 || scope.var.indexOf(name2) > -1;
                scope.lexical.push(name2);
                if (this.inModule && scope.flags & SCOPE_TOP) {
                  delete this.undefinedExports[name2];
                }
              } else if (bindingType === BIND_SIMPLE_CATCH) {
                var scope$1 = this.currentScope();
                scope$1.lexical.push(name2);
              } else if (bindingType === BIND_FUNCTION) {
                var scope$2 = this.currentScope();
                if (this.treatFunctionsAsVar) {
                  redeclared = scope$2.lexical.indexOf(name2) > -1;
                } else {
                  redeclared = scope$2.lexical.indexOf(name2) > -1 || scope$2.var.indexOf(name2) > -1;
                }
                scope$2.functions.push(name2);
              } else {
                for (var i = this.scopeStack.length - 1; i >= 0; --i) {
                  var scope$3 = this.scopeStack[i];
                  if (scope$3.lexical.indexOf(name2) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name2) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name2) > -1) {
                    redeclared = true;
                    break;
                  }
                  scope$3.var.push(name2);
                  if (this.inModule && scope$3.flags & SCOPE_TOP) {
                    delete this.undefinedExports[name2];
                  }
                  if (scope$3.flags & SCOPE_VAR) {
                    break;
                  }
                }
              }
              if (redeclared) {
                this.raiseRecoverable(pos, "Identifier '" + name2 + "' has already been declared");
              }
            };
            pp$5.checkLocalExport = function(id) {
              if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
                this.undefinedExports[id.name] = id;
              }
            };
            pp$5.currentScope = function() {
              return this.scopeStack[this.scopeStack.length - 1];
            };
            pp$5.currentVarScope = function() {
              for (var i = this.scopeStack.length - 1; ; i--) {
                var scope = this.scopeStack[i];
                if (scope.flags & SCOPE_VAR) {
                  return scope;
                }
              }
            };
            pp$5.currentThisScope = function() {
              for (var i = this.scopeStack.length - 1; ; i--) {
                var scope = this.scopeStack[i];
                if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
                  return scope;
                }
              }
            };
            var Node = function Node2(parser, pos, loc) {
              this.type = "";
              this.start = pos;
              this.end = 0;
              if (parser.options.locations) {
                this.loc = new SourceLocation(parser, loc);
              }
              if (parser.options.directSourceFile) {
                this.sourceFile = parser.options.directSourceFile;
              }
              if (parser.options.ranges) {
                this.range = [pos, 0];
              }
            };
            var pp$6 = Parser.prototype;
            pp$6.startNode = function() {
              return new Node(this, this.start, this.startLoc);
            };
            pp$6.startNodeAt = function(pos, loc) {
              return new Node(this, pos, loc);
            };
            function finishNodeAt(node, type, pos, loc) {
              node.type = type;
              node.end = pos;
              if (this.options.locations) {
                node.loc.end = loc;
              }
              if (this.options.ranges) {
                node.range[1] = pos;
              }
              return node;
            }
            pp$6.finishNode = function(node, type) {
              return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
            };
            pp$6.finishNodeAt = function(node, type, pos, loc) {
              return finishNodeAt.call(this, node, type, pos, loc);
            };
            var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
              this.token = token;
              this.isExpr = !!isExpr;
              this.preserveSpace = !!preserveSpace;
              this.override = override;
              this.generator = !!generator;
            };
            var types$1 = {
              b_stat: new TokContext("{", false),
              b_expr: new TokContext("{", true),
              b_tmpl: new TokContext("${", false),
              p_stat: new TokContext("(", false),
              p_expr: new TokContext("(", true),
              q_tmpl: new TokContext("`", true, true, function(p) {
                return p.tryReadTemplateToken();
              }),
              f_stat: new TokContext("function", false),
              f_expr: new TokContext("function", true),
              f_expr_gen: new TokContext("function", true, false, null, true),
              f_gen: new TokContext("function", false, false, null, true)
            };
            var pp$7 = Parser.prototype;
            pp$7.initialContext = function() {
              return [types$1.b_stat];
            };
            pp$7.braceIsBlock = function(prevType) {
              var parent2 = this.curContext();
              if (parent2 === types$1.f_expr || parent2 === types$1.f_stat) {
                return true;
              }
              if (prevType === types.colon && (parent2 === types$1.b_stat || parent2 === types$1.b_expr)) {
                return !parent2.isExpr;
              }
              if (prevType === types._return || prevType === types.name && this.exprAllowed) {
                return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
              }
              if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
                return true;
              }
              if (prevType === types.braceL) {
                return parent2 === types$1.b_stat;
              }
              if (prevType === types._var || prevType === types._const || prevType === types.name) {
                return false;
              }
              return !this.exprAllowed;
            };
            pp$7.inGeneratorContext = function() {
              for (var i = this.context.length - 1; i >= 1; i--) {
                var context = this.context[i];
                if (context.token === "function") {
                  return context.generator;
                }
              }
              return false;
            };
            pp$7.updateContext = function(prevType) {
              var update, type = this.type;
              if (type.keyword && prevType === types.dot) {
                this.exprAllowed = false;
              } else if (update = type.updateContext) {
                update.call(this, prevType);
              } else {
                this.exprAllowed = type.beforeExpr;
              }
            };
            types.parenR.updateContext = types.braceR.updateContext = function() {
              if (this.context.length === 1) {
                this.exprAllowed = true;
                return;
              }
              var out = this.context.pop();
              if (out === types$1.b_stat && this.curContext().token === "function") {
                out = this.context.pop();
              }
              this.exprAllowed = !out.isExpr;
            };
            types.braceL.updateContext = function(prevType) {
              this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
              this.exprAllowed = true;
            };
            types.dollarBraceL.updateContext = function() {
              this.context.push(types$1.b_tmpl);
              this.exprAllowed = true;
            };
            types.parenL.updateContext = function(prevType) {
              var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
              this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
              this.exprAllowed = true;
            };
            types.incDec.updateContext = function() {
            };
            types._function.updateContext = types._class.updateContext = function(prevType) {
              if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
                this.context.push(types$1.f_expr);
              } else {
                this.context.push(types$1.f_stat);
              }
              this.exprAllowed = false;
            };
            types.backQuote.updateContext = function() {
              if (this.curContext() === types$1.q_tmpl) {
                this.context.pop();
              } else {
                this.context.push(types$1.q_tmpl);
              }
              this.exprAllowed = false;
            };
            types.star.updateContext = function(prevType) {
              if (prevType === types._function) {
                var index = this.context.length - 1;
                if (this.context[index] === types$1.f_expr) {
                  this.context[index] = types$1.f_expr_gen;
                } else {
                  this.context[index] = types$1.f_gen;
                }
              }
              this.exprAllowed = true;
            };
            types.name.updateContext = function(prevType) {
              var allowed = false;
              if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
                if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
                  allowed = true;
                }
              }
              this.exprAllowed = allowed;
            };
            var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
            var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
            var ecma11BinaryProperties = ecma10BinaryProperties;
            var unicodeBinaryProperties = {
              9: ecma9BinaryProperties,
              10: ecma10BinaryProperties,
              11: ecma11BinaryProperties
            };
            var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
            var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
            var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
            var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
            var unicodeScriptValues = {
              9: ecma9ScriptValues,
              10: ecma10ScriptValues,
              11: ecma11ScriptValues
            };
            var data = {};
            function buildUnicodeData(ecmaVersion) {
              var d = data[ecmaVersion] = {
                binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
                nonBinary: {
                  General_Category: wordsRegexp(unicodeGeneralCategoryValues),
                  Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
                }
              };
              d.nonBinary.Script_Extensions = d.nonBinary.Script;
              d.nonBinary.gc = d.nonBinary.General_Category;
              d.nonBinary.sc = d.nonBinary.Script;
              d.nonBinary.scx = d.nonBinary.Script_Extensions;
            }
            buildUnicodeData(9);
            buildUnicodeData(10);
            buildUnicodeData(11);
            var pp$8 = Parser.prototype;
            var RegExpValidationState = function RegExpValidationState2(parser) {
              this.parser = parser;
              this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
              this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
              this.source = "";
              this.flags = "";
              this.start = 0;
              this.switchU = false;
              this.switchN = false;
              this.pos = 0;
              this.lastIntValue = 0;
              this.lastStringValue = "";
              this.lastAssertionIsQuantifiable = false;
              this.numCapturingParens = 0;
              this.maxBackReference = 0;
              this.groupNames = [];
              this.backReferenceNames = [];
            };
            RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
              var unicode = flags.indexOf("u") !== -1;
              this.start = start | 0;
              this.source = pattern + "";
              this.flags = flags;
              this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
              this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
            };
            RegExpValidationState.prototype.raise = function raise(message) {
              this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
            };
            RegExpValidationState.prototype.at = function at(i) {
              var s = this.source;
              var l = s.length;
              if (i >= l) {
                return -1;
              }
              var c = s.charCodeAt(i);
              if (!this.switchU || c <= 55295 || c >= 57344 || i + 1 >= l) {
                return c;
              }
              var next = s.charCodeAt(i + 1);
              return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
            };
            RegExpValidationState.prototype.nextIndex = function nextIndex(i) {
              var s = this.source;
              var l = s.length;
              if (i >= l) {
                return l;
              }
              var c = s.charCodeAt(i), next;
              if (!this.switchU || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
                return i + 1;
              }
              return i + 2;
            };
            RegExpValidationState.prototype.current = function current() {
              return this.at(this.pos);
            };
            RegExpValidationState.prototype.lookahead = function lookahead() {
              return this.at(this.nextIndex(this.pos));
            };
            RegExpValidationState.prototype.advance = function advance() {
              this.pos = this.nextIndex(this.pos);
            };
            RegExpValidationState.prototype.eat = function eat(ch) {
              if (this.current() === ch) {
                this.advance();
                return true;
              }
              return false;
            };
            function codePointToString(ch) {
              if (ch <= 65535) {
                return String.fromCharCode(ch);
              }
              ch -= 65536;
              return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
            }
            pp$8.validateRegExpFlags = function(state) {
              var validFlags = state.validFlags;
              var flags = state.flags;
              for (var i = 0; i < flags.length; i++) {
                var flag = flags.charAt(i);
                if (validFlags.indexOf(flag) === -1) {
                  this.raise(state.start, "Invalid regular expression flag");
                }
                if (flags.indexOf(flag, i + 1) > -1) {
                  this.raise(state.start, "Duplicate regular expression flag");
                }
              }
            };
            pp$8.validateRegExpPattern = function(state) {
              this.regexp_pattern(state);
              if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
                state.switchN = true;
                this.regexp_pattern(state);
              }
            };
            pp$8.regexp_pattern = function(state) {
              state.pos = 0;
              state.lastIntValue = 0;
              state.lastStringValue = "";
              state.lastAssertionIsQuantifiable = false;
              state.numCapturingParens = 0;
              state.maxBackReference = 0;
              state.groupNames.length = 0;
              state.backReferenceNames.length = 0;
              this.regexp_disjunction(state);
              if (state.pos !== state.source.length) {
                if (state.eat(41)) {
                  state.raise("Unmatched ')'");
                }
                if (state.eat(93) || state.eat(125)) {
                  state.raise("Lone quantifier brackets");
                }
              }
              if (state.maxBackReference > state.numCapturingParens) {
                state.raise("Invalid escape");
              }
              for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
                var name2 = list[i];
                if (state.groupNames.indexOf(name2) === -1) {
                  state.raise("Invalid named capture referenced");
                }
              }
            };
            pp$8.regexp_disjunction = function(state) {
              this.regexp_alternative(state);
              while (state.eat(124)) {
                this.regexp_alternative(state);
              }
              if (this.regexp_eatQuantifier(state, true)) {
                state.raise("Nothing to repeat");
              }
              if (state.eat(123)) {
                state.raise("Lone quantifier brackets");
              }
            };
            pp$8.regexp_alternative = function(state) {
              while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
              }
            };
            pp$8.regexp_eatTerm = function(state) {
              if (this.regexp_eatAssertion(state)) {
                if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
                  if (state.switchU) {
                    state.raise("Invalid quantifier");
                  }
                }
                return true;
              }
              if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
                this.regexp_eatQuantifier(state);
                return true;
              }
              return false;
            };
            pp$8.regexp_eatAssertion = function(state) {
              var start = state.pos;
              state.lastAssertionIsQuantifiable = false;
              if (state.eat(94) || state.eat(36)) {
                return true;
              }
              if (state.eat(92)) {
                if (state.eat(66) || state.eat(98)) {
                  return true;
                }
                state.pos = start;
              }
              if (state.eat(40) && state.eat(63)) {
                var lookbehind = false;
                if (this.options.ecmaVersion >= 9) {
                  lookbehind = state.eat(60);
                }
                if (state.eat(61) || state.eat(33)) {
                  this.regexp_disjunction(state);
                  if (!state.eat(41)) {
                    state.raise("Unterminated group");
                  }
                  state.lastAssertionIsQuantifiable = !lookbehind;
                  return true;
                }
              }
              state.pos = start;
              return false;
            };
            pp$8.regexp_eatQuantifier = function(state, noError) {
              if (noError === void 0) noError = false;
              if (this.regexp_eatQuantifierPrefix(state, noError)) {
                state.eat(63);
                return true;
              }
              return false;
            };
            pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
              return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
            };
            pp$8.regexp_eatBracedQuantifier = function(state, noError) {
              var start = state.pos;
              if (state.eat(123)) {
                var min = 0, max = -1;
                if (this.regexp_eatDecimalDigits(state)) {
                  min = state.lastIntValue;
                  if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
                    max = state.lastIntValue;
                  }
                  if (state.eat(125)) {
                    if (max !== -1 && max < min && !noError) {
                      state.raise("numbers out of order in {} quantifier");
                    }
                    return true;
                  }
                }
                if (state.switchU && !noError) {
                  state.raise("Incomplete quantifier");
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatAtom = function(state) {
              return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
            };
            pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
              var start = state.pos;
              if (state.eat(92)) {
                if (this.regexp_eatAtomEscape(state)) {
                  return true;
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatUncapturingGroup = function(state) {
              var start = state.pos;
              if (state.eat(40)) {
                if (state.eat(63) && state.eat(58)) {
                  this.regexp_disjunction(state);
                  if (state.eat(41)) {
                    return true;
                  }
                  state.raise("Unterminated group");
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatCapturingGroup = function(state) {
              if (state.eat(40)) {
                if (this.options.ecmaVersion >= 9) {
                  this.regexp_groupSpecifier(state);
                } else if (state.current() === 63) {
                  state.raise("Invalid group");
                }
                this.regexp_disjunction(state);
                if (state.eat(41)) {
                  state.numCapturingParens += 1;
                  return true;
                }
                state.raise("Unterminated group");
              }
              return false;
            };
            pp$8.regexp_eatExtendedAtom = function(state) {
              return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
            };
            pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
              if (this.regexp_eatBracedQuantifier(state, true)) {
                state.raise("Nothing to repeat");
              }
              return false;
            };
            pp$8.regexp_eatSyntaxCharacter = function(state) {
              var ch = state.current();
              if (isSyntaxCharacter(ch)) {
                state.lastIntValue = ch;
                state.advance();
                return true;
              }
              return false;
            };
            function isSyntaxCharacter(ch) {
              return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
            }
            pp$8.regexp_eatPatternCharacters = function(state) {
              var start = state.pos;
              var ch = 0;
              while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
                state.advance();
              }
              return state.pos !== start;
            };
            pp$8.regexp_eatExtendedPatternCharacter = function(state) {
              var ch = state.current();
              if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_groupSpecifier = function(state) {
              if (state.eat(63)) {
                if (this.regexp_eatGroupName(state)) {
                  if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                    state.raise("Duplicate capture group name");
                  }
                  state.groupNames.push(state.lastStringValue);
                  return;
                }
                state.raise("Invalid group");
              }
            };
            pp$8.regexp_eatGroupName = function(state) {
              state.lastStringValue = "";
              if (state.eat(60)) {
                if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
                  return true;
                }
                state.raise("Invalid capture group name");
              }
              return false;
            };
            pp$8.regexp_eatRegExpIdentifierName = function(state) {
              state.lastStringValue = "";
              if (this.regexp_eatRegExpIdentifierStart(state)) {
                state.lastStringValue += codePointToString(state.lastIntValue);
                while (this.regexp_eatRegExpIdentifierPart(state)) {
                  state.lastStringValue += codePointToString(state.lastIntValue);
                }
                return true;
              }
              return false;
            };
            pp$8.regexp_eatRegExpIdentifierStart = function(state) {
              var start = state.pos;
              var ch = state.current();
              state.advance();
              if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
                ch = state.lastIntValue;
              }
              if (isRegExpIdentifierStart(ch)) {
                state.lastIntValue = ch;
                return true;
              }
              state.pos = start;
              return false;
            };
            function isRegExpIdentifierStart(ch) {
              return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
            }
            pp$8.regexp_eatRegExpIdentifierPart = function(state) {
              var start = state.pos;
              var ch = state.current();
              state.advance();
              if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
                ch = state.lastIntValue;
              }
              if (isRegExpIdentifierPart(ch)) {
                state.lastIntValue = ch;
                return true;
              }
              state.pos = start;
              return false;
            };
            function isRegExpIdentifierPart(ch) {
              return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
            }
            pp$8.regexp_eatAtomEscape = function(state) {
              if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
                return true;
              }
              if (state.switchU) {
                if (state.current() === 99) {
                  state.raise("Invalid unicode escape");
                }
                state.raise("Invalid escape");
              }
              return false;
            };
            pp$8.regexp_eatBackReference = function(state) {
              var start = state.pos;
              if (this.regexp_eatDecimalEscape(state)) {
                var n = state.lastIntValue;
                if (state.switchU) {
                  if (n > state.maxBackReference) {
                    state.maxBackReference = n;
                  }
                  return true;
                }
                if (n <= state.numCapturingParens) {
                  return true;
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatKGroupName = function(state) {
              if (state.eat(107)) {
                if (this.regexp_eatGroupName(state)) {
                  state.backReferenceNames.push(state.lastStringValue);
                  return true;
                }
                state.raise("Invalid named reference");
              }
              return false;
            };
            pp$8.regexp_eatCharacterEscape = function(state) {
              return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
            };
            pp$8.regexp_eatCControlLetter = function(state) {
              var start = state.pos;
              if (state.eat(99)) {
                if (this.regexp_eatControlLetter(state)) {
                  return true;
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatZero = function(state) {
              if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
                state.lastIntValue = 0;
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_eatControlEscape = function(state) {
              var ch = state.current();
              if (ch === 116) {
                state.lastIntValue = 9;
                state.advance();
                return true;
              }
              if (ch === 110) {
                state.lastIntValue = 10;
                state.advance();
                return true;
              }
              if (ch === 118) {
                state.lastIntValue = 11;
                state.advance();
                return true;
              }
              if (ch === 102) {
                state.lastIntValue = 12;
                state.advance();
                return true;
              }
              if (ch === 114) {
                state.lastIntValue = 13;
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_eatControlLetter = function(state) {
              var ch = state.current();
              if (isControlLetter(ch)) {
                state.lastIntValue = ch % 32;
                state.advance();
                return true;
              }
              return false;
            };
            function isControlLetter(ch) {
              return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
            }
            pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state) {
              var start = state.pos;
              if (state.eat(117)) {
                if (this.regexp_eatFixedHexDigits(state, 4)) {
                  var lead = state.lastIntValue;
                  if (state.switchU && lead >= 55296 && lead <= 56319) {
                    var leadSurrogateEnd = state.pos;
                    if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                      var trail = state.lastIntValue;
                      if (trail >= 56320 && trail <= 57343) {
                        state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                        return true;
                      }
                    }
                    state.pos = leadSurrogateEnd;
                    state.lastIntValue = lead;
                  }
                  return true;
                }
                if (state.switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
                  return true;
                }
                if (state.switchU) {
                  state.raise("Invalid unicode escape");
                }
                state.pos = start;
              }
              return false;
            };
            function isValidUnicode(ch) {
              return ch >= 0 && ch <= 1114111;
            }
            pp$8.regexp_eatIdentityEscape = function(state) {
              if (state.switchU) {
                if (this.regexp_eatSyntaxCharacter(state)) {
                  return true;
                }
                if (state.eat(47)) {
                  state.lastIntValue = 47;
                  return true;
                }
                return false;
              }
              var ch = state.current();
              if (ch !== 99 && (!state.switchN || ch !== 107)) {
                state.lastIntValue = ch;
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_eatDecimalEscape = function(state) {
              state.lastIntValue = 0;
              var ch = state.current();
              if (ch >= 49 && ch <= 57) {
                do {
                  state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
                  state.advance();
                } while ((ch = state.current()) >= 48 && ch <= 57);
                return true;
              }
              return false;
            };
            pp$8.regexp_eatCharacterClassEscape = function(state) {
              var ch = state.current();
              if (isCharacterClassEscape(ch)) {
                state.lastIntValue = -1;
                state.advance();
                return true;
              }
              if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
                state.lastIntValue = -1;
                state.advance();
                if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
                  return true;
                }
                state.raise("Invalid property name");
              }
              return false;
            };
            function isCharacterClassEscape(ch) {
              return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
            }
            pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
              var start = state.pos;
              if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
                var name2 = state.lastStringValue;
                if (this.regexp_eatUnicodePropertyValue(state)) {
                  var value2 = state.lastStringValue;
                  this.regexp_validateUnicodePropertyNameAndValue(state, name2, value2);
                  return true;
                }
              }
              state.pos = start;
              if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
                var nameOrValue = state.lastStringValue;
                this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
                return true;
              }
              return false;
            };
            pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name2, value2) {
              if (!has(state.unicodeProperties.nonBinary, name2)) {
                state.raise("Invalid property name");
              }
              if (!state.unicodeProperties.nonBinary[name2].test(value2)) {
                state.raise("Invalid property value");
              }
            };
            pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
              if (!state.unicodeProperties.binary.test(nameOrValue)) {
                state.raise("Invalid property name");
              }
            };
            pp$8.regexp_eatUnicodePropertyName = function(state) {
              var ch = 0;
              state.lastStringValue = "";
              while (isUnicodePropertyNameCharacter(ch = state.current())) {
                state.lastStringValue += codePointToString(ch);
                state.advance();
              }
              return state.lastStringValue !== "";
            };
            function isUnicodePropertyNameCharacter(ch) {
              return isControlLetter(ch) || ch === 95;
            }
            pp$8.regexp_eatUnicodePropertyValue = function(state) {
              var ch = 0;
              state.lastStringValue = "";
              while (isUnicodePropertyValueCharacter(ch = state.current())) {
                state.lastStringValue += codePointToString(ch);
                state.advance();
              }
              return state.lastStringValue !== "";
            };
            function isUnicodePropertyValueCharacter(ch) {
              return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
            }
            pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
              return this.regexp_eatUnicodePropertyValue(state);
            };
            pp$8.regexp_eatCharacterClass = function(state) {
              if (state.eat(91)) {
                state.eat(94);
                this.regexp_classRanges(state);
                if (state.eat(93)) {
                  return true;
                }
                state.raise("Unterminated character class");
              }
              return false;
            };
            pp$8.regexp_classRanges = function(state) {
              while (this.regexp_eatClassAtom(state)) {
                var left = state.lastIntValue;
                if (state.eat(45) && this.regexp_eatClassAtom(state)) {
                  var right = state.lastIntValue;
                  if (state.switchU && (left === -1 || right === -1)) {
                    state.raise("Invalid character class");
                  }
                  if (left !== -1 && right !== -1 && left > right) {
                    state.raise("Range out of order in character class");
                  }
                }
              }
            };
            pp$8.regexp_eatClassAtom = function(state) {
              var start = state.pos;
              if (state.eat(92)) {
                if (this.regexp_eatClassEscape(state)) {
                  return true;
                }
                if (state.switchU) {
                  var ch$1 = state.current();
                  if (ch$1 === 99 || isOctalDigit(ch$1)) {
                    state.raise("Invalid class escape");
                  }
                  state.raise("Invalid escape");
                }
                state.pos = start;
              }
              var ch = state.current();
              if (ch !== 93) {
                state.lastIntValue = ch;
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_eatClassEscape = function(state) {
              var start = state.pos;
              if (state.eat(98)) {
                state.lastIntValue = 8;
                return true;
              }
              if (state.switchU && state.eat(45)) {
                state.lastIntValue = 45;
                return true;
              }
              if (!state.switchU && state.eat(99)) {
                if (this.regexp_eatClassControlLetter(state)) {
                  return true;
                }
                state.pos = start;
              }
              return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
            };
            pp$8.regexp_eatClassControlLetter = function(state) {
              var ch = state.current();
              if (isDecimalDigit(ch) || ch === 95) {
                state.lastIntValue = ch % 32;
                state.advance();
                return true;
              }
              return false;
            };
            pp$8.regexp_eatHexEscapeSequence = function(state) {
              var start = state.pos;
              if (state.eat(120)) {
                if (this.regexp_eatFixedHexDigits(state, 2)) {
                  return true;
                }
                if (state.switchU) {
                  state.raise("Invalid escape");
                }
                state.pos = start;
              }
              return false;
            };
            pp$8.regexp_eatDecimalDigits = function(state) {
              var start = state.pos;
              var ch = 0;
              state.lastIntValue = 0;
              while (isDecimalDigit(ch = state.current())) {
                state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
                state.advance();
              }
              return state.pos !== start;
            };
            function isDecimalDigit(ch) {
              return ch >= 48 && ch <= 57;
            }
            pp$8.regexp_eatHexDigits = function(state) {
              var start = state.pos;
              var ch = 0;
              state.lastIntValue = 0;
              while (isHexDigit(ch = state.current())) {
                state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
                state.advance();
              }
              return state.pos !== start;
            };
            function isHexDigit(ch) {
              return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
            }
            function hexToInt(ch) {
              if (ch >= 65 && ch <= 70) {
                return 10 + (ch - 65);
              }
              if (ch >= 97 && ch <= 102) {
                return 10 + (ch - 97);
              }
              return ch - 48;
            }
            pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
              if (this.regexp_eatOctalDigit(state)) {
                var n1 = state.lastIntValue;
                if (this.regexp_eatOctalDigit(state)) {
                  var n2 = state.lastIntValue;
                  if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                    state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
                  } else {
                    state.lastIntValue = n1 * 8 + n2;
                  }
                } else {
                  state.lastIntValue = n1;
                }
                return true;
              }
              return false;
            };
            pp$8.regexp_eatOctalDigit = function(state) {
              var ch = state.current();
              if (isOctalDigit(ch)) {
                state.lastIntValue = ch - 48;
                state.advance();
                return true;
              }
              state.lastIntValue = 0;
              return false;
            };
            function isOctalDigit(ch) {
              return ch >= 48 && ch <= 55;
            }
            pp$8.regexp_eatFixedHexDigits = function(state, length) {
              var start = state.pos;
              state.lastIntValue = 0;
              for (var i = 0; i < length; ++i) {
                var ch = state.current();
                if (!isHexDigit(ch)) {
                  state.pos = start;
                  return false;
                }
                state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
                state.advance();
              }
              return true;
            };
            var Token = function Token2(p) {
              this.type = p.type;
              this.value = p.value;
              this.start = p.start;
              this.end = p.end;
              if (p.options.locations) {
                this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
              }
              if (p.options.ranges) {
                this.range = [p.start, p.end];
              }
            };
            var pp$9 = Parser.prototype;
            pp$9.next = function(ignoreEscapeSequenceInKeyword) {
              if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
                this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
              }
              if (this.options.onToken) {
                this.options.onToken(new Token(this));
              }
              this.lastTokEnd = this.end;
              this.lastTokStart = this.start;
              this.lastTokEndLoc = this.endLoc;
              this.lastTokStartLoc = this.startLoc;
              this.nextToken();
            };
            pp$9.getToken = function() {
              this.next();
              return new Token(this);
            };
            if (typeof Symbol !== "undefined") {
              pp$9[Symbol.iterator] = function() {
                var this$1 = this;
                return {
                  next: function() {
                    var token = this$1.getToken();
                    return {
                      done: token.type === types.eof,
                      value: token
                    };
                  }
                };
              };
            }
            pp$9.curContext = function() {
              return this.context[this.context.length - 1];
            };
            pp$9.nextToken = function() {
              var curContext = this.curContext();
              if (!curContext || !curContext.preserveSpace) {
                this.skipSpace();
              }
              this.start = this.pos;
              if (this.options.locations) {
                this.startLoc = this.curPosition();
              }
              if (this.pos >= this.input.length) {
                return this.finishToken(types.eof);
              }
              if (curContext.override) {
                return curContext.override(this);
              } else {
                this.readToken(this.fullCharCodeAtPos());
              }
            };
            pp$9.readToken = function(code) {
              if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
                return this.readWord();
              }
              return this.getTokenFromCode(code);
            };
            pp$9.fullCharCodeAtPos = function() {
              var code = this.input.charCodeAt(this.pos);
              if (code <= 55295 || code >= 57344) {
                return code;
              }
              var next = this.input.charCodeAt(this.pos + 1);
              return (code << 10) + next - 56613888;
            };
            pp$9.skipBlockComment = function() {
              var startLoc = this.options.onComment && this.curPosition();
              var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
              if (end === -1) {
                this.raise(this.pos - 2, "Unterminated comment");
              }
              this.pos = end + 2;
              if (this.options.locations) {
                lineBreakG.lastIndex = start;
                var match;
                while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
                  ++this.curLine;
                  this.lineStart = match.index + match[0].length;
                }
              }
              if (this.options.onComment) {
                this.options.onComment(
                  true,
                  this.input.slice(start + 2, end),
                  start,
                  this.pos,
                  startLoc,
                  this.curPosition()
                );
              }
            };
            pp$9.skipLineComment = function(startSkip) {
              var start = this.pos;
              var startLoc = this.options.onComment && this.curPosition();
              var ch = this.input.charCodeAt(this.pos += startSkip);
              while (this.pos < this.input.length && !isNewLine(ch)) {
                ch = this.input.charCodeAt(++this.pos);
              }
              if (this.options.onComment) {
                this.options.onComment(
                  false,
                  this.input.slice(start + startSkip, this.pos),
                  start,
                  this.pos,
                  startLoc,
                  this.curPosition()
                );
              }
            };
            pp$9.skipSpace = function() {
              loop: while (this.pos < this.input.length) {
                var ch = this.input.charCodeAt(this.pos);
                switch (ch) {
                  case 32:
                  case 160:
                    ++this.pos;
                    break;
                  case 13:
                    if (this.input.charCodeAt(this.pos + 1) === 10) {
                      ++this.pos;
                    }
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.pos;
                    if (this.options.locations) {
                      ++this.curLine;
                      this.lineStart = this.pos;
                    }
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.pos + 1)) {
                      case 42:
                        this.skipBlockComment();
                        break;
                      case 47:
                        this.skipLineComment(2);
                        break;
                      default:
                        break loop;
                    }
                    break;
                  default:
                    if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                      ++this.pos;
                    } else {
                      break loop;
                    }
                }
              }
            };
            pp$9.finishToken = function(type, val) {
              this.end = this.pos;
              if (this.options.locations) {
                this.endLoc = this.curPosition();
              }
              var prevType = this.type;
              this.type = type;
              this.value = val;
              this.updateContext(prevType);
            };
            pp$9.readToken_dot = function() {
              var next = this.input.charCodeAt(this.pos + 1);
              if (next >= 48 && next <= 57) {
                return this.readNumber(true);
              }
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
                this.pos += 3;
                return this.finishToken(types.ellipsis);
              } else {
                ++this.pos;
                return this.finishToken(types.dot);
              }
            };
            pp$9.readToken_slash = function() {
              var next = this.input.charCodeAt(this.pos + 1);
              if (this.exprAllowed) {
                ++this.pos;
                return this.readRegexp();
              }
              if (next === 61) {
                return this.finishOp(types.assign, 2);
              }
              return this.finishOp(types.slash, 1);
            };
            pp$9.readToken_mult_modulo_exp = function(code) {
              var next = this.input.charCodeAt(this.pos + 1);
              var size = 1;
              var tokentype = code === 42 ? types.star : types.modulo;
              if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
                ++size;
                tokentype = types.starstar;
                next = this.input.charCodeAt(this.pos + 2);
              }
              if (next === 61) {
                return this.finishOp(types.assign, size + 1);
              }
              return this.finishOp(tokentype, size);
            };
            pp$9.readToken_pipe_amp = function(code) {
              var next = this.input.charCodeAt(this.pos + 1);
              if (next === code) {
                return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
              }
              if (next === 61) {
                return this.finishOp(types.assign, 2);
              }
              return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
            };
            pp$9.readToken_caret = function() {
              var next = this.input.charCodeAt(this.pos + 1);
              if (next === 61) {
                return this.finishOp(types.assign, 2);
              }
              return this.finishOp(types.bitwiseXOR, 1);
            };
            pp$9.readToken_plus_min = function(code) {
              var next = this.input.charCodeAt(this.pos + 1);
              if (next === code) {
                if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
                  this.skipLineComment(3);
                  this.skipSpace();
                  return this.nextToken();
                }
                return this.finishOp(types.incDec, 2);
              }
              if (next === 61) {
                return this.finishOp(types.assign, 2);
              }
              return this.finishOp(types.plusMin, 1);
            };
            pp$9.readToken_lt_gt = function(code) {
              var next = this.input.charCodeAt(this.pos + 1);
              var size = 1;
              if (next === code) {
                size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
                if (this.input.charCodeAt(this.pos + size) === 61) {
                  return this.finishOp(types.assign, size + 1);
                }
                return this.finishOp(types.bitShift, size);
              }
              if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
                this.skipLineComment(4);
                this.skipSpace();
                return this.nextToken();
              }
              if (next === 61) {
                size = 2;
              }
              return this.finishOp(types.relational, size);
            };
            pp$9.readToken_eq_excl = function(code) {
              var next = this.input.charCodeAt(this.pos + 1);
              if (next === 61) {
                return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
              }
              if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
                this.pos += 2;
                return this.finishToken(types.arrow);
              }
              return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
            };
            pp$9.getTokenFromCode = function(code) {
              switch (code) {
                case 46:
                  return this.readToken_dot();
                case 40:
                  ++this.pos;
                  return this.finishToken(types.parenL);
                case 41:
                  ++this.pos;
                  return this.finishToken(types.parenR);
                case 59:
                  ++this.pos;
                  return this.finishToken(types.semi);
                case 44:
                  ++this.pos;
                  return this.finishToken(types.comma);
                case 91:
                  ++this.pos;
                  return this.finishToken(types.bracketL);
                case 93:
                  ++this.pos;
                  return this.finishToken(types.bracketR);
                case 123:
                  ++this.pos;
                  return this.finishToken(types.braceL);
                case 125:
                  ++this.pos;
                  return this.finishToken(types.braceR);
                case 58:
                  ++this.pos;
                  return this.finishToken(types.colon);
                case 63:
                  ++this.pos;
                  return this.finishToken(types.question);
                case 96:
                  if (this.options.ecmaVersion < 6) {
                    break;
                  }
                  ++this.pos;
                  return this.finishToken(types.backQuote);
                case 48:
                  var next = this.input.charCodeAt(this.pos + 1);
                  if (next === 120 || next === 88) {
                    return this.readRadixNumber(16);
                  }
                  if (this.options.ecmaVersion >= 6) {
                    if (next === 111 || next === 79) {
                      return this.readRadixNumber(8);
                    }
                    if (next === 98 || next === 66) {
                      return this.readRadixNumber(2);
                    }
                  }
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  return this.readNumber(false);
                case 34:
                case 39:
                  return this.readString(code);
                case 47:
                  return this.readToken_slash();
                case 37:
                case 42:
                  return this.readToken_mult_modulo_exp(code);
                case 124:
                case 38:
                  return this.readToken_pipe_amp(code);
                case 94:
                  return this.readToken_caret();
                case 43:
                case 45:
                  return this.readToken_plus_min(code);
                case 60:
                case 62:
                  return this.readToken_lt_gt(code);
                case 61:
                case 33:
                  return this.readToken_eq_excl(code);
                case 126:
                  return this.finishOp(types.prefix, 1);
              }
              this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
            };
            pp$9.finishOp = function(type, size) {
              var str = this.input.slice(this.pos, this.pos + size);
              this.pos += size;
              return this.finishToken(type, str);
            };
            pp$9.readRegexp = function() {
              var escaped, inClass, start = this.pos;
              for (; ; ) {
                if (this.pos >= this.input.length) {
                  this.raise(start, "Unterminated regular expression");
                }
                var ch = this.input.charAt(this.pos);
                if (lineBreak.test(ch)) {
                  this.raise(start, "Unterminated regular expression");
                }
                if (!escaped) {
                  if (ch === "[") {
                    inClass = true;
                  } else if (ch === "]" && inClass) {
                    inClass = false;
                  } else if (ch === "/" && !inClass) {
                    break;
                  }
                  escaped = ch === "\\";
                } else {
                  escaped = false;
                }
                ++this.pos;
              }
              var pattern = this.input.slice(start, this.pos);
              ++this.pos;
              var flagsStart = this.pos;
              var flags = this.readWord1();
              if (this.containsEsc) {
                this.unexpected(flagsStart);
              }
              var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
              state.reset(start, pattern, flags);
              this.validateRegExpFlags(state);
              this.validateRegExpPattern(state);
              var value2 = null;
              try {
                value2 = new RegExp(pattern, flags);
              } catch (e) {
              }
              return this.finishToken(types.regexp, { pattern, flags, value: value2 });
            };
            pp$9.readInt = function(radix, len) {
              var start = this.pos, total = 0;
              for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                var code = this.input.charCodeAt(this.pos), val = void 0;
                if (code >= 97) {
                  val = code - 97 + 10;
                } else if (code >= 65) {
                  val = code - 65 + 10;
                } else if (code >= 48 && code <= 57) {
                  val = code - 48;
                } else {
                  val = Infinity;
                }
                if (val >= radix) {
                  break;
                }
                ++this.pos;
                total = total * radix + val;
              }
              if (this.pos === start || len != null && this.pos - start !== len) {
                return null;
              }
              return total;
            };
            pp$9.readRadixNumber = function(radix) {
              var start = this.pos;
              this.pos += 2;
              var val = this.readInt(radix);
              if (val == null) {
                this.raise(this.start + 2, "Expected number in radix " + radix);
              }
              if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
                val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
                ++this.pos;
              } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
                this.raise(this.pos, "Identifier directly after number");
              }
              return this.finishToken(types.num, val);
            };
            pp$9.readNumber = function(startsWithDot) {
              var start = this.pos;
              if (!startsWithDot && this.readInt(10) === null) {
                this.raise(start, "Invalid number");
              }
              var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
              if (octal && this.strict) {
                this.raise(start, "Invalid number");
              }
              var next = this.input.charCodeAt(this.pos);
              if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
                var str$1 = this.input.slice(start, this.pos);
                var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
                ++this.pos;
                if (isIdentifierStart(this.fullCharCodeAtPos())) {
                  this.raise(this.pos, "Identifier directly after number");
                }
                return this.finishToken(types.num, val$1);
              }
              if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
                octal = false;
              }
              if (next === 46 && !octal) {
                ++this.pos;
                this.readInt(10);
                next = this.input.charCodeAt(this.pos);
              }
              if ((next === 69 || next === 101) && !octal) {
                next = this.input.charCodeAt(++this.pos);
                if (next === 43 || next === 45) {
                  ++this.pos;
                }
                if (this.readInt(10) === null) {
                  this.raise(start, "Invalid number");
                }
              }
              if (isIdentifierStart(this.fullCharCodeAtPos())) {
                this.raise(this.pos, "Identifier directly after number");
              }
              var str = this.input.slice(start, this.pos);
              var val = octal ? parseInt(str, 8) : parseFloat(str);
              return this.finishToken(types.num, val);
            };
            pp$9.readCodePoint = function() {
              var ch = this.input.charCodeAt(this.pos), code;
              if (ch === 123) {
                if (this.options.ecmaVersion < 6) {
                  this.unexpected();
                }
                var codePos = ++this.pos;
                code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
                ++this.pos;
                if (code > 1114111) {
                  this.invalidStringToken(codePos, "Code point out of bounds");
                }
              } else {
                code = this.readHexChar(4);
              }
              return code;
            };
            function codePointToString$1(code) {
              if (code <= 65535) {
                return String.fromCharCode(code);
              }
              code -= 65536;
              return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
            }
            pp$9.readString = function(quote) {
              var out = "", chunkStart = ++this.pos;
              for (; ; ) {
                if (this.pos >= this.input.length) {
                  this.raise(this.start, "Unterminated string constant");
                }
                var ch = this.input.charCodeAt(this.pos);
                if (ch === quote) {
                  break;
                }
                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.readEscapedChar(false);
                  chunkStart = this.pos;
                } else {
                  if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
                    this.raise(this.start, "Unterminated string constant");
                  }
                  ++this.pos;
                }
              }
              out += this.input.slice(chunkStart, this.pos++);
              return this.finishToken(types.string, out);
            };
            var INVALID_TEMPLATE_ESCAPE_ERROR = {};
            pp$9.tryReadTemplateToken = function() {
              this.inTemplateElement = true;
              try {
                this.readTmplToken();
              } catch (err) {
                if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
                  this.readInvalidTemplateToken();
                } else {
                  throw err;
                }
              }
              this.inTemplateElement = false;
            };
            pp$9.invalidStringToken = function(position, message) {
              if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
                throw INVALID_TEMPLATE_ESCAPE_ERROR;
              } else {
                this.raise(position, message);
              }
            };
            pp$9.readTmplToken = function() {
              var out = "", chunkStart = this.pos;
              for (; ; ) {
                if (this.pos >= this.input.length) {
                  this.raise(this.start, "Unterminated template");
                }
                var ch = this.input.charCodeAt(this.pos);
                if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
                  if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
                    if (ch === 36) {
                      this.pos += 2;
                      return this.finishToken(types.dollarBraceL);
                    } else {
                      ++this.pos;
                      return this.finishToken(types.backQuote);
                    }
                  }
                  out += this.input.slice(chunkStart, this.pos);
                  return this.finishToken(types.template, out);
                }
                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.readEscapedChar(true);
                  chunkStart = this.pos;
                } else if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.pos);
                  ++this.pos;
                  switch (ch) {
                    case 13:
                      if (this.input.charCodeAt(this.pos) === 10) {
                        ++this.pos;
                      }
                    case 10:
                      out += "\n";
                      break;
                    default:
                      out += String.fromCharCode(ch);
                      break;
                  }
                  if (this.options.locations) {
                    ++this.curLine;
                    this.lineStart = this.pos;
                  }
                  chunkStart = this.pos;
                } else {
                  ++this.pos;
                }
              }
            };
            pp$9.readInvalidTemplateToken = function() {
              for (; this.pos < this.input.length; this.pos++) {
                switch (this.input[this.pos]) {
                  case "\\":
                    ++this.pos;
                    break;
                  case "$":
                    if (this.input[this.pos + 1] !== "{") {
                      break;
                    }
                  case "`":
                    return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
                }
              }
              this.raise(this.start, "Unterminated template");
            };
            pp$9.readEscapedChar = function(inTemplate) {
              var ch = this.input.charCodeAt(++this.pos);
              ++this.pos;
              switch (ch) {
                case 110:
                  return "\n";
                case 114:
                  return "\r";
                case 120:
                  return String.fromCharCode(this.readHexChar(2));
                case 117:
                  return codePointToString$1(this.readCodePoint());
                case 116:
                  return "	";
                case 98:
                  return "\b";
                case 118:
                  return "\v";
                case 102:
                  return "\f";
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }
                case 10:
                  if (this.options.locations) {
                    this.lineStart = this.pos;
                    ++this.curLine;
                  }
                  return "";
                case 56:
                case 57:
                  if (inTemplate) {
                    var codePos = this.pos - 1;
                    this.invalidStringToken(
                      codePos,
                      "Invalid escape sequence in template string"
                    );
                    return null;
                  }
                default:
                  if (ch >= 48 && ch <= 55) {
                    var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                    var octal = parseInt(octalStr, 8);
                    if (octal > 255) {
                      octalStr = octalStr.slice(0, -1);
                      octal = parseInt(octalStr, 8);
                    }
                    this.pos += octalStr.length - 1;
                    ch = this.input.charCodeAt(this.pos);
                    if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                      this.invalidStringToken(
                        this.pos - 1 - octalStr.length,
                        inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
                      );
                    }
                    return String.fromCharCode(octal);
                  }
                  if (isNewLine(ch)) {
                    return "";
                  }
                  return String.fromCharCode(ch);
              }
            };
            pp$9.readHexChar = function(len) {
              var codePos = this.pos;
              var n = this.readInt(16, len);
              if (n === null) {
                this.invalidStringToken(codePos, "Bad character escape sequence");
              }
              return n;
            };
            pp$9.readWord1 = function() {
              this.containsEsc = false;
              var word = "", first2 = true, chunkStart = this.pos;
              var astral = this.options.ecmaVersion >= 6;
              while (this.pos < this.input.length) {
                var ch = this.fullCharCodeAtPos();
                if (isIdentifierChar(ch, astral)) {
                  this.pos += ch <= 65535 ? 1 : 2;
                } else if (ch === 92) {
                  this.containsEsc = true;
                  word += this.input.slice(chunkStart, this.pos);
                  var escStart = this.pos;
                  if (this.input.charCodeAt(++this.pos) !== 117) {
                    this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
                  }
                  ++this.pos;
                  var esc = this.readCodePoint();
                  if (!(first2 ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                    this.invalidStringToken(escStart, "Invalid Unicode escape");
                  }
                  word += codePointToString$1(esc);
                  chunkStart = this.pos;
                } else {
                  break;
                }
                first2 = false;
              }
              return word + this.input.slice(chunkStart, this.pos);
            };
            pp$9.readWord = function() {
              var word = this.readWord1();
              var type = types.name;
              if (this.keywords.test(word)) {
                type = keywords$1[word];
              }
              return this.finishToken(type, word);
            };
            var version3 = "7.1.0";
            Parser.acorn = {
              Parser,
              version: version3,
              defaultOptions,
              Position,
              SourceLocation,
              getLineInfo,
              Node,
              TokenType,
              tokTypes: types,
              keywordTypes: keywords$1,
              TokContext,
              tokContexts: types$1,
              isIdentifierChar,
              isIdentifierStart,
              Token,
              isNewLine,
              lineBreak,
              lineBreakG,
              nonASCIIwhitespace
            };
            function parse(input, options) {
              return Parser.parse(input, options);
            }
            function parseExpressionAt(input, pos, options) {
              return Parser.parseExpressionAt(input, pos, options);
            }
            function tokenizer(input, options) {
              return Parser.tokenizer(input, options);
            }
            exports4.Node = Node;
            exports4.Parser = Parser;
            exports4.Position = Position;
            exports4.SourceLocation = SourceLocation;
            exports4.TokContext = TokContext;
            exports4.Token = Token;
            exports4.TokenType = TokenType;
            exports4.defaultOptions = defaultOptions;
            exports4.getLineInfo = getLineInfo;
            exports4.isIdentifierChar = isIdentifierChar;
            exports4.isIdentifierStart = isIdentifierStart;
            exports4.isNewLine = isNewLine;
            exports4.keywordTypes = keywords$1;
            exports4.lineBreak = lineBreak;
            exports4.lineBreakG = lineBreakG;
            exports4.nonASCIIwhitespace = nonASCIIwhitespace;
            exports4.parse = parse;
            exports4.parseExpressionAt = parseExpressionAt;
            exports4.tokContexts = types$1;
            exports4.tokTypes = types;
            exports4.tokenizer = tokenizer;
            exports4.version = version3;
            Object.defineProperty(exports4, "__esModule", { value: true });
          });
        }, {}], 2: [function(require2, module3, exports3) {
        }, {}], 3: [function(require2, module3, exports3) {
          function glWiretap(gl, options = {}) {
            const {
              contextName = "gl",
              throwGetError,
              useTrackablePrimitives,
              readPixelsFile,
              recording = [],
              variables = {},
              onReadPixels,
              onUnrecognizedArgumentLookup
            } = options;
            const proxy = new Proxy(gl, { get: listen });
            const contextVariables = [];
            const entityNames = {};
            let imageCount = 0;
            let indent = "";
            let readPixelsVariableName;
            return proxy;
            function listen(obj, property) {
              switch (property) {
                case "addComment":
                  return addComment;
                case "checkThrowError":
                  return checkThrowError;
                case "getReadPixelsVariableName":
                  return readPixelsVariableName;
                case "insertVariable":
                  return insertVariable;
                case "reset":
                  return reset;
                case "setIndent":
                  return setIndent;
                case "toString":
                  return toString;
                case "getContextVariableName":
                  return getContextVariableName;
              }
              if (typeof gl[property] === "function") {
                return function() {
                  switch (property) {
                    case "getError":
                      if (throwGetError) {
                        recording.push(`${indent}if (${contextName}.getError() !== ${contextName}.NONE) throw new Error('error');`);
                      } else {
                        recording.push(`${indent}${contextName}.getError();`);
                      }
                      return gl.getError();
                    case "getExtension": {
                      const variableName = `${contextName}Variables${contextVariables.length}`;
                      recording.push(`${indent}const ${variableName} = ${contextName}.getExtension('${arguments[0]}');`);
                      const extension = gl.getExtension(arguments[0]);
                      if (extension && typeof extension === "object") {
                        const tappedExtension = glExtensionWiretap(extension, {
                          getEntity,
                          useTrackablePrimitives,
                          recording,
                          contextName: variableName,
                          contextVariables,
                          variables,
                          indent,
                          onUnrecognizedArgumentLookup
                        });
                        contextVariables.push(tappedExtension);
                        return tappedExtension;
                      } else {
                        contextVariables.push(null);
                      }
                      return extension;
                    }
                    case "readPixels":
                      const i = contextVariables.indexOf(arguments[6]);
                      let targetVariableName;
                      if (i === -1) {
                        const variableName = getVariableName(arguments[6]);
                        if (variableName) {
                          targetVariableName = variableName;
                          recording.push(`${indent}${variableName}`);
                        } else {
                          targetVariableName = `${contextName}Variable${contextVariables.length}`;
                          contextVariables.push(arguments[6]);
                          recording.push(`${indent}const ${targetVariableName} = new ${arguments[6].constructor.name}(${arguments[6].length});`);
                        }
                      } else {
                        targetVariableName = `${contextName}Variable${i}`;
                      }
                      readPixelsVariableName = targetVariableName;
                      const argumentAsStrings = [
                        arguments[0],
                        arguments[1],
                        arguments[2],
                        arguments[3],
                        getEntity(arguments[4]),
                        getEntity(arguments[5]),
                        targetVariableName
                      ];
                      recording.push(`${indent}${contextName}.readPixels(${argumentAsStrings.join(", ")});`);
                      if (readPixelsFile) {
                        writePPM(arguments[2], arguments[3]);
                      }
                      if (onReadPixels) {
                        onReadPixels(targetVariableName, argumentAsStrings);
                      }
                      return gl.readPixels.apply(gl, arguments);
                    case "drawBuffers":
                      recording.push(`${indent}${contextName}.drawBuffers([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup })}]);`);
                      return gl.drawBuffers(arguments[0]);
                  }
                  let result = gl[property].apply(gl, arguments);
                  switch (typeof result) {
                    case "undefined":
                      recording.push(`${indent}${methodCallToString(property, arguments)};`);
                      return;
                    case "number":
                    case "boolean":
                      if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);
                        contextVariables.push(result = trackablePrimitive(result));
                        break;
                      }
                    default:
                      if (result === null) {
                        recording.push(`${methodCallToString(property, arguments)};`);
                      } else {
                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);
                      }
                      contextVariables.push(result);
                  }
                  return result;
                };
              }
              entityNames[gl[property]] = property;
              return gl[property];
            }
            function toString() {
              return recording.join("\n");
            }
            function reset() {
              while (recording.length > 0) {
                recording.pop();
              }
            }
            function insertVariable(name2, value2) {
              variables[name2] = value2;
            }
            function getEntity(value2) {
              const name2 = entityNames[value2];
              if (name2) {
                return contextName + "." + name2;
              }
              return value2;
            }
            function setIndent(spaces) {
              indent = " ".repeat(spaces);
            }
            function addVariable(value2, source) {
              const variableName = `${contextName}Variable${contextVariables.length}`;
              recording.push(`${indent}const ${variableName} = ${source};`);
              contextVariables.push(value2);
              return variableName;
            }
            function writePPM(width, height) {
              const sourceVariable = `${contextName}Variable${contextVariables.length}`;
              const imageVariable = `imageDatum${imageCount}`;
              recording.push(`${indent}let ${imageVariable} = ["P3\\n# ${readPixelsFile}.ppm\\n", ${width}, ' ', ${height}, "\\n255\\n"].join("");`);
              recording.push(`${indent}for (let i = 0; i < ${imageVariable}.length; i += 4) {`);
              recording.push(`${indent}  ${imageVariable} += ${sourceVariable}[i] + ' ' + ${sourceVariable}[i + 1] + ' ' + ${sourceVariable}[i + 2] + ' ';`);
              recording.push(`${indent}}`);
              recording.push(`${indent}if (typeof require !== "undefined") {`);
              recording.push(`${indent}  require('fs').writeFileSync('./${readPixelsFile}.ppm', ${imageVariable});`);
              recording.push(`${indent}}`);
              imageCount++;
            }
            function addComment(value2) {
              recording.push(`${indent}// ${value2}`);
            }
            function checkThrowError() {
              recording.push(`${indent}(() => {
${indent}const error = ${contextName}.getError();
${indent}if (error !== ${contextName}.NONE) {
${indent}  const names = Object.getOwnPropertyNames(gl);
${indent}  for (let i = 0; i < names.length; i++) {
${indent}    const name = names[i];
${indent}    if (${contextName}[name] === error) {
${indent}      throw new Error('${contextName} threw ' + name);
${indent}    }
${indent}  }
${indent}}
${indent}})();`);
            }
            function methodCallToString(method, args) {
              return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;
            }
            function getVariableName(value2) {
              if (variables) {
                for (const name2 in variables) {
                  if (variables[name2] === value2) {
                    return name2;
                  }
                }
              }
              return null;
            }
            function getContextVariableName(value2) {
              const i = contextVariables.indexOf(value2);
              if (i !== -1) {
                return `${contextName}Variable${i}`;
              }
              return null;
            }
          }
          function glExtensionWiretap(extension, options) {
            const proxy = new Proxy(extension, { get: listen });
            const extensionEntityNames = {};
            const {
              contextName,
              contextVariables,
              getEntity,
              useTrackablePrimitives,
              recording,
              variables,
              indent,
              onUnrecognizedArgumentLookup
            } = options;
            return proxy;
            function listen(obj, property) {
              if (typeof obj[property] === "function") {
                return function() {
                  switch (property) {
                    case "drawBuffersWEBGL":
                      recording.push(`${indent}${contextName}.drawBuffersWEBGL([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })}]);`);
                      return extension.drawBuffersWEBGL(arguments[0]);
                  }
                  let result = extension[property].apply(extension, arguments);
                  switch (typeof result) {
                    case "undefined":
                      recording.push(`${indent}${methodCallToString(property, arguments)};`);
                      return;
                    case "number":
                    case "boolean":
                      if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);
                        contextVariables.push(result = trackablePrimitive(result));
                      } else {
                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);
                        contextVariables.push(result);
                      }
                      break;
                    default:
                      if (result === null) {
                        recording.push(`${methodCallToString(property, arguments)};`);
                      } else {
                        recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);
                      }
                      contextVariables.push(result);
                  }
                  return result;
                };
              }
              extensionEntityNames[extension[property]] = property;
              return extension[property];
            }
            function getExtensionEntity(value2) {
              if (extensionEntityNames.hasOwnProperty(value2)) {
                return `${contextName}.${extensionEntityNames[value2]}`;
              }
              return getEntity(value2);
            }
            function methodCallToString(method, args) {
              return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;
            }
            function addVariable(value2, source) {
              const variableName = `${contextName}Variable${contextVariables.length}`;
              contextVariables.push(value2);
              recording.push(`${indent}const ${variableName} = ${source};`);
              return variableName;
            }
          }
          function argumentsToString(args, options) {
            const { variables, onUnrecognizedArgumentLookup } = options;
            return Array.from(args).map((arg) => {
              const variableName = getVariableName(arg);
              if (variableName) {
                return variableName;
              }
              return argumentToString(arg, options);
            }).join(", ");
            function getVariableName(value2) {
              if (variables) {
                for (const name2 in variables) {
                  if (!variables.hasOwnProperty(name2)) continue;
                  if (variables[name2] === value2) {
                    return name2;
                  }
                }
              }
              if (onUnrecognizedArgumentLookup) {
                return onUnrecognizedArgumentLookup(value2);
              }
              return null;
            }
          }
          function argumentToString(arg, options) {
            const { contextName, contextVariables, getEntity, addVariable, onUnrecognizedArgumentLookup } = options;
            if (typeof arg === "undefined") {
              return "undefined";
            }
            if (arg === null) {
              return "null";
            }
            const i = contextVariables.indexOf(arg);
            if (i > -1) {
              return `${contextName}Variable${i}`;
            }
            switch (arg.constructor.name) {
              case "String":
                const hasLines = /\n/.test(arg);
                const hasSingleQuotes = /'/.test(arg);
                const hasDoubleQuotes = /"/.test(arg);
                if (hasLines) {
                  return "`" + arg + "`";
                } else if (hasSingleQuotes && !hasDoubleQuotes) {
                  return '"' + arg + '"';
                } else if (!hasSingleQuotes && hasDoubleQuotes) {
                  return "'" + arg + "'";
                } else {
                  return "'" + arg + "'";
                }
              case "Number":
                return getEntity(arg);
              case "Boolean":
                return getEntity(arg);
              case "Array":
                return addVariable(arg, `new ${arg.constructor.name}([${Array.from(arg).join(",")}])`);
              case "Float32Array":
              case "Uint8Array":
              case "Uint16Array":
              case "Int32Array":
                return addVariable(arg, `new ${arg.constructor.name}(${JSON.stringify(Array.from(arg))})`);
              default:
                if (onUnrecognizedArgumentLookup) {
                  const instantiationString = onUnrecognizedArgumentLookup(arg);
                  if (instantiationString) {
                    return instantiationString;
                  }
                }
                throw new Error(`unrecognized argument type ${arg.constructor.name}`);
            }
          }
          function trackablePrimitive(value2) {
            return new value2.constructor(value2);
          }
          if (typeof module3 !== "undefined") {
            module3.exports = { glWiretap, glExtensionWiretap };
          }
          if (typeof window !== "undefined") {
            glWiretap.glExtensionWiretap = glExtensionWiretap;
            window.glWiretap = glWiretap;
          }
        }, {}], 4: [function(require2, module3, exports3) {
          function setupArguments(args) {
            const newArguments = new Array(args.length);
            for (let i = 0; i < args.length; i++) {
              const arg = args[i];
              if (arg.toArray) {
                newArguments[i] = arg.toArray();
              } else {
                newArguments[i] = arg;
              }
            }
            return newArguments;
          }
          function mock1D() {
            const args = setupArguments(arguments);
            const row = new Float32Array(this.output.x);
            for (let x = 0; x < this.output.x; x++) {
              this.thread.x = x;
              this.thread.y = 0;
              this.thread.z = 0;
              row[x] = this._fn.apply(this, args);
            }
            return row;
          }
          function mock2D() {
            const args = setupArguments(arguments);
            const matrix = new Array(this.output.y);
            for (let y = 0; y < this.output.y; y++) {
              const row = new Float32Array(this.output.x);
              for (let x = 0; x < this.output.x; x++) {
                this.thread.x = x;
                this.thread.y = y;
                this.thread.z = 0;
                row[x] = this._fn.apply(this, args);
              }
              matrix[y] = row;
            }
            return matrix;
          }
          function mock2DGraphical() {
            const args = setupArguments(arguments);
            for (let y = 0; y < this.output.y; y++) {
              for (let x = 0; x < this.output.x; x++) {
                this.thread.x = x;
                this.thread.y = y;
                this.thread.z = 0;
                this._fn.apply(this, args);
              }
            }
          }
          function mock3D() {
            const args = setupArguments(arguments);
            const cube = new Array(this.output.z);
            for (let z = 0; z < this.output.z; z++) {
              const matrix = new Array(this.output.y);
              for (let y = 0; y < this.output.y; y++) {
                const row = new Float32Array(this.output.x);
                for (let x = 0; x < this.output.x; x++) {
                  this.thread.x = x;
                  this.thread.y = y;
                  this.thread.z = z;
                  row[x] = this._fn.apply(this, args);
                }
                matrix[y] = row;
              }
              cube[z] = matrix;
            }
            return cube;
          }
          function apiDecorate(kernel) {
            kernel.setOutput = (output) => {
              kernel.output = setupOutput(output);
              if (kernel.graphical) {
                setupGraphical(kernel);
              }
            };
            kernel.toJSON = () => {
              throw new Error("Not usable with gpuMock");
            };
            kernel.setConstants = (flag) => {
              kernel.constants = flag;
              return kernel;
            };
            kernel.setGraphical = (flag) => {
              kernel.graphical = flag;
              return kernel;
            };
            kernel.setCanvas = (flag) => {
              kernel.canvas = flag;
              return kernel;
            };
            kernel.setContext = (flag) => {
              kernel.context = flag;
              return kernel;
            };
            kernel.destroy = () => {
            };
            kernel.validateSettings = () => {
            };
            if (kernel.graphical && kernel.output) {
              setupGraphical(kernel);
            }
            kernel.exec = function() {
              return new Promise((resolve, reject) => {
                try {
                  resolve(kernel.apply(kernel, arguments));
                } catch (e) {
                  reject(e);
                }
              });
            };
            kernel.getPixels = (flip) => {
              const { x, y } = kernel.output;
              return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);
            };
            kernel.color = function(r, g, b, a) {
              if (typeof a === "undefined") {
                a = 1;
              }
              r = Math.floor(r * 255);
              g = Math.floor(g * 255);
              b = Math.floor(b * 255);
              a = Math.floor(a * 255);
              const width = kernel.output.x;
              const height = kernel.output.y;
              const x = kernel.thread.x;
              const y = height - kernel.thread.y - 1;
              const index = x + y * width;
              kernel._colorData[index * 4 + 0] = r;
              kernel._colorData[index * 4 + 1] = g;
              kernel._colorData[index * 4 + 2] = b;
              kernel._colorData[index * 4 + 3] = a;
            };
            const mockMethod = () => kernel;
            const methods = [
              "setWarnVarUsage",
              "setArgumentTypes",
              "setTactic",
              "setOptimizeFloatMemory",
              "setDebug",
              "setLoopMaxIterations",
              "setConstantTypes",
              "setFunctions",
              "setNativeFunctions",
              "setInjectedNative",
              "setPipeline",
              "setPrecision",
              "setOutputToTexture",
              "setImmutable",
              "setStrictIntegers",
              "setDynamicOutput",
              "setHardcodeConstants",
              "setDynamicArguments",
              "setUseLegacyEncoder",
              "setWarnVarUsage",
              "addSubKernel"
            ];
            for (let i = 0; i < methods.length; i++) {
              kernel[methods[i]] = mockMethod;
            }
            return kernel;
          }
          function setupGraphical(kernel) {
            const { x, y } = kernel.output;
            if (kernel.context && kernel.context.createImageData) {
              const data = new Uint8ClampedArray(x * y * 4);
              kernel._imageData = kernel.context.createImageData(x, y);
              kernel._colorData = data;
            } else {
              const data = new Uint8ClampedArray(x * y * 4);
              kernel._imageData = { data };
              kernel._colorData = data;
            }
          }
          function setupOutput(output) {
            let result = null;
            if (output.length) {
              if (output.length === 3) {
                const [x, y, z] = output;
                result = { x, y, z };
              } else if (output.length === 2) {
                const [x, y] = output;
                result = { x, y };
              } else {
                const [x] = output;
                result = { x };
              }
            } else {
              result = output;
            }
            return result;
          }
          function gpuMock(fn, settings = {}) {
            const output = settings.output ? setupOutput(settings.output) : null;
            function kernel() {
              if (kernel.output.z) {
                return mock3D.apply(kernel, arguments);
              } else if (kernel.output.y) {
                if (kernel.graphical) {
                  return mock2DGraphical.apply(kernel, arguments);
                }
                return mock2D.apply(kernel, arguments);
              } else {
                return mock1D.apply(kernel, arguments);
              }
            }
            kernel._fn = fn;
            kernel.constants = settings.constants || null;
            kernel.context = settings.context || null;
            kernel.canvas = settings.canvas || null;
            kernel.graphical = settings.graphical || false;
            kernel._imageData = null;
            kernel._colorData = null;
            kernel.output = output;
            kernel.thread = {
              x: 0,
              y: 0,
              z: 0
            };
            return apiDecorate(kernel);
          }
          function flipPixels(pixels, width, height) {
            const halfHeight = height / 2 | 0;
            const bytesPerRow = width * 4;
            const temp = new Uint8ClampedArray(width * 4);
            const result = pixels.slice(0);
            for (let y = 0; y < halfHeight; ++y) {
              const topOffset = y * bytesPerRow;
              const bottomOffset = (height - y - 1) * bytesPerRow;
              temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
              result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
              result.set(temp, bottomOffset);
            }
            return result;
          }
          module3.exports = {
            gpuMock
          };
        }, {}], 5: [function(require2, module3, exports3) {
          const { utils } = require2("./utils");
          function alias(name2, source) {
            const fnString = source.toString();
            return new Function(`return function ${name2} (${utils.getArgumentNamesFromString(fnString).join(", ")}) {
  ${utils.getFunctionBodyFromString(fnString)}
}`)();
          }
          module3.exports = {
            alias
          };
        }, { "./utils": 114 }], 6: [function(require2, module3, exports3) {
          const { FunctionNode } = require2("../function-node");
          class CPUFunctionNode extends FunctionNode {
            astFunction(ast, retArr) {
              if (!this.isRootKernel) {
                retArr.push("function");
                retArr.push(" ");
                retArr.push(this.name);
                retArr.push("(");
                for (let i = 0; i < this.argumentNames.length; ++i) {
                  const argumentName = this.argumentNames[i];
                  if (i > 0) {
                    retArr.push(", ");
                  }
                  retArr.push("user_");
                  retArr.push(argumentName);
                }
                retArr.push(") {\n");
              }
              for (let i = 0; i < ast.body.body.length; ++i) {
                this.astGeneric(ast.body.body[i], retArr);
                retArr.push("\n");
              }
              if (!this.isRootKernel) {
                retArr.push("}\n");
              }
              return retArr;
            }
            astReturnStatement(ast, retArr) {
              const type = this.returnType || this.getType(ast.argument);
              if (!this.returnType) {
                this.returnType = type;
              }
              if (this.isRootKernel) {
                retArr.push(this.leadingReturnStatement);
                this.astGeneric(ast.argument, retArr);
                retArr.push(";\n");
                retArr.push(this.followingReturnStatement);
                retArr.push("continue;\n");
              } else if (this.isSubKernel) {
                retArr.push(`subKernelResult_${this.name} = `);
                this.astGeneric(ast.argument, retArr);
                retArr.push(";");
                retArr.push(`return subKernelResult_${this.name};`);
              } else {
                retArr.push("return ");
                this.astGeneric(ast.argument, retArr);
                retArr.push(";");
              }
              return retArr;
            }
            astLiteral(ast, retArr) {
              if (isNaN(ast.value)) {
                throw this.astErrorOutput(
                  "Non-numeric literal not supported : " + ast.value,
                  ast
                );
              }
              retArr.push(ast.value);
              return retArr;
            }
            astBinaryExpression(ast, retArr) {
              retArr.push("(");
              this.astGeneric(ast.left, retArr);
              retArr.push(ast.operator);
              this.astGeneric(ast.right, retArr);
              retArr.push(")");
              return retArr;
            }
            astIdentifierExpression(idtNode, retArr) {
              if (idtNode.type !== "Identifier") {
                throw this.astErrorOutput(
                  "IdentifierExpression - not an Identifier",
                  idtNode
                );
              }
              switch (idtNode.name) {
                case "Infinity":
                  retArr.push("Infinity");
                  break;
                default:
                  if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
                    retArr.push("constants_" + idtNode.name);
                  } else {
                    retArr.push("user_" + idtNode.name);
                  }
              }
              return retArr;
            }
            astForStatement(forNode, retArr) {
              if (forNode.type !== "ForStatement") {
                throw this.astErrorOutput("Invalid for statement", forNode);
              }
              const initArr = [];
              const testArr = [];
              const updateArr = [];
              const bodyArr = [];
              let isSafe = null;
              if (forNode.init) {
                this.pushState("in-for-loop-init");
                this.astGeneric(forNode.init, initArr);
                for (let i = 0; i < initArr.length; i++) {
                  if (initArr[i].includes && initArr[i].includes(",")) {
                    isSafe = false;
                  }
                }
                this.popState("in-for-loop-init");
              } else {
                isSafe = false;
              }
              if (forNode.test) {
                this.astGeneric(forNode.test, testArr);
              } else {
                isSafe = false;
              }
              if (forNode.update) {
                this.astGeneric(forNode.update, updateArr);
              } else {
                isSafe = false;
              }
              if (forNode.body) {
                this.pushState("loop-body");
                this.astGeneric(forNode.body, bodyArr);
                this.popState("loop-body");
              }
              if (isSafe === null) {
                isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
              }
              if (isSafe) {
                retArr.push(`for (${initArr.join("")};${testArr.join("")};${updateArr.join("")}){
`);
                retArr.push(bodyArr.join(""));
                retArr.push("}\n");
              } else {
                const iVariableName = this.getInternalVariableName("safeI");
                if (initArr.length > 0) {
                  retArr.push(initArr.join(""), ";\n");
                }
                retArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){
`);
                if (testArr.length > 0) {
                  retArr.push(`if (!${testArr.join("")}) break;
`);
                }
                retArr.push(bodyArr.join(""));
                retArr.push(`
${updateArr.join("")};`);
                retArr.push("}\n");
              }
              return retArr;
            }
            astWhileStatement(whileNode, retArr) {
              if (whileNode.type !== "WhileStatement") {
                throw this.astErrorOutput(
                  "Invalid while statement",
                  whileNode
                );
              }
              retArr.push("for (let i = 0; i < LOOP_MAX; i++) {");
              retArr.push("if (");
              this.astGeneric(whileNode.test, retArr);
              retArr.push(") {\n");
              this.astGeneric(whileNode.body, retArr);
              retArr.push("} else {\n");
              retArr.push("break;\n");
              retArr.push("}\n");
              retArr.push("}\n");
              return retArr;
            }
            astDoWhileStatement(doWhileNode, retArr) {
              if (doWhileNode.type !== "DoWhileStatement") {
                throw this.astErrorOutput(
                  "Invalid while statement",
                  doWhileNode
                );
              }
              retArr.push("for (let i = 0; i < LOOP_MAX; i++) {");
              this.astGeneric(doWhileNode.body, retArr);
              retArr.push("if (!");
              this.astGeneric(doWhileNode.test, retArr);
              retArr.push(") {\n");
              retArr.push("break;\n");
              retArr.push("}\n");
              retArr.push("}\n");
              return retArr;
            }
            astAssignmentExpression(assNode, retArr) {
              const declaration = this.getDeclaration(assNode.left);
              if (declaration && !declaration.assignable) {
                throw this.astErrorOutput(`Variable ${assNode.left.name} is not assignable here`, assNode);
              }
              this.astGeneric(assNode.left, retArr);
              retArr.push(assNode.operator);
              this.astGeneric(assNode.right, retArr);
              return retArr;
            }
            astBlockStatement(bNode, retArr) {
              if (this.isState("loop-body")) {
                this.pushState("block-body");
                for (let i = 0; i < bNode.body.length; i++) {
                  this.astGeneric(bNode.body[i], retArr);
                }
                this.popState("block-body");
              } else {
                retArr.push("{\n");
                for (let i = 0; i < bNode.body.length; i++) {
                  this.astGeneric(bNode.body[i], retArr);
                }
                retArr.push("}\n");
              }
              return retArr;
            }
            astVariableDeclaration(varDecNode, retArr) {
              retArr.push(`${varDecNode.kind} `);
              const { declarations } = varDecNode;
              for (let i = 0; i < declarations.length; i++) {
                if (i > 0) {
                  retArr.push(",");
                }
                const declaration = declarations[i];
                const info = this.getDeclaration(declaration.id);
                if (!info.valueType) {
                  info.valueType = this.getType(declaration.init);
                }
                this.astGeneric(declaration, retArr);
              }
              if (!this.isState("in-for-loop-init")) {
                retArr.push(";");
              }
              return retArr;
            }
            astIfStatement(ifNode, retArr) {
              retArr.push("if (");
              this.astGeneric(ifNode.test, retArr);
              retArr.push(")");
              if (ifNode.consequent.type === "BlockStatement") {
                this.astGeneric(ifNode.consequent, retArr);
              } else {
                retArr.push(" {\n");
                this.astGeneric(ifNode.consequent, retArr);
                retArr.push("\n}\n");
              }
              if (ifNode.alternate) {
                retArr.push("else ");
                if (ifNode.alternate.type === "BlockStatement" || ifNode.alternate.type === "IfStatement") {
                  this.astGeneric(ifNode.alternate, retArr);
                } else {
                  retArr.push(" {\n");
                  this.astGeneric(ifNode.alternate, retArr);
                  retArr.push("\n}\n");
                }
              }
              return retArr;
            }
            astSwitchStatement(ast, retArr) {
              const { discriminant, cases } = ast;
              retArr.push("switch (");
              this.astGeneric(discriminant, retArr);
              retArr.push(") {\n");
              for (let i = 0; i < cases.length; i++) {
                if (cases[i].test === null) {
                  retArr.push("default:\n");
                  this.astGeneric(cases[i].consequent, retArr);
                  if (cases[i].consequent && cases[i].consequent.length > 0) {
                    retArr.push("break;\n");
                  }
                  continue;
                }
                retArr.push("case ");
                this.astGeneric(cases[i].test, retArr);
                retArr.push(":\n");
                if (cases[i].consequent && cases[i].consequent.length > 0) {
                  this.astGeneric(cases[i].consequent, retArr);
                  retArr.push("break;\n");
                }
              }
              retArr.push("\n}");
            }
            astThisExpression(tNode, retArr) {
              retArr.push("_this");
              return retArr;
            }
            astMemberExpression(mNode, retArr) {
              const {
                signature,
                type,
                property,
                xProperty,
                yProperty,
                zProperty,
                name: name2,
                origin: origin2
              } = this.getMemberExpressionDetails(mNode);
              switch (signature) {
                case "this.thread.value":
                  retArr.push(`_this.thread.${name2}`);
                  return retArr;
                case "this.output.value":
                  switch (name2) {
                    case "x":
                      retArr.push("outputX");
                      break;
                    case "y":
                      retArr.push("outputY");
                      break;
                    case "z":
                      retArr.push("outputZ");
                      break;
                    default:
                      throw this.astErrorOutput("Unexpected expression", mNode);
                  }
                  return retArr;
                case "value":
                  throw this.astErrorOutput("Unexpected expression", mNode);
                case "value[]":
                case "value[][]":
                case "value[][][]":
                case "value.value":
                  if (origin2 === "Math") {
                    retArr.push(Math[name2]);
                    return retArr;
                  }
                  switch (property) {
                    case "r":
                      retArr.push(`user_${name2}[0]`);
                      return retArr;
                    case "g":
                      retArr.push(`user_${name2}[1]`);
                      return retArr;
                    case "b":
                      retArr.push(`user_${name2}[2]`);
                      return retArr;
                    case "a":
                      retArr.push(`user_${name2}[3]`);
                      return retArr;
                  }
                  break;
                case "this.constants.value":
                case "this.constants.value[]":
                case "this.constants.value[][]":
                case "this.constants.value[][][]":
                  break;
                case "fn()[]":
                  this.astGeneric(mNode.object, retArr);
                  retArr.push("[");
                  this.astGeneric(mNode.property, retArr);
                  retArr.push("]");
                  return retArr;
                case "fn()[][]":
                  this.astGeneric(mNode.object.object, retArr);
                  retArr.push("[");
                  this.astGeneric(mNode.object.property, retArr);
                  retArr.push("]");
                  retArr.push("[");
                  this.astGeneric(mNode.property, retArr);
                  retArr.push("]");
                  return retArr;
                default:
                  throw this.astErrorOutput("Unexpected expression", mNode);
              }
              if (!mNode.computed) {
                switch (type) {
                  case "Number":
                  case "Integer":
                  case "Float":
                  case "Boolean":
                    retArr.push(`${origin2}_${name2}`);
                    return retArr;
                }
              }
              const markupName = `${origin2}_${name2}`;
              switch (type) {
                case "Array(2)":
                case "Array(3)":
                case "Array(4)":
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                case "HTMLImageArray":
                case "ArrayTexture(1)":
                case "ArrayTexture(2)":
                case "ArrayTexture(3)":
                case "ArrayTexture(4)":
                case "HTMLImage":
                default:
                  let size;
                  let isInput;
                  if (origin2 === "constants") {
                    const constant = this.constants[name2];
                    isInput = this.constantTypes[name2] === "Input";
                    size = isInput ? constant.size : null;
                  } else {
                    isInput = this.isInput(name2);
                    size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name2)] : null;
                  }
                  retArr.push(`${markupName}`);
                  if (zProperty && yProperty) {
                    if (isInput) {
                      retArr.push("[(");
                      this.astGeneric(zProperty, retArr);
                      retArr.push(`*${this.dynamicArguments ? "(outputY * outputX)" : size[1] * size[0]})+(`);
                      this.astGeneric(yProperty, retArr);
                      retArr.push(`*${this.dynamicArguments ? "outputX" : size[0]})+`);
                      this.astGeneric(xProperty, retArr);
                      retArr.push("]");
                    } else {
                      retArr.push("[");
                      this.astGeneric(zProperty, retArr);
                      retArr.push("]");
                      retArr.push("[");
                      this.astGeneric(yProperty, retArr);
                      retArr.push("]");
                      retArr.push("[");
                      this.astGeneric(xProperty, retArr);
                      retArr.push("]");
                    }
                  } else if (yProperty) {
                    if (isInput) {
                      retArr.push("[(");
                      this.astGeneric(yProperty, retArr);
                      retArr.push(`*${this.dynamicArguments ? "outputX" : size[0]})+`);
                      this.astGeneric(xProperty, retArr);
                      retArr.push("]");
                    } else {
                      retArr.push("[");
                      this.astGeneric(yProperty, retArr);
                      retArr.push("]");
                      retArr.push("[");
                      this.astGeneric(xProperty, retArr);
                      retArr.push("]");
                    }
                  } else if (typeof xProperty !== "undefined") {
                    retArr.push("[");
                    this.astGeneric(xProperty, retArr);
                    retArr.push("]");
                  }
              }
              return retArr;
            }
            astCallExpression(ast, retArr) {
              if (ast.type !== "CallExpression") {
                throw this.astErrorOutput("Unknown CallExpression", ast);
              }
              let functionName = this.astMemberExpressionUnroll(ast.callee);
              if (this.calledFunctions.indexOf(functionName) < 0) {
                this.calledFunctions.push(functionName);
              }
              const isMathFunction = this.isAstMathFunction(ast);
              if (this.onFunctionCall) {
                this.onFunctionCall(this.name, functionName, ast.arguments);
              }
              retArr.push(functionName);
              retArr.push("(");
              const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];
              for (let i = 0; i < ast.arguments.length; ++i) {
                const argument = ast.arguments[i];
                let argumentType = this.getType(argument);
                if (!targetTypes[i]) {
                  this.triggerImplyArgumentType(functionName, i, argumentType, this);
                }
                if (i > 0) {
                  retArr.push(", ");
                }
                this.astGeneric(argument, retArr);
              }
              retArr.push(")");
              return retArr;
            }
            astArrayExpression(arrNode, retArr) {
              const returnType = this.getType(arrNode);
              const arrLen = arrNode.elements.length;
              const elements = [];
              for (let i = 0; i < arrLen; ++i) {
                const element = [];
                this.astGeneric(arrNode.elements[i], element);
                elements.push(element.join(""));
              }
              switch (returnType) {
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                  retArr.push(`[${elements.join(", ")}]`);
                  break;
                default:
                  retArr.push(`new Float32Array([${elements.join(", ")}])`);
              }
              return retArr;
            }
            astDebuggerStatement(arrNode, retArr) {
              retArr.push("debugger;");
              return retArr;
            }
          }
          module3.exports = {
            CPUFunctionNode
          };
        }, { "../function-node": 10 }], 7: [function(require2, module3, exports3) {
          const { utils } = require2("../../utils");
          function constantsToString(constants, types) {
            const results = [];
            for (const name2 in types) {
              if (!types.hasOwnProperty(name2)) continue;
              const type = types[name2];
              const constant = constants[name2];
              switch (type) {
                case "Number":
                case "Integer":
                case "Float":
                case "Boolean":
                  results.push(`${name2}:${constant}`);
                  break;
                case "Array(2)":
                case "Array(3)":
                case "Array(4)":
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                  results.push(`${name2}:new ${constant.constructor.name}(${JSON.stringify(Array.from(constant))})`);
                  break;
              }
            }
            return `{ ${results.join()} }`;
          }
          function cpuKernelString(cpuKernel, name2) {
            const header = [];
            const thisProperties = [];
            const beforeReturn = [];
            const useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());
            header.push(
              "  const { context, canvas, constants: incomingConstants } = settings;",
              `  const output = new Int32Array(${JSON.stringify(Array.from(cpuKernel.output))});`,
              `  const _constantTypes = ${JSON.stringify(cpuKernel.constantTypes)};`,
              `  const _constants = ${constantsToString(cpuKernel.constants, cpuKernel.constantTypes)};`
            );
            thisProperties.push(
              "    constants: _constants,",
              "    context,",
              "    output,",
              "    thread: {x: 0, y: 0, z: 0},"
            );
            if (cpuKernel.graphical) {
              header.push(`  const _imageData = context.createImageData(${cpuKernel.output[0]}, ${cpuKernel.output[1]});`);
              header.push(`  const _colorData = new Uint8ClampedArray(${cpuKernel.output[0]} * ${cpuKernel.output[1]} * 4);`);
              const colorFn = utils.flattenFunctionToString((useFunctionKeyword ? "function " : "") + cpuKernel.color.toString(), {
                thisLookup: (propertyName) => {
                  switch (propertyName) {
                    case "_colorData":
                      return "_colorData";
                    case "_imageData":
                      return "_imageData";
                    case "output":
                      return "output";
                    case "thread":
                      return "this.thread";
                  }
                  return JSON.stringify(cpuKernel[propertyName]);
                },
                findDependency: (object, name3) => {
                  return null;
                }
              });
              const getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? "function " : "") + cpuKernel.getPixels.toString(), {
                thisLookup: (propertyName) => {
                  switch (propertyName) {
                    case "_colorData":
                      return "_colorData";
                    case "_imageData":
                      return "_imageData";
                    case "output":
                      return "output";
                    case "thread":
                      return "this.thread";
                  }
                  return JSON.stringify(cpuKernel[propertyName]);
                },
                findDependency: () => {
                  return null;
                }
              });
              thisProperties.push(
                "    _imageData,",
                "    _colorData,",
                `    color: ${colorFn},`
              );
              beforeReturn.push(
                `  kernel.getPixels = ${getPixelsFn};`
              );
            }
            const constantTypes = [];
            const constantKeys = Object.keys(cpuKernel.constantTypes);
            for (let i = 0; i < constantKeys.length; i++) {
              constantTypes.push(cpuKernel.constantTypes[constantKeys]);
            }
            if (cpuKernel.argumentTypes.indexOf("HTMLImageArray") !== -1 || constantTypes.indexOf("HTMLImageArray") !== -1) {
              const flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? "function " : "") + cpuKernel._imageTo3DArray.toString(), {
                doNotDefine: ["canvas"],
                findDependency: (object, name3) => {
                  if (object === "this") {
                    return (useFunctionKeyword ? "function " : "") + cpuKernel[name3].toString();
                  }
                  return null;
                },
                thisLookup: (propertyName) => {
                  switch (propertyName) {
                    case "canvas":
                      return;
                    case "context":
                      return "context";
                  }
                }
              });
              beforeReturn.push(flattenedImageTo3DArray);
              thisProperties.push(`    _mediaTo2DArray,`);
              thisProperties.push(`    _imageTo3DArray,`);
            } else if (cpuKernel.argumentTypes.indexOf("HTMLImage") !== -1 || constantTypes.indexOf("HTMLImage") !== -1) {
              const flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? "function " : "") + cpuKernel._mediaTo2DArray.toString(), {
                findDependency: (object, name3) => {
                  return null;
                },
                thisLookup: (propertyName) => {
                  switch (propertyName) {
                    case "canvas":
                      return "settings.canvas";
                    case "context":
                      return "settings.context";
                  }
                  throw new Error("unhandled thisLookup");
                }
              });
              beforeReturn.push(flattenedImageTo2DArray);
              thisProperties.push(`    _mediaTo2DArray,`);
            }
            return `function(settings) {
${header.join("\n")}
  for (const p in _constantTypes) {
    if (!_constantTypes.hasOwnProperty(p)) continue;
    const type = _constantTypes[p];
    switch (type) {
      case 'Number':
      case 'Integer':
      case 'Float':
      case 'Boolean':
      case 'Array(2)':
      case 'Array(3)':
      case 'Array(4)':
      case 'Matrix(2)':
      case 'Matrix(3)':
      case 'Matrix(4)':
        if (incomingConstants.hasOwnProperty(p)) {
          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');
        }
        continue;
    }
    if (!incomingConstants.hasOwnProperty(p)) {
      throw new Error('constant ' + p + ' not found');
    }
    _constants[p] = incomingConstants[p];
  }
  const kernel = (function() {
${cpuKernel._kernelString}
  })
    .apply({ ${thisProperties.join("\n")} });
  ${beforeReturn.join("\n")}
  return kernel;
}`;
          }
          module3.exports = {
            cpuKernelString
          };
        }, { "../../utils": 114 }], 8: [function(require2, module3, exports3) {
          const { Kernel } = require2("../kernel");
          const { FunctionBuilder } = require2("../function-builder");
          const { CPUFunctionNode } = require2("./function-node");
          const { utils } = require2("../../utils");
          const { cpuKernelString } = require2("./kernel-string");
          class CPUKernel extends Kernel {
            static getFeatures() {
              return this.features;
            }
            static get features() {
              return Object.freeze({
                kernelMap: true,
                isIntegerDivisionAccurate: true
              });
            }
            static get isSupported() {
              return true;
            }
            static isContextMatch(context) {
              return false;
            }
            static get mode() {
              return "cpu";
            }
            static nativeFunctionArguments() {
              return null;
            }
            static nativeFunctionReturnType() {
              throw new Error(`Looking up native function return type not supported on ${this.name}`);
            }
            static combineKernels(combinedKernel) {
              return combinedKernel;
            }
            static getSignature(kernel, argumentTypes) {
              return "cpu" + (argumentTypes.length > 0 ? ":" + argumentTypes.join(",") : "");
            }
            constructor(source, settings) {
              super(source, settings);
              this.mergeSettings(source.settings || settings);
              this._imageData = null;
              this._colorData = null;
              this._kernelString = null;
              this._prependedString = [];
              this.thread = {
                x: 0,
                y: 0,
                z: 0
              };
              this.translatedSources = null;
            }
            initCanvas() {
              if (typeof document !== "undefined") {
                return document.createElement("canvas");
              } else if (typeof OffscreenCanvas !== "undefined") {
                return new OffscreenCanvas(0, 0);
              }
            }
            initContext() {
              if (!this.canvas) return null;
              return this.canvas.getContext("2d");
            }
            initPlugins(settings) {
              return [];
            }
            validateSettings(args) {
              if (!this.output || this.output.length === 0) {
                if (args.length !== 1) {
                  throw new Error("Auto output only supported for kernels with only one input");
                }
                const argType = utils.getVariableType(args[0], this.strictIntegers);
                if (argType === "Array") {
                  this.output = utils.getDimensions(argType);
                } else if (argType === "NumberTexture" || argType === "ArrayTexture(4)") {
                  this.output = args[0].output;
                } else {
                  throw new Error("Auto output not supported for input type: " + argType);
                }
              }
              if (this.graphical) {
                if (this.output.length !== 2) {
                  throw new Error("Output must have 2 dimensions on graphical mode");
                }
              }
              this.checkOutput();
            }
            translateSource() {
              this.leadingReturnStatement = this.output.length > 1 ? "resultX[x] = " : "result[x] = ";
              if (this.subKernels) {
                const followingReturnStatement = [];
                for (let i = 0; i < this.subKernels.length; i++) {
                  const {
                    name: name2
                  } = this.subKernels[i];
                  followingReturnStatement.push(this.output.length > 1 ? `resultX_${name2}[x] = subKernelResult_${name2};
` : `result_${name2}[x] = subKernelResult_${name2};
`);
                }
                this.followingReturnStatement = followingReturnStatement.join("");
              }
              const functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);
              this.translatedSources = functionBuilder.getPrototypes("kernel");
              if (!this.graphical && !this.returnType) {
                this.returnType = functionBuilder.getKernelResultType();
              }
            }
            build() {
              if (this.built) return;
              this.setupConstants();
              this.setupArguments(arguments);
              this.validateSettings(arguments);
              this.translateSource();
              if (this.graphical) {
                const {
                  canvas,
                  output
                } = this;
                if (!canvas) {
                  throw new Error("no canvas available for using graphical output");
                }
                const width = output[0];
                const height = output[1] || 1;
                canvas.width = width;
                canvas.height = height;
                this._imageData = this.context.createImageData(width, height);
                this._colorData = new Uint8ClampedArray(width * height * 4);
              }
              const kernelString = this.getKernelString();
              this.kernelString = kernelString;
              if (this.debug) {
                console.log("Function output:");
                console.log(kernelString);
              }
              try {
                this.run = new Function([], kernelString).bind(this)();
              } catch (e) {
                console.error("An error occurred compiling the javascript: ", e);
              }
              this.buildSignature(arguments);
              this.built = true;
            }
            color(r, g, b, a) {
              if (typeof a === "undefined") {
                a = 1;
              }
              r = Math.floor(r * 255);
              g = Math.floor(g * 255);
              b = Math.floor(b * 255);
              a = Math.floor(a * 255);
              const width = this.output[0];
              const height = this.output[1];
              const x = this.thread.x;
              const y = height - this.thread.y - 1;
              const index = x + y * width;
              this._colorData[index * 4 + 0] = r;
              this._colorData[index * 4 + 1] = g;
              this._colorData[index * 4 + 2] = b;
              this._colorData[index * 4 + 3] = a;
            }
            getKernelString() {
              if (this._kernelString !== null) return this._kernelString;
              let kernelThreadString = null;
              let {
                translatedSources
              } = this;
              if (translatedSources.length > 1) {
                translatedSources = translatedSources.filter((fn) => {
                  if (/^function/.test(fn)) return fn;
                  kernelThreadString = fn;
                  return false;
                });
              } else {
                kernelThreadString = translatedSources.shift();
              }
              return this._kernelString = `  const LOOP_MAX = ${this._getLoopMaxString()};
  ${this.injectedNative || ""}
  const _this = this;
  ${this._resultKernelHeader()}
  ${this._processConstants()}
  return (${this.argumentNames.map((argumentName) => "user_" + argumentName).join(", ")}) => {
    ${this._prependedString.join("")}
    ${this._earlyThrows()}
    ${this._processArguments()}
    ${this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString)}
    ${translatedSources.length > 0 ? translatedSources.join("\n") : ""}
  };`;
            }
            toString() {
              return cpuKernelString(this);
            }
            _getLoopMaxString() {
              return this.loopMaxIterations ? ` ${parseInt(this.loopMaxIterations)};` : " 1000;";
            }
            _processConstants() {
              if (!this.constants) return "";
              const result = [];
              for (let p in this.constants) {
                const type = this.constantTypes[p];
                switch (type) {
                  case "HTMLCanvas":
                  case "OffscreenCanvas":
                  case "HTMLImage":
                  case "ImageBitmap":
                  case "ImageData":
                  case "HTMLVideo":
                    result.push(`    const constants_${p} = this._mediaTo2DArray(this.constants.${p});
`);
                    break;
                  case "HTMLImageArray":
                    result.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});
`);
                    break;
                  case "Input":
                    result.push(`    const constants_${p} = this.constants.${p}.value;
`);
                    break;
                  default:
                    result.push(`    const constants_${p} = this.constants.${p};
`);
                }
              }
              return result.join("");
            }
            _earlyThrows() {
              if (this.graphical) return "";
              if (this.immutable) return "";
              if (!this.pipeline) return "";
              const arrayArguments = [];
              for (let i = 0; i < this.argumentTypes.length; i++) {
                if (this.argumentTypes[i] === "Array") {
                  arrayArguments.push(this.argumentNames[i]);
                }
              }
              if (arrayArguments.length === 0) return "";
              const checks = [];
              for (let i = 0; i < arrayArguments.length; i++) {
                const argumentName = arrayArguments[i];
                const checkSubKernels = this._mapSubKernels((subKernel) => `user_${argumentName} === result_${subKernel.name}`).join(" || ");
                checks.push(`user_${argumentName} === result${checkSubKernels ? ` || ${checkSubKernels}` : ""}`);
              }
              return `if (${checks.join(" || ")}) throw new Error('Source and destination arrays are the same.  Use immutable = true');`;
            }
            _processArguments() {
              const result = [];
              for (let i = 0; i < this.argumentTypes.length; i++) {
                const variableName = `user_${this.argumentNames[i]}`;
                switch (this.argumentTypes[i]) {
                  case "HTMLCanvas":
                  case "OffscreenCanvas":
                  case "HTMLImage":
                  case "ImageBitmap":
                  case "ImageData":
                  case "HTMLVideo":
                    result.push(`    ${variableName} = this._mediaTo2DArray(${variableName});
`);
                    break;
                  case "HTMLImageArray":
                    result.push(`    ${variableName} = this._imageTo3DArray(${variableName});
`);
                    break;
                  case "Input":
                    result.push(`    ${variableName} = ${variableName}.value;
`);
                    break;
                  case "ArrayTexture(1)":
                  case "ArrayTexture(2)":
                  case "ArrayTexture(3)":
                  case "ArrayTexture(4)":
                  case "NumberTexture":
                  case "MemoryOptimizedNumberTexture":
                    result.push(`
    if (${variableName}.toArray) {
      if (!_this.textureCache) {
        _this.textureCache = [];
        _this.arrayCache = [];
      }
      const textureIndex = _this.textureCache.indexOf(${variableName});
      if (textureIndex !== -1) {
        ${variableName} = _this.arrayCache[textureIndex];
      } else {
        _this.textureCache.push(${variableName});
        ${variableName} = ${variableName}.toArray();
        _this.arrayCache.push(${variableName});
      }
    }`);
                    break;
                }
              }
              return result.join("");
            }
            _mediaTo2DArray(media) {
              const canvas = this.canvas;
              const width = media.width > 0 ? media.width : media.videoWidth;
              const height = media.height > 0 ? media.height : media.videoHeight;
              if (canvas.width < width) {
                canvas.width = width;
              }
              if (canvas.height < height) {
                canvas.height = height;
              }
              const ctx = this.context;
              let pixelsData;
              if (media.constructor === ImageData) {
                pixelsData = media.data;
              } else {
                ctx.drawImage(media, 0, 0, width, height);
                pixelsData = ctx.getImageData(0, 0, width, height).data;
              }
              const imageArray = new Array(height);
              let index = 0;
              for (let y = height - 1; y >= 0; y--) {
                const row = imageArray[y] = new Array(width);
                for (let x = 0; x < width; x++) {
                  const pixel = new Float32Array(4);
                  pixel[0] = pixelsData[index++] / 255;
                  pixel[1] = pixelsData[index++] / 255;
                  pixel[2] = pixelsData[index++] / 255;
                  pixel[3] = pixelsData[index++] / 255;
                  row[x] = pixel;
                }
              }
              return imageArray;
            }
            getPixels(flip) {
              const [width, height] = this.output;
              return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);
            }
            _imageTo3DArray(images) {
              const imagesArray = new Array(images.length);
              for (let i = 0; i < images.length; i++) {
                imagesArray[i] = this._mediaTo2DArray(images[i]);
              }
              return imagesArray;
            }
            _resultKernelHeader() {
              if (this.graphical) return "";
              if (this.immutable) return "";
              if (!this.pipeline) return "";
              switch (this.output.length) {
                case 1:
                  return this._mutableKernel1DResults();
                case 2:
                  return this._mutableKernel2DResults();
                case 3:
                  return this._mutableKernel3DResults();
              }
            }
            _resultKernelBody(kernelString) {
              switch (this.output.length) {
                case 1:
                  return (!this.immutable && this.pipeline ? this._resultMutableKernel1DLoop(kernelString) : this._resultImmutableKernel1DLoop(kernelString)) + this._kernelOutput();
                case 2:
                  return (!this.immutable && this.pipeline ? this._resultMutableKernel2DLoop(kernelString) : this._resultImmutableKernel2DLoop(kernelString)) + this._kernelOutput();
                case 3:
                  return (!this.immutable && this.pipeline ? this._resultMutableKernel3DLoop(kernelString) : this._resultImmutableKernel3DLoop(kernelString)) + this._kernelOutput();
                default:
                  throw new Error("unsupported size kernel");
              }
            }
            _graphicalKernelBody(kernelThreadString) {
              switch (this.output.length) {
                case 2:
                  return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();
                default:
                  throw new Error("unsupported size kernel");
              }
            }
            _graphicalOutput() {
              return `
    this._imageData.data.set(this._colorData);
    this.context.putImageData(this._imageData, 0, 0);
    return;`;
            }
            _getKernelResultTypeConstructorString() {
              switch (this.returnType) {
                case "LiteralInteger":
                case "Number":
                case "Integer":
                case "Float":
                  return "Float32Array";
                case "Array(2)":
                case "Array(3)":
                case "Array(4)":
                  return "Array";
                default:
                  if (this.graphical) {
                    return "Float32Array";
                  }
                  throw new Error(`unhandled returnType ${this.returnType}`);
              }
            }
            _resultImmutableKernel1DLoop(kernelString) {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const result = new ${constructorString}(outputX);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new ${constructorString}(outputX);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}
    for (let x = 0; x < outputX; x++) {
      this.thread.x = x;
      this.thread.y = 0;
      this.thread.z = 0;
      ${kernelString}
    }`;
            }
            _mutableKernel1DResults() {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const result = new ${constructorString}(outputX);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new ${constructorString}(outputX);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}`;
            }
            _resultMutableKernel1DLoop(kernelString) {
              return `  const outputX = _this.output[0];
    for (let x = 0; x < outputX; x++) {
      this.thread.x = x;
      this.thread.y = 0;
      this.thread.z = 0;
      ${kernelString}
    }`;
            }
            _resultImmutableKernel2DLoop(kernelString) {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    const result = new Array(outputY);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new Array(outputY);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}
    for (let y = 0; y < outputY; y++) {
      this.thread.z = 0;
      this.thread.y = y;
      const resultX = result[y] = new ${constructorString}(outputX);
      ${this._mapSubKernels((subKernel) => `const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);
`).join("")}
      for (let x = 0; x < outputX; x++) {
        this.thread.x = x;
        ${kernelString}
      }
    }`;
            }
            _mutableKernel2DResults() {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    const result = new Array(outputY);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new Array(outputY);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}
    for (let y = 0; y < outputY; y++) {
      const resultX = result[y] = new ${constructorString}(outputX);
      ${this._mapSubKernels((subKernel) => `const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);
`).join("")}
    }`;
            }
            _resultMutableKernel2DLoop(kernelString) {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    for (let y = 0; y < outputY; y++) {
      this.thread.z = 0;
      this.thread.y = y;
      const resultX = result[y];
      ${this._mapSubKernels((subKernel) => `const resultX_${subKernel.name} = result_${subKernel.name}[y] = new ${constructorString}(outputX);
`).join("")}
      for (let x = 0; x < outputX; x++) {
        this.thread.x = x;
        ${kernelString}
      }
    }`;
            }
            _graphicalKernel2DLoop(kernelString) {
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    for (let y = 0; y < outputY; y++) {
      this.thread.z = 0;
      this.thread.y = y;
      for (let x = 0; x < outputX; x++) {
        this.thread.x = x;
        ${kernelString}
      }
    }`;
            }
            _resultImmutableKernel3DLoop(kernelString) {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    const outputZ = _this.output[2];
    const result = new Array(outputZ);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new Array(outputZ);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}
    for (let z = 0; z < outputZ; z++) {
      this.thread.z = z;
      const resultY = result[z] = new Array(outputY);
      ${this._mapSubKernels((subKernel) => `const resultY_${subKernel.name} = result_${subKernel.name}[z] = new Array(outputY);
`).join("      ")}
      for (let y = 0; y < outputY; y++) {
        this.thread.y = y;
        const resultX = resultY[y] = new ${constructorString}(outputX);
        ${this._mapSubKernels((subKernel) => `const resultX_${subKernel.name} = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);
`).join("        ")}
        for (let x = 0; x < outputX; x++) {
          this.thread.x = x;
          ${kernelString}
        }
      }
    }`;
            }
            _mutableKernel3DResults() {
              const constructorString = this._getKernelResultTypeConstructorString();
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    const outputZ = _this.output[2];
    const result = new Array(outputZ);
    ${this._mapSubKernels((subKernel) => `const result_${subKernel.name} = new Array(outputZ);
`).join("    ")}
    ${this._mapSubKernels((subKernel) => `let subKernelResult_${subKernel.name};
`).join("    ")}
    for (let z = 0; z < outputZ; z++) {
      const resultY = result[z] = new Array(outputY);
      ${this._mapSubKernels((subKernel) => `const resultY_${subKernel.name} = result_${subKernel.name}[z] = new Array(outputY);
`).join("      ")}
      for (let y = 0; y < outputY; y++) {
        const resultX = resultY[y] = new ${constructorString}(outputX);
        ${this._mapSubKernels((subKernel) => `const resultX_${subKernel.name} = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);
`).join("        ")}
      }
    }`;
            }
            _resultMutableKernel3DLoop(kernelString) {
              return `  const outputX = _this.output[0];
    const outputY = _this.output[1];
    const outputZ = _this.output[2];
    for (let z = 0; z < outputZ; z++) {
      this.thread.z = z;
      const resultY = result[z];
      for (let y = 0; y < outputY; y++) {
        this.thread.y = y;
        const resultX = resultY[y];
        for (let x = 0; x < outputX; x++) {
          this.thread.x = x;
          ${kernelString}
        }
      }
    }`;
            }
            _kernelOutput() {
              if (!this.subKernels) {
                return "\n    return result;";
              }
              return `
    return {
      result: result,
      ${this.subKernels.map((subKernel) => `${subKernel.property}: result_${subKernel.name}`).join(",\n      ")}
    };`;
            }
            _mapSubKernels(fn) {
              return this.subKernels === null ? [""] : this.subKernels.map(fn);
            }
            destroy(removeCanvasReference) {
              if (removeCanvasReference) {
                delete this.canvas;
              }
            }
            static destroyContext(context) {
            }
            toJSON() {
              const json = super.toJSON();
              json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();
              return json;
            }
            setOutput(output) {
              super.setOutput(output);
              const [width, height] = this.output;
              if (this.graphical) {
                this._imageData = this.context.createImageData(width, height);
                this._colorData = new Uint8ClampedArray(width * height * 4);
              }
            }
            prependString(value2) {
              if (this._kernelString) throw new Error("Kernel already built");
              this._prependedString.push(value2);
            }
            hasPrependString(value2) {
              return this._prependedString.indexOf(value2) > -1;
            }
          }
          module3.exports = {
            CPUKernel
          };
        }, { "../../utils": 114, "../function-builder": 9, "../kernel": 36, "./function-node": 6, "./kernel-string": 7 }], 9: [function(require2, module3, exports3) {
          class FunctionBuilder {
            static fromKernel(kernel, FunctionNode, extraNodeOptions) {
              const {
                kernelArguments,
                kernelConstants,
                argumentNames,
                argumentSizes,
                argumentBitRatios,
                constants,
                constantBitRatios,
                debug,
                loopMaxIterations,
                nativeFunctions,
                output,
                optimizeFloatMemory,
                precision,
                plugins,
                source,
                subKernels,
                functions,
                leadingReturnStatement,
                followingReturnStatement,
                dynamicArguments,
                dynamicOutput
              } = kernel;
              const argumentTypes = new Array(kernelArguments.length);
              const constantTypes = {};
              for (let i = 0; i < kernelArguments.length; i++) {
                argumentTypes[i] = kernelArguments[i].type;
              }
              for (let i = 0; i < kernelConstants.length; i++) {
                const kernelConstant = kernelConstants[i];
                constantTypes[kernelConstant.name] = kernelConstant.type;
              }
              const needsArgumentType = (functionName, index) => {
                return functionBuilder.needsArgumentType(functionName, index);
              };
              const assignArgumentType = (functionName, index, type) => {
                functionBuilder.assignArgumentType(functionName, index, type);
              };
              const lookupReturnType = (functionName, ast, requestingNode) => {
                return functionBuilder.lookupReturnType(functionName, ast, requestingNode);
              };
              const lookupFunctionArgumentTypes = (functionName) => {
                return functionBuilder.lookupFunctionArgumentTypes(functionName);
              };
              const lookupFunctionArgumentName = (functionName, argumentIndex) => {
                return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);
              };
              const lookupFunctionArgumentBitRatio = (functionName, argumentName) => {
                return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);
              };
              const triggerImplyArgumentType = (functionName, i, argumentType, requestingNode) => {
                functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);
              };
              const triggerImplyArgumentBitRatio = (functionName, argumentName, calleeFunctionName, argumentIndex) => {
                functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);
              };
              const onFunctionCall = (functionName, calleeFunctionName, args) => {
                functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);
              };
              const onNestedFunction = (ast, source2) => {
                const argumentNames2 = [];
                for (let i = 0; i < ast.params.length; i++) {
                  argumentNames2.push(ast.params[i].name);
                }
                const nestedFunction = new FunctionNode(source2, Object.assign({}, nodeOptions, {
                  returnType: null,
                  ast,
                  name: ast.id.name,
                  argumentNames: argumentNames2,
                  lookupReturnType,
                  lookupFunctionArgumentTypes,
                  lookupFunctionArgumentName,
                  lookupFunctionArgumentBitRatio,
                  needsArgumentType,
                  assignArgumentType,
                  triggerImplyArgumentType,
                  triggerImplyArgumentBitRatio,
                  onFunctionCall
                }));
                nestedFunction.traceFunctionAST(ast);
                functionBuilder.addFunctionNode(nestedFunction);
              };
              const nodeOptions = Object.assign({
                isRootKernel: false,
                onNestedFunction,
                lookupReturnType,
                lookupFunctionArgumentTypes,
                lookupFunctionArgumentName,
                lookupFunctionArgumentBitRatio,
                needsArgumentType,
                assignArgumentType,
                triggerImplyArgumentType,
                triggerImplyArgumentBitRatio,
                onFunctionCall,
                optimizeFloatMemory,
                precision,
                constants,
                constantTypes,
                constantBitRatios,
                debug,
                loopMaxIterations,
                output,
                plugins,
                dynamicArguments,
                dynamicOutput
              }, extraNodeOptions || {});
              const rootNodeOptions = Object.assign({}, nodeOptions, {
                isRootKernel: true,
                name: "kernel",
                argumentNames,
                argumentTypes,
                argumentSizes,
                argumentBitRatios,
                leadingReturnStatement,
                followingReturnStatement
              });
              if (typeof source === "object" && source.functionNodes) {
                return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);
              }
              const rootNode = new FunctionNode(source, rootNodeOptions);
              let functionNodes = null;
              if (functions) {
                functionNodes = functions.map((fn) => new FunctionNode(fn.source, {
                  returnType: fn.returnType,
                  argumentTypes: fn.argumentTypes,
                  output,
                  plugins,
                  constants,
                  constantTypes,
                  constantBitRatios,
                  optimizeFloatMemory,
                  precision,
                  lookupReturnType,
                  lookupFunctionArgumentTypes,
                  lookupFunctionArgumentName,
                  lookupFunctionArgumentBitRatio,
                  needsArgumentType,
                  assignArgumentType,
                  triggerImplyArgumentType,
                  triggerImplyArgumentBitRatio,
                  onFunctionCall,
                  onNestedFunction
                }));
              }
              let subKernelNodes = null;
              if (subKernels) {
                subKernelNodes = subKernels.map((subKernel) => {
                  const { name: name2, source: source2 } = subKernel;
                  return new FunctionNode(source2, Object.assign({}, nodeOptions, {
                    name: name2,
                    isSubKernel: true,
                    isRootKernel: false
                  }));
                });
              }
              const functionBuilder = new FunctionBuilder({
                kernel,
                rootNode,
                functionNodes,
                nativeFunctions,
                subKernelNodes
              });
              return functionBuilder;
            }
            constructor(settings) {
              settings = settings || {};
              this.kernel = settings.kernel;
              this.rootNode = settings.rootNode;
              this.functionNodes = settings.functionNodes || [];
              this.subKernelNodes = settings.subKernelNodes || [];
              this.nativeFunctions = settings.nativeFunctions || [];
              this.functionMap = {};
              this.nativeFunctionNames = [];
              this.lookupChain = [];
              this.functionNodeDependencies = {};
              this.functionCalls = {};
              if (this.rootNode) {
                this.functionMap["kernel"] = this.rootNode;
              }
              if (this.functionNodes) {
                for (let i = 0; i < this.functionNodes.length; i++) {
                  this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];
                }
              }
              if (this.subKernelNodes) {
                for (let i = 0; i < this.subKernelNodes.length; i++) {
                  this.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];
                }
              }
              if (this.nativeFunctions) {
                for (let i = 0; i < this.nativeFunctions.length; i++) {
                  const nativeFunction = this.nativeFunctions[i];
                  this.nativeFunctionNames.push(nativeFunction.name);
                }
              }
            }
            addFunctionNode(functionNode) {
              if (!functionNode.name) throw new Error("functionNode.name needs set");
              this.functionMap[functionNode.name] = functionNode;
              if (functionNode.isRootKernel) {
                this.rootNode = functionNode;
              }
            }
            traceFunctionCalls(functionName, retList) {
              functionName = functionName || "kernel";
              retList = retList || [];
              if (this.nativeFunctionNames.indexOf(functionName) > -1) {
                const nativeFunctionIndex = retList.indexOf(functionName);
                if (nativeFunctionIndex === -1) {
                  retList.push(functionName);
                } else {
                  const dependantNativeFunctionName = retList.splice(nativeFunctionIndex, 1)[0];
                  retList.push(dependantNativeFunctionName);
                }
                return retList;
              }
              const functionNode = this.functionMap[functionName];
              if (functionNode) {
                const functionIndex = retList.indexOf(functionName);
                if (functionIndex === -1) {
                  retList.push(functionName);
                  functionNode.toString();
                  for (let i = 0; i < functionNode.calledFunctions.length; ++i) {
                    this.traceFunctionCalls(functionNode.calledFunctions[i], retList);
                  }
                } else {
                  const dependantFunctionName = retList.splice(functionIndex, 1)[0];
                  retList.push(dependantFunctionName);
                }
              }
              return retList;
            }
            getPrototypeString(functionName) {
              return this.getPrototypes(functionName).join("\n");
            }
            getPrototypes(functionName) {
              if (this.rootNode) {
                this.rootNode.toString();
              }
              if (functionName) {
                return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
              }
              return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));
            }
            getStringFromFunctionNames(functionList) {
              const ret = [];
              for (let i = 0; i < functionList.length; ++i) {
                const node = this.functionMap[functionList[i]];
                if (node) {
                  ret.push(this.functionMap[functionList[i]].toString());
                }
              }
              return ret.join("\n");
            }
            getPrototypesFromFunctionNames(functionList) {
              const ret = [];
              for (let i = 0; i < functionList.length; ++i) {
                const functionName = functionList[i];
                const functionIndex = this.nativeFunctionNames.indexOf(functionName);
                if (functionIndex > -1) {
                  ret.push(this.nativeFunctions[functionIndex].source);
                  continue;
                }
                const node = this.functionMap[functionName];
                if (node) {
                  ret.push(node.toString());
                }
              }
              return ret;
            }
            toJSON() {
              return this.traceFunctionCalls(this.rootNode.name).reverse().map((name2) => {
                const nativeIndex = this.nativeFunctions.indexOf(name2);
                if (nativeIndex > -1) {
                  return {
                    name: name2,
                    source: this.nativeFunctions[nativeIndex].source
                  };
                } else if (this.functionMap[name2]) {
                  return this.functionMap[name2].toJSON();
                } else {
                  throw new Error(`function ${name2} not found`);
                }
              });
            }
            fromJSON(jsonFunctionNodes, FunctionNode) {
              this.functionMap = {};
              for (let i = 0; i < jsonFunctionNodes.length; i++) {
                const jsonFunctionNode = jsonFunctionNodes[i];
                this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);
              }
              return this;
            }
            getString(functionName) {
              if (functionName) {
                return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());
              }
              return this.getStringFromFunctionNames(Object.keys(this.functionMap));
            }
            lookupReturnType(functionName, ast, requestingNode) {
              if (ast.type !== "CallExpression") {
                throw new Error(`expected ast type of "CallExpression", but is ${ast.type}`);
              }
              if (this._isNativeFunction(functionName)) {
                return this._lookupNativeFunctionReturnType(functionName);
              } else if (this._isFunction(functionName)) {
                const node = this._getFunction(functionName);
                if (node.returnType) {
                  return node.returnType;
                } else {
                  for (let i = 0; i < this.lookupChain.length; i++) {
                    if (this.lookupChain[i].ast === ast) {
                      if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {
                        const args = ast.arguments;
                        for (let j = 0; j < args.length; j++) {
                          this.lookupChain.push({
                            name: requestingNode.name,
                            ast: args[i],
                            requestingNode
                          });
                          node.argumentTypes[j] = requestingNode.getType(args[j]);
                          this.lookupChain.pop();
                        }
                        return node.returnType = node.getType(node.getJsAST());
                      }
                      throw new Error("circlical logic detected!");
                    }
                  }
                  this.lookupChain.push({
                    name: requestingNode.name,
                    ast,
                    requestingNode
                  });
                  const type = node.getType(node.getJsAST());
                  this.lookupChain.pop();
                  return node.returnType = type;
                }
              }
              return null;
            }
            _getFunction(functionName) {
              if (!this._isFunction(functionName)) {
                new Error(`Function ${functionName} not found`);
              }
              return this.functionMap[functionName];
            }
            _isFunction(functionName) {
              return Boolean(this.functionMap[functionName]);
            }
            _getNativeFunction(functionName) {
              for (let i = 0; i < this.nativeFunctions.length; i++) {
                if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];
              }
              return null;
            }
            _isNativeFunction(functionName) {
              return Boolean(this._getNativeFunction(functionName));
            }
            _lookupNativeFunctionReturnType(functionName) {
              let nativeFunction = this._getNativeFunction(functionName);
              if (nativeFunction) {
                return nativeFunction.returnType;
              }
              throw new Error(`Native function ${functionName} not found`);
            }
            lookupFunctionArgumentTypes(functionName) {
              if (this._isNativeFunction(functionName)) {
                return this._getNativeFunction(functionName).argumentTypes;
              } else if (this._isFunction(functionName)) {
                return this._getFunction(functionName).argumentTypes;
              }
              return null;
            }
            lookupFunctionArgumentName(functionName, argumentIndex) {
              return this._getFunction(functionName).argumentNames[argumentIndex];
            }
            lookupFunctionArgumentBitRatio(functionName, argumentName) {
              if (!this._isFunction(functionName)) {
                throw new Error("function not found");
              }
              if (this.rootNode.name === functionName) {
                const i2 = this.rootNode.argumentNames.indexOf(argumentName);
                if (i2 !== -1) {
                  return this.rootNode.argumentBitRatios[i2];
                }
              }
              const node = this._getFunction(functionName);
              const i = node.argumentNames.indexOf(argumentName);
              if (i === -1) {
                throw new Error("argument not found");
              }
              const bitRatio = node.argumentBitRatios[i];
              if (typeof bitRatio !== "number") {
                throw new Error("argument bit ratio not found");
              }
              return bitRatio;
            }
            needsArgumentType(functionName, i) {
              if (!this._isFunction(functionName)) return false;
              const fnNode = this._getFunction(functionName);
              return !fnNode.argumentTypes[i];
            }
            assignArgumentType(functionName, i, argumentType, requestingNode) {
              if (!this._isFunction(functionName)) return;
              const fnNode = this._getFunction(functionName);
              if (!fnNode.argumentTypes[i]) {
                fnNode.argumentTypes[i] = argumentType;
              }
            }
            assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
              const node = this._getFunction(functionName);
              if (this._isNativeFunction(calleeFunctionName)) return null;
              const calleeNode = this._getFunction(calleeFunctionName);
              const i = node.argumentNames.indexOf(argumentName);
              if (i === -1) {
                throw new Error(`Argument ${argumentName} not found in arguments from function ${functionName}`);
              }
              const bitRatio = node.argumentBitRatios[i];
              if (typeof bitRatio !== "number") {
                throw new Error(`Bit ratio for argument ${argumentName} not found in function ${functionName}`);
              }
              if (!calleeNode.argumentBitRatios) {
                calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);
              }
              const calleeBitRatio = calleeNode.argumentBitRatios[i];
              if (typeof calleeBitRatio === "number") {
                if (calleeBitRatio !== bitRatio) {
                  throw new Error(`Incompatible bit ratio found at function ${functionName} at argument ${argumentName}`);
                }
                return calleeBitRatio;
              }
              calleeNode.argumentBitRatios[i] = bitRatio;
              return bitRatio;
            }
            trackFunctionCall(functionName, calleeFunctionName, args) {
              if (!this.functionNodeDependencies[functionName]) {
                this.functionNodeDependencies[functionName] = /* @__PURE__ */ new Set();
                this.functionCalls[functionName] = [];
              }
              this.functionNodeDependencies[functionName].add(calleeFunctionName);
              this.functionCalls[functionName].push(args);
            }
            getKernelResultType() {
              return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);
            }
            getSubKernelResultType(index) {
              const subKernelNode = this.subKernelNodes[index];
              let called = false;
              for (let functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {
                const functionCall = this.rootNode.functionCalls[functionCallIndex];
                if (functionCall.ast.callee.name === subKernelNode.name) {
                  called = true;
                }
              }
              if (!called) {
                throw new Error(`SubKernel ${subKernelNode.name} never called by kernel`);
              }
              return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());
            }
            getReturnTypes() {
              const result = {
                [this.rootNode.name]: this.rootNode.getType(this.rootNode.ast)
              };
              const list = this.traceFunctionCalls(this.rootNode.name);
              for (let i = 0; i < list.length; i++) {
                const functionName = list[i];
                const functionNode = this.functionMap[functionName];
                result[functionName] = functionNode.getType(functionNode.ast);
              }
              return result;
            }
          }
          module3.exports = {
            FunctionBuilder
          };
        }, {}], 10: [function(require2, module3, exports3) {
          const acorn = require2("acorn");
          const { utils } = require2("../utils");
          const { FunctionTracer } = require2("./function-tracer");
          class FunctionNode {
            constructor(source, settings) {
              if (!source && !settings.ast) {
                throw new Error("source parameter is missing");
              }
              settings = settings || {};
              this.source = source;
              this.ast = null;
              this.name = typeof source === "string" ? settings.isRootKernel ? "kernel" : settings.name || utils.getFunctionNameFromString(source) : null;
              this.calledFunctions = [];
              this.constants = {};
              this.constantTypes = {};
              this.constantBitRatios = {};
              this.isRootKernel = false;
              this.isSubKernel = false;
              this.debug = null;
              this.functions = null;
              this.identifiers = null;
              this.contexts = null;
              this.functionCalls = null;
              this.states = [];
              this.needsArgumentType = null;
              this.assignArgumentType = null;
              this.lookupReturnType = null;
              this.lookupFunctionArgumentTypes = null;
              this.lookupFunctionArgumentBitRatio = null;
              this.triggerImplyArgumentType = null;
              this.triggerImplyArgumentBitRatio = null;
              this.onNestedFunction = null;
              this.onFunctionCall = null;
              this.optimizeFloatMemory = null;
              this.precision = null;
              this.loopMaxIterations = null;
              this.argumentNames = typeof this.source === "string" ? utils.getArgumentNamesFromString(this.source) : null;
              this.argumentTypes = [];
              this.argumentSizes = [];
              this.argumentBitRatios = null;
              this.returnType = null;
              this.output = [];
              this.plugins = null;
              this.leadingReturnStatement = null;
              this.followingReturnStatement = null;
              this.dynamicOutput = null;
              this.dynamicArguments = null;
              this.strictTypingChecking = false;
              this.fixIntegerDivisionAccuracy = null;
              if (settings) {
                for (const p in settings) {
                  if (!settings.hasOwnProperty(p)) continue;
                  if (!this.hasOwnProperty(p)) continue;
                  this[p] = settings[p];
                }
              }
              this.literalTypes = {};
              this.validate();
              this._string = null;
              this._internalVariableNames = {};
            }
            validate() {
              if (typeof this.source !== "string" && !this.ast) {
                throw new Error("this.source not a string");
              }
              if (!this.ast && !utils.isFunctionString(this.source)) {
                throw new Error("this.source not a function string");
              }
              if (!this.name) {
                throw new Error("this.name could not be set");
              }
              if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {
                throw new Error(`argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}`);
              }
              if (this.output.length < 1) {
                throw new Error("this.output is not big enough");
              }
            }
            isIdentifierConstant(name2) {
              if (!this.constants) return false;
              return this.constants.hasOwnProperty(name2);
            }
            isInput(argumentName) {
              return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === "Input";
            }
            pushState(state) {
              this.states.push(state);
            }
            popState(state) {
              if (this.state !== state) {
                throw new Error(`Cannot popState ${state} when in ${this.state}`);
              }
              this.states.pop();
            }
            isState(state) {
              return this.state === state;
            }
            get state() {
              return this.states[this.states.length - 1];
            }
            astMemberExpressionUnroll(ast) {
              if (ast.type === "Identifier") {
                return ast.name;
              } else if (ast.type === "ThisExpression") {
                return "this";
              }
              if (ast.type === "MemberExpression") {
                if (ast.object && ast.property) {
                  if (ast.object.hasOwnProperty("name") && ast.object.name !== "Math") {
                    return this.astMemberExpressionUnroll(ast.property);
                  }
                  return this.astMemberExpressionUnroll(ast.object) + "." + this.astMemberExpressionUnroll(ast.property);
                }
              }
              if (ast.hasOwnProperty("expressions")) {
                const firstExpression = ast.expressions[0];
                if (firstExpression.type === "Literal" && firstExpression.value === 0 && ast.expressions.length === 2) {
                  return this.astMemberExpressionUnroll(ast.expressions[1]);
                }
              }
              throw this.astErrorOutput("Unknown astMemberExpressionUnroll", ast);
            }
            getJsAST(inParser) {
              if (this.ast) {
                return this.ast;
              }
              if (typeof this.source === "object") {
                this.traceFunctionAST(this.source);
                return this.ast = this.source;
              }
              inParser = inParser || acorn;
              if (inParser === null) {
                throw new Error("Missing JS to AST parser");
              }
              const ast = Object.freeze(inParser.parse(`const parser_${this.name} = ${this.source};`, {
                locations: true
              }));
              const functionAST = ast.body[0].declarations[0].init;
              this.traceFunctionAST(functionAST);
              if (!ast) {
                throw new Error("Failed to parse JS code");
              }
              return this.ast = functionAST;
            }
            traceFunctionAST(ast) {
              const { contexts, declarations, functions, identifiers, functionCalls } = new FunctionTracer(ast);
              this.contexts = contexts;
              this.identifiers = identifiers;
              this.functionCalls = functionCalls;
              this.functions = functions;
              for (let i = 0; i < declarations.length; i++) {
                const declaration = declarations[i];
                const { ast: ast2, inForLoopInit, inForLoopTest } = declaration;
                const { init } = ast2;
                const dependencies = this.getDependencies(init);
                let valueType = null;
                if (inForLoopInit && inForLoopTest) {
                  valueType = "Integer";
                } else {
                  if (init) {
                    const realType = this.getType(init);
                    switch (realType) {
                      case "Integer":
                      case "Float":
                      case "Number":
                        if (init.type === "MemberExpression") {
                          valueType = realType;
                        } else {
                          valueType = "Number";
                        }
                        break;
                      case "LiteralInteger":
                        valueType = "Number";
                        break;
                      default:
                        valueType = realType;
                    }
                  }
                }
                declaration.valueType = valueType;
                declaration.dependencies = dependencies;
                declaration.isSafe = this.isSafeDependencies(dependencies);
              }
              for (let i = 0; i < functions.length; i++) {
                this.onNestedFunction(functions[i], this.source);
              }
            }
            getDeclaration(ast) {
              for (let i = 0; i < this.identifiers.length; i++) {
                const identifier = this.identifiers[i];
                if (ast === identifier.ast) {
                  return identifier.declaration;
                }
              }
              return null;
            }
            getVariableType(ast) {
              if (ast.type !== "Identifier") {
                throw new Error(`ast of ${ast.type} not "Identifier"`);
              }
              let type = null;
              const argumentIndex = this.argumentNames.indexOf(ast.name);
              if (argumentIndex === -1) {
                const declaration = this.getDeclaration(ast);
                if (declaration) {
                  return declaration.valueType;
                }
              } else {
                const argumentType = this.argumentTypes[argumentIndex];
                if (argumentType) {
                  type = argumentType;
                }
              }
              if (!type && this.strictTypingChecking) {
                throw new Error(`Declaration of ${name} not found`);
              }
              return type;
            }
            getLookupType(type) {
              if (!typeLookupMap.hasOwnProperty(type)) {
                throw new Error(`unknown typeLookupMap ${type}`);
              }
              return typeLookupMap[type];
            }
            getConstantType(constantName) {
              if (this.constantTypes[constantName]) {
                const type = this.constantTypes[constantName];
                if (type === "Float") {
                  return "Number";
                } else {
                  return type;
                }
              }
              throw new Error(`Type for constant "${constantName}" not declared`);
            }
            toString() {
              if (this._string) return this._string;
              return this._string = this.astGeneric(this.getJsAST(), []).join("").trim();
            }
            toJSON() {
              const settings = {
                source: this.source,
                name: this.name,
                constants: this.constants,
                constantTypes: this.constantTypes,
                isRootKernel: this.isRootKernel,
                isSubKernel: this.isSubKernel,
                debug: this.debug,
                output: this.output,
                loopMaxIterations: this.loopMaxIterations,
                argumentNames: this.argumentNames,
                argumentTypes: this.argumentTypes,
                argumentSizes: this.argumentSizes,
                returnType: this.returnType,
                leadingReturnStatement: this.leadingReturnStatement,
                followingReturnStatement: this.followingReturnStatement
              };
              return {
                ast: this.ast,
                settings
              };
            }
            getType(ast) {
              if (Array.isArray(ast)) {
                return this.getType(ast[ast.length - 1]);
              }
              switch (ast.type) {
                case "BlockStatement":
                  return this.getType(ast.body);
                case "ArrayExpression":
                  const childType = this.getType(ast.elements[0]);
                  switch (childType) {
                    case "Array(2)":
                    case "Array(3)":
                    case "Array(4)":
                      return `Matrix(${ast.elements.length})`;
                  }
                  return `Array(${ast.elements.length})`;
                case "Literal":
                  const literalKey = this.astKey(ast);
                  if (this.literalTypes[literalKey]) {
                    return this.literalTypes[literalKey];
                  }
                  if (Number.isInteger(ast.value)) {
                    return "LiteralInteger";
                  } else if (ast.value === true || ast.value === false) {
                    return "Boolean";
                  } else {
                    return "Number";
                  }
                case "AssignmentExpression":
                  return this.getType(ast.left);
                case "CallExpression":
                  if (this.isAstMathFunction(ast)) {
                    return "Number";
                  }
                  if (!ast.callee || !ast.callee.name) {
                    if (ast.callee.type === "SequenceExpression" && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {
                      const functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;
                      this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                      return this.lookupReturnType(functionName, ast, this);
                    }
                    if (this.getVariableSignature(ast.callee, true) === "this.color") {
                      return null;
                    }
                    if (ast.callee.type === "MemberExpression" && ast.callee.object && ast.callee.property && ast.callee.property.name && ast.arguments) {
                      const functionName = ast.callee.property.name;
                      this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                      return this.lookupReturnType(functionName, ast, this);
                    }
                    throw this.astErrorOutput("Unknown call expression", ast);
                  }
                  if (ast.callee && ast.callee.name) {
                    const functionName = ast.callee.name;
                    this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                    return this.lookupReturnType(functionName, ast, this);
                  }
                  throw this.astErrorOutput(`Unhandled getType Type "${ast.type}"`, ast);
                case "LogicalExpression":
                  return "Boolean";
                case "BinaryExpression":
                  switch (ast.operator) {
                    case "%":
                    case "/":
                      if (this.fixIntegerDivisionAccuracy) {
                        return "Number";
                      } else {
                        break;
                      }
                    case ">":
                    case "<":
                      return "Boolean";
                    case "&":
                    case "|":
                    case "^":
                    case "<<":
                    case ">>":
                    case ">>>":
                      return "Integer";
                  }
                  const type = this.getType(ast.left);
                  if (this.isState("skip-literal-correction")) return type;
                  if (type === "LiteralInteger") {
                    const rightType = this.getType(ast.right);
                    if (rightType === "LiteralInteger") {
                      if (ast.left.value % 1 === 0) {
                        return "Integer";
                      } else {
                        return "Float";
                      }
                    }
                    return rightType;
                  }
                  return typeLookupMap[type] || type;
                case "UpdateExpression":
                  return this.getType(ast.argument);
                case "UnaryExpression":
                  if (ast.operator === "~") {
                    return "Integer";
                  }
                  return this.getType(ast.argument);
                case "VariableDeclaration": {
                  const declarations = ast.declarations;
                  let lastType;
                  for (let i = 0; i < declarations.length; i++) {
                    const declaration2 = declarations[i];
                    lastType = this.getType(declaration2);
                  }
                  if (!lastType) {
                    throw this.astErrorOutput(`Unable to find type for declaration`, ast);
                  }
                  return lastType;
                }
                case "VariableDeclarator":
                  const declaration = this.getDeclaration(ast.id);
                  if (!declaration) {
                    throw this.astErrorOutput(`Unable to find declarator`, ast);
                  }
                  if (!declaration.valueType) {
                    throw this.astErrorOutput(`Unable to find declarator valueType`, ast);
                  }
                  return declaration.valueType;
                case "Identifier":
                  if (ast.name === "Infinity") {
                    return "Number";
                  }
                  if (this.isAstVariable(ast)) {
                    const signature = this.getVariableSignature(ast);
                    if (signature === "value") {
                      return this.getCheckVariableType(ast);
                    }
                  }
                  const origin2 = this.findIdentifierOrigin(ast);
                  if (origin2 && origin2.init) {
                    return this.getType(origin2.init);
                  }
                  return null;
                case "ReturnStatement":
                  return this.getType(ast.argument);
                case "MemberExpression":
                  if (this.isAstMathFunction(ast)) {
                    switch (ast.property.name) {
                      case "ceil":
                        return "Integer";
                      case "floor":
                        return "Integer";
                      case "round":
                        return "Integer";
                    }
                    return "Number";
                  }
                  if (this.isAstVariable(ast)) {
                    const variableSignature = this.getVariableSignature(ast);
                    switch (variableSignature) {
                      case "value[]":
                        return this.getLookupType(this.getCheckVariableType(ast.object));
                      case "value[][]":
                        return this.getLookupType(this.getCheckVariableType(ast.object.object));
                      case "value[][][]":
                        return this.getLookupType(this.getCheckVariableType(ast.object.object.object));
                      case "value[][][][]":
                        return this.getLookupType(this.getCheckVariableType(ast.object.object.object.object));
                      case "value.thread.value":
                      case "this.thread.value":
                        return "Integer";
                      case "this.output.value":
                        return this.dynamicOutput ? "Integer" : "LiteralInteger";
                      case "this.constants.value":
                        return this.getConstantType(ast.property.name);
                      case "this.constants.value[]":
                        return this.getLookupType(this.getConstantType(ast.object.property.name));
                      case "this.constants.value[][]":
                        return this.getLookupType(this.getConstantType(ast.object.object.property.name));
                      case "this.constants.value[][][]":
                        return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));
                      case "this.constants.value[][][][]":
                        return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));
                      case "fn()[]":
                      case "fn()[][]":
                      case "fn()[][][]":
                        return this.getLookupType(this.getType(ast.object));
                      case "value.value":
                        if (this.isAstMathVariable(ast)) {
                          return "Number";
                        }
                        switch (ast.property.name) {
                          case "r":
                          case "g":
                          case "b":
                          case "a":
                            return this.getLookupType(this.getCheckVariableType(ast.object));
                        }
                      case "[][]":
                        return "Number";
                    }
                    throw this.astErrorOutput("Unhandled getType MemberExpression", ast);
                  }
                  throw this.astErrorOutput("Unhandled getType MemberExpression", ast);
                case "ConditionalExpression":
                  return this.getType(ast.consequent);
                case "FunctionDeclaration":
                case "FunctionExpression":
                  const lastReturn = this.findLastReturn(ast.body);
                  if (lastReturn) {
                    return this.getType(lastReturn);
                  }
                  return null;
                case "IfStatement":
                  return this.getType(ast.consequent);
                case "SequenceExpression":
                  return this.getType(ast.expressions[ast.expressions.length - 1]);
                default:
                  throw this.astErrorOutput(`Unhandled getType Type "${ast.type}"`, ast);
              }
            }
            getCheckVariableType(ast) {
              const type = this.getVariableType(ast);
              if (!type) {
                throw this.astErrorOutput(`${ast.type} is not defined`, ast);
              }
              return type;
            }
            inferArgumentTypesIfNeeded(functionName, args) {
              for (let i = 0; i < args.length; i++) {
                if (!this.needsArgumentType(functionName, i)) continue;
                const type = this.getType(args[i]);
                if (!type) {
                  throw this.astErrorOutput(`Unable to infer argument ${i}`, args[i]);
                }
                this.assignArgumentType(functionName, i, type);
              }
            }
            isAstMathVariable(ast) {
              const mathProperties = [
                "E",
                "PI",
                "SQRT2",
                "SQRT1_2",
                "LN2",
                "LN10",
                "LOG2E",
                "LOG10E"
              ];
              return ast.type === "MemberExpression" && ast.object && ast.object.type === "Identifier" && ast.object.name === "Math" && ast.property && ast.property.type === "Identifier" && mathProperties.indexOf(ast.property.name) > -1;
            }
            isAstMathFunction(ast) {
              const mathFunctions = [
                "abs",
                "acos",
                "acosh",
                "asin",
                "asinh",
                "atan",
                "atan2",
                "atanh",
                "cbrt",
                "ceil",
                "clz32",
                "cos",
                "cosh",
                "expm1",
                "exp",
                "floor",
                "fround",
                "imul",
                "log",
                "log2",
                "log10",
                "log1p",
                "max",
                "min",
                "pow",
                "random",
                "round",
                "sign",
                "sin",
                "sinh",
                "sqrt",
                "tan",
                "tanh",
                "trunc"
              ];
              return ast.type === "CallExpression" && ast.callee && ast.callee.type === "MemberExpression" && ast.callee.object && ast.callee.object.type === "Identifier" && ast.callee.object.name === "Math" && ast.callee.property && ast.callee.property.type === "Identifier" && mathFunctions.indexOf(ast.callee.property.name) > -1;
            }
            isAstVariable(ast) {
              return ast.type === "Identifier" || ast.type === "MemberExpression";
            }
            isSafe(ast) {
              return this.isSafeDependencies(this.getDependencies(ast));
            }
            isSafeDependencies(dependencies) {
              return dependencies && dependencies.every ? dependencies.every((dependency) => dependency.isSafe) : true;
            }
            getDependencies(ast, dependencies, isNotSafe) {
              if (!dependencies) {
                dependencies = [];
              }
              if (!ast) return null;
              if (Array.isArray(ast)) {
                for (let i = 0; i < ast.length; i++) {
                  this.getDependencies(ast[i], dependencies, isNotSafe);
                }
                return dependencies;
              }
              switch (ast.type) {
                case "AssignmentExpression":
                  this.getDependencies(ast.left, dependencies, isNotSafe);
                  this.getDependencies(ast.right, dependencies, isNotSafe);
                  return dependencies;
                case "ConditionalExpression":
                  this.getDependencies(ast.test, dependencies, isNotSafe);
                  this.getDependencies(ast.alternate, dependencies, isNotSafe);
                  this.getDependencies(ast.consequent, dependencies, isNotSafe);
                  return dependencies;
                case "Literal":
                  dependencies.push({
                    origin: "literal",
                    value: ast.value,
                    isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)
                  });
                  break;
                case "VariableDeclarator":
                  return this.getDependencies(ast.init, dependencies, isNotSafe);
                case "Identifier":
                  const declaration = this.getDeclaration(ast);
                  if (declaration) {
                    dependencies.push({
                      name: ast.name,
                      origin: "declaration",
                      isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies)
                    });
                  } else if (this.argumentNames.indexOf(ast.name) > -1) {
                    dependencies.push({
                      name: ast.name,
                      origin: "argument",
                      isSafe: false
                    });
                  } else if (this.strictTypingChecking) {
                    throw new Error(`Cannot find identifier origin "${ast.name}"`);
                  }
                  break;
                case "FunctionDeclaration":
                  return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);
                case "ReturnStatement":
                  return this.getDependencies(ast.argument, dependencies);
                case "BinaryExpression":
                case "LogicalExpression":
                  isNotSafe = ast.operator === "/" || ast.operator === "*";
                  this.getDependencies(ast.left, dependencies, isNotSafe);
                  this.getDependencies(ast.right, dependencies, isNotSafe);
                  return dependencies;
                case "UnaryExpression":
                case "UpdateExpression":
                  return this.getDependencies(ast.argument, dependencies, isNotSafe);
                case "VariableDeclaration":
                  return this.getDependencies(ast.declarations, dependencies, isNotSafe);
                case "ArrayExpression":
                  dependencies.push({
                    origin: "declaration",
                    isSafe: true
                  });
                  return dependencies;
                case "CallExpression":
                  dependencies.push({
                    origin: "function",
                    isSafe: true
                  });
                  return dependencies;
                case "MemberExpression":
                  const details = this.getMemberExpressionDetails(ast);
                  switch (details.signature) {
                    case "value[]":
                      this.getDependencies(ast.object, dependencies, isNotSafe);
                      break;
                    case "value[][]":
                      this.getDependencies(ast.object.object, dependencies, isNotSafe);
                      break;
                    case "value[][][]":
                      this.getDependencies(ast.object.object.object, dependencies, isNotSafe);
                      break;
                    case "this.output.value":
                      if (this.dynamicOutput) {
                        dependencies.push({
                          name: details.name,
                          origin: "output",
                          isSafe: false
                        });
                      }
                      break;
                  }
                  if (details) {
                    if (details.property) {
                      this.getDependencies(details.property, dependencies, isNotSafe);
                    }
                    if (details.xProperty) {
                      this.getDependencies(details.xProperty, dependencies, isNotSafe);
                    }
                    if (details.yProperty) {
                      this.getDependencies(details.yProperty, dependencies, isNotSafe);
                    }
                    if (details.zProperty) {
                      this.getDependencies(details.zProperty, dependencies, isNotSafe);
                    }
                    return dependencies;
                  }
                case "SequenceExpression":
                  return this.getDependencies(ast.expressions, dependencies, isNotSafe);
                default:
                  throw this.astErrorOutput(`Unhandled type ${ast.type} in getDependencies`, ast);
              }
              return dependencies;
            }
            getVariableSignature(ast, returnRawValue) {
              if (!this.isAstVariable(ast)) {
                throw new Error(`ast of type "${ast.type}" is not a variable signature`);
              }
              if (ast.type === "Identifier") {
                return "value";
              }
              const signature = [];
              while (true) {
                if (!ast) break;
                if (ast.computed) {
                  signature.push("[]");
                } else if (ast.type === "ThisExpression") {
                  signature.unshift("this");
                } else if (ast.property && ast.property.name) {
                  if (ast.property.name === "x" || ast.property.name === "y" || ast.property.name === "z") {
                    signature.unshift(returnRawValue ? "." + ast.property.name : ".value");
                  } else if (ast.property.name === "constants" || ast.property.name === "thread" || ast.property.name === "output") {
                    signature.unshift("." + ast.property.name);
                  } else {
                    signature.unshift(returnRawValue ? "." + ast.property.name : ".value");
                  }
                } else if (ast.name) {
                  signature.unshift(returnRawValue ? ast.name : "value");
                } else if (ast.callee && ast.callee.name) {
                  signature.unshift(returnRawValue ? ast.callee.name + "()" : "fn()");
                } else if (ast.elements) {
                  signature.unshift("[]");
                } else {
                  signature.unshift("unknown");
                }
                ast = ast.object;
              }
              const signatureString = signature.join("");
              if (returnRawValue) {
                return signatureString;
              }
              const allowedExpressions = [
                "value",
                "value[]",
                "value[][]",
                "value[][][]",
                "value[][][][]",
                "value.value",
                "value.thread.value",
                "this.thread.value",
                "this.output.value",
                "this.constants.value",
                "this.constants.value[]",
                "this.constants.value[][]",
                "this.constants.value[][][]",
                "this.constants.value[][][][]",
                "fn()[]",
                "fn()[][]",
                "fn()[][][]",
                "[][]"
              ];
              if (allowedExpressions.indexOf(signatureString) > -1) {
                return signatureString;
              }
              return null;
            }
            build() {
              return this.toString().length > 0;
            }
            astGeneric(ast, retArr) {
              if (ast === null) {
                throw this.astErrorOutput("NULL ast", ast);
              } else {
                if (Array.isArray(ast)) {
                  for (let i = 0; i < ast.length; i++) {
                    this.astGeneric(ast[i], retArr);
                  }
                  return retArr;
                }
                switch (ast.type) {
                  case "FunctionDeclaration":
                    return this.astFunctionDeclaration(ast, retArr);
                  case "FunctionExpression":
                    return this.astFunctionExpression(ast, retArr);
                  case "ReturnStatement":
                    return this.astReturnStatement(ast, retArr);
                  case "Literal":
                    return this.astLiteral(ast, retArr);
                  case "BinaryExpression":
                    return this.astBinaryExpression(ast, retArr);
                  case "Identifier":
                    return this.astIdentifierExpression(ast, retArr);
                  case "AssignmentExpression":
                    return this.astAssignmentExpression(ast, retArr);
                  case "ExpressionStatement":
                    return this.astExpressionStatement(ast, retArr);
                  case "EmptyStatement":
                    return this.astEmptyStatement(ast, retArr);
                  case "BlockStatement":
                    return this.astBlockStatement(ast, retArr);
                  case "IfStatement":
                    return this.astIfStatement(ast, retArr);
                  case "SwitchStatement":
                    return this.astSwitchStatement(ast, retArr);
                  case "BreakStatement":
                    return this.astBreakStatement(ast, retArr);
                  case "ContinueStatement":
                    return this.astContinueStatement(ast, retArr);
                  case "ForStatement":
                    return this.astForStatement(ast, retArr);
                  case "WhileStatement":
                    return this.astWhileStatement(ast, retArr);
                  case "DoWhileStatement":
                    return this.astDoWhileStatement(ast, retArr);
                  case "VariableDeclaration":
                    return this.astVariableDeclaration(ast, retArr);
                  case "VariableDeclarator":
                    return this.astVariableDeclarator(ast, retArr);
                  case "ThisExpression":
                    return this.astThisExpression(ast, retArr);
                  case "SequenceExpression":
                    return this.astSequenceExpression(ast, retArr);
                  case "UnaryExpression":
                    return this.astUnaryExpression(ast, retArr);
                  case "UpdateExpression":
                    return this.astUpdateExpression(ast, retArr);
                  case "LogicalExpression":
                    return this.astLogicalExpression(ast, retArr);
                  case "MemberExpression":
                    return this.astMemberExpression(ast, retArr);
                  case "CallExpression":
                    return this.astCallExpression(ast, retArr);
                  case "ArrayExpression":
                    return this.astArrayExpression(ast, retArr);
                  case "DebuggerStatement":
                    return this.astDebuggerStatement(ast, retArr);
                  case "ConditionalExpression":
                    return this.astConditionalExpression(ast, retArr);
                }
                throw this.astErrorOutput("Unknown ast type : " + ast.type, ast);
              }
            }
            astErrorOutput(error, ast) {
              if (typeof this.source !== "string") {
                return new Error(error);
              }
              const debugString = utils.getAstString(this.source, ast);
              const leadingSource = this.source.substr(ast.start);
              const splitLines = leadingSource.split(/\n/);
              const lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;
              return new Error(`${error} on line ${splitLines.length}, position ${lineBefore.length}:
 ${debugString}`);
            }
            astDebuggerStatement(arrNode, retArr) {
              return retArr;
            }
            astConditionalExpression(ast, retArr) {
              if (ast.type !== "ConditionalExpression") {
                throw this.astErrorOutput("Not a conditional expression", ast);
              }
              retArr.push("(");
              this.astGeneric(ast.test, retArr);
              retArr.push("?");
              this.astGeneric(ast.consequent, retArr);
              retArr.push(":");
              this.astGeneric(ast.alternate, retArr);
              retArr.push(")");
              return retArr;
            }
            astFunction(ast, retArr) {
              throw new Error(`"astFunction" not defined on ${this.constructor.name}`);
            }
            astFunctionDeclaration(ast, retArr) {
              if (this.isChildFunction(ast)) {
                return retArr;
              }
              return this.astFunction(ast, retArr);
            }
            astFunctionExpression(ast, retArr) {
              if (this.isChildFunction(ast)) {
                return retArr;
              }
              return this.astFunction(ast, retArr);
            }
            isChildFunction(ast) {
              for (let i = 0; i < this.functions.length; i++) {
                if (this.functions[i] === ast) {
                  return true;
                }
              }
              return false;
            }
            astReturnStatement(ast, retArr) {
              return retArr;
            }
            astLiteral(ast, retArr) {
              this.literalTypes[this.astKey(ast)] = "Number";
              return retArr;
            }
            astBinaryExpression(ast, retArr) {
              return retArr;
            }
            astIdentifierExpression(ast, retArr) {
              return retArr;
            }
            astAssignmentExpression(ast, retArr) {
              return retArr;
            }
            astExpressionStatement(esNode, retArr) {
              this.astGeneric(esNode.expression, retArr);
              retArr.push(";");
              return retArr;
            }
            astEmptyStatement(eNode, retArr) {
              return retArr;
            }
            astBlockStatement(ast, retArr) {
              return retArr;
            }
            astIfStatement(ast, retArr) {
              return retArr;
            }
            astSwitchStatement(ast, retArr) {
              return retArr;
            }
            astBreakStatement(brNode, retArr) {
              retArr.push("break;");
              return retArr;
            }
            astContinueStatement(crNode, retArr) {
              retArr.push("continue;\n");
              return retArr;
            }
            astForStatement(ast, retArr) {
              return retArr;
            }
            astWhileStatement(ast, retArr) {
              return retArr;
            }
            astDoWhileStatement(ast, retArr) {
              return retArr;
            }
            astVariableDeclarator(iVarDecNode, retArr) {
              this.astGeneric(iVarDecNode.id, retArr);
              if (iVarDecNode.init !== null) {
                retArr.push("=");
                this.astGeneric(iVarDecNode.init, retArr);
              }
              return retArr;
            }
            astThisExpression(ast, retArr) {
              return retArr;
            }
            astSequenceExpression(sNode, retArr) {
              const { expressions } = sNode;
              const sequenceResult = [];
              for (let i = 0; i < expressions.length; i++) {
                const expression = expressions[i];
                const expressionResult = [];
                this.astGeneric(expression, expressionResult);
                sequenceResult.push(expressionResult.join(""));
              }
              if (sequenceResult.length > 1) {
                retArr.push("(", sequenceResult.join(","), ")");
              } else {
                retArr.push(sequenceResult[0]);
              }
              return retArr;
            }
            astUnaryExpression(uNode, retArr) {
              const unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);
              if (unaryResult) {
                return retArr;
              }
              if (uNode.prefix) {
                retArr.push(uNode.operator);
                this.astGeneric(uNode.argument, retArr);
              } else {
                this.astGeneric(uNode.argument, retArr);
                retArr.push(uNode.operator);
              }
              return retArr;
            }
            checkAndUpconvertBitwiseUnary(uNode, retArr) {
            }
            astUpdateExpression(uNode, retArr) {
              if (uNode.prefix) {
                retArr.push(uNode.operator);
                this.astGeneric(uNode.argument, retArr);
              } else {
                this.astGeneric(uNode.argument, retArr);
                retArr.push(uNode.operator);
              }
              return retArr;
            }
            astLogicalExpression(logNode, retArr) {
              retArr.push("(");
              this.astGeneric(logNode.left, retArr);
              retArr.push(logNode.operator);
              this.astGeneric(logNode.right, retArr);
              retArr.push(")");
              return retArr;
            }
            astMemberExpression(ast, retArr) {
              return retArr;
            }
            astCallExpression(ast, retArr) {
              return retArr;
            }
            astArrayExpression(ast, retArr) {
              return retArr;
            }
            getMemberExpressionDetails(ast) {
              if (ast.type !== "MemberExpression") {
                throw this.astErrorOutput(`Expression ${ast.type} not a MemberExpression`, ast);
              }
              let name2 = null;
              let type = null;
              const variableSignature = this.getVariableSignature(ast);
              switch (variableSignature) {
                case "value":
                  return null;
                case "value.thread.value":
                case "this.thread.value":
                case "this.output.value":
                  return {
                    signature: variableSignature,
                    type: "Integer",
                    name: ast.property.name
                  };
                case "value[]":
                  if (typeof ast.object.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.name;
                  return {
                    name: name2,
                    origin: "user",
                    signature: variableSignature,
                    type: this.getVariableType(ast.object),
                    xProperty: ast.property
                  };
                case "value[][]":
                  if (typeof ast.object.object.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.object.name;
                  return {
                    name: name2,
                    origin: "user",
                    signature: variableSignature,
                    type: this.getVariableType(ast.object.object),
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                case "value[][][]":
                  if (typeof ast.object.object.object.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.object.object.name;
                  return {
                    name: name2,
                    origin: "user",
                    signature: variableSignature,
                    type: this.getVariableType(ast.object.object.object),
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                case "value[][][][]":
                  if (typeof ast.object.object.object.object.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.object.object.object.name;
                  return {
                    name: name2,
                    origin: "user",
                    signature: variableSignature,
                    type: this.getVariableType(ast.object.object.object.object),
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                case "value.value":
                  if (typeof ast.property.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  if (this.isAstMathVariable(ast)) {
                    name2 = ast.property.name;
                    return {
                      name: name2,
                      origin: "Math",
                      type: "Number",
                      signature: variableSignature
                    };
                  }
                  switch (ast.property.name) {
                    case "r":
                    case "g":
                    case "b":
                    case "a":
                      name2 = ast.object.name;
                      return {
                        name: name2,
                        property: ast.property.name,
                        origin: "user",
                        signature: variableSignature,
                        type: "Number"
                      };
                    default:
                      throw this.astErrorOutput("Unexpected expression", ast);
                  }
                case "this.constants.value":
                  if (typeof ast.property.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.property.name;
                  type = this.getConstantType(name2);
                  if (!type) {
                    throw this.astErrorOutput("Constant has no type", ast);
                  }
                  return {
                    name: name2,
                    type,
                    origin: "constants",
                    signature: variableSignature
                  };
                case "this.constants.value[]":
                  if (typeof ast.object.property.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.property.name;
                  type = this.getConstantType(name2);
                  if (!type) {
                    throw this.astErrorOutput("Constant has no type", ast);
                  }
                  return {
                    name: name2,
                    type,
                    origin: "constants",
                    signature: variableSignature,
                    xProperty: ast.property
                  };
                case "this.constants.value[][]": {
                  if (typeof ast.object.object.property.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.object.property.name;
                  type = this.getConstantType(name2);
                  if (!type) {
                    throw this.astErrorOutput("Constant has no type", ast);
                  }
                  return {
                    name: name2,
                    type,
                    origin: "constants",
                    signature: variableSignature,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }
                case "this.constants.value[][][]": {
                  if (typeof ast.object.object.object.property.name !== "string") {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  name2 = ast.object.object.object.property.name;
                  type = this.getConstantType(name2);
                  if (!type) {
                    throw this.astErrorOutput("Constant has no type", ast);
                  }
                  return {
                    name: name2,
                    type,
                    origin: "constants",
                    signature: variableSignature,
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }
                case "fn()[]":
                case "fn()[][]":
                case "[][]":
                  return {
                    signature: variableSignature,
                    property: ast.property
                  };
                default:
                  throw this.astErrorOutput("Unexpected expression", ast);
              }
            }
            findIdentifierOrigin(astToFind) {
              const stack = [this.ast];
              while (stack.length > 0) {
                const atNode = stack[0];
                if (atNode.type === "VariableDeclarator" && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {
                  return atNode;
                }
                stack.shift();
                if (atNode.argument) {
                  stack.push(atNode.argument);
                } else if (atNode.body) {
                  stack.push(atNode.body);
                } else if (atNode.declarations) {
                  stack.push(atNode.declarations);
                } else if (Array.isArray(atNode)) {
                  for (let i = 0; i < atNode.length; i++) {
                    stack.push(atNode[i]);
                  }
                }
              }
              return null;
            }
            findLastReturn(ast) {
              const stack = [ast || this.ast];
              while (stack.length > 0) {
                const atNode = stack.pop();
                if (atNode.type === "ReturnStatement") {
                  return atNode;
                }
                if (atNode.type === "FunctionDeclaration") {
                  continue;
                }
                if (atNode.argument) {
                  stack.push(atNode.argument);
                } else if (atNode.body) {
                  stack.push(atNode.body);
                } else if (atNode.declarations) {
                  stack.push(atNode.declarations);
                } else if (Array.isArray(atNode)) {
                  for (let i = 0; i < atNode.length; i++) {
                    stack.push(atNode[i]);
                  }
                } else if (atNode.consequent) {
                  stack.push(atNode.consequent);
                } else if (atNode.cases) {
                  stack.push(atNode.cases);
                }
              }
              return null;
            }
            getInternalVariableName(name2) {
              if (!this._internalVariableNames.hasOwnProperty(name2)) {
                this._internalVariableNames[name2] = 0;
              }
              this._internalVariableNames[name2]++;
              if (this._internalVariableNames[name2] === 1) {
                return name2;
              }
              return name2 + this._internalVariableNames[name2];
            }
            astKey(ast, separator = ",") {
              if (!ast.start || !ast.end) throw new Error("AST start and end needed");
              return `${ast.start}${separator}${ast.end}`;
            }
          }
          const typeLookupMap = {
            "Number": "Number",
            "Float": "Float",
            "Integer": "Integer",
            "Array": "Number",
            "Array(2)": "Number",
            "Array(3)": "Number",
            "Array(4)": "Number",
            "Matrix(2)": "Number",
            "Matrix(3)": "Number",
            "Matrix(4)": "Number",
            "Array2D": "Number",
            "Array3D": "Number",
            "Input": "Number",
            "HTMLCanvas": "Array(4)",
            "OffscreenCanvas": "Array(4)",
            "HTMLImage": "Array(4)",
            "ImageBitmap": "Array(4)",
            "ImageData": "Array(4)",
            "HTMLVideo": "Array(4)",
            "HTMLImageArray": "Array(4)",
            "NumberTexture": "Number",
            "MemoryOptimizedNumberTexture": "Number",
            "Array1D(2)": "Array(2)",
            "Array1D(3)": "Array(3)",
            "Array1D(4)": "Array(4)",
            "Array2D(2)": "Array(2)",
            "Array2D(3)": "Array(3)",
            "Array2D(4)": "Array(4)",
            "Array3D(2)": "Array(2)",
            "Array3D(3)": "Array(3)",
            "Array3D(4)": "Array(4)",
            "ArrayTexture(1)": "Number",
            "ArrayTexture(2)": "Array(2)",
            "ArrayTexture(3)": "Array(3)",
            "ArrayTexture(4)": "Array(4)"
          };
          module3.exports = {
            FunctionNode
          };
        }, { "../utils": 114, "./function-tracer": 11, "acorn": 1 }], 11: [function(require2, module3, exports3) {
          const { utils } = require2("../utils");
          function last(array) {
            return array.length > 0 ? array[array.length - 1] : null;
          }
          const states = {
            trackIdentifiers: "trackIdentifiers",
            memberExpression: "memberExpression",
            inForLoopInit: "inForLoopInit"
          };
          class FunctionTracer {
            constructor(ast) {
              this.runningContexts = [];
              this.functionContexts = [];
              this.contexts = [];
              this.functionCalls = [];
              this.declarations = [];
              this.identifiers = [];
              this.functions = [];
              this.returnStatements = [];
              this.trackedIdentifiers = null;
              this.states = [];
              this.newFunctionContext();
              this.scan(ast);
            }
            isState(state) {
              return this.states[this.states.length - 1] === state;
            }
            hasState(state) {
              return this.states.indexOf(state) > -1;
            }
            pushState(state) {
              this.states.push(state);
            }
            popState(state) {
              if (this.isState(state)) {
                this.states.pop();
              } else {
                throw new Error(`Cannot pop the non-active state "${state}"`);
              }
            }
            get currentFunctionContext() {
              return last(this.functionContexts);
            }
            get currentContext() {
              return last(this.runningContexts);
            }
            newFunctionContext() {
              const newContext = { "@contextType": "function" };
              this.contexts.push(newContext);
              this.functionContexts.push(newContext);
            }
            newContext(run) {
              const newContext = Object.assign({ "@contextType": "const/let" }, this.currentContext);
              this.contexts.push(newContext);
              this.runningContexts.push(newContext);
              run();
              const { currentFunctionContext } = this;
              for (const p in currentFunctionContext) {
                if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;
                newContext[p] = currentFunctionContext[p];
              }
              this.runningContexts.pop();
              return newContext;
            }
            useFunctionContext(run) {
              const functionContext = last(this.functionContexts);
              this.runningContexts.push(functionContext);
              run();
              this.runningContexts.pop();
            }
            getIdentifiers(run) {
              const trackedIdentifiers = this.trackedIdentifiers = [];
              this.pushState(states.trackIdentifiers);
              run();
              this.trackedIdentifiers = null;
              this.popState(states.trackIdentifiers);
              return trackedIdentifiers;
            }
            getDeclaration(name2) {
              const { currentContext, currentFunctionContext, runningContexts } = this;
              const declaration = currentContext[name2] || currentFunctionContext[name2] || null;
              if (!declaration && currentContext === currentFunctionContext && runningContexts.length > 0) {
                const previousRunningContext = runningContexts[runningContexts.length - 2];
                if (previousRunningContext[name2]) {
                  return previousRunningContext[name2];
                }
              }
              return declaration;
            }
            scan(ast) {
              if (!ast) return;
              if (Array.isArray(ast)) {
                for (let i = 0; i < ast.length; i++) {
                  this.scan(ast[i]);
                }
                return;
              }
              switch (ast.type) {
                case "Program":
                  this.useFunctionContext(() => {
                    this.scan(ast.body);
                  });
                  break;
                case "BlockStatement":
                  this.newContext(() => {
                    this.scan(ast.body);
                  });
                  break;
                case "AssignmentExpression":
                case "LogicalExpression":
                  this.scan(ast.left);
                  this.scan(ast.right);
                  break;
                case "BinaryExpression":
                  this.scan(ast.left);
                  this.scan(ast.right);
                  break;
                case "UpdateExpression":
                  if (ast.operator === "++") {
                    const declaration = this.getDeclaration(ast.argument.name);
                    if (declaration) {
                      declaration.suggestedType = "Integer";
                    }
                  }
                  this.scan(ast.argument);
                  break;
                case "UnaryExpression":
                  this.scan(ast.argument);
                  break;
                case "VariableDeclaration":
                  if (ast.kind === "var") {
                    this.useFunctionContext(() => {
                      ast.declarations = utils.normalizeDeclarations(ast);
                      this.scan(ast.declarations);
                    });
                  } else {
                    ast.declarations = utils.normalizeDeclarations(ast);
                    this.scan(ast.declarations);
                  }
                  break;
                case "VariableDeclarator": {
                  const { currentContext } = this;
                  const inForLoopInit = this.hasState(states.inForLoopInit);
                  const declaration = {
                    ast,
                    context: currentContext,
                    name: ast.id.name,
                    origin: "declaration",
                    inForLoopInit,
                    inForLoopTest: null,
                    assignable: currentContext === this.currentFunctionContext || !inForLoopInit && !currentContext.hasOwnProperty(ast.id.name),
                    suggestedType: null,
                    valueType: null,
                    dependencies: null,
                    isSafe: null
                  };
                  if (!currentContext[ast.id.name]) {
                    currentContext[ast.id.name] = declaration;
                  }
                  this.declarations.push(declaration);
                  this.scan(ast.id);
                  this.scan(ast.init);
                  break;
                }
                case "FunctionExpression":
                case "FunctionDeclaration":
                  if (this.runningContexts.length === 0) {
                    this.scan(ast.body);
                  } else {
                    this.functions.push(ast);
                  }
                  break;
                case "IfStatement":
                  this.scan(ast.test);
                  this.scan(ast.consequent);
                  if (ast.alternate) this.scan(ast.alternate);
                  break;
                case "ForStatement": {
                  let testIdentifiers;
                  const context = this.newContext(() => {
                    this.pushState(states.inForLoopInit);
                    this.scan(ast.init);
                    this.popState(states.inForLoopInit);
                    testIdentifiers = this.getIdentifiers(() => {
                      this.scan(ast.test);
                    });
                    this.scan(ast.update);
                    this.newContext(() => {
                      this.scan(ast.body);
                    });
                  });
                  if (testIdentifiers) {
                    for (const p in context) {
                      if (p === "@contextType") continue;
                      if (testIdentifiers.indexOf(p) > -1) {
                        context[p].inForLoopTest = true;
                      }
                    }
                  }
                  break;
                }
                case "DoWhileStatement":
                case "WhileStatement":
                  this.newContext(() => {
                    this.scan(ast.body);
                    this.scan(ast.test);
                  });
                  break;
                case "Identifier": {
                  if (this.isState(states.trackIdentifiers)) {
                    this.trackedIdentifiers.push(ast.name);
                  }
                  this.identifiers.push({
                    context: this.currentContext,
                    declaration: this.getDeclaration(ast.name),
                    ast
                  });
                  break;
                }
                case "ReturnStatement":
                  this.returnStatements.push(ast);
                  this.scan(ast.argument);
                  break;
                case "MemberExpression":
                  this.pushState(states.memberExpression);
                  this.scan(ast.object);
                  this.scan(ast.property);
                  this.popState(states.memberExpression);
                  break;
                case "ExpressionStatement":
                  this.scan(ast.expression);
                  break;
                case "SequenceExpression":
                  this.scan(ast.expressions);
                  break;
                case "CallExpression":
                  this.functionCalls.push({
                    context: this.currentContext,
                    ast
                  });
                  this.scan(ast.arguments);
                  break;
                case "ArrayExpression":
                  this.scan(ast.elements);
                  break;
                case "ConditionalExpression":
                  this.scan(ast.test);
                  this.scan(ast.alternate);
                  this.scan(ast.consequent);
                  break;
                case "SwitchStatement":
                  this.scan(ast.discriminant);
                  this.scan(ast.cases);
                  break;
                case "SwitchCase":
                  this.scan(ast.test);
                  this.scan(ast.consequent);
                  break;
                case "ThisExpression":
                case "Literal":
                case "DebuggerStatement":
                case "EmptyStatement":
                case "BreakStatement":
                case "ContinueStatement":
                  break;
                default:
                  throw new Error(`unhandled type "${ast.type}"`);
              }
            }
          }
          module3.exports = {
            FunctionTracer
          };
        }, { "../utils": 114 }], 12: [function(require2, module3, exports3) {
          const { glWiretap } = require2("gl-wiretap");
          const { utils } = require2("../../utils");
          function toStringWithoutUtils(fn) {
            return fn.toString().replace("=>", "").replace(/^function /, "").replace(/utils[.]/g, "/*utils.*/");
          }
          function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {
            if (!originKernel.built) {
              originKernel.build.apply(originKernel, args);
            }
            args = args ? Array.from(args).map((arg) => {
              switch (typeof arg) {
                case "boolean":
                  return new Boolean(arg);
                case "number":
                  return new Number(arg);
                default:
                  return arg;
              }
            }) : null;
            const uploadedValues = [];
            const postResult = [];
            const context = glWiretap(originKernel.context, {
              useTrackablePrimitives: true,
              onReadPixels: (targetName) => {
                if (kernel.subKernels) {
                  if (!subKernelsResultVariableSetup) {
                    postResult.push(`    const result = { result: ${getRenderString(targetName, kernel)} };`);
                    subKernelsResultVariableSetup = true;
                  } else {
                    const property = kernel.subKernels[subKernelsResultIndex++].property;
                    postResult.push(`    result${isNaN(property) ? "." + property : `[${property}]`} = ${getRenderString(targetName, kernel)};`);
                  }
                  if (subKernelsResultIndex === kernel.subKernels.length) {
                    postResult.push("    return result;");
                  }
                  return;
                }
                if (targetName) {
                  postResult.push(`    return ${getRenderString(targetName, kernel)};`);
                } else {
                  postResult.push(`    return null;`);
                }
              },
              onUnrecognizedArgumentLookup: (argument) => {
                const argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);
                if (argumentName) {
                  return argumentName;
                }
                const constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map((key) => constants[key]) : [], context, uploadedValues);
                if (constantName) {
                  return constantName;
                }
                return null;
              }
            });
            let subKernelsResultVariableSetup = false;
            let subKernelsResultIndex = 0;
            const {
              source,
              canvas,
              output,
              pipeline,
              graphical,
              loopMaxIterations,
              constants,
              optimizeFloatMemory,
              precision,
              fixIntegerDivisionAccuracy,
              functions,
              nativeFunctions,
              subKernels,
              immutable,
              argumentTypes,
              constantTypes,
              kernelArguments,
              kernelConstants,
              tactic
            } = originKernel;
            const kernel = new Kernel(source, {
              canvas,
              context,
              checkContext: false,
              output,
              pipeline,
              graphical,
              loopMaxIterations,
              constants,
              optimizeFloatMemory,
              precision,
              fixIntegerDivisionAccuracy,
              functions,
              nativeFunctions,
              subKernels,
              immutable,
              argumentTypes,
              constantTypes,
              tactic
            });
            let result = [];
            context.setIndent(2);
            kernel.build.apply(kernel, args);
            result.push(context.toString());
            context.reset();
            kernel.kernelArguments.forEach((kernelArgument, i) => {
              switch (kernelArgument.type) {
                case "Integer":
                case "Boolean":
                case "Number":
                case "Float":
                case "Array":
                case "Array(2)":
                case "Array(3)":
                case "Array(4)":
                case "HTMLCanvas":
                case "HTMLImage":
                case "HTMLVideo":
                  context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);
                  break;
                case "HTMLImageArray":
                  for (let imageIndex = 0; imageIndex < args[i].length; imageIndex++) {
                    const arg = args[i];
                    context.insertVariable(`uploadValue_${kernelArgument.name}[${imageIndex}]`, arg[imageIndex]);
                  }
                  break;
                case "Input":
                  context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);
                  break;
                case "MemoryOptimizedNumberTexture":
                case "NumberTexture":
                case "Array1D(2)":
                case "Array1D(3)":
                case "Array1D(4)":
                case "Array2D(2)":
                case "Array2D(3)":
                case "Array2D(4)":
                case "Array3D(2)":
                case "Array3D(3)":
                case "Array3D(4)":
                case "ArrayTexture(1)":
                case "ArrayTexture(2)":
                case "ArrayTexture(3)":
                case "ArrayTexture(4)":
                  context.insertVariable(`uploadValue_${kernelArgument.name}`, args[i].texture);
                  break;
                default:
                  throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${kernelArgument.type}`);
              }
            });
            result.push("/** start of injected functions **/");
            result.push(`function ${toStringWithoutUtils(utils.flattenTo)}`);
            result.push(`function ${toStringWithoutUtils(utils.flatten2dArrayTo)}`);
            result.push(`function ${toStringWithoutUtils(utils.flatten3dArrayTo)}`);
            result.push(`function ${toStringWithoutUtils(utils.flatten4dArrayTo)}`);
            result.push(`function ${toStringWithoutUtils(utils.isArray)}`);
            if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {
              result.push(
                `  const renderOutput = function ${toStringWithoutUtils(kernel.formatValues)};`
              );
            }
            result.push("/** end of injected functions **/");
            result.push(`  const innerKernel = function (${kernel.kernelArguments.map((kernelArgument) => kernelArgument.varName).join(", ")}) {`);
            context.setIndent(4);
            kernel.run.apply(kernel, args);
            if (kernel.renderKernels) {
              kernel.renderKernels();
            } else if (kernel.renderOutput) {
              kernel.renderOutput();
            }
            result.push("    /** start setup uploads for kernel values **/");
            kernel.kernelArguments.forEach((kernelArgument) => {
              result.push("    " + kernelArgument.getStringValueHandler().split("\n").join("\n    "));
            });
            result.push("    /** end setup uploads for kernel values **/");
            result.push(context.toString());
            if (kernel.renderOutput === kernel.renderTexture) {
              context.reset();
              const framebufferName = context.getContextVariableName(kernel.framebuffer);
              if (kernel.renderKernels) {
                const results = kernel.renderKernels();
                const textureName = context.getContextVariableName(kernel.texture.texture);
                result.push(`    return {
      result: {
        texture: ${textureName},
        type: '${results.result.type}',
        toArray: ${getToArrayString(results.result, textureName, framebufferName)}
      },`);
                const { subKernels: subKernels2, mappedTextures } = kernel;
                for (let i = 0; i < subKernels2.length; i++) {
                  const texture = mappedTextures[i];
                  const subKernel = subKernels2[i];
                  const subKernelResult = results[subKernel.property];
                  const subKernelTextureName = context.getContextVariableName(texture.texture);
                  result.push(`
      ${subKernel.property}: {
        texture: ${subKernelTextureName},
        type: '${subKernelResult.type}',
        toArray: ${getToArrayString(subKernelResult, subKernelTextureName, framebufferName)}
      },`);
                }
                result.push(`    };`);
              } else {
                const rendered = kernel.renderOutput();
                const textureName = context.getContextVariableName(kernel.texture.texture);
                result.push(`    return {
        texture: ${textureName},
        type: '${rendered.type}',
        toArray: ${getToArrayString(rendered, textureName, framebufferName)}
      };`);
              }
            }
            result.push(`    ${destroyContextString ? "\n" + destroyContextString + "    " : ""}`);
            result.push(postResult.join("\n"));
            result.push("  };");
            if (kernel.graphical) {
              result.push(getGetPixelsString(kernel));
              result.push(`  innerKernel.getPixels = getPixels;`);
            }
            result.push("  return innerKernel;");
            let constantsUpload = [];
            kernelConstants.forEach((kernelConstant) => {
              constantsUpload.push(`${kernelConstant.getStringValueHandler()}`);
            });
            return `function kernel(settings) {
  const { context, constants } = settings;
  ${constantsUpload.join("")}
  ${setupContextString ? setupContextString : ""}
${result.join("\n")}
}`;
          }
          function getRenderString(targetName, kernel) {
            const readBackValue = kernel.precision === "single" ? targetName : `new Float32Array(${targetName}.buffer)`;
            if (kernel.output[2]) {
              return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]}, ${kernel.output[2]})`;
            }
            if (kernel.output[1]) {
              return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]})`;
            }
            return `renderOutput(${readBackValue}, ${kernel.output[0]})`;
          }
          function getGetPixelsString(kernel) {
            const getPixels = kernel.getPixels.toString();
            const useFunctionKeyword = !/^function/.test(getPixels);
            return utils.flattenFunctionToString(`${useFunctionKeyword ? "function " : ""}${getPixels}`, {
              findDependency: (object, name2) => {
                if (object === "utils") {
                  return `const ${name2} = ${utils[name2].toString()};`;
                }
                return null;
              },
              thisLookup: (property) => {
                if (property === "context") {
                  return null;
                }
                if (kernel.hasOwnProperty(property)) {
                  return JSON.stringify(kernel[property]);
                }
                throw new Error(`unhandled thisLookup ${property}`);
              }
            });
          }
          function getToArrayString(kernelResult, textureName, framebufferName) {
            const toArray = kernelResult.toArray.toString();
            const useFunctionKeyword = !/^function/.test(toArray);
            const flattenedFunctions = utils.flattenFunctionToString(`${useFunctionKeyword ? "function " : ""}${toArray}`, {
              findDependency: (object, name2) => {
                if (object === "utils") {
                  return `const ${name2} = ${utils[name2].toString()};`;
                } else if (object === "this") {
                  if (name2 === "framebuffer") {
                    return "";
                  }
                  return `${useFunctionKeyword ? "function " : ""}${kernelResult[name2].toString()}`;
                } else {
                  throw new Error("unhandled fromObject");
                }
              },
              thisLookup: (property, isDeclaration) => {
                if (property === "texture") {
                  return textureName;
                }
                if (property === "context") {
                  if (isDeclaration) return null;
                  return "gl";
                }
                if (kernelResult.hasOwnProperty(property)) {
                  return JSON.stringify(kernelResult[property]);
                }
                throw new Error(`unhandled thisLookup ${property}`);
              }
            });
            return `() => {
  function framebuffer() { return ${framebufferName}; };
  ${flattenedFunctions}
  return toArray();
  }`;
          }
          function findKernelValue(argument, kernelValues, values, context, uploadedValues) {
            if (argument === null) return null;
            if (kernelValues === null) return null;
            switch (typeof argument) {
              case "boolean":
              case "number":
                return null;
            }
            if (typeof HTMLImageElement !== "undefined" && argument instanceof HTMLImageElement) {
              for (let i = 0; i < kernelValues.length; i++) {
                const kernelValue = kernelValues[i];
                if (kernelValue.type !== "HTMLImageArray" && kernelValue) continue;
                if (kernelValue.uploadValue !== argument) continue;
                const variableIndex = values[i].indexOf(argument);
                if (variableIndex === -1) continue;
                const variableName = `uploadValue_${kernelValue.name}[${variableIndex}]`;
                context.insertVariable(variableName, argument);
                return variableName;
              }
            }
            for (let i = 0; i < kernelValues.length; i++) {
              const kernelValue = kernelValues[i];
              if (argument !== kernelValue.uploadValue) continue;
              const variable = `uploadValue_${kernelValue.name}`;
              context.insertVariable(variable, kernelValue);
              return variable;
            }
            return null;
          }
          module3.exports = {
            glKernelString
          };
        }, { "../../utils": 114, "gl-wiretap": 3 }], 13: [function(require2, module3, exports3) {
          const { Kernel } = require2("../kernel");
          const { utils } = require2("../../utils");
          const { GLTextureArray2Float } = require2("./texture/array-2-float");
          const { GLTextureArray2Float2D } = require2("./texture/array-2-float-2d");
          const { GLTextureArray2Float3D } = require2("./texture/array-2-float-3d");
          const { GLTextureArray3Float } = require2("./texture/array-3-float");
          const { GLTextureArray3Float2D } = require2("./texture/array-3-float-2d");
          const { GLTextureArray3Float3D } = require2("./texture/array-3-float-3d");
          const { GLTextureArray4Float } = require2("./texture/array-4-float");
          const { GLTextureArray4Float2D } = require2("./texture/array-4-float-2d");
          const { GLTextureArray4Float3D } = require2("./texture/array-4-float-3d");
          const { GLTextureFloat } = require2("./texture/float");
          const { GLTextureFloat2D } = require2("./texture/float-2d");
          const { GLTextureFloat3D } = require2("./texture/float-3d");
          const { GLTextureMemoryOptimized } = require2("./texture/memory-optimized");
          const { GLTextureMemoryOptimized2D } = require2("./texture/memory-optimized-2d");
          const { GLTextureMemoryOptimized3D } = require2("./texture/memory-optimized-3d");
          const { GLTextureUnsigned } = require2("./texture/unsigned");
          const { GLTextureUnsigned2D } = require2("./texture/unsigned-2d");
          const { GLTextureUnsigned3D } = require2("./texture/unsigned-3d");
          const { GLTextureGraphical } = require2("./texture/graphical");
          class GLKernel extends Kernel {
            static get mode() {
              return "gpu";
            }
            static getIsFloatRead() {
              const kernelString = `function kernelFunction() {
      return 1;
    }`;
              const kernel = new this(kernelString, {
                context: this.testContext,
                canvas: this.testCanvas,
                validate: false,
                output: [1],
                precision: "single",
                returnType: "Number",
                tactic: "speed"
              });
              kernel.build();
              kernel.run();
              const result = kernel.renderOutput();
              kernel.destroy(true);
              return result[0] === 1;
            }
            static getIsIntegerDivisionAccurate() {
              function kernelFunction(v1, v2) {
                return v1[this.thread.x] / v2[this.thread.x];
              }
              const kernel = new this(kernelFunction.toString(), {
                context: this.testContext,
                canvas: this.testCanvas,
                validate: false,
                output: [2],
                returnType: "Number",
                precision: "unsigned",
                tactic: "speed"
              });
              const args = [
                [6, 6030401],
                [3, 3991]
              ];
              kernel.build.apply(kernel, args);
              kernel.run.apply(kernel, args);
              const result = kernel.renderOutput();
              kernel.destroy(true);
              return result[0] === 2 && result[1] === 1511;
            }
            static getIsSpeedTacticSupported() {
              function kernelFunction(value2) {
                return value2[this.thread.x];
              }
              const kernel = new this(kernelFunction.toString(), {
                context: this.testContext,
                canvas: this.testCanvas,
                validate: false,
                output: [4],
                returnType: "Number",
                precision: "unsigned",
                tactic: "speed"
              });
              const args = [
                [0, 1, 2, 3]
              ];
              kernel.build.apply(kernel, args);
              kernel.run.apply(kernel, args);
              const result = kernel.renderOutput();
              kernel.destroy(true);
              return Math.round(result[0]) === 0 && Math.round(result[1]) === 1 && Math.round(result[2]) === 2 && Math.round(result[3]) === 3;
            }
            static get testCanvas() {
              throw new Error(`"testCanvas" not defined on ${this.name}`);
            }
            static get testContext() {
              throw new Error(`"testContext" not defined on ${this.name}`);
            }
            static getFeatures() {
              const gl = this.testContext;
              const isDrawBuffers = this.getIsDrawBuffers();
              return Object.freeze({
                isFloatRead: this.getIsFloatRead(),
                isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
                isSpeedTacticSupported: this.getIsSpeedTacticSupported(),
                isTextureFloat: this.getIsTextureFloat(),
                isDrawBuffers,
                kernelMap: isDrawBuffers,
                channelCount: this.getChannelCount(),
                maxTextureSize: this.getMaxTextureSize(),
                lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
                lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
                mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
                mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
                highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
                highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
              });
            }
            static setupFeatureChecks() {
              throw new Error(`"setupFeatureChecks" not defined on ${this.name}`);
            }
            static getSignature(kernel, argumentTypes) {
              return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ":" + argumentTypes.join(",") : "");
            }
            setFixIntegerDivisionAccuracy(fix) {
              this.fixIntegerDivisionAccuracy = fix;
              return this;
            }
            setPrecision(flag) {
              this.precision = flag;
              return this;
            }
            setFloatTextures(flag) {
              utils.warnDeprecated("method", "setFloatTextures", "setOptimizeFloatMemory");
              this.floatTextures = flag;
              return this;
            }
            static nativeFunctionArguments(source) {
              const argumentTypes = [];
              const argumentNames = [];
              const states = [];
              const isStartingVariableName = /^[a-zA-Z_]/;
              const isVariableChar = /[a-zA-Z_0-9]/;
              let i = 0;
              let argumentName = null;
              let argumentType = null;
              while (i < source.length) {
                const char = source[i];
                const nextChar = source[i + 1];
                const state = states.length > 0 ? states[states.length - 1] : null;
                if (state === "FUNCTION_ARGUMENTS" && char === "/" && nextChar === "*") {
                  states.push("MULTI_LINE_COMMENT");
                  i += 2;
                  continue;
                } else if (state === "MULTI_LINE_COMMENT" && char === "*" && nextChar === "/") {
                  states.pop();
                  i += 2;
                  continue;
                } else if (state === "FUNCTION_ARGUMENTS" && char === "/" && nextChar === "/") {
                  states.push("COMMENT");
                  i += 2;
                  continue;
                } else if (state === "COMMENT" && char === "\n") {
                  states.pop();
                  i++;
                  continue;
                } else if (state === null && char === "(") {
                  states.push("FUNCTION_ARGUMENTS");
                  i++;
                  continue;
                } else if (state === "FUNCTION_ARGUMENTS") {
                  if (char === ")") {
                    states.pop();
                    break;
                  }
                  if (char === "f" && nextChar === "l" && source[i + 2] === "o" && source[i + 3] === "a" && source[i + 4] === "t" && source[i + 5] === " ") {
                    states.push("DECLARE_VARIABLE");
                    argumentType = "float";
                    argumentName = "";
                    i += 6;
                    continue;
                  } else if (char === "i" && nextChar === "n" && source[i + 2] === "t" && source[i + 3] === " ") {
                    states.push("DECLARE_VARIABLE");
                    argumentType = "int";
                    argumentName = "";
                    i += 4;
                    continue;
                  } else if (char === "v" && nextChar === "e" && source[i + 2] === "c" && source[i + 3] === "2" && source[i + 4] === " ") {
                    states.push("DECLARE_VARIABLE");
                    argumentType = "vec2";
                    argumentName = "";
                    i += 5;
                    continue;
                  } else if (char === "v" && nextChar === "e" && source[i + 2] === "c" && source[i + 3] === "3" && source[i + 4] === " ") {
                    states.push("DECLARE_VARIABLE");
                    argumentType = "vec3";
                    argumentName = "";
                    i += 5;
                    continue;
                  } else if (char === "v" && nextChar === "e" && source[i + 2] === "c" && source[i + 3] === "4" && source[i + 4] === " ") {
                    states.push("DECLARE_VARIABLE");
                    argumentType = "vec4";
                    argumentName = "";
                    i += 5;
                    continue;
                  }
                } else if (state === "DECLARE_VARIABLE") {
                  if (argumentName === "") {
                    if (char === " ") {
                      i++;
                      continue;
                    }
                    if (!isStartingVariableName.test(char)) {
                      throw new Error("variable name is not expected string");
                    }
                  }
                  argumentName += char;
                  if (!isVariableChar.test(nextChar)) {
                    states.pop();
                    argumentNames.push(argumentName);
                    argumentTypes.push(typeMap[argumentType]);
                  }
                }
                i++;
              }
              if (states.length > 0) {
                throw new Error("GLSL function was not parsable");
              }
              return {
                argumentNames,
                argumentTypes
              };
            }
            static nativeFunctionReturnType(source) {
              return typeMap[source.match(/int|float|vec[2-4]/)[0]];
            }
            static combineKernels(combinedKernel, lastKernel) {
              combinedKernel.apply(null, arguments);
              const {
                texSize,
                context,
                threadDim
              } = lastKernel.texSize;
              let result;
              if (lastKernel.precision === "single") {
                const w = texSize[0];
                const h = Math.ceil(texSize[1] / 4);
                result = new Float32Array(w * h * 4 * 4);
                context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);
              } else {
                const bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
                context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);
                result = new Float32Array(bytes.buffer);
              }
              result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);
              if (lastKernel.output.length === 1) {
                return result;
              } else if (lastKernel.output.length === 2) {
                return utils.splitArray(result, lastKernel.output[0]);
              } else if (lastKernel.output.length === 3) {
                const cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
                return cube.map(function(x) {
                  return utils.splitArray(x, lastKernel.output[0]);
                });
              }
            }
            constructor(source, settings) {
              super(source, settings);
              this.transferValues = null;
              this.formatValues = null;
              this.TextureConstructor = null;
              this.renderOutput = null;
              this.renderRawOutput = null;
              this.texSize = null;
              this.translatedSource = null;
              this.compiledFragmentShader = null;
              this.compiledVertexShader = null;
              this.switchingKernels = null;
              this._textureSwitched = null;
              this._mappedTextureSwitched = null;
            }
            checkTextureSize() {
              const { features } = this.constructor;
              if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {
                throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${features.maxTextureSize},${features.maxTextureSize}]`);
              }
            }
            translateSource() {
              throw new Error(`"translateSource" not defined on ${this.constructor.name}`);
            }
            pickRenderStrategy(args) {
              if (this.graphical) {
                this.renderRawOutput = this.readPackedPixelsToUint8Array;
                this.transferValues = (pixels) => pixels;
                this.TextureConstructor = GLTextureGraphical;
                return null;
              }
              if (this.precision === "unsigned") {
                this.renderRawOutput = this.readPackedPixelsToUint8Array;
                this.transferValues = this.readPackedPixelsToFloat32Array;
                if (this.pipeline) {
                  this.renderOutput = this.renderTexture;
                  if (this.subKernels !== null) {
                    this.renderKernels = this.renderKernelsToTextures;
                  }
                  switch (this.returnType) {
                    case "LiteralInteger":
                    case "Float":
                    case "Number":
                    case "Integer":
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureUnsigned3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureUnsigned2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureUnsigned;
                        return null;
                      }
                    case "Array(2)":
                    case "Array(3)":
                    case "Array(4)":
                      return this.requestFallback(args);
                  }
                } else {
                  if (this.subKernels !== null) {
                    this.renderKernels = this.renderKernelsToArrays;
                  }
                  switch (this.returnType) {
                    case "LiteralInteger":
                    case "Float":
                    case "Number":
                    case "Integer":
                      this.renderOutput = this.renderValues;
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureUnsigned3D;
                        this.formatValues = utils.erect3DPackedFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureUnsigned2D;
                        this.formatValues = utils.erect2DPackedFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureUnsigned;
                        this.formatValues = utils.erectPackedFloat;
                        return null;
                      }
                    case "Array(2)":
                    case "Array(3)":
                    case "Array(4)":
                      return this.requestFallback(args);
                  }
                }
              } else if (this.precision === "single") {
                this.renderRawOutput = this.readFloatPixelsToFloat32Array;
                this.transferValues = this.readFloatPixelsToFloat32Array;
                if (this.pipeline) {
                  this.renderOutput = this.renderTexture;
                  if (this.subKernels !== null) {
                    this.renderKernels = this.renderKernelsToTextures;
                  }
                  switch (this.returnType) {
                    case "LiteralInteger":
                    case "Float":
                    case "Number":
                    case "Integer": {
                      if (this.optimizeFloatMemory) {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureMemoryOptimized;
                          return null;
                        }
                      } else {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureFloat3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureFloat2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureFloat;
                          return null;
                        }
                      }
                    }
                    case "Array(2)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        return null;
                      }
                    }
                    case "Array(3)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        return null;
                      }
                    }
                    case "Array(4)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        return null;
                      }
                    }
                  }
                }
                this.renderOutput = this.renderValues;
                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToArrays;
                }
                if (this.optimizeFloatMemory) {
                  switch (this.returnType) {
                    case "LiteralInteger":
                    case "Float":
                    case "Number":
                    case "Integer": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized3D;
                        this.formatValues = utils.erectMemoryOptimized3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized2D;
                        this.formatValues = utils.erectMemoryOptimized2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureMemoryOptimized;
                        this.formatValues = utils.erectMemoryOptimizedFloat;
                        return null;
                      }
                    }
                    case "Array(2)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }
                    case "Array(3)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }
                    case "Array(4)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                  }
                } else {
                  switch (this.returnType) {
                    case "LiteralInteger":
                    case "Float":
                    case "Number":
                    case "Integer": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureFloat3D;
                        this.formatValues = utils.erect3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureFloat2D;
                        this.formatValues = utils.erect2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureFloat;
                        this.formatValues = utils.erectFloat;
                        return null;
                      }
                    }
                    case "Array(2)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }
                    case "Array(3)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }
                    case "Array(4)": {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                  }
                }
              } else {
                throw new Error(`unhandled precision of "${this.precision}"`);
              }
              throw new Error(`unhandled return type "${this.returnType}"`);
            }
            getKernelString() {
              throw new Error(`abstract method call`);
            }
            getMainResultTexture() {
              switch (this.returnType) {
                case "LiteralInteger":
                case "Float":
                case "Integer":
                case "Number":
                  return this.getMainResultNumberTexture();
                case "Array(2)":
                  return this.getMainResultArray2Texture();
                case "Array(3)":
                  return this.getMainResultArray3Texture();
                case "Array(4)":
                  return this.getMainResultArray4Texture();
                default:
                  throw new Error(`unhandled returnType type ${this.returnType}`);
              }
            }
            getMainResultKernelNumberTexture() {
              throw new Error(`abstract method call`);
            }
            getMainResultSubKernelNumberTexture() {
              throw new Error(`abstract method call`);
            }
            getMainResultKernelArray2Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultSubKernelArray2Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultKernelArray3Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultSubKernelArray3Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultKernelArray4Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultSubKernelArray4Texture() {
              throw new Error(`abstract method call`);
            }
            getMainResultGraphical() {
              throw new Error(`abstract method call`);
            }
            getMainResultMemoryOptimizedFloats() {
              throw new Error(`abstract method call`);
            }
            getMainResultPackedPixels() {
              throw new Error(`abstract method call`);
            }
            getMainResultString() {
              if (this.graphical) {
                return this.getMainResultGraphical();
              } else if (this.precision === "single") {
                if (this.optimizeFloatMemory) {
                  return this.getMainResultMemoryOptimizedFloats();
                }
                return this.getMainResultTexture();
              } else {
                return this.getMainResultPackedPixels();
              }
            }
            getMainResultNumberTexture() {
              return utils.linesToString(this.getMainResultKernelNumberTexture()) + utils.linesToString(this.getMainResultSubKernelNumberTexture());
            }
            getMainResultArray2Texture() {
              return utils.linesToString(this.getMainResultKernelArray2Texture()) + utils.linesToString(this.getMainResultSubKernelArray2Texture());
            }
            getMainResultArray3Texture() {
              return utils.linesToString(this.getMainResultKernelArray3Texture()) + utils.linesToString(this.getMainResultSubKernelArray3Texture());
            }
            getMainResultArray4Texture() {
              return utils.linesToString(this.getMainResultKernelArray4Texture()) + utils.linesToString(this.getMainResultSubKernelArray4Texture());
            }
            getFloatTacticDeclaration() {
              const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);
              return `precision ${variablePrecision} float;
`;
            }
            getIntTacticDeclaration() {
              return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic, true)} int;
`;
            }
            getSampler2DTacticDeclaration() {
              return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2D;
`;
            }
            getSampler2DArrayTacticDeclaration() {
              return `precision ${this.getVariablePrecisionString(this.texSize, this.tactic)} sampler2DArray;
`;
            }
            renderTexture() {
              return this.immutable ? this.texture.clone() : this.texture;
            }
            readPackedPixelsToUint8Array() {
              if (this.precision !== "unsigned") throw new Error('Requires this.precision to be "unsigned"');
              const {
                texSize,
                context: gl
              } = this;
              const result = new Uint8Array(texSize[0] * texSize[1] * 4);
              gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
              return result;
            }
            readPackedPixelsToFloat32Array() {
              return new Float32Array(this.readPackedPixelsToUint8Array().buffer);
            }
            readFloatPixelsToFloat32Array() {
              if (this.precision !== "single") throw new Error('Requires this.precision to be "single"');
              const {
                texSize,
                context: gl
              } = this;
              const w = texSize[0];
              const h = texSize[1];
              const result = new Float32Array(w * h * 4);
              gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);
              return result;
            }
            getPixels(flip) {
              const {
                context: gl,
                output
              } = this;
              const [width, height] = output;
              const pixels = new Uint8Array(width * height * 4);
              gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
              return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);
            }
            renderKernelsToArrays() {
              const result = {
                result: this.renderOutput()
              };
              for (let i = 0; i < this.subKernels.length; i++) {
                result[this.subKernels[i].property] = this.mappedTextures[i].toArray();
              }
              return result;
            }
            renderKernelsToTextures() {
              const result = {
                result: this.renderOutput()
              };
              if (this.immutable) {
                for (let i = 0; i < this.subKernels.length; i++) {
                  result[this.subKernels[i].property] = this.mappedTextures[i].clone();
                }
              } else {
                for (let i = 0; i < this.subKernels.length; i++) {
                  result[this.subKernels[i].property] = this.mappedTextures[i];
                }
              }
              return result;
            }
            resetSwitchingKernels() {
              const existingValue = this.switchingKernels;
              this.switchingKernels = null;
              return existingValue;
            }
            setOutput(output) {
              const newOutput = this.toKernelOutput(output);
              if (this.program) {
                if (!this.dynamicOutput) {
                  throw new Error("Resizing a kernel with dynamicOutput: false is not possible");
                }
                const newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];
                const newTexSize = utils.getKernelTextureSize({
                  optimizeFloatMemory: this.optimizeFloatMemory,
                  precision: this.precision
                }, newThreadDim);
                const oldTexSize = this.texSize;
                if (oldTexSize) {
                  const oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);
                  const newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);
                  if (oldPrecision !== newPrecision) {
                    if (this.debug) {
                      console.warn("Precision requirement changed, asking GPU instance to recompile");
                    }
                    this.switchKernels({
                      type: "outputPrecisionMismatch",
                      precision: newPrecision,
                      needed: output
                    });
                    return;
                  }
                }
                this.output = newOutput;
                this.threadDim = newThreadDim;
                this.texSize = newTexSize;
                const { context: gl } = this;
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
                this.updateMaxTexSize();
                this.framebuffer.width = this.texSize[0];
                this.framebuffer.height = this.texSize[1];
                gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
                this.canvas.width = this.maxTexSize[0];
                this.canvas.height = this.maxTexSize[1];
                if (this.texture) {
                  this.texture.delete();
                }
                this.texture = null;
                this._setupOutputTexture();
                if (this.mappedTextures && this.mappedTextures.length > 0) {
                  for (let i = 0; i < this.mappedTextures.length; i++) {
                    this.mappedTextures[i].delete();
                  }
                  this.mappedTextures = null;
                  this._setupSubOutputTextures();
                }
              } else {
                this.output = newOutput;
              }
              return this;
            }
            renderValues() {
              return this.formatValues(
                this.transferValues(),
                this.output[0],
                this.output[1],
                this.output[2]
              );
            }
            switchKernels(reason) {
              if (this.switchingKernels) {
                this.switchingKernels.push(reason);
              } else {
                this.switchingKernels = [reason];
              }
            }
            getVariablePrecisionString(textureSize = this.texSize, tactic = this.tactic, isInt = false) {
              if (!tactic) {
                if (!this.constructor.features.isSpeedTacticSupported) return "highp";
                const low = this.constructor.features[isInt ? "lowIntPrecision" : "lowFloatPrecision"];
                const medium = this.constructor.features[isInt ? "mediumIntPrecision" : "mediumFloatPrecision"];
                const high = this.constructor.features[isInt ? "highIntPrecision" : "highFloatPrecision"];
                const requiredSize = Math.log2(textureSize[0] * textureSize[1]);
                if (requiredSize <= low.rangeMax) {
                  return "lowp";
                } else if (requiredSize <= medium.rangeMax) {
                  return "mediump";
                } else if (requiredSize <= high.rangeMax) {
                  return "highp";
                } else {
                  throw new Error(`The required size exceeds that of the ability of your system`);
                }
              }
              switch (tactic) {
                case "speed":
                  return "lowp";
                case "balanced":
                  return "mediump";
                case "precision":
                  return "highp";
                default:
                  throw new Error(`Unknown tactic "${tactic}" use "speed", "balanced", "precision", or empty for auto`);
              }
            }
            updateTextureArgumentRefs(kernelValue, arg) {
              if (!this.immutable) return;
              if (this.texture.texture === arg.texture) {
                const { prevArg } = kernelValue;
                if (prevArg) {
                  if (prevArg.texture._refs === 1) {
                    this.texture.delete();
                    this.texture = prevArg.clone();
                    this._textureSwitched = true;
                  }
                  prevArg.delete();
                }
                kernelValue.prevArg = arg.clone();
              } else if (this.mappedTextures && this.mappedTextures.length > 0) {
                const { mappedTextures } = this;
                for (let i = 0; i < mappedTextures.length; i++) {
                  const mappedTexture = mappedTextures[i];
                  if (mappedTexture.texture === arg.texture) {
                    const { prevArg } = kernelValue;
                    if (prevArg) {
                      if (prevArg.texture._refs === 1) {
                        mappedTexture.delete();
                        mappedTextures[i] = prevArg.clone();
                        this._mappedTextureSwitched[i] = true;
                      }
                      prevArg.delete();
                    }
                    kernelValue.prevArg = arg.clone();
                    return;
                  }
                }
              }
            }
            onActivate(previousKernel) {
              this._textureSwitched = true;
              this.texture = previousKernel.texture;
              if (this.mappedTextures) {
                for (let i = 0; i < this.mappedTextures.length; i++) {
                  this._mappedTextureSwitched[i] = true;
                }
                this.mappedTextures = previousKernel.mappedTextures;
              }
            }
            initCanvas() {
            }
          }
          const typeMap = {
            int: "Integer",
            float: "Number",
            vec2: "Array(2)",
            vec3: "Array(3)",
            vec4: "Array(4)"
          };
          module3.exports = {
            GLKernel
          };
        }, { "../../utils": 114, "../kernel": 36, "./texture/array-2-float": 16, "./texture/array-2-float-2d": 14, "./texture/array-2-float-3d": 15, "./texture/array-3-float": 19, "./texture/array-3-float-2d": 17, "./texture/array-3-float-3d": 18, "./texture/array-4-float": 22, "./texture/array-4-float-2d": 20, "./texture/array-4-float-3d": 21, "./texture/float": 25, "./texture/float-2d": 23, "./texture/float-3d": 24, "./texture/graphical": 26, "./texture/memory-optimized": 30, "./texture/memory-optimized-2d": 28, "./texture/memory-optimized-3d": 29, "./texture/unsigned": 33, "./texture/unsigned-2d": 31, "./texture/unsigned-3d": 32 }], 14: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray2Float2D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(2)";
            }
            toArray() {
              return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureArray2Float2D
          };
        }, { "../../../utils": 114, "./float": 25 }], 15: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray2Float3D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(2)";
            }
            toArray() {
              return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureArray2Float3D
          };
        }, { "../../../utils": 114, "./float": 25 }], 16: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray2Float extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(2)";
            }
            toArray() {
              return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureArray2Float
          };
        }, { "../../../utils": 114, "./float": 25 }], 17: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray3Float2D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(3)";
            }
            toArray() {
              return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureArray3Float2D
          };
        }, { "../../../utils": 114, "./float": 25 }], 18: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray3Float3D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(3)";
            }
            toArray() {
              return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureArray3Float3D
          };
        }, { "../../../utils": 114, "./float": 25 }], 19: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray3Float extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(3)";
            }
            toArray() {
              return utils.erectArray3(this.renderValues(), this.output[0]);
            }
          }
          module3.exports = {
            GLTextureArray3Float
          };
        }, { "../../../utils": 114, "./float": 25 }], 20: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray4Float2D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(4)";
            }
            toArray() {
              return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureArray4Float2D
          };
        }, { "../../../utils": 114, "./float": 25 }], 21: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray4Float3D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(4)";
            }
            toArray() {
              return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureArray4Float3D
          };
        }, { "../../../utils": 114, "./float": 25 }], 22: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureArray4Float extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(4)";
            }
            toArray() {
              return utils.erectArray4(this.renderValues(), this.output[0]);
            }
          }
          module3.exports = {
            GLTextureArray4Float
          };
        }, { "../../../utils": 114, "./float": 25 }], 23: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureFloat2D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(1)";
            }
            toArray() {
              return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureFloat2D
          };
        }, { "../../../utils": 114, "./float": 25 }], 24: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureFloat3D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(1)";
            }
            toArray() {
              return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureFloat3D
          };
        }, { "../../../utils": 114, "./float": 25 }], 25: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTexture } = require2("./index");
          class GLTextureFloat extends GLTexture {
            get textureType() {
              return this.context.FLOAT;
            }
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(1)";
            }
            renderRawOutput() {
              const gl = this.context;
              const size = this.size;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
              gl.framebufferTexture2D(
                gl.FRAMEBUFFER,
                gl.COLOR_ATTACHMENT0,
                gl.TEXTURE_2D,
                this.texture,
                0
              );
              const result = new Float32Array(size[0] * size[1] * 4);
              gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);
              return result;
            }
            renderValues() {
              if (this._deleted) return null;
              return this.renderRawOutput();
            }
            toArray() {
              return utils.erectFloat(this.renderValues(), this.output[0]);
            }
          }
          module3.exports = {
            GLTextureFloat
          };
        }, { "../../../utils": 114, "./index": 27 }], 26: [function(require2, module3, exports3) {
          const { GLTextureUnsigned } = require2("./unsigned");
          class GLTextureGraphical extends GLTextureUnsigned {
            constructor(settings) {
              super(settings);
              this.type = "ArrayTexture(4)";
            }
            toArray() {
              return this.renderValues();
            }
          }
          module3.exports = {
            GLTextureGraphical
          };
        }, { "./unsigned": 33 }], 27: [function(require2, module3, exports3) {
          const { Texture: Texture2 } = require2("../../../texture");
          class GLTexture extends Texture2 {
            get textureType() {
              throw new Error(`"textureType" not implemented on ${this.name}`);
            }
            clone() {
              return new this.constructor(this);
            }
            beforeMutate() {
              if (this.texture._refs > 1) {
                this.newTexture();
                return true;
              }
              return false;
            }
            cloneTexture() {
              this.texture._refs--;
              const { context: gl, size, texture, kernel } = this;
              if (kernel.debug) {
                console.warn("cloning internal texture");
              }
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
              selectTexture(gl, texture);
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
              const target = gl.createTexture();
              selectTexture(gl, target);
              gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
              gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);
              target._refs = 1;
              this.texture = target;
            }
            newTexture() {
              this.texture._refs--;
              const gl = this.context;
              const size = this.size;
              const kernel = this.kernel;
              if (kernel.debug) {
                console.warn("new internal texture");
              }
              const target = gl.createTexture();
              selectTexture(gl, target);
              gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
              target._refs = 1;
              this.texture = target;
            }
            clear() {
              if (this.texture._refs) {
                this.texture._refs--;
                const gl2 = this.context;
                const target = this.texture = gl2.createTexture();
                selectTexture(gl2, target);
                const size = this.size;
                target._refs = 1;
                gl2.texImage2D(gl2.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
              }
              const { context: gl, texture } = this;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
              gl.bindTexture(gl.TEXTURE_2D, texture);
              selectTexture(gl, texture);
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
              gl.clearColor(0, 0, 0, 0);
              gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            }
            delete() {
              if (this._deleted) return;
              this._deleted = true;
              if (this.texture._refs) {
                this.texture._refs--;
                if (this.texture._refs) return;
              }
              this.context.deleteTexture(this.texture);
            }
            framebuffer() {
              if (!this._framebuffer) {
                this._framebuffer = this.kernel.getRawValueFramebuffer(this.size[0], this.size[1]);
              }
              return this._framebuffer;
            }
          }
          function selectTexture(gl, texture) {
            gl.activeTexture(gl.TEXTURE15);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          }
          module3.exports = { GLTexture };
        }, { "../../../texture": 113 }], 28: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureMemoryOptimized2D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "MemoryOptimizedNumberTexture";
            }
            toArray() {
              return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureMemoryOptimized2D
          };
        }, { "../../../utils": 114, "./float": 25 }], 29: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureMemoryOptimized3D extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "MemoryOptimizedNumberTexture";
            }
            toArray() {
              return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureMemoryOptimized3D
          };
        }, { "../../../utils": 114, "./float": 25 }], 30: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureFloat } = require2("./float");
          class GLTextureMemoryOptimized extends GLTextureFloat {
            constructor(settings) {
              super(settings);
              this.type = "MemoryOptimizedNumberTexture";
            }
            toArray() {
              return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);
            }
          }
          module3.exports = {
            GLTextureMemoryOptimized
          };
        }, { "../../../utils": 114, "./float": 25 }], 31: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureUnsigned } = require2("./unsigned");
          class GLTextureUnsigned2D extends GLTextureUnsigned {
            constructor(settings) {
              super(settings);
              this.type = "NumberTexture";
            }
            toArray() {
              return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);
            }
          }
          module3.exports = {
            GLTextureUnsigned2D
          };
        }, { "../../../utils": 114, "./unsigned": 33 }], 32: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTextureUnsigned } = require2("./unsigned");
          class GLTextureUnsigned3D extends GLTextureUnsigned {
            constructor(settings) {
              super(settings);
              this.type = "NumberTexture";
            }
            toArray() {
              return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
            }
          }
          module3.exports = {
            GLTextureUnsigned3D
          };
        }, { "../../../utils": 114, "./unsigned": 33 }], 33: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { GLTexture } = require2("./index");
          class GLTextureUnsigned extends GLTexture {
            get textureType() {
              return this.context.UNSIGNED_BYTE;
            }
            constructor(settings) {
              super(settings);
              this.type = "NumberTexture";
            }
            renderRawOutput() {
              const { context: gl } = this;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
              gl.framebufferTexture2D(
                gl.FRAMEBUFFER,
                gl.COLOR_ATTACHMENT0,
                gl.TEXTURE_2D,
                this.texture,
                0
              );
              const result = new Uint8Array(this.size[0] * this.size[1] * 4);
              gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
              return result;
            }
            renderValues() {
              if (this._deleted) return null;
              return new Float32Array(this.renderRawOutput().buffer);
            }
            toArray() {
              return utils.erectPackedFloat(this.renderValues(), this.output[0]);
            }
          }
          module3.exports = {
            GLTextureUnsigned
          };
        }, { "../../../utils": 114, "./index": 27 }], 34: [function(require2, module3, exports3) {
          const getContext = require2("gl");
          const { WebGLKernel } = require2("../web-gl/kernel");
          const { glKernelString } = require2("../gl/kernel-string");
          let isSupported = null;
          let testCanvas = null;
          let testContext = null;
          let testExtensions = null;
          let features = null;
          class HeadlessGLKernel extends WebGLKernel {
            static get isSupported() {
              if (isSupported !== null) return isSupported;
              this.setupFeatureChecks();
              isSupported = testContext !== null;
              return isSupported;
            }
            static setupFeatureChecks() {
              testCanvas = null;
              testExtensions = null;
              if (typeof getContext !== "function") return;
              try {
                testContext = getContext(2, 2, {
                  preserveDrawingBuffer: true
                });
                if (!testContext || !testContext.getExtension) return;
                testExtensions = {
                  STACKGL_resize_drawingbuffer: testContext.getExtension("STACKGL_resize_drawingbuffer"),
                  STACKGL_destroy_context: testContext.getExtension("STACKGL_destroy_context"),
                  OES_texture_float: testContext.getExtension("OES_texture_float"),
                  OES_texture_float_linear: testContext.getExtension("OES_texture_float_linear"),
                  OES_element_index_uint: testContext.getExtension("OES_element_index_uint"),
                  WEBGL_draw_buffers: testContext.getExtension("WEBGL_draw_buffers"),
                  WEBGL_color_buffer_float: testContext.getExtension("WEBGL_color_buffer_float")
                };
                features = this.getFeatures();
              } catch (e) {
                console.warn(e);
              }
            }
            static isContextMatch(context) {
              try {
                return context.getParameter(context.RENDERER) === "ANGLE";
              } catch (e) {
                return false;
              }
            }
            static getIsTextureFloat() {
              return Boolean(testExtensions.OES_texture_float);
            }
            static getIsDrawBuffers() {
              return Boolean(testExtensions.WEBGL_draw_buffers);
            }
            static getChannelCount() {
              return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
            }
            static getMaxTextureSize() {
              return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
            }
            static get testCanvas() {
              return testCanvas;
            }
            static get testContext() {
              return testContext;
            }
            static get features() {
              return features;
            }
            initCanvas() {
              return {};
            }
            initContext() {
              return getContext(2, 2, {
                preserveDrawingBuffer: true
              });
            }
            initExtensions() {
              this.extensions = {
                STACKGL_resize_drawingbuffer: this.context.getExtension("STACKGL_resize_drawingbuffer"),
                STACKGL_destroy_context: this.context.getExtension("STACKGL_destroy_context"),
                OES_texture_float: this.context.getExtension("OES_texture_float"),
                OES_texture_float_linear: this.context.getExtension("OES_texture_float_linear"),
                OES_element_index_uint: this.context.getExtension("OES_element_index_uint"),
                WEBGL_draw_buffers: this.context.getExtension("WEBGL_draw_buffers")
              };
            }
            build() {
              super.build.apply(this, arguments);
              if (!this.fallbackRequested) {
                this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
              }
            }
            destroyExtensions() {
              this.extensions.STACKGL_resize_drawingbuffer = null;
              this.extensions.STACKGL_destroy_context = null;
              this.extensions.OES_texture_float = null;
              this.extensions.OES_texture_float_linear = null;
              this.extensions.OES_element_index_uint = null;
              this.extensions.WEBGL_draw_buffers = null;
            }
            static destroyContext(context) {
              const extension = context.getExtension("STACKGL_destroy_context");
              if (extension && extension.destroy) {
                extension.destroy();
              }
            }
            toString() {
              const setupContextString = `const gl = context || require('gl')(1, 1);
`;
              const destroyContextString = `    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }
`;
              return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);
            }
            setOutput(output) {
              super.setOutput(output);
              if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) {
                this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
              }
              return this;
            }
          }
          module3.exports = {
            HeadlessGLKernel
          };
        }, { "../gl/kernel-string": 12, "../web-gl/kernel": 70, "gl": 2 }], 35: [function(require2, module3, exports3) {
          class KernelValue {
            constructor(value2, settings) {
              const {
                name: name2,
                kernel,
                context,
                checkContext,
                onRequestContextHandle,
                onUpdateValueMismatch,
                origin: origin2,
                strictIntegers,
                type,
                tactic
              } = settings;
              if (!name2) {
                throw new Error("name not set");
              }
              if (!type) {
                throw new Error("type not set");
              }
              if (!origin2) {
                throw new Error("origin not set");
              }
              if (origin2 !== "user" && origin2 !== "constants") {
                throw new Error(`origin must be "user" or "constants" value is "${origin2}"`);
              }
              if (!onRequestContextHandle) {
                throw new Error("onRequestContextHandle is not set");
              }
              this.name = name2;
              this.origin = origin2;
              this.tactic = tactic;
              this.varName = origin2 === "constants" ? `constants.${name2}` : name2;
              this.kernel = kernel;
              this.strictIntegers = strictIntegers;
              this.type = value2.type || type;
              this.size = value2.size || null;
              this.index = null;
              this.context = context;
              this.checkContext = checkContext !== null && checkContext !== void 0 ? checkContext : true;
              this.contextHandle = null;
              this.onRequestContextHandle = onRequestContextHandle;
              this.onUpdateValueMismatch = onUpdateValueMismatch;
              this.forceUploadEachRun = null;
            }
            get id() {
              return `${this.origin}_${name}`;
            }
            getSource() {
              throw new Error(`"getSource" not defined on ${this.constructor.name}`);
            }
            updateValue(value2) {
              throw new Error(`"updateValue" not defined on ${this.constructor.name}`);
            }
          }
          module3.exports = {
            KernelValue
          };
        }, {}], 36: [function(require2, module3, exports3) {
          const { utils } = require2("../utils");
          const { Input: Input2 } = require2("../input");
          class Kernel {
            static get isSupported() {
              throw new Error(`"isSupported" not implemented on ${this.name}`);
            }
            static isContextMatch(context) {
              throw new Error(`"isContextMatch" not implemented on ${this.name}`);
            }
            static getFeatures() {
              throw new Error(`"getFeatures" not implemented on ${this.name}`);
            }
            static destroyContext(context) {
              throw new Error(`"destroyContext" called on ${this.name}`);
            }
            static nativeFunctionArguments() {
              throw new Error(`"nativeFunctionArguments" called on ${this.name}`);
            }
            static nativeFunctionReturnType() {
              throw new Error(`"nativeFunctionReturnType" called on ${this.name}`);
            }
            static combineKernels() {
              throw new Error(`"combineKernels" called on ${this.name}`);
            }
            constructor(source, settings) {
              if (typeof source !== "object") {
                if (typeof source !== "string") {
                  throw new Error("source not a string");
                }
                if (!utils.isFunctionString(source)) {
                  throw new Error("source not a function string");
                }
              }
              this.useLegacyEncoder = false;
              this.fallbackRequested = false;
              this.onRequestFallback = null;
              this.argumentNames = typeof source === "string" ? utils.getArgumentNamesFromString(source) : null;
              this.argumentTypes = null;
              this.argumentSizes = null;
              this.argumentBitRatios = null;
              this.kernelArguments = null;
              this.kernelConstants = null;
              this.forceUploadKernelConstants = null;
              this.source = source;
              this.output = null;
              this.debug = false;
              this.graphical = false;
              this.loopMaxIterations = 0;
              this.constants = null;
              this.constantTypes = null;
              this.constantBitRatios = null;
              this.dynamicArguments = false;
              this.dynamicOutput = false;
              this.canvas = null;
              this.context = null;
              this.checkContext = null;
              this.gpu = null;
              this.functions = null;
              this.nativeFunctions = null;
              this.injectedNative = null;
              this.subKernels = null;
              this.validate = true;
              this.immutable = false;
              this.pipeline = false;
              this.precision = null;
              this.tactic = null;
              this.plugins = null;
              this.returnType = null;
              this.leadingReturnStatement = null;
              this.followingReturnStatement = null;
              this.optimizeFloatMemory = null;
              this.strictIntegers = false;
              this.fixIntegerDivisionAccuracy = null;
              this.built = false;
              this.signature = null;
            }
            mergeSettings(settings) {
              for (let p in settings) {
                if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;
                switch (p) {
                  case "output":
                    if (!Array.isArray(settings.output)) {
                      this.setOutput(settings.output);
                      continue;
                    }
                    break;
                  case "functions":
                    this.functions = [];
                    for (let i = 0; i < settings.functions.length; i++) {
                      this.addFunction(settings.functions[i]);
                    }
                    continue;
                  case "graphical":
                    if (settings[p] && !settings.hasOwnProperty("precision")) {
                      this.precision = "unsigned";
                    }
                    this[p] = settings[p];
                    continue;
                  case "nativeFunctions":
                    if (!settings.nativeFunctions) continue;
                    this.nativeFunctions = [];
                    for (let i = 0; i < settings.nativeFunctions.length; i++) {
                      const s = settings.nativeFunctions[i];
                      const { name: name2, source } = s;
                      this.addNativeFunction(name2, source, s);
                    }
                    continue;
                }
                this[p] = settings[p];
              }
              if (!this.canvas) this.canvas = this.initCanvas();
              if (!this.context) this.context = this.initContext();
              if (!this.plugins) this.plugins = this.initPlugins(settings);
            }
            build() {
              throw new Error(`"build" not defined on ${this.constructor.name}`);
            }
            run() {
              throw new Error(`"run" not defined on ${this.constructor.name}`);
            }
            initCanvas() {
              throw new Error(`"initCanvas" not defined on ${this.constructor.name}`);
            }
            initContext() {
              throw new Error(`"initContext" not defined on ${this.constructor.name}`);
            }
            initPlugins(settings) {
              throw new Error(`"initPlugins" not defined on ${this.constructor.name}`);
            }
            addFunction(source, settings = {}) {
              if (source.name && source.source && source.argumentTypes && "returnType" in source) {
                this.functions.push(source);
              } else if ("settings" in source && "source" in source) {
                this.functions.push(this.functionToIGPUFunction(source.source, source.settings));
              } else if (typeof source === "string" || typeof source === "function") {
                this.functions.push(this.functionToIGPUFunction(source, settings));
              } else {
                throw new Error(`function not properly defined`);
              }
              return this;
            }
            addNativeFunction(name2, source, settings = {}) {
              const { argumentTypes, argumentNames } = settings.argumentTypes ? splitArgumentTypes(settings.argumentTypes) : this.constructor.nativeFunctionArguments(source) || {};
              this.nativeFunctions.push({
                name: name2,
                source,
                settings,
                argumentTypes,
                argumentNames,
                returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)
              });
              return this;
            }
            setupArguments(args) {
              this.kernelArguments = [];
              if (!this.argumentTypes) {
                if (!this.argumentTypes) {
                  this.argumentTypes = [];
                  for (let i = 0; i < args.length; i++) {
                    const argType = utils.getVariableType(args[i], this.strictIntegers);
                    const type = argType === "Integer" ? "Number" : argType;
                    this.argumentTypes.push(type);
                    this.kernelArguments.push({
                      type
                    });
                  }
                }
              } else {
                for (let i = 0; i < this.argumentTypes.length; i++) {
                  this.kernelArguments.push({
                    type: this.argumentTypes[i]
                  });
                }
              }
              this.argumentSizes = new Array(args.length);
              this.argumentBitRatios = new Int32Array(args.length);
              for (let i = 0; i < args.length; i++) {
                const arg = args[i];
                this.argumentSizes[i] = arg.constructor === Input2 ? arg.size : null;
                this.argumentBitRatios[i] = this.getBitRatio(arg);
              }
              if (this.argumentNames.length !== args.length) {
                throw new Error(`arguments are miss-aligned`);
              }
            }
            setupConstants() {
              this.kernelConstants = [];
              let needsConstantTypes = this.constantTypes === null;
              if (needsConstantTypes) {
                this.constantTypes = {};
              }
              this.constantBitRatios = {};
              if (this.constants) {
                for (let name2 in this.constants) {
                  if (needsConstantTypes) {
                    const type = utils.getVariableType(this.constants[name2], this.strictIntegers);
                    this.constantTypes[name2] = type;
                    this.kernelConstants.push({
                      name: name2,
                      type
                    });
                  } else {
                    this.kernelConstants.push({
                      name: name2,
                      type: this.constantTypes[name2]
                    });
                  }
                  this.constantBitRatios[name2] = this.getBitRatio(this.constants[name2]);
                }
              }
            }
            setOptimizeFloatMemory(flag) {
              this.optimizeFloatMemory = flag;
              return this;
            }
            toKernelOutput(output) {
              if (output.hasOwnProperty("x")) {
                if (output.hasOwnProperty("y")) {
                  if (output.hasOwnProperty("z")) {
                    return [output.x, output.y, output.z];
                  } else {
                    return [output.x, output.y];
                  }
                } else {
                  return [output.x];
                }
              } else {
                return output;
              }
            }
            setOutput(output) {
              this.output = this.toKernelOutput(output);
              return this;
            }
            setDebug(flag) {
              this.debug = flag;
              return this;
            }
            setGraphical(flag) {
              this.graphical = flag;
              this.precision = "unsigned";
              return this;
            }
            setLoopMaxIterations(max) {
              this.loopMaxIterations = max;
              return this;
            }
            setConstants(constants) {
              this.constants = constants;
              return this;
            }
            setConstantTypes(constantTypes) {
              this.constantTypes = constantTypes;
              return this;
            }
            setFunctions(functions) {
              for (let i = 0; i < functions.length; i++) {
                this.addFunction(functions[i]);
              }
              return this;
            }
            setNativeFunctions(nativeFunctions) {
              for (let i = 0; i < nativeFunctions.length; i++) {
                const settings = nativeFunctions[i];
                const { name: name2, source } = settings;
                this.addNativeFunction(name2, source, settings);
              }
              return this;
            }
            setInjectedNative(injectedNative) {
              this.injectedNative = injectedNative;
              return this;
            }
            setPipeline(flag) {
              this.pipeline = flag;
              return this;
            }
            setPrecision(flag) {
              this.precision = flag;
              return this;
            }
            setDimensions(flag) {
              utils.warnDeprecated("method", "setDimensions", "setOutput");
              this.output = flag;
              return this;
            }
            setOutputToTexture(flag) {
              utils.warnDeprecated("method", "setOutputToTexture", "setPipeline");
              this.pipeline = flag;
              return this;
            }
            setImmutable(flag) {
              this.immutable = flag;
              return this;
            }
            setCanvas(canvas) {
              this.canvas = canvas;
              return this;
            }
            setStrictIntegers(flag) {
              this.strictIntegers = flag;
              return this;
            }
            setDynamicOutput(flag) {
              this.dynamicOutput = flag;
              return this;
            }
            setHardcodeConstants(flag) {
              utils.warnDeprecated("method", "setHardcodeConstants");
              this.setDynamicOutput(flag);
              this.setDynamicArguments(flag);
              return this;
            }
            setDynamicArguments(flag) {
              this.dynamicArguments = flag;
              return this;
            }
            setUseLegacyEncoder(flag) {
              this.useLegacyEncoder = flag;
              return this;
            }
            setWarnVarUsage(flag) {
              utils.warnDeprecated("method", "setWarnVarUsage");
              return this;
            }
            getCanvas() {
              utils.warnDeprecated("method", "getCanvas");
              return this.canvas;
            }
            getWebGl() {
              utils.warnDeprecated("method", "getWebGl");
              return this.context;
            }
            setContext(context) {
              this.context = context;
              return this;
            }
            setArgumentTypes(argumentTypes) {
              if (Array.isArray(argumentTypes)) {
                this.argumentTypes = argumentTypes;
              } else {
                this.argumentTypes = [];
                for (const p in argumentTypes) {
                  if (!argumentTypes.hasOwnProperty(p)) continue;
                  const argumentIndex = this.argumentNames.indexOf(p);
                  if (argumentIndex === -1) throw new Error(`unable to find argument ${p}`);
                  this.argumentTypes[argumentIndex] = argumentTypes[p];
                }
              }
              return this;
            }
            setTactic(tactic) {
              this.tactic = tactic;
              return this;
            }
            requestFallback(args) {
              if (!this.onRequestFallback) {
                throw new Error(`"onRequestFallback" not defined on ${this.constructor.name}`);
              }
              this.fallbackRequested = true;
              return this.onRequestFallback(args);
            }
            validateSettings() {
              throw new Error(`"validateSettings" not defined on ${this.constructor.name}`);
            }
            addSubKernel(subKernel) {
              if (this.subKernels === null) {
                this.subKernels = [];
              }
              if (!subKernel.source) throw new Error('subKernel missing "source" property');
              if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing "property" property');
              if (!subKernel.name) throw new Error('subKernel missing "name" property');
              this.subKernels.push(subKernel);
              return this;
            }
            destroy(removeCanvasReferences) {
              throw new Error(`"destroy" called on ${this.constructor.name}`);
            }
            getBitRatio(value2) {
              if (this.precision === "single") {
                return 4;
              } else if (Array.isArray(value2[0])) {
                return this.getBitRatio(value2[0]);
              } else if (value2.constructor === Input2) {
                return this.getBitRatio(value2.value);
              }
              switch (value2.constructor) {
                case Uint8ClampedArray:
                case Uint8Array:
                case Int8Array:
                  return 1;
                case Uint16Array:
                case Int16Array:
                  return 2;
                case Float32Array:
                case Int32Array:
                default:
                  return 4;
              }
            }
            getPixels(flip) {
              throw new Error(`"getPixels" called on ${this.constructor.name}`);
            }
            checkOutput() {
              if (!this.output || !utils.isArray(this.output)) throw new Error("kernel.output not an array");
              if (this.output.length < 1) throw new Error("kernel.output is empty, needs at least 1 value");
              for (let i = 0; i < this.output.length; i++) {
                if (isNaN(this.output[i]) || this.output[i] < 1) {
                  throw new Error(`${this.constructor.name}.output[${i}] incorrectly defined as \`${this.output[i]}\`, needs to be numeric, and greater than 0`);
                }
              }
            }
            prependString(value2) {
              throw new Error(`"prependString" called on ${this.constructor.name}`);
            }
            hasPrependString(value2) {
              throw new Error(`"hasPrependString" called on ${this.constructor.name}`);
            }
            toJSON() {
              return {
                settings: {
                  output: this.output,
                  pipeline: this.pipeline,
                  argumentNames: this.argumentNames,
                  argumentsTypes: this.argumentTypes,
                  constants: this.constants,
                  pluginNames: this.plugins ? this.plugins.map((plugin) => plugin.name) : null,
                  returnType: this.returnType
                }
              };
            }
            buildSignature(args) {
              const Constructor = this.constructor;
              this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));
            }
            static getArgumentTypes(kernel, args) {
              const argumentTypes = new Array(args.length);
              for (let i = 0; i < args.length; i++) {
                const arg = args[i];
                const type = kernel.argumentTypes[i];
                if (arg.type) {
                  argumentTypes[i] = arg.type;
                } else {
                  switch (type) {
                    case "Number":
                    case "Integer":
                    case "Float":
                    case "ArrayTexture(1)":
                      argumentTypes[i] = utils.getVariableType(arg);
                      break;
                    default:
                      argumentTypes[i] = type;
                  }
                }
              }
              return argumentTypes;
            }
            static getSignature(kernel, argumentTypes) {
              throw new Error(`"getSignature" not implemented on ${this.name}`);
            }
            functionToIGPUFunction(source, settings = {}) {
              if (typeof source !== "string" && typeof source !== "function") throw new Error("source not a string or function");
              const sourceString = typeof source === "string" ? source : source.toString();
              let argumentTypes = [];
              if (Array.isArray(settings.argumentTypes)) {
                argumentTypes = settings.argumentTypes;
              } else if (typeof settings.argumentTypes === "object") {
                argumentTypes = utils.getArgumentNamesFromString(sourceString).map((name2) => settings.argumentTypes[name2]) || [];
              } else {
                argumentTypes = settings.argumentTypes || [];
              }
              return {
                name: utils.getFunctionNameFromString(sourceString) || null,
                source: sourceString,
                argumentTypes,
                returnType: settings.returnType || null
              };
            }
            onActivate(previousKernel) {
            }
          }
          function splitArgumentTypes(argumentTypesObject) {
            const argumentNames = Object.keys(argumentTypesObject);
            const argumentTypes = [];
            for (let i = 0; i < argumentNames.length; i++) {
              const argumentName = argumentNames[i];
              argumentTypes.push(argumentTypesObject[argumentName]);
            }
            return { argumentTypes, argumentNames };
          }
          module3.exports = {
            Kernel
          };
        }, { "../input": 110, "../utils": 114 }], 37: [function(require2, module3, exports3) {
          const fragmentShader = `__HEADER__;
__FLOAT_TACTIC_DECLARATION__;
__INT_TACTIC_DECLARATION__;
__SAMPLER_2D_TACTIC_DECLARATION__;

const int LOOP_MAX = __LOOP_MAX__;

__PLUGINS__;
__CONSTANTS__;

varying vec2 vTexCoord;

float acosh(float x) {
  return log(x + sqrt(x * x - 1.0));
}

float sinh(float x) {
  return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;
}

float asinh(float x) {
  return log(x + sqrt(x * x + 1.0));
}

float atan2(float v1, float v2) {
  if (v1 == 0.0 || v2 == 0.0) return 0.0;
  return atan(v1 / v2);
}

float atanh(float x) {
  x = (x + 1.0) / (x - 1.0);
  if (x < 0.0) {
    return 0.5 * log(-x);
  }
  return 0.5 * log(x);
}

float cbrt(float x) {
  if (x >= 0.0) {
    return pow(x, 1.0 / 3.0);
  } else {
    return -pow(x, 1.0 / 3.0);
  }
}

float cosh(float x) {
  return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; 
}

float expm1(float x) {
  return pow(${Math.E}, x) - 1.0; 
}

float fround(highp float x) {
  return x;
}

float imul(float v1, float v2) {
  return float(int(v1) * int(v2));
}

float log10(float x) {
  return log2(x) * (1.0 / log2(10.0));
}

float log1p(float x) {
  return log(1.0 + x);
}

float _pow(float v1, float v2) {
  if (v2 == 0.0) return 1.0;
  return pow(v1, v2);
}

float tanh(float x) {
  float e = exp(2.0 * x);
  return (e - 1.0) / (e + 1.0);
}

float trunc(float x) {
  if (x >= 0.0) {
    return floor(x); 
  } else {
    return ceil(x);
  }
}

vec4 _round(vec4 x) {
  return floor(x + 0.5);
}

float _round(float x) {
  return floor(x + 0.5);
}

const int BIT_COUNT = 32;
int modi(int x, int y) {
  return x - y * (x / y);
}

int bitwiseOr(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseXOR(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseAnd(int a, int b) {
  int result = 0;
  int n = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 && b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseNot(int a) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if (modi(a, 2) == 0) {
      result += n;    
    }
    a = a / 2;
    n = n * 2;
  }
  return result;
}
int bitwiseZeroFillLeftShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n *= 2;
  }

  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

int bitwiseSignedRightShift(int num, int shifts) {
  return int(floor(float(num) / pow(2.0, float(shifts))));
}

int bitwiseZeroFillRightShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n /= 2;
  }
  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

vec2 integerMod(vec2 x, float y) {
  vec2 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec3 integerMod(vec3 x, float y) {
  vec3 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec4 integerMod(vec4 x, vec4 y) {
  vec4 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

float integerMod(float x, float y) {
  float res = floor(mod(x, y));
  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);
}

int integerMod(int x, int y) {
  return x - (y * int(x / y));
}

__DIVIDE_WITH_INTEGER_CHECK__;

// Here be dragons!
// DO NOT OPTIMIZE THIS CODE
// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE
// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME
const vec2 MAGIC_VEC = vec2(1.0, -256.0);
const vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);
const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536
float decode32(vec4 texel) {
  __DECODE32_ENDIANNESS__;
  texel *= 255.0;
  vec2 gte128;
  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;
  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;
  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);
  float res = exp2(_round(exponent));
  texel.b = texel.b - 128.0 * gte128.x;
  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;
  res *= gte128.y * -2.0 + 1.0;
  return res;
}

float decode16(vec4 texel, int index) {
  int channel = integerMod(index, 2);
  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;
  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;
  return 0.0;
}

float decode8(vec4 texel, int index) {
  int channel = integerMod(index, 4);
  if (channel == 0) return texel.r * 255.0;
  if (channel == 1) return texel.g * 255.0;
  if (channel == 2) return texel.b * 255.0;
  if (channel == 3) return texel.a * 255.0;
  return 0.0;
}

vec4 legacyEncode32(float f) {
  float F = abs(f);
  float sign = f < 0.0 ? 1.0 : 0.0;
  float exponent = floor(log2(F));
  float mantissa = (exp2(-exponent) * F);
  // exponent += floor(log2(mantissa));
  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;
  texel.rg = integerMod(texel.rg, 256.0);
  texel.b = integerMod(texel.b, 128.0);
  texel.a = exponent*0.5 + 63.5;
  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;
  texel = floor(texel);
  texel *= 0.003921569; // 1/255
  __ENCODE32_ENDIANNESS__;
  return texel;
}

// https://github.com/gpujs/gpu.js/wiki/Encoder-details
vec4 encode32(float value) {
  if (value == 0.0) return vec4(0, 0, 0, 0);

  float exponent;
  float mantissa;
  vec4  result;
  float sgn;

  sgn = step(0.0, -value);
  value = abs(value);

  exponent = floor(log2(value));

  mantissa = value*pow(2.0, -exponent)-1.0;
  exponent = exponent+127.0;
  result   = vec4(0,0,0,0);

  result.a = floor(exponent/2.0);
  exponent = exponent - result.a*2.0;
  result.a = result.a + 128.0*sgn;

  result.b = floor(mantissa * 128.0);
  mantissa = mantissa - result.b / 128.0;
  result.b = result.b + exponent*128.0;

  result.g = floor(mantissa*32768.0);
  mantissa = mantissa - result.g/32768.0;

  result.r = floor(mantissa*8388608.0);
  return result/255.0;
}
// Dragons end here

int index;
ivec3 threadId;

ivec3 indexTo3D(int idx, ivec3 texDim) {
  int z = int(idx / (texDim.x * texDim.y));
  idx -= z * int(texDim.x * texDim.y);
  int y = int(idx / texDim.x);
  int x = int(integerMod(idx, texDim.x));
  return ivec3(x, y, z);
}

float get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize));
  return decode32(texel);
}

float get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x * 2;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));
  return decode16(texel, index);
}

float get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x * 4;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));
  return decode8(texel, index);
}

float getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 4);
  index = index / 4;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize));
  if (channel == 0) return texel.r;
  if (channel == 1) return texel.g;
  if (channel == 2) return texel.b;
  if (channel == 3) return texel.a;
  return 0.0;
}

vec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  return texture2D(tex, st / vec2(texSize));
}

float getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return result[0];
}

vec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec2(result[0], result[1]);
}

vec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int channel = integerMod(index, 2);
  index = index / 2;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize));
  if (channel == 0) return vec2(texel.r, texel.g);
  if (channel == 1) return vec2(texel.b, texel.a);
  return vec2(0.0, 0.0);
}

vec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec3(result[0], result[1], result[2]);
}

vec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));
  int vectorIndex = fieldIndex / 4;
  int vectorOffset = fieldIndex - vectorIndex * 4;
  int readY = vectorIndex / texSize.x;
  int readX = vectorIndex - readY * texSize.x;
  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));
  
  if (vectorOffset == 0) {
    return tex1.xyz;
  } else if (vectorOffset == 1) {
    return tex1.yzw;
  } else {
    readX++;
    if (readX >= texSize.x) {
      readX = 0;
      readY++;
    }
    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));
    if (vectorOffset == 2) {
      return vec3(tex1.z, tex1.w, tex2.x);
    } else {
      return vec3(tex1.w, tex2.x, tex2.y);
    }
  }
}

vec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  return getImage2D(tex, texSize, texDim, z, y, x);
}

vec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 2);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture2D(tex, st / vec2(texSize));
  return vec4(texel.r, texel.g, texel.b, texel.a);
}

vec4 actualColor;
void color(float r, float g, float b, float a) {
  actualColor = vec4(r,g,b,a);
}

void color(float r, float g, float b) {
  color(r,g,b,1.0);
}

void color(sampler2D image) {
  actualColor = texture2D(image, vTexCoord);
}

float modulo(float number, float divisor) {
  if (number < 0.0) {
    number = abs(number);
    if (divisor < 0.0) {
      divisor = abs(divisor);
    }
    return -mod(number, divisor);
  }
  if (divisor < 0.0) {
    divisor = abs(divisor);
  }
  return mod(number, divisor);
}

__INJECTED_NATIVE__;
__MAIN_CONSTANTS__;
__MAIN_ARGUMENTS__;
__KERNEL__;

void main(void) {
  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;
  __MAIN_RESULT__;
}`;
          module3.exports = {
            fragmentShader
          };
        }, {}], 38: [function(require2, module3, exports3) {
          const { utils } = require2("../../utils");
          const { FunctionNode } = require2("../function-node");
          class WebGLFunctionNode extends FunctionNode {
            constructor(source, settings) {
              super(source, settings);
              if (settings && settings.hasOwnProperty("fixIntegerDivisionAccuracy")) {
                this.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;
              }
            }
            astConditionalExpression(ast, retArr) {
              if (ast.type !== "ConditionalExpression") {
                throw this.astErrorOutput("Not a conditional expression", ast);
              }
              const consequentType = this.getType(ast.consequent);
              const alternateType = this.getType(ast.alternate);
              if (consequentType === null && alternateType === null) {
                retArr.push("if (");
                this.astGeneric(ast.test, retArr);
                retArr.push(") {");
                this.astGeneric(ast.consequent, retArr);
                retArr.push(";");
                retArr.push("} else {");
                this.astGeneric(ast.alternate, retArr);
                retArr.push(";");
                retArr.push("}");
                return retArr;
              }
              retArr.push("(");
              this.astGeneric(ast.test, retArr);
              retArr.push("?");
              this.astGeneric(ast.consequent, retArr);
              retArr.push(":");
              this.astGeneric(ast.alternate, retArr);
              retArr.push(")");
              return retArr;
            }
            astFunction(ast, retArr) {
              if (this.isRootKernel) {
                retArr.push("void");
              } else {
                if (!this.returnType) {
                  const lastReturn = this.findLastReturn();
                  if (lastReturn) {
                    this.returnType = this.getType(ast.body);
                    if (this.returnType === "LiteralInteger") {
                      this.returnType = "Number";
                    }
                  }
                }
                const { returnType } = this;
                if (!returnType) {
                  retArr.push("void");
                } else {
                  const type = typeMap[returnType];
                  if (!type) {
                    throw new Error(`unknown type ${returnType}`);
                  }
                  retArr.push(type);
                }
              }
              retArr.push(" ");
              retArr.push(this.name);
              retArr.push("(");
              if (!this.isRootKernel) {
                for (let i = 0; i < this.argumentNames.length; ++i) {
                  const argumentName = this.argumentNames[i];
                  if (i > 0) {
                    retArr.push(", ");
                  }
                  let argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];
                  if (!argumentType) {
                    throw this.astErrorOutput(`Unknown argument ${argumentName} type`, ast);
                  }
                  if (argumentType === "LiteralInteger") {
                    this.argumentTypes[i] = argumentType = "Number";
                  }
                  const type = typeMap[argumentType];
                  if (!type) {
                    throw this.astErrorOutput("Unexpected expression", ast);
                  }
                  const name2 = utils.sanitizeName(argumentName);
                  if (type === "sampler2D" || type === "sampler2DArray") {
                    retArr.push(`${type} user_${name2},ivec2 user_${name2}Size,ivec3 user_${name2}Dim`);
                  } else {
                    retArr.push(`${type} user_${name2}`);
                  }
                }
              }
              retArr.push(") {\n");
              for (let i = 0; i < ast.body.body.length; ++i) {
                this.astGeneric(ast.body.body[i], retArr);
                retArr.push("\n");
              }
              retArr.push("}\n");
              return retArr;
            }
            astReturnStatement(ast, retArr) {
              if (!ast.argument) throw this.astErrorOutput("Unexpected return statement", ast);
              this.pushState("skip-literal-correction");
              const type = this.getType(ast.argument);
              this.popState("skip-literal-correction");
              const result = [];
              if (!this.returnType) {
                if (type === "LiteralInteger" || type === "Integer") {
                  this.returnType = "Number";
                } else {
                  this.returnType = type;
                }
              }
              switch (this.returnType) {
                case "LiteralInteger":
                case "Number":
                case "Float":
                  switch (type) {
                    case "Integer":
                      result.push("float(");
                      this.astGeneric(ast.argument, result);
                      result.push(")");
                      break;
                    case "LiteralInteger":
                      this.castLiteralToFloat(ast.argument, result);
                      if (this.getType(ast) === "Integer") {
                        result.unshift("float(");
                        result.push(")");
                      }
                      break;
                    default:
                      this.astGeneric(ast.argument, result);
                  }
                  break;
                case "Integer":
                  switch (type) {
                    case "Float":
                    case "Number":
                      this.castValueToInteger(ast.argument, result);
                      break;
                    case "LiteralInteger":
                      this.castLiteralToInteger(ast.argument, result);
                      break;
                    default:
                      this.astGeneric(ast.argument, result);
                  }
                  break;
                case "Array(4)":
                case "Array(3)":
                case "Array(2)":
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                case "Input":
                  this.astGeneric(ast.argument, result);
                  break;
                default:
                  throw this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);
              }
              if (this.isRootKernel) {
                retArr.push(`kernelResult = ${result.join("")};`);
                retArr.push("return;");
              } else if (this.isSubKernel) {
                retArr.push(`subKernelResult_${this.name} = ${result.join("")};`);
                retArr.push(`return subKernelResult_${this.name};`);
              } else {
                retArr.push(`return ${result.join("")};`);
              }
              return retArr;
            }
            astLiteral(ast, retArr) {
              if (isNaN(ast.value)) {
                throw this.astErrorOutput(
                  "Non-numeric literal not supported : " + ast.value,
                  ast
                );
              }
              const key = this.astKey(ast);
              if (Number.isInteger(ast.value)) {
                if (this.isState("casting-to-integer") || this.isState("building-integer")) {
                  this.literalTypes[key] = "Integer";
                  retArr.push(`${ast.value}`);
                } else if (this.isState("casting-to-float") || this.isState("building-float")) {
                  this.literalTypes[key] = "Number";
                  retArr.push(`${ast.value}.0`);
                } else {
                  this.literalTypes[key] = "Number";
                  retArr.push(`${ast.value}.0`);
                }
              } else if (this.isState("casting-to-integer") || this.isState("building-integer")) {
                this.literalTypes[key] = "Integer";
                retArr.push(Math.round(ast.value));
              } else {
                this.literalTypes[key] = "Number";
                retArr.push(`${ast.value}`);
              }
              return retArr;
            }
            astBinaryExpression(ast, retArr) {
              if (this.checkAndUpconvertOperator(ast, retArr)) {
                return retArr;
              }
              if (this.fixIntegerDivisionAccuracy && ast.operator === "/") {
                retArr.push("divWithIntCheck(");
                this.pushState("building-float");
                switch (this.getType(ast.left)) {
                  case "Integer":
                    this.castValueToFloat(ast.left, retArr);
                    break;
                  case "LiteralInteger":
                    this.castLiteralToFloat(ast.left, retArr);
                    break;
                  default:
                    this.astGeneric(ast.left, retArr);
                }
                retArr.push(", ");
                switch (this.getType(ast.right)) {
                  case "Integer":
                    this.castValueToFloat(ast.right, retArr);
                    break;
                  case "LiteralInteger":
                    this.castLiteralToFloat(ast.right, retArr);
                    break;
                  default:
                    this.astGeneric(ast.right, retArr);
                }
                this.popState("building-float");
                retArr.push(")");
                return retArr;
              }
              retArr.push("(");
              const leftType = this.getType(ast.left) || "Number";
              const rightType = this.getType(ast.right) || "Number";
              if (!leftType || !rightType) {
                throw this.astErrorOutput(`Unhandled binary expression`, ast);
              }
              const key = leftType + " & " + rightType;
              switch (key) {
                case "Integer & Integer":
                  this.pushState("building-integer");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState("building-integer");
                  break;
                case "Number & Float":
                case "Float & Number":
                case "Float & Float":
                case "Number & Number":
                  this.pushState("building-float");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState("building-float");
                  break;
                case "LiteralInteger & LiteralInteger":
                  if (this.isState("casting-to-integer") || this.isState("building-integer")) {
                    this.pushState("building-integer");
                    this.astGeneric(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.astGeneric(ast.right, retArr);
                    this.popState("building-integer");
                  } else {
                    this.pushState("building-float");
                    this.castLiteralToFloat(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.castLiteralToFloat(ast.right, retArr);
                    this.popState("building-float");
                  }
                  break;
                case "Integer & Float":
                case "Integer & Number":
                  if (ast.operator === ">" || ast.operator === "<" && ast.right.type === "Literal") {
                    if (!Number.isInteger(ast.right.value)) {
                      this.pushState("building-float");
                      this.castValueToFloat(ast.left, retArr);
                      retArr.push(operatorMap[ast.operator] || ast.operator);
                      this.astGeneric(ast.right, retArr);
                      this.popState("building-float");
                      break;
                    }
                  }
                  this.pushState("building-integer");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.pushState("casting-to-integer");
                  if (ast.right.type === "Literal") {
                    const literalResult = [];
                    this.astGeneric(ast.right, literalResult);
                    const literalType = this.getType(ast.right);
                    if (literalType === "Integer") {
                      retArr.push(literalResult.join(""));
                    } else {
                      throw this.astErrorOutput(`Unhandled binary expression with literal`, ast);
                    }
                  } else {
                    retArr.push("int(");
                    this.astGeneric(ast.right, retArr);
                    retArr.push(")");
                  }
                  this.popState("casting-to-integer");
                  this.popState("building-integer");
                  break;
                case "Integer & LiteralInteger":
                  this.pushState("building-integer");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToInteger(ast.right, retArr);
                  this.popState("building-integer");
                  break;
                case "Number & Integer":
                  this.pushState("building-float");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castValueToFloat(ast.right, retArr);
                  this.popState("building-float");
                  break;
                case "Float & LiteralInteger":
                case "Number & LiteralInteger":
                  this.pushState("building-float");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToFloat(ast.right, retArr);
                  this.popState("building-float");
                  break;
                case "LiteralInteger & Float":
                case "LiteralInteger & Number":
                  if (this.isState("casting-to-integer")) {
                    this.pushState("building-integer");
                    this.castLiteralToInteger(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.castValueToInteger(ast.right, retArr);
                    this.popState("building-integer");
                  } else {
                    this.pushState("building-float");
                    this.astGeneric(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.pushState("casting-to-float");
                    this.astGeneric(ast.right, retArr);
                    this.popState("casting-to-float");
                    this.popState("building-float");
                  }
                  break;
                case "LiteralInteger & Integer":
                  this.pushState("building-integer");
                  this.castLiteralToInteger(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState("building-integer");
                  break;
                case "Boolean & Boolean":
                  this.pushState("building-boolean");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState("building-boolean");
                  break;
                case "Float & Integer":
                  this.pushState("building-float");
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castValueToFloat(ast.right, retArr);
                  this.popState("building-float");
                  break;
                default:
                  throw this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);
              }
              retArr.push(")");
              return retArr;
            }
            checkAndUpconvertOperator(ast, retArr) {
              const bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);
              if (bitwiseResult) {
                return bitwiseResult;
              }
              const upconvertableOperators = {
                "%": this.fixIntegerDivisionAccuracy ? "integerCorrectionModulo" : "modulo",
                "**": "pow"
              };
              const foundOperator = upconvertableOperators[ast.operator];
              if (!foundOperator) return null;
              retArr.push(foundOperator);
              retArr.push("(");
              switch (this.getType(ast.left)) {
                case "Integer":
                  this.castValueToFloat(ast.left, retArr);
                  break;
                case "LiteralInteger":
                  this.castLiteralToFloat(ast.left, retArr);
                  break;
                default:
                  this.astGeneric(ast.left, retArr);
              }
              retArr.push(",");
              switch (this.getType(ast.right)) {
                case "Integer":
                  this.castValueToFloat(ast.right, retArr);
                  break;
                case "LiteralInteger":
                  this.castLiteralToFloat(ast.right, retArr);
                  break;
                default:
                  this.astGeneric(ast.right, retArr);
              }
              retArr.push(")");
              return retArr;
            }
            checkAndUpconvertBitwiseOperators(ast, retArr) {
              const upconvertableOperators = {
                "&": "bitwiseAnd",
                "|": "bitwiseOr",
                "^": "bitwiseXOR",
                "<<": "bitwiseZeroFillLeftShift",
                ">>": "bitwiseSignedRightShift",
                ">>>": "bitwiseZeroFillRightShift"
              };
              const foundOperator = upconvertableOperators[ast.operator];
              if (!foundOperator) return null;
              retArr.push(foundOperator);
              retArr.push("(");
              const leftType = this.getType(ast.left);
              switch (leftType) {
                case "Number":
                case "Float":
                  this.castValueToInteger(ast.left, retArr);
                  break;
                case "LiteralInteger":
                  this.castLiteralToInteger(ast.left, retArr);
                  break;
                default:
                  this.astGeneric(ast.left, retArr);
              }
              retArr.push(",");
              const rightType = this.getType(ast.right);
              switch (rightType) {
                case "Number":
                case "Float":
                  this.castValueToInteger(ast.right, retArr);
                  break;
                case "LiteralInteger":
                  this.castLiteralToInteger(ast.right, retArr);
                  break;
                default:
                  this.astGeneric(ast.right, retArr);
              }
              retArr.push(")");
              return retArr;
            }
            checkAndUpconvertBitwiseUnary(ast, retArr) {
              const upconvertableOperators = {
                "~": "bitwiseNot"
              };
              const foundOperator = upconvertableOperators[ast.operator];
              if (!foundOperator) return null;
              retArr.push(foundOperator);
              retArr.push("(");
              switch (this.getType(ast.argument)) {
                case "Number":
                case "Float":
                  this.castValueToInteger(ast.argument, retArr);
                  break;
                case "LiteralInteger":
                  this.castLiteralToInteger(ast.argument, retArr);
                  break;
                default:
                  this.astGeneric(ast.argument, retArr);
              }
              retArr.push(")");
              return retArr;
            }
            castLiteralToInteger(ast, retArr) {
              this.pushState("casting-to-integer");
              this.astGeneric(ast, retArr);
              this.popState("casting-to-integer");
              return retArr;
            }
            castLiteralToFloat(ast, retArr) {
              this.pushState("casting-to-float");
              this.astGeneric(ast, retArr);
              this.popState("casting-to-float");
              return retArr;
            }
            castValueToInteger(ast, retArr) {
              this.pushState("casting-to-integer");
              retArr.push("int(");
              this.astGeneric(ast, retArr);
              retArr.push(")");
              this.popState("casting-to-integer");
              return retArr;
            }
            castValueToFloat(ast, retArr) {
              this.pushState("casting-to-float");
              retArr.push("float(");
              this.astGeneric(ast, retArr);
              retArr.push(")");
              this.popState("casting-to-float");
              return retArr;
            }
            astIdentifierExpression(idtNode, retArr) {
              if (idtNode.type !== "Identifier") {
                throw this.astErrorOutput("IdentifierExpression - not an Identifier", idtNode);
              }
              const type = this.getType(idtNode);
              const name2 = utils.sanitizeName(idtNode.name);
              if (idtNode.name === "Infinity") {
                retArr.push("3.402823466e+38");
              } else if (type === "Boolean") {
                if (this.argumentNames.indexOf(name2) > -1) {
                  retArr.push(`bool(user_${name2})`);
                } else {
                  retArr.push(`user_${name2}`);
                }
              } else {
                retArr.push(`user_${name2}`);
              }
              return retArr;
            }
            astForStatement(forNode, retArr) {
              if (forNode.type !== "ForStatement") {
                throw this.astErrorOutput("Invalid for statement", forNode);
              }
              const initArr = [];
              const testArr = [];
              const updateArr = [];
              const bodyArr = [];
              let isSafe = null;
              if (forNode.init) {
                const { declarations } = forNode.init;
                if (declarations.length > 1) {
                  isSafe = false;
                }
                this.astGeneric(forNode.init, initArr);
                for (let i = 0; i < declarations.length; i++) {
                  if (declarations[i].init && declarations[i].init.type !== "Literal") {
                    isSafe = false;
                  }
                }
              } else {
                isSafe = false;
              }
              if (forNode.test) {
                this.astGeneric(forNode.test, testArr);
              } else {
                isSafe = false;
              }
              if (forNode.update) {
                this.astGeneric(forNode.update, updateArr);
              } else {
                isSafe = false;
              }
              if (forNode.body) {
                this.pushState("loop-body");
                this.astGeneric(forNode.body, bodyArr);
                this.popState("loop-body");
              }
              if (isSafe === null) {
                isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
              }
              if (isSafe) {
                const initString = initArr.join("");
                const initNeedsSemiColon = initString[initString.length - 1] !== ";";
                retArr.push(`for (${initString}${initNeedsSemiColon ? ";" : ""}${testArr.join("")};${updateArr.join("")}){
`);
                retArr.push(bodyArr.join(""));
                retArr.push("}\n");
              } else {
                const iVariableName = this.getInternalVariableName("safeI");
                if (initArr.length > 0) {
                  retArr.push(initArr.join(""), "\n");
                }
                retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){
`);
                if (testArr.length > 0) {
                  retArr.push(`if (!${testArr.join("")}) break;
`);
                }
                retArr.push(bodyArr.join(""));
                retArr.push(`
${updateArr.join("")};`);
                retArr.push("}\n");
              }
              return retArr;
            }
            astWhileStatement(whileNode, retArr) {
              if (whileNode.type !== "WhileStatement") {
                throw this.astErrorOutput("Invalid while statement", whileNode);
              }
              const iVariableName = this.getInternalVariableName("safeI");
              retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){
`);
              retArr.push("if (!");
              this.astGeneric(whileNode.test, retArr);
              retArr.push(") break;\n");
              this.astGeneric(whileNode.body, retArr);
              retArr.push("}\n");
              return retArr;
            }
            astDoWhileStatement(doWhileNode, retArr) {
              if (doWhileNode.type !== "DoWhileStatement") {
                throw this.astErrorOutput("Invalid while statement", doWhileNode);
              }
              const iVariableName = this.getInternalVariableName("safeI");
              retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){
`);
              this.astGeneric(doWhileNode.body, retArr);
              retArr.push("if (!");
              this.astGeneric(doWhileNode.test, retArr);
              retArr.push(") break;\n");
              retArr.push("}\n");
              return retArr;
            }
            astAssignmentExpression(assNode, retArr) {
              if (assNode.operator === "%=") {
                this.astGeneric(assNode.left, retArr);
                retArr.push("=");
                retArr.push("mod(");
                this.astGeneric(assNode.left, retArr);
                retArr.push(",");
                this.astGeneric(assNode.right, retArr);
                retArr.push(")");
              } else if (assNode.operator === "**=") {
                this.astGeneric(assNode.left, retArr);
                retArr.push("=");
                retArr.push("pow(");
                this.astGeneric(assNode.left, retArr);
                retArr.push(",");
                this.astGeneric(assNode.right, retArr);
                retArr.push(")");
              } else {
                const leftType = this.getType(assNode.left);
                const rightType = this.getType(assNode.right);
                this.astGeneric(assNode.left, retArr);
                retArr.push(assNode.operator);
                if (leftType !== "Integer" && rightType === "Integer") {
                  retArr.push("float(");
                  this.astGeneric(assNode.right, retArr);
                  retArr.push(")");
                } else {
                  this.astGeneric(assNode.right, retArr);
                }
                return retArr;
              }
            }
            astBlockStatement(bNode, retArr) {
              if (this.isState("loop-body")) {
                this.pushState("block-body");
                for (let i = 0; i < bNode.body.length; i++) {
                  this.astGeneric(bNode.body[i], retArr);
                }
                this.popState("block-body");
              } else {
                retArr.push("{\n");
                for (let i = 0; i < bNode.body.length; i++) {
                  this.astGeneric(bNode.body[i], retArr);
                }
                retArr.push("}\n");
              }
              return retArr;
            }
            astVariableDeclaration(varDecNode, retArr) {
              const declarations = varDecNode.declarations;
              if (!declarations || !declarations[0] || !declarations[0].init) {
                throw this.astErrorOutput("Unexpected expression", varDecNode);
              }
              const result = [];
              let lastType = null;
              const declarationSets = [];
              let declarationSet = [];
              for (let i = 0; i < declarations.length; i++) {
                const declaration = declarations[i];
                const init = declaration.init;
                const info = this.getDeclaration(declaration.id);
                const actualType = this.getType(declaration.init);
                let type = actualType;
                if (type === "LiteralInteger") {
                  if (info.suggestedType === "Integer") {
                    type = "Integer";
                  } else {
                    type = "Number";
                  }
                }
                const markupType = typeMap[type];
                if (!markupType) {
                  throw this.astErrorOutput(`Markup type ${type} not handled`, varDecNode);
                }
                const declarationResult = [];
                if (actualType === "Integer" && type === "Integer") {
                  info.valueType = "Number";
                  if (i === 0 || lastType === null) {
                    declarationResult.push("float ");
                  } else if (type !== lastType) {
                    throw new Error("Unhandled declaration");
                  }
                  lastType = type;
                  declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);
                  declarationResult.push("float(");
                  this.astGeneric(init, declarationResult);
                  declarationResult.push(")");
                } else {
                  info.valueType = type;
                  if (i === 0 || lastType === null) {
                    declarationResult.push(`${markupType} `);
                  } else if (type !== lastType) {
                    declarationSets.push(declarationSet.join(","));
                    declarationSet = [];
                    declarationResult.push(`${markupType} `);
                  }
                  lastType = type;
                  declarationResult.push(`user_${utils.sanitizeName(declaration.id.name)}=`);
                  if (actualType === "Number" && type === "Integer") {
                    if (init.left && init.left.type === "Literal") {
                      this.astGeneric(init, declarationResult);
                    } else {
                      declarationResult.push("int(");
                      this.astGeneric(init, declarationResult);
                      declarationResult.push(")");
                    }
                  } else if (actualType === "LiteralInteger" && type === "Integer") {
                    this.castLiteralToInteger(init, declarationResult);
                  } else {
                    this.astGeneric(init, declarationResult);
                  }
                }
                declarationSet.push(declarationResult.join(""));
              }
              if (declarationSet.length > 0) {
                declarationSets.push(declarationSet.join(","));
              }
              result.push(declarationSets.join(";"));
              retArr.push(result.join(""));
              retArr.push(";");
              return retArr;
            }
            astIfStatement(ifNode, retArr) {
              retArr.push("if (");
              this.astGeneric(ifNode.test, retArr);
              retArr.push(")");
              if (ifNode.consequent.type === "BlockStatement") {
                this.astGeneric(ifNode.consequent, retArr);
              } else {
                retArr.push(" {\n");
                this.astGeneric(ifNode.consequent, retArr);
                retArr.push("\n}\n");
              }
              if (ifNode.alternate) {
                retArr.push("else ");
                if (ifNode.alternate.type === "BlockStatement" || ifNode.alternate.type === "IfStatement") {
                  this.astGeneric(ifNode.alternate, retArr);
                } else {
                  retArr.push(" {\n");
                  this.astGeneric(ifNode.alternate, retArr);
                  retArr.push("\n}\n");
                }
              }
              return retArr;
            }
            astSwitchStatement(ast, retArr) {
              if (ast.type !== "SwitchStatement") {
                throw this.astErrorOutput("Invalid switch statement", ast);
              }
              const { discriminant, cases } = ast;
              const type = this.getType(discriminant);
              const varName = `switchDiscriminant${this.astKey(ast, "_")}`;
              switch (type) {
                case "Float":
                case "Number":
                  retArr.push(`float ${varName} = `);
                  this.astGeneric(discriminant, retArr);
                  retArr.push(";\n");
                  break;
                case "Integer":
                  retArr.push(`int ${varName} = `);
                  this.astGeneric(discriminant, retArr);
                  retArr.push(";\n");
                  break;
              }
              if (cases.length === 1 && !cases[0].test) {
                this.astGeneric(cases[0].consequent, retArr);
                return retArr;
              }
              let fallingThrough = false;
              let defaultResult = [];
              let movingDefaultToEnd = false;
              let pastFirstIf = false;
              for (let i = 0; i < cases.length; i++) {
                if (!cases[i].test) {
                  if (cases.length > i + 1) {
                    movingDefaultToEnd = true;
                    this.astGeneric(cases[i].consequent, defaultResult);
                    continue;
                  } else {
                    retArr.push(" else {\n");
                  }
                } else {
                  if (i === 0 || !pastFirstIf) {
                    pastFirstIf = true;
                    retArr.push(`if (${varName} == `);
                  } else {
                    if (fallingThrough) {
                      retArr.push(`${varName} == `);
                      fallingThrough = false;
                    } else {
                      retArr.push(` else if (${varName} == `);
                    }
                  }
                  if (type === "Integer") {
                    const testType = this.getType(cases[i].test);
                    switch (testType) {
                      case "Number":
                      case "Float":
                        this.castValueToInteger(cases[i].test, retArr);
                        break;
                      case "LiteralInteger":
                        this.castLiteralToInteger(cases[i].test, retArr);
                        break;
                    }
                  } else if (type === "Float") {
                    const testType = this.getType(cases[i].test);
                    switch (testType) {
                      case "LiteralInteger":
                        this.castLiteralToFloat(cases[i].test, retArr);
                        break;
                      case "Integer":
                        this.castValueToFloat(cases[i].test, retArr);
                        break;
                    }
                  } else {
                    throw new Error("unhanlded");
                  }
                  if (!cases[i].consequent || cases[i].consequent.length === 0) {
                    fallingThrough = true;
                    retArr.push(" || ");
                    continue;
                  }
                  retArr.push(`) {
`);
                }
                this.astGeneric(cases[i].consequent, retArr);
                retArr.push("\n}");
              }
              if (movingDefaultToEnd) {
                retArr.push(" else {");
                retArr.push(defaultResult.join(""));
                retArr.push("}");
              }
              return retArr;
            }
            astThisExpression(tNode, retArr) {
              retArr.push("this");
              return retArr;
            }
            astMemberExpression(mNode, retArr) {
              const {
                property,
                name: name2,
                signature,
                origin: origin2,
                type,
                xProperty,
                yProperty,
                zProperty
              } = this.getMemberExpressionDetails(mNode);
              switch (signature) {
                case "value.thread.value":
                case "this.thread.value":
                  if (name2 !== "x" && name2 !== "y" && name2 !== "z") {
                    throw this.astErrorOutput("Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`", mNode);
                  }
                  retArr.push(`threadId.${name2}`);
                  return retArr;
                case "this.output.value":
                  if (this.dynamicOutput) {
                    switch (name2) {
                      case "x":
                        if (this.isState("casting-to-float")) {
                          retArr.push("float(uOutputDim.x)");
                        } else {
                          retArr.push("uOutputDim.x");
                        }
                        break;
                      case "y":
                        if (this.isState("casting-to-float")) {
                          retArr.push("float(uOutputDim.y)");
                        } else {
                          retArr.push("uOutputDim.y");
                        }
                        break;
                      case "z":
                        if (this.isState("casting-to-float")) {
                          retArr.push("float(uOutputDim.z)");
                        } else {
                          retArr.push("uOutputDim.z");
                        }
                        break;
                      default:
                        throw this.astErrorOutput("Unexpected expression", mNode);
                    }
                  } else {
                    switch (name2) {
                      case "x":
                        if (this.isState("casting-to-integer")) {
                          retArr.push(this.output[0]);
                        } else {
                          retArr.push(this.output[0], ".0");
                        }
                        break;
                      case "y":
                        if (this.isState("casting-to-integer")) {
                          retArr.push(this.output[1]);
                        } else {
                          retArr.push(this.output[1], ".0");
                        }
                        break;
                      case "z":
                        if (this.isState("casting-to-integer")) {
                          retArr.push(this.output[2]);
                        } else {
                          retArr.push(this.output[2], ".0");
                        }
                        break;
                      default:
                        throw this.astErrorOutput("Unexpected expression", mNode);
                    }
                  }
                  return retArr;
                case "value":
                  throw this.astErrorOutput("Unexpected expression", mNode);
                case "value[]":
                case "value[][]":
                case "value[][][]":
                case "value[][][][]":
                case "value.value":
                  if (origin2 === "Math") {
                    retArr.push(Math[name2]);
                    return retArr;
                  }
                  const cleanName = utils.sanitizeName(name2);
                  switch (property) {
                    case "r":
                      retArr.push(`user_${cleanName}.r`);
                      return retArr;
                    case "g":
                      retArr.push(`user_${cleanName}.g`);
                      return retArr;
                    case "b":
                      retArr.push(`user_${cleanName}.b`);
                      return retArr;
                    case "a":
                      retArr.push(`user_${cleanName}.a`);
                      return retArr;
                  }
                  break;
                case "this.constants.value":
                  if (typeof xProperty === "undefined") {
                    switch (type) {
                      case "Array(2)":
                      case "Array(3)":
                      case "Array(4)":
                        retArr.push(`constants_${utils.sanitizeName(name2)}`);
                        return retArr;
                    }
                  }
                case "this.constants.value[]":
                case "this.constants.value[][]":
                case "this.constants.value[][][]":
                case "this.constants.value[][][][]":
                  break;
                case "fn()[]":
                  this.astCallExpression(mNode.object, retArr);
                  retArr.push("[");
                  retArr.push(this.memberExpressionPropertyMarkup(property));
                  retArr.push("]");
                  return retArr;
                case "fn()[][]":
                  this.astCallExpression(mNode.object.object, retArr);
                  retArr.push("[");
                  retArr.push(this.memberExpressionPropertyMarkup(mNode.object.property));
                  retArr.push("]");
                  retArr.push("[");
                  retArr.push(this.memberExpressionPropertyMarkup(mNode.property));
                  retArr.push("]");
                  return retArr;
                case "[][]":
                  this.astArrayExpression(mNode.object, retArr);
                  retArr.push("[");
                  retArr.push(this.memberExpressionPropertyMarkup(property));
                  retArr.push("]");
                  return retArr;
                default:
                  throw this.astErrorOutput("Unexpected expression", mNode);
              }
              if (mNode.computed === false) {
                switch (type) {
                  case "Number":
                  case "Integer":
                  case "Float":
                  case "Boolean":
                    retArr.push(`${origin2}_${utils.sanitizeName(name2)}`);
                    return retArr;
                }
              }
              const markupName = `${origin2}_${utils.sanitizeName(name2)}`;
              switch (type) {
                case "Array(2)":
                case "Array(3)":
                case "Array(4)":
                  this.astGeneric(mNode.object, retArr);
                  retArr.push("[");
                  retArr.push(this.memberExpressionPropertyMarkup(xProperty));
                  retArr.push("]");
                  break;
                case "HTMLImageArray":
                  retArr.push(`getImage3D(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "ArrayTexture(1)":
                  retArr.push(`getFloatFromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "Array1D(2)":
                case "Array2D(2)":
                case "Array3D(2)":
                  retArr.push(`getMemoryOptimizedVec2(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "ArrayTexture(2)":
                  retArr.push(`getVec2FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "Array1D(3)":
                case "Array2D(3)":
                case "Array3D(3)":
                  retArr.push(`getMemoryOptimizedVec3(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "ArrayTexture(3)":
                  retArr.push(`getVec3FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "Array1D(4)":
                case "Array2D(4)":
                case "Array3D(4)":
                  retArr.push(`getMemoryOptimizedVec4(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "ArrayTexture(4)":
                case "HTMLCanvas":
                case "OffscreenCanvas":
                case "HTMLImage":
                case "ImageBitmap":
                case "ImageData":
                case "HTMLVideo":
                  retArr.push(`getVec4FromSampler2D(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "NumberTexture":
                case "Array":
                case "Array2D":
                case "Array3D":
                case "Array4D":
                case "Input":
                case "Number":
                case "Float":
                case "Integer":
                  if (this.precision === "single") {
                    retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                    this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                    retArr.push(")");
                  } else {
                    const bitRatio = origin2 === "user" ? this.lookupFunctionArgumentBitRatio(this.name, name2) : this.constantBitRatios[name2];
                    switch (bitRatio) {
                      case 1:
                        retArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                        break;
                      case 2:
                        retArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                        break;
                      case 4:
                      case 0:
                        retArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                        break;
                      default:
                        throw new Error(`unhandled bit ratio of ${bitRatio}`);
                    }
                    this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                    retArr.push(")");
                  }
                  break;
                case "MemoryOptimizedNumberTexture":
                  retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(")");
                  break;
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                  retArr.push(`${markupName}[${this.memberExpressionPropertyMarkup(yProperty)}]`);
                  if (yProperty) {
                    retArr.push(`[${this.memberExpressionPropertyMarkup(xProperty)}]`);
                  }
                  break;
                default:
                  throw new Error(`unhandled member expression "${type}"`);
              }
              return retArr;
            }
            astCallExpression(ast, retArr) {
              if (!ast.callee) {
                throw this.astErrorOutput("Unknown CallExpression", ast);
              }
              let functionName = null;
              const isMathFunction = this.isAstMathFunction(ast);
              if (isMathFunction || ast.callee.object && ast.callee.object.type === "ThisExpression") {
                functionName = ast.callee.property.name;
              } else if (ast.callee.type === "SequenceExpression" && ast.callee.expressions[0].type === "Literal" && !isNaN(ast.callee.expressions[0].raw)) {
                functionName = ast.callee.expressions[1].property.name;
              } else {
                functionName = ast.callee.name;
              }
              if (!functionName) {
                throw this.astErrorOutput(`Unhandled function, couldn't find name`, ast);
              }
              switch (functionName) {
                case "pow":
                  functionName = "_pow";
                  break;
                case "round":
                  functionName = "_round";
                  break;
              }
              if (this.calledFunctions.indexOf(functionName) < 0) {
                this.calledFunctions.push(functionName);
              }
              if (functionName === "random" && this.plugins && this.plugins.length > 0) {
                for (let i = 0; i < this.plugins.length; i++) {
                  const plugin = this.plugins[i];
                  if (plugin.functionMatch === "Math.random()" && plugin.functionReplace) {
                    retArr.push(plugin.functionReplace);
                    return retArr;
                  }
                }
              }
              if (this.onFunctionCall) {
                this.onFunctionCall(this.name, functionName, ast.arguments);
              }
              retArr.push(functionName);
              retArr.push("(");
              if (isMathFunction) {
                for (let i = 0; i < ast.arguments.length; ++i) {
                  const argument = ast.arguments[i];
                  const argumentType = this.getType(argument);
                  if (i > 0) {
                    retArr.push(", ");
                  }
                  switch (argumentType) {
                    case "Integer":
                      this.castValueToFloat(argument, retArr);
                      break;
                    default:
                      this.astGeneric(argument, retArr);
                      break;
                  }
                }
              } else {
                const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];
                for (let i = 0; i < ast.arguments.length; ++i) {
                  const argument = ast.arguments[i];
                  let targetType = targetTypes[i];
                  if (i > 0) {
                    retArr.push(", ");
                  }
                  const argumentType = this.getType(argument);
                  if (!targetType) {
                    this.triggerImplyArgumentType(functionName, i, argumentType, this);
                    targetType = argumentType;
                  }
                  switch (argumentType) {
                    case "Boolean":
                      this.astGeneric(argument, retArr);
                      continue;
                    case "Number":
                    case "Float":
                      if (targetType === "Integer") {
                        retArr.push("int(");
                        this.astGeneric(argument, retArr);
                        retArr.push(")");
                        continue;
                      } else if (targetType === "Number" || targetType === "Float") {
                        this.astGeneric(argument, retArr);
                        continue;
                      } else if (targetType === "LiteralInteger") {
                        this.castLiteralToFloat(argument, retArr);
                        continue;
                      }
                      break;
                    case "Integer":
                      if (targetType === "Number" || targetType === "Float") {
                        retArr.push("float(");
                        this.astGeneric(argument, retArr);
                        retArr.push(")");
                        continue;
                      } else if (targetType === "Integer") {
                        this.astGeneric(argument, retArr);
                        continue;
                      }
                      break;
                    case "LiteralInteger":
                      if (targetType === "Integer") {
                        this.castLiteralToInteger(argument, retArr);
                        continue;
                      } else if (targetType === "Number" || targetType === "Float") {
                        this.castLiteralToFloat(argument, retArr);
                        continue;
                      } else if (targetType === "LiteralInteger") {
                        this.astGeneric(argument, retArr);
                        continue;
                      }
                      break;
                    case "Array(2)":
                    case "Array(3)":
                    case "Array(4)":
                      if (targetType === argumentType) {
                        if (argument.type === "Identifier") {
                          retArr.push(`user_${utils.sanitizeName(argument.name)}`);
                        } else if (argument.type === "ArrayExpression" || argument.type === "MemberExpression" || argument.type === "CallExpression") {
                          this.astGeneric(argument, retArr);
                        } else {
                          throw this.astErrorOutput(`Unhandled argument type ${argument.type}`, ast);
                        }
                        continue;
                      }
                      break;
                    case "HTMLCanvas":
                    case "OffscreenCanvas":
                    case "HTMLImage":
                    case "ImageBitmap":
                    case "ImageData":
                    case "HTMLImageArray":
                    case "HTMLVideo":
                    case "ArrayTexture(1)":
                    case "ArrayTexture(2)":
                    case "ArrayTexture(3)":
                    case "ArrayTexture(4)":
                    case "Array":
                    case "Input":
                      if (targetType === argumentType) {
                        if (argument.type !== "Identifier") throw this.astErrorOutput(`Unhandled argument type ${argument.type}`, ast);
                        this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);
                        const name2 = utils.sanitizeName(argument.name);
                        retArr.push(`user_${name2},user_${name2}Size,user_${name2}Dim`);
                        continue;
                      }
                      break;
                  }
                  throw this.astErrorOutput(`Unhandled argument combination of ${argumentType} and ${targetType} for argument named "${argument.name}"`, ast);
                }
              }
              retArr.push(")");
              return retArr;
            }
            astArrayExpression(arrNode, retArr) {
              const returnType = this.getType(arrNode);
              const arrLen = arrNode.elements.length;
              switch (returnType) {
                case "Matrix(2)":
                case "Matrix(3)":
                case "Matrix(4)":
                  retArr.push(`mat${arrLen}(`);
                  break;
                default:
                  retArr.push(`vec${arrLen}(`);
              }
              for (let i = 0; i < arrLen; ++i) {
                if (i > 0) {
                  retArr.push(", ");
                }
                const subNode = arrNode.elements[i];
                this.astGeneric(subNode, retArr);
              }
              retArr.push(")");
              return retArr;
            }
            memberExpressionXYZ(x, y, z, retArr) {
              if (z) {
                retArr.push(this.memberExpressionPropertyMarkup(z), ", ");
              } else {
                retArr.push("0, ");
              }
              if (y) {
                retArr.push(this.memberExpressionPropertyMarkup(y), ", ");
              } else {
                retArr.push("0, ");
              }
              retArr.push(this.memberExpressionPropertyMarkup(x));
              return retArr;
            }
            memberExpressionPropertyMarkup(property) {
              if (!property) {
                throw new Error("Property not set");
              }
              const type = this.getType(property);
              const result = [];
              switch (type) {
                case "Number":
                case "Float":
                  this.castValueToInteger(property, result);
                  break;
                case "LiteralInteger":
                  this.castLiteralToInteger(property, result);
                  break;
                default:
                  this.astGeneric(property, result);
              }
              return result.join("");
            }
          }
          const typeMap = {
            "Array": "sampler2D",
            "Array(2)": "vec2",
            "Array(3)": "vec3",
            "Array(4)": "vec4",
            "Matrix(2)": "mat2",
            "Matrix(3)": "mat3",
            "Matrix(4)": "mat4",
            "Array2D": "sampler2D",
            "Array3D": "sampler2D",
            "Boolean": "bool",
            "Float": "float",
            "Input": "sampler2D",
            "Integer": "int",
            "Number": "float",
            "LiteralInteger": "float",
            "NumberTexture": "sampler2D",
            "MemoryOptimizedNumberTexture": "sampler2D",
            "ArrayTexture(1)": "sampler2D",
            "ArrayTexture(2)": "sampler2D",
            "ArrayTexture(3)": "sampler2D",
            "ArrayTexture(4)": "sampler2D",
            "HTMLVideo": "sampler2D",
            "HTMLCanvas": "sampler2D",
            "OffscreenCanvas": "sampler2D",
            "HTMLImage": "sampler2D",
            "ImageBitmap": "sampler2D",
            "ImageData": "sampler2D",
            "HTMLImageArray": "sampler2DArray"
          };
          const operatorMap = {
            "===": "==",
            "!==": "!="
          };
          module3.exports = {
            WebGLFunctionNode
          };
        }, { "../../utils": 114, "../function-node": 10 }], 39: [function(require2, module3, exports3) {
          const { WebGLKernelValueBoolean } = require2("./kernel-value/boolean");
          const { WebGLKernelValueFloat } = require2("./kernel-value/float");
          const { WebGLKernelValueInteger } = require2("./kernel-value/integer");
          const { WebGLKernelValueHTMLImage } = require2("./kernel-value/html-image");
          const { WebGLKernelValueDynamicHTMLImage } = require2("./kernel-value/dynamic-html-image");
          const { WebGLKernelValueHTMLVideo } = require2("./kernel-value/html-video");
          const { WebGLKernelValueDynamicHTMLVideo } = require2("./kernel-value/dynamic-html-video");
          const { WebGLKernelValueSingleInput } = require2("./kernel-value/single-input");
          const { WebGLKernelValueDynamicSingleInput } = require2("./kernel-value/dynamic-single-input");
          const { WebGLKernelValueUnsignedInput } = require2("./kernel-value/unsigned-input");
          const { WebGLKernelValueDynamicUnsignedInput } = require2("./kernel-value/dynamic-unsigned-input");
          const { WebGLKernelValueMemoryOptimizedNumberTexture } = require2("./kernel-value/memory-optimized-number-texture");
          const { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require2("./kernel-value/dynamic-memory-optimized-number-texture");
          const { WebGLKernelValueNumberTexture } = require2("./kernel-value/number-texture");
          const { WebGLKernelValueDynamicNumberTexture } = require2("./kernel-value/dynamic-number-texture");
          const { WebGLKernelValueSingleArray } = require2("./kernel-value/single-array");
          const { WebGLKernelValueDynamicSingleArray } = require2("./kernel-value/dynamic-single-array");
          const { WebGLKernelValueSingleArray1DI } = require2("./kernel-value/single-array1d-i");
          const { WebGLKernelValueDynamicSingleArray1DI } = require2("./kernel-value/dynamic-single-array1d-i");
          const { WebGLKernelValueSingleArray2DI } = require2("./kernel-value/single-array2d-i");
          const { WebGLKernelValueDynamicSingleArray2DI } = require2("./kernel-value/dynamic-single-array2d-i");
          const { WebGLKernelValueSingleArray3DI } = require2("./kernel-value/single-array3d-i");
          const { WebGLKernelValueDynamicSingleArray3DI } = require2("./kernel-value/dynamic-single-array3d-i");
          const { WebGLKernelValueArray2 } = require2("./kernel-value/array2");
          const { WebGLKernelValueArray3 } = require2("./kernel-value/array3");
          const { WebGLKernelValueArray4 } = require2("./kernel-value/array4");
          const { WebGLKernelValueUnsignedArray } = require2("./kernel-value/unsigned-array");
          const { WebGLKernelValueDynamicUnsignedArray } = require2("./kernel-value/dynamic-unsigned-array");
          const kernelValueMaps = {
            unsigned: {
              dynamic: {
                "Boolean": WebGLKernelValueBoolean,
                "Integer": WebGLKernelValueInteger,
                "Float": WebGLKernelValueFloat,
                "Array": WebGLKernelValueDynamicUnsignedArray,
                "Array(2)": WebGLKernelValueArray2,
                "Array(3)": WebGLKernelValueArray3,
                "Array(4)": WebGLKernelValueArray4,
                "Array1D(2)": false,
                "Array1D(3)": false,
                "Array1D(4)": false,
                "Array2D(2)": false,
                "Array2D(3)": false,
                "Array2D(4)": false,
                "Array3D(2)": false,
                "Array3D(3)": false,
                "Array3D(4)": false,
                "Input": WebGLKernelValueDynamicUnsignedInput,
                "NumberTexture": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(1)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(2)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(3)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(4)": WebGLKernelValueDynamicNumberTexture,
                "MemoryOptimizedNumberTexture": WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGLKernelValueDynamicHTMLImage,
                "OffscreenCanvas": WebGLKernelValueDynamicHTMLImage,
                "HTMLImage": WebGLKernelValueDynamicHTMLImage,
                "ImageBitmap": WebGLKernelValueDynamicHTMLImage,
                "ImageData": WebGLKernelValueDynamicHTMLImage,
                "HTMLImageArray": false,
                "HTMLVideo": WebGLKernelValueDynamicHTMLVideo
              },
              static: {
                "Boolean": WebGLKernelValueBoolean,
                "Float": WebGLKernelValueFloat,
                "Integer": WebGLKernelValueInteger,
                "Array": WebGLKernelValueUnsignedArray,
                "Array(2)": WebGLKernelValueArray2,
                "Array(3)": WebGLKernelValueArray3,
                "Array(4)": WebGLKernelValueArray4,
                "Array1D(2)": false,
                "Array1D(3)": false,
                "Array1D(4)": false,
                "Array2D(2)": false,
                "Array2D(3)": false,
                "Array2D(4)": false,
                "Array3D(2)": false,
                "Array3D(3)": false,
                "Array3D(4)": false,
                "Input": WebGLKernelValueUnsignedInput,
                "NumberTexture": WebGLKernelValueNumberTexture,
                "ArrayTexture(1)": WebGLKernelValueNumberTexture,
                "ArrayTexture(2)": WebGLKernelValueNumberTexture,
                "ArrayTexture(3)": WebGLKernelValueNumberTexture,
                "ArrayTexture(4)": WebGLKernelValueNumberTexture,
                "MemoryOptimizedNumberTexture": WebGLKernelValueMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGLKernelValueHTMLImage,
                "OffscreenCanvas": WebGLKernelValueHTMLImage,
                "HTMLImage": WebGLKernelValueHTMLImage,
                "ImageBitmap": WebGLKernelValueHTMLImage,
                "ImageData": WebGLKernelValueHTMLImage,
                "HTMLImageArray": false,
                "HTMLVideo": WebGLKernelValueHTMLVideo
              }
            },
            single: {
              dynamic: {
                "Boolean": WebGLKernelValueBoolean,
                "Integer": WebGLKernelValueInteger,
                "Float": WebGLKernelValueFloat,
                "Array": WebGLKernelValueDynamicSingleArray,
                "Array(2)": WebGLKernelValueArray2,
                "Array(3)": WebGLKernelValueArray3,
                "Array(4)": WebGLKernelValueArray4,
                "Array1D(2)": WebGLKernelValueDynamicSingleArray1DI,
                "Array1D(3)": WebGLKernelValueDynamicSingleArray1DI,
                "Array1D(4)": WebGLKernelValueDynamicSingleArray1DI,
                "Array2D(2)": WebGLKernelValueDynamicSingleArray2DI,
                "Array2D(3)": WebGLKernelValueDynamicSingleArray2DI,
                "Array2D(4)": WebGLKernelValueDynamicSingleArray2DI,
                "Array3D(2)": WebGLKernelValueDynamicSingleArray3DI,
                "Array3D(3)": WebGLKernelValueDynamicSingleArray3DI,
                "Array3D(4)": WebGLKernelValueDynamicSingleArray3DI,
                "Input": WebGLKernelValueDynamicSingleInput,
                "NumberTexture": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(1)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(2)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(3)": WebGLKernelValueDynamicNumberTexture,
                "ArrayTexture(4)": WebGLKernelValueDynamicNumberTexture,
                "MemoryOptimizedNumberTexture": WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGLKernelValueDynamicHTMLImage,
                "OffscreenCanvas": WebGLKernelValueDynamicHTMLImage,
                "HTMLImage": WebGLKernelValueDynamicHTMLImage,
                "ImageBitmap": WebGLKernelValueDynamicHTMLImage,
                "ImageData": WebGLKernelValueDynamicHTMLImage,
                "HTMLImageArray": false,
                "HTMLVideo": WebGLKernelValueDynamicHTMLVideo
              },
              static: {
                "Boolean": WebGLKernelValueBoolean,
                "Float": WebGLKernelValueFloat,
                "Integer": WebGLKernelValueInteger,
                "Array": WebGLKernelValueSingleArray,
                "Array(2)": WebGLKernelValueArray2,
                "Array(3)": WebGLKernelValueArray3,
                "Array(4)": WebGLKernelValueArray4,
                "Array1D(2)": WebGLKernelValueSingleArray1DI,
                "Array1D(3)": WebGLKernelValueSingleArray1DI,
                "Array1D(4)": WebGLKernelValueSingleArray1DI,
                "Array2D(2)": WebGLKernelValueSingleArray2DI,
                "Array2D(3)": WebGLKernelValueSingleArray2DI,
                "Array2D(4)": WebGLKernelValueSingleArray2DI,
                "Array3D(2)": WebGLKernelValueSingleArray3DI,
                "Array3D(3)": WebGLKernelValueSingleArray3DI,
                "Array3D(4)": WebGLKernelValueSingleArray3DI,
                "Input": WebGLKernelValueSingleInput,
                "NumberTexture": WebGLKernelValueNumberTexture,
                "ArrayTexture(1)": WebGLKernelValueNumberTexture,
                "ArrayTexture(2)": WebGLKernelValueNumberTexture,
                "ArrayTexture(3)": WebGLKernelValueNumberTexture,
                "ArrayTexture(4)": WebGLKernelValueNumberTexture,
                "MemoryOptimizedNumberTexture": WebGLKernelValueMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGLKernelValueHTMLImage,
                "OffscreenCanvas": WebGLKernelValueHTMLImage,
                "HTMLImage": WebGLKernelValueHTMLImage,
                "ImageBitmap": WebGLKernelValueHTMLImage,
                "ImageData": WebGLKernelValueHTMLImage,
                "HTMLImageArray": false,
                "HTMLVideo": WebGLKernelValueHTMLVideo
              }
            }
          };
          function lookupKernelValueType(type, dynamic, precision, value2) {
            if (!type) {
              throw new Error("type missing");
            }
            if (!dynamic) {
              throw new Error("dynamic missing");
            }
            if (!precision) {
              throw new Error("precision missing");
            }
            if (value2.type) {
              type = value2.type;
            }
            const types = kernelValueMaps[precision][dynamic];
            if (types[type] === false) {
              return null;
            } else if (types[type] === void 0) {
              throw new Error(`Could not find a KernelValue for ${type}`);
            }
            return types[type];
          }
          module3.exports = {
            lookupKernelValueType,
            kernelValueMaps
          };
        }, { "./kernel-value/array2": 41, "./kernel-value/array3": 42, "./kernel-value/array4": 43, "./kernel-value/boolean": 44, "./kernel-value/dynamic-html-image": 45, "./kernel-value/dynamic-html-video": 46, "./kernel-value/dynamic-memory-optimized-number-texture": 47, "./kernel-value/dynamic-number-texture": 48, "./kernel-value/dynamic-single-array": 49, "./kernel-value/dynamic-single-array1d-i": 50, "./kernel-value/dynamic-single-array2d-i": 51, "./kernel-value/dynamic-single-array3d-i": 52, "./kernel-value/dynamic-single-input": 53, "./kernel-value/dynamic-unsigned-array": 54, "./kernel-value/dynamic-unsigned-input": 55, "./kernel-value/float": 56, "./kernel-value/html-image": 57, "./kernel-value/html-video": 58, "./kernel-value/integer": 60, "./kernel-value/memory-optimized-number-texture": 61, "./kernel-value/number-texture": 62, "./kernel-value/single-array": 63, "./kernel-value/single-array1d-i": 64, "./kernel-value/single-array2d-i": 65, "./kernel-value/single-array3d-i": 66, "./kernel-value/single-input": 67, "./kernel-value/unsigned-array": 68, "./kernel-value/unsigned-input": 69 }], 40: [function(require2, module3, exports3) {
          const { WebGLKernelValue } = require2("./index");
          const { Input: Input2 } = require2("../../../input");
          class WebGLKernelArray extends WebGLKernelValue {
            checkSize(width, height) {
              if (!this.kernel.validate) return;
              const { maxTextureSize } = this.kernel.constructor.features;
              if (width > maxTextureSize || height > maxTextureSize) {
                if (width > height) {
                  throw new Error(`Argument texture width of ${width} larger than maximum size of ${maxTextureSize} for your GPU`);
                } else if (width < height) {
                  throw new Error(`Argument texture height of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);
                } else {
                  throw new Error(`Argument texture height and width of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);
                }
              }
            }
            setup() {
              this.requestTexture();
              this.setupTexture();
              this.defineTexture();
            }
            requestTexture() {
              this.texture = this.onRequestTexture();
            }
            defineTexture() {
              const { context: gl } = this;
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            }
            setupTexture() {
              this.contextHandle = this.onRequestContextHandle();
              this.index = this.onRequestIndex();
              this.dimensionsId = this.id + "Dim";
              this.sizeId = this.id + "Size";
            }
            getBitRatio(value2) {
              if (Array.isArray(value2[0])) {
                return this.getBitRatio(value2[0]);
              } else if (value2.constructor === Input2) {
                return this.getBitRatio(value2.value);
              }
              switch (value2.constructor) {
                case Uint8ClampedArray:
                case Uint8Array:
                case Int8Array:
                  return 1;
                case Uint16Array:
                case Int16Array:
                  return 2;
                case Float32Array:
                case Int32Array:
                default:
                  return 4;
              }
            }
            destroy() {
              if (this.prevArg) {
                this.prevArg.delete();
              }
              this.context.deleteTexture(this.texture);
            }
          }
          module3.exports = {
            WebGLKernelArray
          };
        }, { "../../../input": 110, "./index": 59 }], 41: [function(require2, module3, exports3) {
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueArray2 extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                return `const vec2 ${this.id} = vec2(${value2[0]},${value2[1]});
`;
              }
              return `uniform vec2 ${this.id};
`;
            }
            getStringValueHandler() {
              if (this.origin === "constants") return "";
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform2fv(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueArray2
          };
        }, { "./index": 59 }], 42: [function(require2, module3, exports3) {
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueArray3 extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                return `const vec3 ${this.id} = vec3(${value2[0]},${value2[1]},${value2[2]});
`;
              }
              return `uniform vec3 ${this.id};
`;
            }
            getStringValueHandler() {
              if (this.origin === "constants") return "";
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform3fv(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueArray3
          };
        }, { "./index": 59 }], 43: [function(require2, module3, exports3) {
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueArray4 extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                return `const vec4 ${this.id} = vec4(${value2[0]},${value2[1]},${value2[2]},${value2[3]});
`;
              }
              return `uniform vec4 ${this.id};
`;
            }
            getStringValueHandler() {
              if (this.origin === "constants") return "";
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform4fv(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueArray4
          };
        }, { "./index": 59 }], 44: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueBoolean extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                return `const bool ${this.id} = ${value2};
`;
              }
              return `uniform bool ${this.id};
`;
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform1i(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueBoolean
          };
        }, { "../../../utils": 114, "./index": 59 }], 45: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueHTMLImage } = require2("./html-image");
          class WebGLKernelValueDynamicHTMLImage extends WebGLKernelValueHTMLImage {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              const { width, height } = value2;
              this.checkSize(width, height);
              this.dimensions = [width, height, 1];
              this.textureSize = [width, height];
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicHTMLImage
          };
        }, { "../../../utils": 114, "./html-image": 57 }], 46: [function(require2, module3, exports3) {
          const { WebGLKernelValueDynamicHTMLImage } = require2("./dynamic-html-image");
          class WebGLKernelValueDynamicHTMLVideo extends WebGLKernelValueDynamicHTMLImage {
          }
          module3.exports = {
            WebGLKernelValueDynamicHTMLVideo
          };
        }, { "./dynamic-html-image": 45 }], 47: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueMemoryOptimizedNumberTexture } = require2("./memory-optimized-number-texture");
          class WebGLKernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(inputTexture) {
              this.dimensions = inputTexture.dimensions;
              this.checkSize(inputTexture.size[0], inputTexture.size[1]);
              this.textureSize = inputTexture.size;
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(inputTexture);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicMemoryOptimizedNumberTexture
          };
        }, { "../../../utils": 114, "./memory-optimized-number-texture": 61 }], 48: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueNumberTexture } = require2("./number-texture");
          class WebGLKernelValueDynamicNumberTexture extends WebGLKernelValueNumberTexture {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.dimensions = value2.dimensions;
              this.checkSize(value2.size[0], value2.size[1]);
              this.textureSize = value2.size;
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicNumberTexture
          };
        }, { "../../../utils": 114, "./number-texture": 62 }], 49: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray } = require2("./single-array");
          class WebGLKernelValueDynamicSingleArray extends WebGLKernelValueSingleArray {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.dimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicSingleArray
          };
        }, { "../../../utils": 114, "./single-array": 63 }], 50: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray1DI } = require2("./single-array1d-i");
          class WebGLKernelValueDynamicSingleArray1DI extends WebGLKernelValueSingleArray1DI {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicSingleArray1DI
          };
        }, { "../../../utils": 114, "./single-array1d-i": 64 }], 51: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray2DI } = require2("./single-array2d-i");
          class WebGLKernelValueDynamicSingleArray2DI extends WebGLKernelValueSingleArray2DI {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicSingleArray2DI
          };
        }, { "../../../utils": 114, "./single-array2d-i": 65 }], 52: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray3DI } = require2("./single-array3d-i");
          class WebGLKernelValueDynamicSingleArray3DI extends WebGLKernelValueSingleArray3DI {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicSingleArray3DI
          };
        }, { "../../../utils": 114, "./single-array3d-i": 66 }], 53: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleInput } = require2("./single-input");
          class WebGLKernelValueDynamicSingleInput extends WebGLKernelValueSingleInput {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              let [w, h, d] = value2.size;
              this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicSingleInput
          };
        }, { "../../../utils": 114, "./single-input": 67 }], 54: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueUnsignedArray } = require2("./unsigned-array");
          class WebGLKernelValueDynamicUnsignedArray extends WebGLKernelValueUnsignedArray {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.dimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              const Type = this.getTransferArrayType(value2);
              this.preUploadValue = new Type(this.uploadArrayLength);
              this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicUnsignedArray
          };
        }, { "../../../utils": 114, "./unsigned-array": 68 }], 55: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueUnsignedInput } = require2("./unsigned-input");
          class WebGLKernelValueDynamicUnsignedInput extends WebGLKernelValueUnsignedInput {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              let [w, h, d] = value2.size;
              this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
              this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              const Type = this.getTransferArrayType(value2.value);
              this.preUploadValue = new Type(this.uploadArrayLength);
              this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGLKernelValueDynamicUnsignedInput
          };
        }, { "../../../utils": 114, "./unsigned-input": 69 }], 56: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueFloat extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                if (Number.isInteger(value2)) {
                  return `const float ${this.id} = ${value2}.0;
`;
                }
                return `const float ${this.id} = ${value2};
`;
              }
              return `uniform float ${this.id};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform1f(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueFloat
          };
        }, { "../../../utils": 114, "./index": 59 }], 57: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueHTMLImage extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              const { width, height } = value2;
              this.checkSize(width, height);
              this.dimensions = [width, height, 1];
              this.textureSize = [width, height];
              this.uploadValue = value2;
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(inputImage) {
              if (inputImage.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(inputImage.constructor);
                return;
              }
              const { context: gl } = this;
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueHTMLImage
          };
        }, { "../../../utils": 114, "./array": 40 }], 58: [function(require2, module3, exports3) {
          const { WebGLKernelValueHTMLImage } = require2("./html-image");
          class WebGLKernelValueHTMLVideo extends WebGLKernelValueHTMLImage {
          }
          module3.exports = {
            WebGLKernelValueHTMLVideo
          };
        }, { "./html-image": 57 }], 59: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { KernelValue } = require2("../../kernel-value");
          class WebGLKernelValue extends KernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.dimensionsId = null;
              this.sizeId = null;
              this.initialValueConstructor = value2.constructor;
              this.onRequestTexture = settings.onRequestTexture;
              this.onRequestIndex = settings.onRequestIndex;
              this.uploadValue = null;
              this.textureSize = null;
              this.bitRatio = null;
              this.prevArg = null;
            }
            get id() {
              return `${this.origin}_${utils.sanitizeName(this.name)}`;
            }
            setup() {
            }
            getTransferArrayType(value2) {
              if (Array.isArray(value2[0])) {
                return this.getTransferArrayType(value2[0]);
              }
              switch (value2.constructor) {
                case Array:
                case Int32Array:
                case Int16Array:
                case Int8Array:
                  return Float32Array;
                case Uint8ClampedArray:
                case Uint8Array:
                case Uint16Array:
                case Uint32Array:
                case Float32Array:
                case Float64Array:
                  return value2.constructor;
              }
              console.warn("Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros");
              return value2.constructor;
            }
            getStringValueHandler() {
              throw new Error(`"getStringValueHandler" not implemented on ${this.constructor.name}`);
            }
            getVariablePrecisionString() {
              return this.kernel.getVariablePrecisionString(this.textureSize || void 0, this.tactic || void 0);
            }
            destroy() {
            }
          }
          module3.exports = {
            WebGLKernelValue
          };
        }, { "../../../utils": 114, "../../kernel-value": 35 }], 60: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValue } = require2("./index");
          class WebGLKernelValueInteger extends WebGLKernelValue {
            constructor(value2, settings) {
              super(value2, settings);
              this.uploadValue = value2;
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            getSource(value2) {
              if (this.origin === "constants") {
                return `const int ${this.id} = ${parseInt(value2)};
`;
              }
              return `uniform int ${this.id};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform1i(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGLKernelValueInteger
          };
        }, { "../../../utils": 114, "./index": 59 }], 61: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          const sameError = `Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()`;
          class WebGLKernelValueMemoryOptimizedNumberTexture extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              const [width, height] = value2.size;
              this.checkSize(width, height);
              this.dimensions = value2.dimensions;
              this.textureSize = value2.size;
              this.uploadValue = value2.texture;
              this.forceUploadEachRun = true;
            }
            setup() {
              this.setupTexture();
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName}.texture;
`;
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(inputTexture) {
              if (inputTexture.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(inputTexture.constructor);
                return;
              }
              if (this.checkContext && inputTexture.context !== this.context) {
                throw new Error(`Value ${this.name} (${this.type}) must be from same context`);
              }
              const { kernel, context: gl } = this;
              if (kernel.pipeline) {
                if (kernel.immutable) {
                  kernel.updateTextureArgumentRefs(this, inputTexture);
                } else {
                  if (kernel.texture && kernel.texture.texture === inputTexture.texture) {
                    throw new Error(sameError);
                  } else if (kernel.mappedTextures) {
                    const { mappedTextures } = kernel;
                    for (let i = 0; i < mappedTextures.length; i++) {
                      if (mappedTextures[i].texture === inputTexture.texture) {
                        throw new Error(sameError);
                      }
                    }
                  }
                }
              }
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueMemoryOptimizedNumberTexture,
            sameError
          };
        }, { "../../../utils": 114, "./array": 40 }], 62: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          const { sameError } = require2("./memory-optimized-number-texture");
          class WebGLKernelValueNumberTexture extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              const [width, height] = value2.size;
              this.checkSize(width, height);
              const { size: textureSize, dimensions } = value2;
              this.bitRatio = this.getBitRatio(value2);
              this.dimensions = dimensions;
              this.textureSize = textureSize;
              this.uploadValue = value2.texture;
              this.forceUploadEachRun = true;
            }
            setup() {
              this.setupTexture();
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName}.texture;
`;
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(inputTexture) {
              if (inputTexture.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(inputTexture.constructor);
                return;
              }
              if (this.checkContext && inputTexture.context !== this.context) {
                throw new Error(`Value ${this.name} (${this.type}) must be from same context`);
              }
              const { kernel, context: gl } = this;
              if (kernel.pipeline) {
                if (kernel.immutable) {
                  kernel.updateTextureArgumentRefs(this, inputTexture);
                } else {
                  if (kernel.texture && kernel.texture.texture === inputTexture.texture) {
                    throw new Error(sameError);
                  } else if (kernel.mappedTextures) {
                    const { mappedTextures } = kernel;
                    for (let i = 0; i < mappedTextures.length; i++) {
                      if (mappedTextures[i].texture === inputTexture.texture) {
                        throw new Error(sameError);
                      }
                    }
                  }
                }
              }
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueNumberTexture
          };
        }, { "../../../utils": 114, "./array": 40, "./memory-optimized-number-texture": 61 }], 63: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueSingleArray extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = 4;
              this.dimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,
                `flattenTo(${this.varName}, uploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueSingleArray
          };
        }, { "../../../utils": 114, "./array": 40 }], 64: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueSingleArray1DI extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = 4;
              this.setShape(value2);
            }
            setShape(value2) {
              const valueDimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
              this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,
                `flattenTo(${this.varName}, uploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flatten2dArrayTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueSingleArray1DI
          };
        }, { "../../../utils": 114, "./array": 40 }], 65: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueSingleArray2DI extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = 4;
              this.setShape(value2);
            }
            setShape(value2) {
              const valueDimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
              this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,
                `flattenTo(${this.varName}, uploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flatten3dArrayTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueSingleArray2DI
          };
        }, { "../../../utils": 114, "./array": 40 }], 66: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueSingleArray3DI extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = 4;
              this.setShape(value2);
            }
            setShape(value2) {
              const valueDimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
              this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,
                `flattenTo(${this.varName}, uploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flatten4dArrayTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueSingleArray3DI
          };
        }, { "../../../utils": 114, "./array": 40 }], 67: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueSingleInput extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = 4;
              let [w, h, d] = value2.size;
              this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,
                `flattenTo(${this.varName}.value, uploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(input) {
              if (input.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(input.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(input.value, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueSingleInput
          };
        }, { "../../../utils": 114, "./array": 40 }], 68: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueUnsignedArray extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = this.getBitRatio(value2);
              this.dimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.TranserArrayType = this.getTransferArrayType(value2);
              this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);
              this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,
                `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,
                `flattenTo(${this.varName}, preUploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.preUploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueUnsignedArray
          };
        }, { "../../../utils": 114, "./array": 40 }], 69: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("./array");
          class WebGLKernelValueUnsignedInput extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.bitRatio = this.getBitRatio(value2);
              const [w, h, d] = value2.size;
              this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
              this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.TranserArrayType = this.getTransferArrayType(value2.value);
              this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);
              this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            }
            getStringValueHandler() {
              return utils.linesToString([
                `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,
                `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,
                `flattenTo(${this.varName}.value, preUploadValue_${this.name})`
              ]);
            }
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(input) {
              if (input.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(input.value, this.preUploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGLKernelValueUnsignedInput
          };
        }, { "../../../utils": 114, "./array": 40 }], 70: [function(require2, module3, exports3) {
          const { GLKernel } = require2("../gl/kernel");
          const { FunctionBuilder } = require2("../function-builder");
          const { WebGLFunctionNode } = require2("./function-node");
          const { utils } = require2("../../utils");
          const mrud = require2("../../plugins/math-random-uniformly-distributed");
          const { fragmentShader } = require2("./fragment-shader");
          const { vertexShader } = require2("./vertex-shader");
          const { glKernelString } = require2("../gl/kernel-string");
          const { lookupKernelValueType } = require2("./kernel-value-maps");
          let isSupported = null;
          let testCanvas = null;
          let testContext = null;
          let testExtensions = null;
          let features = null;
          const plugins = [mrud];
          const canvases = [];
          const maxTexSizes = {};
          class WebGLKernel extends GLKernel {
            static get isSupported() {
              if (isSupported !== null) {
                return isSupported;
              }
              this.setupFeatureChecks();
              isSupported = this.isContextMatch(testContext);
              return isSupported;
            }
            static setupFeatureChecks() {
              if (typeof document !== "undefined") {
                testCanvas = document.createElement("canvas");
              } else if (typeof OffscreenCanvas !== "undefined") {
                testCanvas = new OffscreenCanvas(0, 0);
              }
              if (!testCanvas) return;
              testContext = testCanvas.getContext("webgl") || testCanvas.getContext("experimental-webgl");
              if (!testContext || !testContext.getExtension) return;
              testExtensions = {
                OES_texture_float: testContext.getExtension("OES_texture_float"),
                OES_texture_float_linear: testContext.getExtension("OES_texture_float_linear"),
                OES_element_index_uint: testContext.getExtension("OES_element_index_uint"),
                WEBGL_draw_buffers: testContext.getExtension("WEBGL_draw_buffers")
              };
              features = this.getFeatures();
            }
            static isContextMatch(context) {
              if (typeof WebGLRenderingContext !== "undefined") {
                return context instanceof WebGLRenderingContext;
              }
              return false;
            }
            static getIsTextureFloat() {
              return Boolean(testExtensions.OES_texture_float);
            }
            static getIsDrawBuffers() {
              return Boolean(testExtensions.WEBGL_draw_buffers);
            }
            static getChannelCount() {
              return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
            }
            static getMaxTextureSize() {
              return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
            }
            static lookupKernelValueType(type, dynamic, precision, value2) {
              return lookupKernelValueType(type, dynamic, precision, value2);
            }
            static get testCanvas() {
              return testCanvas;
            }
            static get testContext() {
              return testContext;
            }
            static get features() {
              return features;
            }
            static get fragmentShader() {
              return fragmentShader;
            }
            static get vertexShader() {
              return vertexShader;
            }
            constructor(source, settings) {
              super(source, settings);
              this.program = null;
              this.pipeline = settings.pipeline;
              this.endianness = utils.systemEndianness();
              this.extensions = {};
              this.argumentTextureCount = 0;
              this.constantTextureCount = 0;
              this.fragShader = null;
              this.vertShader = null;
              this.drawBuffersMap = null;
              this.maxTexSize = null;
              this.onRequestSwitchKernel = null;
              this.texture = null;
              this.mappedTextures = null;
              this.mergeSettings(source.settings || settings);
              this.threadDim = null;
              this.framebuffer = null;
              this.buffer = null;
              this.textureCache = [];
              this.programUniformLocationCache = {};
              this.uniform1fCache = {};
              this.uniform1iCache = {};
              this.uniform2fCache = {};
              this.uniform2fvCache = {};
              this.uniform2ivCache = {};
              this.uniform3fvCache = {};
              this.uniform3ivCache = {};
              this.uniform4fvCache = {};
              this.uniform4ivCache = {};
            }
            initCanvas() {
              if (typeof document !== "undefined") {
                const canvas = document.createElement("canvas");
                canvas.width = 2;
                canvas.height = 2;
                return canvas;
              } else if (typeof OffscreenCanvas !== "undefined") {
                return new OffscreenCanvas(0, 0);
              }
            }
            initContext() {
              const settings = {
                alpha: false,
                depth: false,
                antialias: false
              };
              return this.canvas.getContext("webgl", settings) || this.canvas.getContext("experimental-webgl", settings);
            }
            initPlugins(settings) {
              const pluginsToUse = [];
              const { source } = this;
              if (typeof source === "string") {
                for (let i = 0; i < plugins.length; i++) {
                  const plugin = plugins[i];
                  if (source.match(plugin.functionMatch)) {
                    pluginsToUse.push(plugin);
                  }
                }
              } else if (typeof source === "object") {
                if (settings.pluginNames) {
                  for (let i = 0; i < plugins.length; i++) {
                    const plugin = plugins[i];
                    const usePlugin = settings.pluginNames.some((pluginName) => pluginName === plugin.name);
                    if (usePlugin) {
                      pluginsToUse.push(plugin);
                    }
                  }
                }
              }
              return pluginsToUse;
            }
            initExtensions() {
              this.extensions = {
                OES_texture_float: this.context.getExtension("OES_texture_float"),
                OES_texture_float_linear: this.context.getExtension("OES_texture_float_linear"),
                OES_element_index_uint: this.context.getExtension("OES_element_index_uint"),
                WEBGL_draw_buffers: this.context.getExtension("WEBGL_draw_buffers"),
                WEBGL_color_buffer_float: this.context.getExtension("WEBGL_color_buffer_float")
              };
            }
            validateSettings(args) {
              if (!this.validate) {
                this.texSize = utils.getKernelTextureSize({
                  optimizeFloatMemory: this.optimizeFloatMemory,
                  precision: this.precision
                }, this.output);
                return;
              }
              const { features: features2 } = this.constructor;
              if (this.optimizeFloatMemory === true && !features2.isTextureFloat) {
                throw new Error("Float textures are not supported");
              } else if (this.precision === "single" && !features2.isFloatRead) {
                throw new Error("Single precision not supported");
              } else if (!this.graphical && this.precision === null && features2.isTextureFloat) {
                this.precision = features2.isFloatRead ? "single" : "unsigned";
              }
              if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {
                throw new Error("could not instantiate draw buffers extension");
              }
              if (this.fixIntegerDivisionAccuracy === null) {
                this.fixIntegerDivisionAccuracy = !features2.isIntegerDivisionAccurate;
              } else if (this.fixIntegerDivisionAccuracy && features2.isIntegerDivisionAccurate) {
                this.fixIntegerDivisionAccuracy = false;
              }
              this.checkOutput();
              if (!this.output || this.output.length === 0) {
                if (args.length !== 1) {
                  throw new Error("Auto output only supported for kernels with only one input");
                }
                const argType = utils.getVariableType(args[0], this.strictIntegers);
                switch (argType) {
                  case "Array":
                    this.output = utils.getDimensions(argType);
                    break;
                  case "NumberTexture":
                  case "MemoryOptimizedNumberTexture":
                  case "ArrayTexture(1)":
                  case "ArrayTexture(2)":
                  case "ArrayTexture(3)":
                  case "ArrayTexture(4)":
                    this.output = args[0].output;
                    break;
                  default:
                    throw new Error("Auto output not supported for input type: " + argType);
                }
              }
              if (this.graphical) {
                if (this.output.length !== 2) {
                  throw new Error("Output must have 2 dimensions on graphical mode");
                }
                if (this.precision === "precision") {
                  this.precision = "unsigned";
                  console.warn("Cannot use graphical mode and single precision at the same time");
                }
                this.texSize = utils.clone(this.output);
                return;
              } else if (this.precision === null && features2.isTextureFloat) {
                this.precision = "single";
              }
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              this.checkTextureSize();
            }
            updateMaxTexSize() {
              const { texSize, canvas } = this;
              if (this.maxTexSize === null) {
                let canvasIndex = canvases.indexOf(canvas);
                if (canvasIndex === -1) {
                  canvasIndex = canvases.length;
                  canvases.push(canvas);
                  maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
                }
                this.maxTexSize = maxTexSizes[canvasIndex];
              }
              if (this.maxTexSize[0] < texSize[0]) {
                this.maxTexSize[0] = texSize[0];
              }
              if (this.maxTexSize[1] < texSize[1]) {
                this.maxTexSize[1] = texSize[1];
              }
            }
            setupArguments(args) {
              this.kernelArguments = [];
              this.argumentTextureCount = 0;
              const needsArgumentTypes = this.argumentTypes === null;
              if (needsArgumentTypes) {
                this.argumentTypes = [];
              }
              this.argumentSizes = [];
              this.argumentBitRatios = [];
              if (args.length < this.argumentNames.length) {
                throw new Error("not enough arguments for kernel");
              } else if (args.length > this.argumentNames.length) {
                throw new Error("too many arguments for kernel");
              }
              const { context: gl } = this;
              let textureIndexes = 0;
              const onRequestTexture = () => {
                return this.createTexture();
              };
              const onRequestIndex = () => {
                return this.constantTextureCount + textureIndexes++;
              };
              const onUpdateValueMismatch = (constructor) => {
                this.switchKernels({
                  type: "argumentMismatch",
                  needed: constructor
                });
              };
              const onRequestContextHandle = () => {
                return gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount++;
              };
              for (let index = 0; index < args.length; index++) {
                const value2 = args[index];
                const name2 = this.argumentNames[index];
                let type;
                if (needsArgumentTypes) {
                  type = utils.getVariableType(value2, this.strictIntegers);
                  this.argumentTypes.push(type);
                } else {
                  type = this.argumentTypes[index];
                }
                const KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? "dynamic" : "static", this.precision, args[index]);
                if (KernelValue === null) {
                  return this.requestFallback(args);
                }
                const kernelArgument = new KernelValue(value2, {
                  name: name2,
                  type,
                  tactic: this.tactic,
                  origin: "user",
                  context: gl,
                  checkContext: this.checkContext,
                  kernel: this,
                  strictIntegers: this.strictIntegers,
                  onRequestTexture,
                  onRequestIndex,
                  onUpdateValueMismatch,
                  onRequestContextHandle
                });
                this.kernelArguments.push(kernelArgument);
                kernelArgument.setup();
                this.argumentSizes.push(kernelArgument.textureSize);
                this.argumentBitRatios[index] = kernelArgument.bitRatio;
              }
            }
            createTexture() {
              const texture = this.context.createTexture();
              this.textureCache.push(texture);
              return texture;
            }
            setupConstants(args) {
              const { context: gl } = this;
              this.kernelConstants = [];
              this.forceUploadKernelConstants = [];
              let needsConstantTypes = this.constantTypes === null;
              if (needsConstantTypes) {
                this.constantTypes = {};
              }
              this.constantBitRatios = {};
              let textureIndexes = 0;
              for (const name2 in this.constants) {
                const value2 = this.constants[name2];
                let type;
                if (needsConstantTypes) {
                  type = utils.getVariableType(value2, this.strictIntegers);
                  this.constantTypes[name2] = type;
                } else {
                  type = this.constantTypes[name2];
                }
                const KernelValue = this.constructor.lookupKernelValueType(type, "static", this.precision, value2);
                if (KernelValue === null) {
                  return this.requestFallback(args);
                }
                const kernelValue = new KernelValue(value2, {
                  name: name2,
                  type,
                  tactic: this.tactic,
                  origin: "constants",
                  context: this.context,
                  checkContext: this.checkContext,
                  kernel: this,
                  strictIntegers: this.strictIntegers,
                  onRequestTexture: () => {
                    return this.createTexture();
                  },
                  onRequestIndex: () => {
                    return textureIndexes++;
                  },
                  onRequestContextHandle: () => {
                    return gl.TEXTURE0 + this.constantTextureCount++;
                  }
                });
                this.constantBitRatios[name2] = kernelValue.bitRatio;
                this.kernelConstants.push(kernelValue);
                kernelValue.setup();
                if (kernelValue.forceUploadEachRun) {
                  this.forceUploadKernelConstants.push(kernelValue);
                }
              }
            }
            build() {
              if (this.built) return;
              this.initExtensions();
              this.validateSettings(arguments);
              this.setupConstants(arguments);
              if (this.fallbackRequested) return;
              this.setupArguments(arguments);
              if (this.fallbackRequested) return;
              this.updateMaxTexSize();
              this.translateSource();
              const failureResult = this.pickRenderStrategy(arguments);
              if (failureResult) {
                return failureResult;
              }
              const { texSize, context: gl, canvas } = this;
              gl.enable(gl.SCISSOR_TEST);
              if (this.pipeline && this.precision === "single") {
                gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
                canvas.width = this.maxTexSize[0];
                canvas.height = this.maxTexSize[1];
              } else {
                gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
                canvas.width = this.maxTexSize[0];
                canvas.height = this.maxTexSize[1];
              }
              const threadDim = this.threadDim = Array.from(this.output);
              while (threadDim.length < 3) {
                threadDim.push(1);
              }
              const compiledVertexShader = this.getVertexShader(arguments);
              const vertShader = gl.createShader(gl.VERTEX_SHADER);
              gl.shaderSource(vertShader, compiledVertexShader);
              gl.compileShader(vertShader);
              this.vertShader = vertShader;
              const compiledFragmentShader = this.getFragmentShader(arguments);
              const fragShader = gl.createShader(gl.FRAGMENT_SHADER);
              gl.shaderSource(fragShader, compiledFragmentShader);
              gl.compileShader(fragShader);
              this.fragShader = fragShader;
              if (this.debug) {
                console.log("GLSL Shader Output:");
                console.log(compiledFragmentShader);
              }
              if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
                throw new Error("Error compiling vertex shader: " + gl.getShaderInfoLog(vertShader));
              }
              if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
                throw new Error("Error compiling fragment shader: " + gl.getShaderInfoLog(fragShader));
              }
              const program = this.program = gl.createProgram();
              gl.attachShader(program, vertShader);
              gl.attachShader(program, fragShader);
              gl.linkProgram(program);
              this.framebuffer = gl.createFramebuffer();
              this.framebuffer.width = texSize[0];
              this.framebuffer.height = texSize[1];
              this.rawValueFramebuffers = {};
              const vertices = new Float32Array([
                -1,
                -1,
                1,
                -1,
                -1,
                1,
                1,
                1
              ]);
              const texCoords = new Float32Array([
                0,
                0,
                1,
                0,
                0,
                1,
                1,
                1
              ]);
              const texCoordOffset = vertices.byteLength;
              let buffer = this.buffer;
              if (!buffer) {
                buffer = this.buffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
              } else {
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              }
              gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
              gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);
              const aPosLoc = gl.getAttribLocation(this.program, "aPos");
              gl.enableVertexAttribArray(aPosLoc);
              gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);
              const aTexCoordLoc = gl.getAttribLocation(this.program, "aTexCoord");
              gl.enableVertexAttribArray(aTexCoordLoc);
              gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              let i = 0;
              gl.useProgram(this.program);
              for (let p in this.constants) {
                this.kernelConstants[i++].updateValue(this.constants[p]);
              }
              this._setupOutputTexture();
              if (this.subKernels !== null && this.subKernels.length > 0) {
                this._mappedTextureSwitched = {};
                this._setupSubOutputTextures();
              }
              this.buildSignature(arguments);
              this.built = true;
            }
            translateSource() {
              const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {
                fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
              });
              this.translatedSource = functionBuilder.getPrototypeString("kernel");
              this.setupReturnTypes(functionBuilder);
            }
            setupReturnTypes(functionBuilder) {
              if (!this.graphical && !this.returnType) {
                this.returnType = functionBuilder.getKernelResultType();
              }
              if (this.subKernels && this.subKernels.length > 0) {
                for (let i = 0; i < this.subKernels.length; i++) {
                  const subKernel = this.subKernels[i];
                  if (!subKernel.returnType) {
                    subKernel.returnType = functionBuilder.getSubKernelResultType(i);
                  }
                }
              }
            }
            run() {
              const { kernelArguments, texSize, forceUploadKernelConstants, context: gl } = this;
              gl.useProgram(this.program);
              gl.scissor(0, 0, texSize[0], texSize[1]);
              if (this.dynamicOutput) {
                this.setUniform3iv("uOutputDim", new Int32Array(this.threadDim));
                this.setUniform2iv("uTexSize", texSize);
              }
              this.setUniform2f("ratio", texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);
              for (let i = 0; i < forceUploadKernelConstants.length; i++) {
                const constant = forceUploadKernelConstants[i];
                constant.updateValue(this.constants[constant.name]);
                if (this.switchingKernels) return;
              }
              for (let i = 0; i < kernelArguments.length; i++) {
                kernelArguments[i].updateValue(arguments[i]);
                if (this.switchingKernels) return;
              }
              if (this.plugins) {
                for (let i = 0; i < this.plugins.length; i++) {
                  const plugin = this.plugins[i];
                  if (plugin.onBeforeRun) {
                    plugin.onBeforeRun(this);
                  }
                }
              }
              if (this.graphical) {
                if (this.pipeline) {
                  gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
                  if (this.immutable) {
                    this._replaceOutputTexture();
                  }
                  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                  return this.immutable ? this.texture.clone() : this.texture;
                }
                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                return;
              }
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              if (this.immutable) {
                this._replaceOutputTexture();
              }
              if (this.subKernels !== null) {
                if (this.immutable) {
                  this._replaceSubOutputTextures();
                }
                this.drawBuffers();
              }
              gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            }
            drawBuffers() {
              this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);
            }
            getInternalFormat() {
              return this.context.RGBA;
            }
            getTextureFormat() {
              const { context: gl } = this;
              switch (this.getInternalFormat()) {
                case gl.RGBA:
                  return gl.RGBA;
                default:
                  throw new Error("Unknown internal format");
              }
            }
            _replaceOutputTexture() {
              if (this.texture.beforeMutate() || this._textureSwitched) {
                const gl = this.context;
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
                this._textureSwitched = false;
              }
            }
            _setupOutputTexture() {
              const gl = this.context;
              const texSize = this.texSize;
              if (this.texture) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
                return;
              }
              const texture = this.createTexture();
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              const format = this.getInternalFormat();
              if (this.precision === "single") {
                gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
              }
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
              this.texture = new this.TextureConstructor({
                texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              });
            }
            _replaceSubOutputTextures() {
              const gl = this.context;
              for (let i = 0; i < this.mappedTextures.length; i++) {
                const mappedTexture = this.mappedTextures[i];
                if (mappedTexture.beforeMutate() || this._mappedTextureSwitched[i]) {
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);
                  this._mappedTextureSwitched[i] = false;
                }
              }
            }
            _setupSubOutputTextures() {
              const gl = this.context;
              if (this.mappedTextures) {
                for (let i = 0; i < this.subKernels.length; i++) {
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);
                }
                return;
              }
              const texSize = this.texSize;
              this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
              this.mappedTextures = [];
              for (let i = 0; i < this.subKernels.length; i++) {
                const texture = this.createTexture();
                this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
                gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                if (this.precision === "single") {
                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
                } else {
                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
                }
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);
                this.mappedTextures.push(new this.TextureConstructor({
                  texture,
                  size: texSize,
                  dimensions: this.threadDim,
                  output: this.output,
                  context: this.context,
                  internalFormat: this.getInternalFormat(),
                  textureFormat: this.getTextureFormat(),
                  kernel: this
                }));
              }
            }
            setUniform1f(name2, value2) {
              if (this.uniform1fCache.hasOwnProperty(name2)) {
                const cache = this.uniform1fCache[name2];
                if (value2 === cache) {
                  return;
                }
              }
              this.uniform1fCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform1f(loc, value2);
            }
            setUniform1i(name2, value2) {
              if (this.uniform1iCache.hasOwnProperty(name2)) {
                const cache = this.uniform1iCache[name2];
                if (value2 === cache) {
                  return;
                }
              }
              this.uniform1iCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform1i(loc, value2);
            }
            setUniform2f(name2, value1, value2) {
              if (this.uniform2fCache.hasOwnProperty(name2)) {
                const cache = this.uniform2fCache[name2];
                if (value1 === cache[0] && value2 === cache[1]) {
                  return;
                }
              }
              this.uniform2fCache[name2] = [value1, value2];
              const loc = this.getUniformLocation(name2);
              this.context.uniform2f(loc, value1, value2);
            }
            setUniform2fv(name2, value2) {
              if (this.uniform2fvCache.hasOwnProperty(name2)) {
                const cache = this.uniform2fvCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1]) {
                  return;
                }
              }
              this.uniform2fvCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform2fv(loc, value2);
            }
            setUniform2iv(name2, value2) {
              if (this.uniform2ivCache.hasOwnProperty(name2)) {
                const cache = this.uniform2ivCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1]) {
                  return;
                }
              }
              this.uniform2ivCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform2iv(loc, value2);
            }
            setUniform3fv(name2, value2) {
              if (this.uniform3fvCache.hasOwnProperty(name2)) {
                const cache = this.uniform3fvCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1] && value2[2] === cache[2]) {
                  return;
                }
              }
              this.uniform3fvCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform3fv(loc, value2);
            }
            setUniform3iv(name2, value2) {
              if (this.uniform3ivCache.hasOwnProperty(name2)) {
                const cache = this.uniform3ivCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1] && value2[2] === cache[2]) {
                  return;
                }
              }
              this.uniform3ivCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform3iv(loc, value2);
            }
            setUniform4fv(name2, value2) {
              if (this.uniform4fvCache.hasOwnProperty(name2)) {
                const cache = this.uniform4fvCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1] && value2[2] === cache[2] && value2[3] === cache[3]) {
                  return;
                }
              }
              this.uniform4fvCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform4fv(loc, value2);
            }
            setUniform4iv(name2, value2) {
              if (this.uniform4ivCache.hasOwnProperty(name2)) {
                const cache = this.uniform4ivCache[name2];
                if (value2[0] === cache[0] && value2[1] === cache[1] && value2[2] === cache[2] && value2[3] === cache[3]) {
                  return;
                }
              }
              this.uniform4ivCache[name2] = value2;
              const loc = this.getUniformLocation(name2);
              this.context.uniform4iv(loc, value2);
            }
            getUniformLocation(name2) {
              if (this.programUniformLocationCache.hasOwnProperty(name2)) {
                return this.programUniformLocationCache[name2];
              }
              return this.programUniformLocationCache[name2] = this.context.getUniformLocation(this.program, name2);
            }
            _getFragShaderArtifactMap(args) {
              return {
                HEADER: this._getHeaderString(),
                LOOP_MAX: this._getLoopMaxString(),
                PLUGINS: this._getPluginsString(),
                CONSTANTS: this._getConstantsString(),
                DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
                ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
                DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),
                INJECTED_NATIVE: this._getInjectedNative(),
                MAIN_CONSTANTS: this._getMainConstantsString(),
                MAIN_ARGUMENTS: this._getMainArgumentsString(args),
                KERNEL: this.getKernelString(),
                MAIN_RESULT: this.getMainResultString(),
                FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
                INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
                SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
                SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
              };
            }
            _getVertShaderArtifactMap(args) {
              return {
                FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
                INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
                SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
                SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
              };
            }
            _getHeaderString() {
              return this.subKernels !== null ? "#extension GL_EXT_draw_buffers : require\n" : "";
            }
            _getLoopMaxString() {
              return this.loopMaxIterations ? ` ${parseInt(this.loopMaxIterations)};
` : " 1000;\n";
            }
            _getPluginsString() {
              if (!this.plugins) return "\n";
              return this.plugins.map((plugin) => plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : "").join("\n");
            }
            _getConstantsString() {
              const result = [];
              const { threadDim, texSize } = this;
              if (this.dynamicOutput) {
                result.push(
                  "uniform ivec3 uOutputDim",
                  "uniform ivec2 uTexSize"
                );
              } else {
                result.push(
                  `ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`,
                  `ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`
                );
              }
              return utils.linesToString(result);
            }
            _getTextureCoordinate() {
              const subKernels = this.subKernels;
              if (subKernels === null || subKernels.length < 1) {
                return "varying vec2 vTexCoord;\n";
              } else {
                return "out vec2 vTexCoord;\n";
              }
            }
            _getDecode32EndiannessString() {
              return this.endianness === "LE" ? "" : "  texel.rgba = texel.abgr;\n";
            }
            _getEncode32EndiannessString() {
              return this.endianness === "LE" ? "" : "  texel.rgba = texel.abgr;\n";
            }
            _getDivideWithIntegerCheckString() {
              return this.fixIntegerDivisionAccuracy ? `float divWithIntCheck(float x, float y) {
  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {
    return float(int(x) / int(y));
  }
  return x / y;
}

float integerCorrectionModulo(float number, float divisor) {
  if (number < 0.0) {
    number = abs(number);
    if (divisor < 0.0) {
      divisor = abs(divisor);
    }
    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));
  }
  if (divisor < 0.0) {
    divisor = abs(divisor);
  }
  return number - (divisor * floor(divWithIntCheck(number, divisor)));
}` : "";
            }
            _getMainArgumentsString(args) {
              const results = [];
              const { argumentNames } = this;
              for (let i = 0; i < argumentNames.length; i++) {
                results.push(this.kernelArguments[i].getSource(args[i]));
              }
              return results.join("");
            }
            _getInjectedNative() {
              return this.injectedNative || "";
            }
            _getMainConstantsString() {
              const result = [];
              const { constants } = this;
              if (constants) {
                let i = 0;
                for (const name2 in constants) {
                  if (!this.constants.hasOwnProperty(name2)) continue;
                  result.push(this.kernelConstants[i++].getSource(this.constants[name2]));
                }
              }
              return result.join("");
            }
            getRawValueFramebuffer(width, height) {
              if (!this.rawValueFramebuffers[width]) {
                this.rawValueFramebuffers[width] = {};
              }
              if (!this.rawValueFramebuffers[width][height]) {
                const framebuffer = this.context.createFramebuffer();
                framebuffer.width = width;
                framebuffer.height = height;
                this.rawValueFramebuffers[width][height] = framebuffer;
              }
              return this.rawValueFramebuffers[width][height];
            }
            getKernelResultDeclaration() {
              switch (this.returnType) {
                case "Array(2)":
                  return "vec2 kernelResult";
                case "Array(3)":
                  return "vec3 kernelResult";
                case "Array(4)":
                  return "vec4 kernelResult";
                case "LiteralInteger":
                case "Float":
                case "Number":
                case "Integer":
                  return "float kernelResult";
                default:
                  if (this.graphical) {
                    return "float kernelResult";
                  } else {
                    throw new Error(`unrecognized output type "${this.returnType}"`);
                  }
              }
            }
            getKernelString() {
              const result = [this.getKernelResultDeclaration()];
              const { subKernels } = this;
              if (subKernels !== null) {
                switch (this.returnType) {
                  case "Number":
                  case "Float":
                  case "Integer":
                    for (let i = 0; i < subKernels.length; i++) {
                      const subKernel = subKernels[i];
                      result.push(
                        subKernel.returnType === "Integer" ? `int subKernelResult_${subKernel.name} = 0` : `float subKernelResult_${subKernel.name} = 0.0`
                      );
                    }
                    break;
                  case "Array(2)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec2 subKernelResult_${subKernels[i].name}`
                      );
                    }
                    break;
                  case "Array(3)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec3 subKernelResult_${subKernels[i].name}`
                      );
                    }
                    break;
                  case "Array(4)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec4 subKernelResult_${subKernels[i].name}`
                      );
                    }
                    break;
                }
              }
              return utils.linesToString(result) + this.translatedSource;
            }
            getMainResultGraphical() {
              return utils.linesToString([
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  gl_FragColor = actualColor"
              ]);
            }
            getMainResultPackedPixels() {
              switch (this.returnType) {
                case "LiteralInteger":
                case "Number":
                case "Integer":
                case "Float":
                  return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();
                default:
                  throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`);
              }
            }
            getMainResultKernelPackedPixels() {
              return utils.linesToString([
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                `  gl_FragData[0] = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(kernelResult)`
              ]);
            }
            getMainResultSubKernelPackedPixels() {
              const result = [];
              if (!this.subKernels) return "";
              for (let i = 0; i < this.subKernels.length; i++) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(float(subKernelResult_${this.subKernels[i].name}))`
                  );
                } else {
                  result.push(
                    `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(subKernelResult_${this.subKernels[i].name})`
                  );
                }
              }
              return utils.linesToString(result);
            }
            getMainResultMemoryOptimizedFloats() {
              const result = [
                "  index *= 4"
              ];
              switch (this.returnType) {
                case "Number":
                case "Integer":
                case "Float":
                  const channels = ["r", "g", "b", "a"];
                  for (let i = 0; i < channels.length; i++) {
                    const channel = channels[i];
                    this.getMainResultKernelMemoryOptimizedFloats(result, channel);
                    this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);
                    if (i + 1 < channels.length) {
                      result.push("  index += 1");
                    }
                  }
                  break;
                default:
                  throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);
              }
              return utils.linesToString(result);
            }
            getMainResultKernelMemoryOptimizedFloats(result, channel) {
              result.push(
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                `  gl_FragData[0].${channel} = kernelResult`
              );
            }
            getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; i++) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  gl_FragData[${i + 1}].${channel} = float(subKernelResult_${this.subKernels[i].name})`
                  );
                } else {
                  result.push(
                    `  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`
                  );
                }
              }
            }
            getMainResultKernelNumberTexture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  gl_FragData[0][0] = kernelResult"
              ];
            }
            getMainResultSubKernelNumberTexture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  gl_FragData[${i + 1}][0] = float(subKernelResult_${subKernel.name})`
                  );
                } else {
                  result.push(
                    `  gl_FragData[${i + 1}][0] = subKernelResult_${subKernel.name}`
                  );
                }
              }
              return result;
            }
            getMainResultKernelArray2Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  gl_FragData[0][0] = kernelResult[0]",
                "  gl_FragData[0][1] = kernelResult[1]"
              ];
            }
            getMainResultSubKernelArray2Texture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                result.push(
                  `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,
                  `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`
                );
              }
              return result;
            }
            getMainResultKernelArray3Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  gl_FragData[0][0] = kernelResult[0]",
                "  gl_FragData[0][1] = kernelResult[1]",
                "  gl_FragData[0][2] = kernelResult[2]"
              ];
            }
            getMainResultSubKernelArray3Texture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                result.push(
                  `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,
                  `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,
                  `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`
                );
              }
              return result;
            }
            getMainResultKernelArray4Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  gl_FragData[0] = kernelResult"
              ];
            }
            getMainResultSubKernelArray4Texture() {
              const result = [];
              if (!this.subKernels) return result;
              switch (this.returnType) {
                case "Number":
                case "Float":
                case "Integer":
                  for (let i = 0; i < this.subKernels.length; ++i) {
                    const subKernel = this.subKernels[i];
                    if (subKernel.returnType === "Integer") {
                      result.push(
                        `  gl_FragData[${i + 1}] = float(subKernelResult_${this.subKernels[i].name})`
                      );
                    } else {
                      result.push(
                        `  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`
                      );
                    }
                  }
                  break;
                case "Array(2)":
                  for (let i = 0; i < this.subKernels.length; ++i) {
                    result.push(
                      `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,
                      `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`
                    );
                  }
                  break;
                case "Array(3)":
                  for (let i = 0; i < this.subKernels.length; ++i) {
                    result.push(
                      `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,
                      `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,
                      `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`
                    );
                  }
                  break;
                case "Array(4)":
                  for (let i = 0; i < this.subKernels.length; ++i) {
                    result.push(
                      `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,
                      `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,
                      `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,
                      `  gl_FragData[${i + 1}][3] = subKernelResult_${this.subKernels[i].name}[3]`
                    );
                  }
                  break;
              }
              return result;
            }
            replaceArtifacts(src, map) {
              return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\n/g, (match, artifact) => {
                if (map.hasOwnProperty(artifact)) {
                  return map[artifact];
                }
                throw `unhandled artifact ${artifact}`;
              });
            }
            getFragmentShader(args) {
              if (this.compiledFragmentShader !== null) {
                return this.compiledFragmentShader;
              }
              return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));
            }
            getVertexShader(args) {
              if (this.compiledVertexShader !== null) {
                return this.compiledVertexShader;
              }
              return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));
            }
            toString() {
              const setupContextString = utils.linesToString([
                `const gl = context`
              ]);
              return glKernelString(this.constructor, arguments, this, setupContextString);
            }
            destroy(removeCanvasReferences) {
              if (!this.context) return;
              if (this.buffer) {
                this.context.deleteBuffer(this.buffer);
              }
              if (this.framebuffer) {
                this.context.deleteFramebuffer(this.framebuffer);
              }
              for (const width in this.rawValueFramebuffers) {
                for (const height in this.rawValueFramebuffers[width]) {
                  this.context.deleteFramebuffer(this.rawValueFramebuffers[width][height]);
                  delete this.rawValueFramebuffers[width][height];
                }
                delete this.rawValueFramebuffers[width];
              }
              if (this.vertShader) {
                this.context.deleteShader(this.vertShader);
              }
              if (this.fragShader) {
                this.context.deleteShader(this.fragShader);
              }
              if (this.program) {
                this.context.deleteProgram(this.program);
              }
              if (this.texture) {
                this.texture.delete();
                const textureCacheIndex = this.textureCache.indexOf(this.texture.texture);
                if (textureCacheIndex > -1) {
                  this.textureCache.splice(textureCacheIndex, 1);
                }
                this.texture = null;
              }
              if (this.mappedTextures && this.mappedTextures.length) {
                for (let i2 = 0; i2 < this.mappedTextures.length; i2++) {
                  const mappedTexture = this.mappedTextures[i2];
                  mappedTexture.delete();
                  const textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);
                  if (textureCacheIndex > -1) {
                    this.textureCache.splice(textureCacheIndex, 1);
                  }
                }
                this.mappedTextures = null;
              }
              if (this.kernelArguments) {
                for (let i2 = 0; i2 < this.kernelArguments.length; i2++) {
                  this.kernelArguments[i2].destroy();
                }
              }
              if (this.kernelConstants) {
                for (let i2 = 0; i2 < this.kernelConstants.length; i2++) {
                  this.kernelConstants[i2].destroy();
                }
              }
              while (this.textureCache.length > 0) {
                const texture = this.textureCache.pop();
                this.context.deleteTexture(texture);
              }
              if (removeCanvasReferences) {
                const idx = canvases.indexOf(this.canvas);
                if (idx >= 0) {
                  canvases[idx] = null;
                  maxTexSizes[idx] = null;
                }
              }
              this.destroyExtensions();
              delete this.context;
              delete this.canvas;
              if (!this.gpu) return;
              const i = this.gpu.kernels.indexOf(this);
              if (i === -1) return;
              this.gpu.kernels.splice(i, 1);
            }
            destroyExtensions() {
              this.extensions.OES_texture_float = null;
              this.extensions.OES_texture_float_linear = null;
              this.extensions.OES_element_index_uint = null;
              this.extensions.WEBGL_draw_buffers = null;
            }
            static destroyContext(context) {
              const extension = context.getExtension("WEBGL_lose_context");
              if (extension) {
                extension.loseContext();
              }
            }
            toJSON() {
              const json = super.toJSON();
              json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();
              json.settings.threadDim = this.threadDim;
              return json;
            }
          }
          module3.exports = {
            WebGLKernel
          };
        }, { "../../plugins/math-random-uniformly-distributed": 112, "../../utils": 114, "../function-builder": 9, "../gl/kernel": 13, "../gl/kernel-string": 12, "./fragment-shader": 37, "./function-node": 38, "./kernel-value-maps": 39, "./vertex-shader": 71 }], 71: [function(require2, module3, exports3) {
          const vertexShader = `__FLOAT_TACTIC_DECLARATION__;
__INT_TACTIC_DECLARATION__;
__SAMPLER_2D_TACTIC_DECLARATION__;

attribute vec2 aPos;
attribute vec2 aTexCoord;

varying vec2 vTexCoord;
uniform vec2 ratio;

void main(void) {
  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);
  vTexCoord = aTexCoord;
}`;
          module3.exports = {
            vertexShader
          };
        }, {}], 72: [function(require2, module3, exports3) {
          const fragmentShader = `#version 300 es
__HEADER__;
__FLOAT_TACTIC_DECLARATION__;
__INT_TACTIC_DECLARATION__;
__SAMPLER_2D_TACTIC_DECLARATION__;
__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;

const int LOOP_MAX = __LOOP_MAX__;

__PLUGINS__;
__CONSTANTS__;

in vec2 vTexCoord;

float atan2(float v1, float v2) {
  if (v1 == 0.0 || v2 == 0.0) return 0.0;
  return atan(v1 / v2);
}

float cbrt(float x) {
  if (x >= 0.0) {
    return pow(x, 1.0 / 3.0);
  } else {
    return -pow(x, 1.0 / 3.0);
  }
}

float expm1(float x) {
  return pow(${Math.E}, x) - 1.0; 
}

float fround(highp float x) {
  return x;
}

float imul(float v1, float v2) {
  return float(int(v1) * int(v2));
}

float log10(float x) {
  return log2(x) * (1.0 / log2(10.0));
}

float log1p(float x) {
  return log(1.0 + x);
}

float _pow(float v1, float v2) {
  if (v2 == 0.0) return 1.0;
  return pow(v1, v2);
}

float _round(float x) {
  return floor(x + 0.5);
}


const int BIT_COUNT = 32;
int modi(int x, int y) {
  return x - y * (x / y);
}

int bitwiseOr(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseXOR(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseAnd(int a, int b) {
  int result = 0;
  int n = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 && b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseNot(int a) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if (modi(a, 2) == 0) {
      result += n;    
    }
    a = a / 2;
    n = n * 2;
  }
  return result;
}
int bitwiseZeroFillLeftShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n *= 2;
  }

  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

int bitwiseSignedRightShift(int num, int shifts) {
  return int(floor(float(num) / pow(2.0, float(shifts))));
}

int bitwiseZeroFillRightShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n /= 2;
  }
  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

vec2 integerMod(vec2 x, float y) {
  vec2 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec3 integerMod(vec3 x, float y) {
  vec3 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec4 integerMod(vec4 x, vec4 y) {
  vec4 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

float integerMod(float x, float y) {
  float res = floor(mod(x, y));
  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);
}

int integerMod(int x, int y) {
  return x - (y * int(x/y));
}

__DIVIDE_WITH_INTEGER_CHECK__;

// Here be dragons!
// DO NOT OPTIMIZE THIS CODE
// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE
// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME
const vec2 MAGIC_VEC = vec2(1.0, -256.0);
const vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);
const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536
float decode32(vec4 texel) {
  __DECODE32_ENDIANNESS__;
  texel *= 255.0;
  vec2 gte128;
  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;
  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;
  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);
  float res = exp2(round(exponent));
  texel.b = texel.b - 128.0 * gte128.x;
  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;
  res *= gte128.y * -2.0 + 1.0;
  return res;
}

float decode16(vec4 texel, int index) {
  int channel = integerMod(index, 2);
  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;
}

float decode8(vec4 texel, int index) {
  int channel = integerMod(index, 4);
  return texel[channel] * 255.0;
}

vec4 legacyEncode32(float f) {
  float F = abs(f);
  float sign = f < 0.0 ? 1.0 : 0.0;
  float exponent = floor(log2(F));
  float mantissa = (exp2(-exponent) * F);
  // exponent += floor(log2(mantissa));
  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;
  texel.rg = integerMod(texel.rg, 256.0);
  texel.b = integerMod(texel.b, 128.0);
  texel.a = exponent*0.5 + 63.5;
  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;
  texel = floor(texel);
  texel *= 0.003921569; // 1/255
  __ENCODE32_ENDIANNESS__;
  return texel;
}

// https://github.com/gpujs/gpu.js/wiki/Encoder-details
vec4 encode32(float value) {
  if (value == 0.0) return vec4(0, 0, 0, 0);

  float exponent;
  float mantissa;
  vec4  result;
  float sgn;

  sgn = step(0.0, -value);
  value = abs(value);

  exponent = floor(log2(value));

  mantissa = value*pow(2.0, -exponent)-1.0;
  exponent = exponent+127.0;
  result   = vec4(0,0,0,0);

  result.a = floor(exponent/2.0);
  exponent = exponent - result.a*2.0;
  result.a = result.a + 128.0*sgn;

  result.b = floor(mantissa * 128.0);
  mantissa = mantissa - result.b / 128.0;
  result.b = result.b + exponent*128.0;

  result.g = floor(mantissa*32768.0);
  mantissa = mantissa - result.g/32768.0;

  result.r = floor(mantissa*8388608.0);
  return result/255.0;
}
// Dragons end here

int index;
ivec3 threadId;

ivec3 indexTo3D(int idx, ivec3 texDim) {
  int z = int(idx / (texDim.x * texDim.y));
  idx -= z * int(texDim.x * texDim.y);
  int y = int(idx / texDim.x);
  int x = int(integerMod(idx, texDim.x));
  return ivec3(x, y, z);
}

float get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  return decode32(texel);
}

float get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int w = texSize.x * 2;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));
  return decode16(texel, index);
}

float get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int w = texSize.x * 4;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));
  return decode8(texel, index);
}

float getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int channel = integerMod(index, 4);
  index = index / 4;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  index = index / 4;
  vec4 texel = texture(tex, st / vec2(texSize));
  return texel[channel];
}

vec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  return texture(tex, st / vec2(texSize));
}

vec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  return texture(tex, vec3(st / vec2(texSize), z));
}

float getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return result[0];
}

vec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec2(result[0], result[1]);
}

vec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 2);
  index = index / 2;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  if (channel == 0) return vec2(texel.r, texel.g);
  if (channel == 1) return vec2(texel.b, texel.a);
  return vec2(0.0, 0.0);
}

vec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec3(result[0], result[1], result[2]);
}

vec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));
  int vectorIndex = fieldIndex / 4;
  int vectorOffset = fieldIndex - vectorIndex * 4;
  int readY = vectorIndex / texSize.x;
  int readX = vectorIndex - readY * texSize.x;
  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));

  if (vectorOffset == 0) {
    return tex1.xyz;
  } else if (vectorOffset == 1) {
    return tex1.yzw;
  } else {
    readX++;
    if (readX >= texSize.x) {
      readX = 0;
      readY++;
    }
    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));
    if (vectorOffset == 2) {
      return vec3(tex1.z, tex1.w, tex2.x);
    } else {
      return vec3(tex1.w, tex2.x, tex2.y);
    }
  }
}

vec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  return getImage2D(tex, texSize, texDim, z, y, x);
}

vec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 2);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  return vec4(texel.r, texel.g, texel.b, texel.a);
}

vec4 actualColor;
void color(float r, float g, float b, float a) {
  actualColor = vec4(r,g,b,a);
}

void color(float r, float g, float b) {
  color(r,g,b,1.0);
}

float modulo(float number, float divisor) {
  if (number < 0.0) {
    number = abs(number);
    if (divisor < 0.0) {
      divisor = abs(divisor);
    }
    return -mod(number, divisor);
  }
  if (divisor < 0.0) {
    divisor = abs(divisor);
  }
  return mod(number, divisor);
}

__INJECTED_NATIVE__;
__MAIN_CONSTANTS__;
__MAIN_ARGUMENTS__;
__KERNEL__;

void main(void) {
  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;
  __MAIN_RESULT__;
}`;
          module3.exports = {
            fragmentShader
          };
        }, {}], 73: [function(require2, module3, exports3) {
          const { utils } = require2("../../utils");
          const { WebGLFunctionNode } = require2("../web-gl/function-node");
          class WebGL2FunctionNode extends WebGLFunctionNode {
            astIdentifierExpression(idtNode, retArr) {
              if (idtNode.type !== "Identifier") {
                throw this.astErrorOutput(
                  "IdentifierExpression - not an Identifier",
                  idtNode
                );
              }
              const type = this.getType(idtNode);
              const name2 = utils.sanitizeName(idtNode.name);
              if (idtNode.name === "Infinity") {
                retArr.push("intBitsToFloat(2139095039)");
              } else if (type === "Boolean") {
                if (this.argumentNames.indexOf(name2) > -1) {
                  retArr.push(`bool(user_${name2})`);
                } else {
                  retArr.push(`user_${name2}`);
                }
              } else {
                retArr.push(`user_${name2}`);
              }
              return retArr;
            }
          }
          module3.exports = {
            WebGL2FunctionNode
          };
        }, { "../../utils": 114, "../web-gl/function-node": 38 }], 74: [function(require2, module3, exports3) {
          const { WebGL2KernelValueBoolean } = require2("./kernel-value/boolean");
          const { WebGL2KernelValueFloat } = require2("./kernel-value/float");
          const { WebGL2KernelValueInteger } = require2("./kernel-value/integer");
          const { WebGL2KernelValueHTMLImage } = require2("./kernel-value/html-image");
          const { WebGL2KernelValueDynamicHTMLImage } = require2("./kernel-value/dynamic-html-image");
          const { WebGL2KernelValueHTMLImageArray } = require2("./kernel-value/html-image-array");
          const { WebGL2KernelValueDynamicHTMLImageArray } = require2("./kernel-value/dynamic-html-image-array");
          const { WebGL2KernelValueHTMLVideo } = require2("./kernel-value/html-video");
          const { WebGL2KernelValueDynamicHTMLVideo } = require2("./kernel-value/dynamic-html-video");
          const { WebGL2KernelValueSingleInput } = require2("./kernel-value/single-input");
          const { WebGL2KernelValueDynamicSingleInput } = require2("./kernel-value/dynamic-single-input");
          const { WebGL2KernelValueUnsignedInput } = require2("./kernel-value/unsigned-input");
          const { WebGL2KernelValueDynamicUnsignedInput } = require2("./kernel-value/dynamic-unsigned-input");
          const { WebGL2KernelValueMemoryOptimizedNumberTexture } = require2("./kernel-value/memory-optimized-number-texture");
          const { WebGL2KernelValueDynamicMemoryOptimizedNumberTexture } = require2("./kernel-value/dynamic-memory-optimized-number-texture");
          const { WebGL2KernelValueNumberTexture } = require2("./kernel-value/number-texture");
          const { WebGL2KernelValueDynamicNumberTexture } = require2("./kernel-value/dynamic-number-texture");
          const { WebGL2KernelValueSingleArray } = require2("./kernel-value/single-array");
          const { WebGL2KernelValueDynamicSingleArray } = require2("./kernel-value/dynamic-single-array");
          const { WebGL2KernelValueSingleArray1DI } = require2("./kernel-value/single-array1d-i");
          const { WebGL2KernelValueDynamicSingleArray1DI } = require2("./kernel-value/dynamic-single-array1d-i");
          const { WebGL2KernelValueSingleArray2DI } = require2("./kernel-value/single-array2d-i");
          const { WebGL2KernelValueDynamicSingleArray2DI } = require2("./kernel-value/dynamic-single-array2d-i");
          const { WebGL2KernelValueSingleArray3DI } = require2("./kernel-value/single-array3d-i");
          const { WebGL2KernelValueDynamicSingleArray3DI } = require2("./kernel-value/dynamic-single-array3d-i");
          const { WebGL2KernelValueArray2 } = require2("./kernel-value/array2");
          const { WebGL2KernelValueArray3 } = require2("./kernel-value/array3");
          const { WebGL2KernelValueArray4 } = require2("./kernel-value/array4");
          const { WebGL2KernelValueUnsignedArray } = require2("./kernel-value/unsigned-array");
          const { WebGL2KernelValueDynamicUnsignedArray } = require2("./kernel-value/dynamic-unsigned-array");
          const kernelValueMaps = {
            unsigned: {
              dynamic: {
                "Boolean": WebGL2KernelValueBoolean,
                "Integer": WebGL2KernelValueInteger,
                "Float": WebGL2KernelValueFloat,
                "Array": WebGL2KernelValueDynamicUnsignedArray,
                "Array(2)": WebGL2KernelValueArray2,
                "Array(3)": WebGL2KernelValueArray3,
                "Array(4)": WebGL2KernelValueArray4,
                "Array1D(2)": false,
                "Array1D(3)": false,
                "Array1D(4)": false,
                "Array2D(2)": false,
                "Array2D(3)": false,
                "Array2D(4)": false,
                "Array3D(2)": false,
                "Array3D(3)": false,
                "Array3D(4)": false,
                "Input": WebGL2KernelValueDynamicUnsignedInput,
                "NumberTexture": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(1)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(2)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(3)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(4)": WebGL2KernelValueDynamicNumberTexture,
                "MemoryOptimizedNumberTexture": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGL2KernelValueDynamicHTMLImage,
                "OffscreenCanvas": WebGL2KernelValueDynamicHTMLImage,
                "HTMLImage": WebGL2KernelValueDynamicHTMLImage,
                "ImageBitmap": WebGL2KernelValueDynamicHTMLImage,
                "ImageData": WebGL2KernelValueDynamicHTMLImage,
                "HTMLImageArray": WebGL2KernelValueDynamicHTMLImageArray,
                "HTMLVideo": WebGL2KernelValueDynamicHTMLVideo
              },
              static: {
                "Boolean": WebGL2KernelValueBoolean,
                "Float": WebGL2KernelValueFloat,
                "Integer": WebGL2KernelValueInteger,
                "Array": WebGL2KernelValueUnsignedArray,
                "Array(2)": WebGL2KernelValueArray2,
                "Array(3)": WebGL2KernelValueArray3,
                "Array(4)": WebGL2KernelValueArray4,
                "Array1D(2)": false,
                "Array1D(3)": false,
                "Array1D(4)": false,
                "Array2D(2)": false,
                "Array2D(3)": false,
                "Array2D(4)": false,
                "Array3D(2)": false,
                "Array3D(3)": false,
                "Array3D(4)": false,
                "Input": WebGL2KernelValueUnsignedInput,
                "NumberTexture": WebGL2KernelValueNumberTexture,
                "ArrayTexture(1)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(2)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(3)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(4)": WebGL2KernelValueNumberTexture,
                "MemoryOptimizedNumberTexture": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGL2KernelValueHTMLImage,
                "OffscreenCanvas": WebGL2KernelValueHTMLImage,
                "HTMLImage": WebGL2KernelValueHTMLImage,
                "ImageBitmap": WebGL2KernelValueHTMLImage,
                "ImageData": WebGL2KernelValueHTMLImage,
                "HTMLImageArray": WebGL2KernelValueHTMLImageArray,
                "HTMLVideo": WebGL2KernelValueHTMLVideo
              }
            },
            single: {
              dynamic: {
                "Boolean": WebGL2KernelValueBoolean,
                "Integer": WebGL2KernelValueInteger,
                "Float": WebGL2KernelValueFloat,
                "Array": WebGL2KernelValueDynamicSingleArray,
                "Array(2)": WebGL2KernelValueArray2,
                "Array(3)": WebGL2KernelValueArray3,
                "Array(4)": WebGL2KernelValueArray4,
                "Array1D(2)": WebGL2KernelValueDynamicSingleArray1DI,
                "Array1D(3)": WebGL2KernelValueDynamicSingleArray1DI,
                "Array1D(4)": WebGL2KernelValueDynamicSingleArray1DI,
                "Array2D(2)": WebGL2KernelValueDynamicSingleArray2DI,
                "Array2D(3)": WebGL2KernelValueDynamicSingleArray2DI,
                "Array2D(4)": WebGL2KernelValueDynamicSingleArray2DI,
                "Array3D(2)": WebGL2KernelValueDynamicSingleArray3DI,
                "Array3D(3)": WebGL2KernelValueDynamicSingleArray3DI,
                "Array3D(4)": WebGL2KernelValueDynamicSingleArray3DI,
                "Input": WebGL2KernelValueDynamicSingleInput,
                "NumberTexture": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(1)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(2)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(3)": WebGL2KernelValueDynamicNumberTexture,
                "ArrayTexture(4)": WebGL2KernelValueDynamicNumberTexture,
                "MemoryOptimizedNumberTexture": WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGL2KernelValueDynamicHTMLImage,
                "OffscreenCanvas": WebGL2KernelValueDynamicHTMLImage,
                "HTMLImage": WebGL2KernelValueDynamicHTMLImage,
                "ImageBitmap": WebGL2KernelValueDynamicHTMLImage,
                "ImageData": WebGL2KernelValueDynamicHTMLImage,
                "HTMLImageArray": WebGL2KernelValueDynamicHTMLImageArray,
                "HTMLVideo": WebGL2KernelValueDynamicHTMLVideo
              },
              static: {
                "Boolean": WebGL2KernelValueBoolean,
                "Float": WebGL2KernelValueFloat,
                "Integer": WebGL2KernelValueInteger,
                "Array": WebGL2KernelValueSingleArray,
                "Array(2)": WebGL2KernelValueArray2,
                "Array(3)": WebGL2KernelValueArray3,
                "Array(4)": WebGL2KernelValueArray4,
                "Array1D(2)": WebGL2KernelValueSingleArray1DI,
                "Array1D(3)": WebGL2KernelValueSingleArray1DI,
                "Array1D(4)": WebGL2KernelValueSingleArray1DI,
                "Array2D(2)": WebGL2KernelValueSingleArray2DI,
                "Array2D(3)": WebGL2KernelValueSingleArray2DI,
                "Array2D(4)": WebGL2KernelValueSingleArray2DI,
                "Array3D(2)": WebGL2KernelValueSingleArray3DI,
                "Array3D(3)": WebGL2KernelValueSingleArray3DI,
                "Array3D(4)": WebGL2KernelValueSingleArray3DI,
                "Input": WebGL2KernelValueSingleInput,
                "NumberTexture": WebGL2KernelValueNumberTexture,
                "ArrayTexture(1)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(2)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(3)": WebGL2KernelValueNumberTexture,
                "ArrayTexture(4)": WebGL2KernelValueNumberTexture,
                "MemoryOptimizedNumberTexture": WebGL2KernelValueMemoryOptimizedNumberTexture,
                "HTMLCanvas": WebGL2KernelValueHTMLImage,
                "OffscreenCanvas": WebGL2KernelValueHTMLImage,
                "HTMLImage": WebGL2KernelValueHTMLImage,
                "ImageBitmap": WebGL2KernelValueHTMLImage,
                "ImageData": WebGL2KernelValueHTMLImage,
                "HTMLImageArray": WebGL2KernelValueHTMLImageArray,
                "HTMLVideo": WebGL2KernelValueHTMLVideo
              }
            }
          };
          function lookupKernelValueType(type, dynamic, precision, value2) {
            if (!type) {
              throw new Error("type missing");
            }
            if (!dynamic) {
              throw new Error("dynamic missing");
            }
            if (!precision) {
              throw new Error("precision missing");
            }
            if (value2.type) {
              type = value2.type;
            }
            const types = kernelValueMaps[precision][dynamic];
            if (types[type] === false) {
              return null;
            } else if (types[type] === void 0) {
              throw new Error(`Could not find a KernelValue for ${type}`);
            }
            return types[type];
          }
          module3.exports = {
            kernelValueMaps,
            lookupKernelValueType
          };
        }, { "./kernel-value/array2": 75, "./kernel-value/array3": 76, "./kernel-value/array4": 77, "./kernel-value/boolean": 78, "./kernel-value/dynamic-html-image": 80, "./kernel-value/dynamic-html-image-array": 79, "./kernel-value/dynamic-html-video": 81, "./kernel-value/dynamic-memory-optimized-number-texture": 82, "./kernel-value/dynamic-number-texture": 83, "./kernel-value/dynamic-single-array": 84, "./kernel-value/dynamic-single-array1d-i": 85, "./kernel-value/dynamic-single-array2d-i": 86, "./kernel-value/dynamic-single-array3d-i": 87, "./kernel-value/dynamic-single-input": 88, "./kernel-value/dynamic-unsigned-array": 89, "./kernel-value/dynamic-unsigned-input": 90, "./kernel-value/float": 91, "./kernel-value/html-image": 93, "./kernel-value/html-image-array": 92, "./kernel-value/html-video": 94, "./kernel-value/integer": 95, "./kernel-value/memory-optimized-number-texture": 96, "./kernel-value/number-texture": 97, "./kernel-value/single-array": 98, "./kernel-value/single-array1d-i": 99, "./kernel-value/single-array2d-i": 100, "./kernel-value/single-array3d-i": 101, "./kernel-value/single-input": 102, "./kernel-value/unsigned-array": 103, "./kernel-value/unsigned-input": 104 }], 75: [function(require2, module3, exports3) {
          const { WebGLKernelValueArray2 } = require2("../../web-gl/kernel-value/array2");
          class WebGL2KernelValueArray2 extends WebGLKernelValueArray2 {
          }
          module3.exports = {
            WebGL2KernelValueArray2
          };
        }, { "../../web-gl/kernel-value/array2": 41 }], 76: [function(require2, module3, exports3) {
          const { WebGLKernelValueArray3 } = require2("../../web-gl/kernel-value/array3");
          class WebGL2KernelValueArray3 extends WebGLKernelValueArray3 {
          }
          module3.exports = {
            WebGL2KernelValueArray3
          };
        }, { "../../web-gl/kernel-value/array3": 42 }], 77: [function(require2, module3, exports3) {
          const { WebGLKernelValueArray4 } = require2("../../web-gl/kernel-value/array4");
          class WebGL2KernelValueArray4 extends WebGLKernelValueArray4 {
          }
          module3.exports = {
            WebGL2KernelValueArray4
          };
        }, { "../../web-gl/kernel-value/array4": 43 }], 78: [function(require2, module3, exports3) {
          const { WebGLKernelValueBoolean } = require2("../../web-gl/kernel-value/boolean");
          class WebGL2KernelValueBoolean extends WebGLKernelValueBoolean {
          }
          module3.exports = {
            WebGL2KernelValueBoolean
          };
        }, { "../../web-gl/kernel-value/boolean": 44 }], 79: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueHTMLImageArray } = require2("./html-image-array");
          class WebGL2KernelValueDynamicHTMLImageArray extends WebGL2KernelValueHTMLImageArray {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2DArray ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(images) {
              const { width, height } = images[0];
              this.checkSize(width, height);
              this.dimensions = [width, height, images.length];
              this.textureSize = [width, height];
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(images);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicHTMLImageArray
          };
        }, { "../../../utils": 114, "./html-image-array": 92 }], 80: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueDynamicHTMLImage } = require2("../../web-gl/kernel-value/dynamic-html-image");
          class WebGL2KernelValueDynamicHTMLImage extends WebGLKernelValueDynamicHTMLImage {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicHTMLImage
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/dynamic-html-image": 45 }], 81: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueDynamicHTMLImage } = require2("./dynamic-html-image");
          class WebGL2KernelValueDynamicHTMLVideo extends WebGL2KernelValueDynamicHTMLImage {
          }
          module3.exports = {
            WebGL2KernelValueDynamicHTMLVideo
          };
        }, { "../../../utils": 114, "./dynamic-html-image": 80 }], 82: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } = require2("../../web-gl/kernel-value/dynamic-memory-optimized-number-texture");
          class WebGL2KernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueDynamicMemoryOptimizedNumberTexture {
            getSource() {
              return utils.linesToString([
                `uniform sampler2D ${this.id}`,
                `uniform ivec2 ${this.sizeId}`,
                `uniform ivec3 ${this.dimensionsId}`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicMemoryOptimizedNumberTexture
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/dynamic-memory-optimized-number-texture": 47 }], 83: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueDynamicNumberTexture } = require2("../../web-gl/kernel-value/dynamic-number-texture");
          class WebGL2KernelValueDynamicNumberTexture extends WebGLKernelValueDynamicNumberTexture {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicNumberTexture
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/dynamic-number-texture": 48 }], 84: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueSingleArray } = require2("../../web-gl2/kernel-value/single-array");
          class WebGL2KernelValueDynamicSingleArray extends WebGL2KernelValueSingleArray {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.dimensions = utils.getDimensions(value2, true);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicSingleArray
          };
        }, { "../../../utils": 114, "../../web-gl2/kernel-value/single-array": 98 }], 85: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueSingleArray1DI } = require2("../../web-gl2/kernel-value/single-array1d-i");
          class WebGL2KernelValueDynamicSingleArray1DI extends WebGL2KernelValueSingleArray1DI {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicSingleArray1DI
          };
        }, { "../../../utils": 114, "../../web-gl2/kernel-value/single-array1d-i": 99 }], 86: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueSingleArray2DI } = require2("../../web-gl2/kernel-value/single-array2d-i");
          class WebGL2KernelValueDynamicSingleArray2DI extends WebGL2KernelValueSingleArray2DI {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicSingleArray2DI
          };
        }, { "../../../utils": 114, "../../web-gl2/kernel-value/single-array2d-i": 100 }], 87: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueSingleArray3DI } = require2("../../web-gl2/kernel-value/single-array3d-i");
          class WebGL2KernelValueDynamicSingleArray3DI extends WebGL2KernelValueSingleArray3DI {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              this.setShape(value2);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicSingleArray3DI
          };
        }, { "../../../utils": 114, "../../web-gl2/kernel-value/single-array3d-i": 101 }], 88: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueSingleInput } = require2("../../web-gl2/kernel-value/single-input");
          class WebGL2KernelValueDynamicSingleInput extends WebGL2KernelValueSingleInput {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
            updateValue(value2) {
              let [w, h, d] = value2.size;
              this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
              this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
              this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
              this.checkSize(this.textureSize[0], this.textureSize[1]);
              this.uploadValue = new Float32Array(this.uploadArrayLength);
              this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
              this.kernel.setUniform2iv(this.sizeId, this.textureSize);
              super.updateValue(value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicSingleInput
          };
        }, { "../../../utils": 114, "../../web-gl2/kernel-value/single-input": 102 }], 89: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueDynamicUnsignedArray } = require2("../../web-gl/kernel-value/dynamic-unsigned-array");
          class WebGL2KernelValueDynamicUnsignedArray extends WebGLKernelValueDynamicUnsignedArray {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicUnsignedArray
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/dynamic-unsigned-array": 54 }], 90: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueDynamicUnsignedInput } = require2("../../web-gl/kernel-value/dynamic-unsigned-input");
          class WebGL2KernelValueDynamicUnsignedInput extends WebGLKernelValueDynamicUnsignedInput {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `uniform ${variablePrecision} ivec2 ${this.sizeId}`,
                `uniform ${variablePrecision} ivec3 ${this.dimensionsId}`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueDynamicUnsignedInput
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/dynamic-unsigned-input": 55 }], 91: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueFloat } = require2("../../web-gl/kernel-value/float");
          class WebGL2KernelValueFloat extends WebGLKernelValueFloat {
          }
          module3.exports = {
            WebGL2KernelValueFloat
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/float": 56 }], 92: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelArray } = require2("../../web-gl/kernel-value/array");
          class WebGL2KernelValueHTMLImageArray extends WebGLKernelArray {
            constructor(value2, settings) {
              super(value2, settings);
              this.checkSize(value2[0].width, value2[0].height);
              this.dimensions = [value2[0].width, value2[0].height, value2.length];
              this.textureSize = [value2[0].width, value2[0].height];
            }
            defineTexture() {
              const { context: gl } = this;
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
              gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            }
            getStringValueHandler() {
              return `const uploadValue_${this.name} = ${this.varName};
`;
            }
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2DArray ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(images) {
              const { context: gl } = this;
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
              gl.texImage3D(
                gl.TEXTURE_2D_ARRAY,
                0,
                gl.RGBA,
                images[0].width,
                images[0].height,
                images.length,
                0,
                gl.RGBA,
                gl.UNSIGNED_BYTE,
                null
              );
              for (let i = 0; i < images.length; i++) {
                const xOffset = 0;
                const yOffset = 0;
                const imageDepth = 1;
                gl.texSubImage3D(
                  gl.TEXTURE_2D_ARRAY,
                  0,
                  xOffset,
                  yOffset,
                  i,
                  images[i].width,
                  images[i].height,
                  imageDepth,
                  gl.RGBA,
                  gl.UNSIGNED_BYTE,
                  this.uploadValue = images[i]
                );
              }
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueHTMLImageArray
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/array": 40 }], 93: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueHTMLImage } = require2("../../web-gl/kernel-value/html-image");
          class WebGL2KernelValueHTMLImage extends WebGLKernelValueHTMLImage {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueHTMLImage
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/html-image": 57 }], 94: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGL2KernelValueHTMLImage } = require2("./html-image");
          class WebGL2KernelValueHTMLVideo extends WebGL2KernelValueHTMLImage {
          }
          module3.exports = {
            WebGL2KernelValueHTMLVideo
          };
        }, { "../../../utils": 114, "./html-image": 93 }], 95: [function(require2, module3, exports3) {
          const { WebGLKernelValueInteger } = require2("../../web-gl/kernel-value/integer");
          class WebGL2KernelValueInteger extends WebGLKernelValueInteger {
            getSource(value2) {
              const variablePrecision = this.getVariablePrecisionString();
              if (this.origin === "constants") {
                return `const ${variablePrecision} int ${this.id} = ${parseInt(value2)};
`;
              }
              return `uniform ${variablePrecision} int ${this.id};
`;
            }
            updateValue(value2) {
              if (this.origin === "constants") return;
              this.kernel.setUniform1i(this.id, this.uploadValue = value2);
            }
          }
          module3.exports = {
            WebGL2KernelValueInteger
          };
        }, { "../../web-gl/kernel-value/integer": 60 }], 96: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueMemoryOptimizedNumberTexture } = require2("../../web-gl/kernel-value/memory-optimized-number-texture");
          class WebGL2KernelValueMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {
            getSource() {
              const { id, sizeId, textureSize, dimensionsId, dimensions } = this;
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform sampler2D ${id}`,
                `${variablePrecision} ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,
                `${variablePrecision} ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueMemoryOptimizedNumberTexture
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/memory-optimized-number-texture": 61 }], 97: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueNumberTexture } = require2("../../web-gl/kernel-value/number-texture");
          class WebGL2KernelValueNumberTexture extends WebGLKernelValueNumberTexture {
            getSource() {
              const { id, sizeId, textureSize, dimensionsId, dimensions } = this;
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${id}`,
                `${variablePrecision} ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,
                `${variablePrecision} ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueNumberTexture
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/number-texture": 62 }], 98: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray } = require2("../../web-gl/kernel-value/single-array");
          class WebGL2KernelValueSingleArray extends WebGLKernelValueSingleArray {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueSingleArray
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/single-array": 63 }], 99: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray1DI } = require2("../../web-gl/kernel-value/single-array1d-i");
          class WebGL2KernelValueSingleArray1DI extends WebGLKernelValueSingleArray1DI {
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueSingleArray1DI
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/single-array1d-i": 64 }], 100: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray2DI } = require2("../../web-gl/kernel-value/single-array2d-i");
          class WebGL2KernelValueSingleArray2DI extends WebGLKernelValueSingleArray2DI {
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueSingleArray2DI
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/single-array2d-i": 65 }], 101: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleArray3DI } = require2("../../web-gl/kernel-value/single-array3d-i");
          class WebGL2KernelValueSingleArray3DI extends WebGLKernelValueSingleArray3DI {
            updateValue(value2) {
              if (value2.constructor !== this.initialValueConstructor) {
                this.onUpdateValueMismatch(value2.constructor);
                return;
              }
              const { context: gl } = this;
              utils.flattenTo(value2, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueSingleArray3DI
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/single-array3d-i": 66 }], 102: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueSingleInput } = require2("../../web-gl/kernel-value/single-input");
          class WebGL2KernelValueSingleInput extends WebGLKernelValueSingleInput {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
            updateValue(input) {
              const { context: gl } = this;
              utils.flattenTo(input.value, this.uploadValue);
              gl.activeTexture(this.contextHandle);
              gl.bindTexture(gl.TEXTURE_2D, this.texture);
              gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
              this.kernel.setUniform1i(this.id, this.index);
            }
          }
          module3.exports = {
            WebGL2KernelValueSingleInput
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/single-input": 67 }], 103: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueUnsignedArray } = require2("../../web-gl/kernel-value/unsigned-array");
          class WebGL2KernelValueUnsignedArray extends WebGLKernelValueUnsignedArray {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueUnsignedArray
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/unsigned-array": 68 }], 104: [function(require2, module3, exports3) {
          const { utils } = require2("../../../utils");
          const { WebGLKernelValueUnsignedInput } = require2("../../web-gl/kernel-value/unsigned-input");
          class WebGL2KernelValueUnsignedInput extends WebGLKernelValueUnsignedInput {
            getSource() {
              const variablePrecision = this.getVariablePrecisionString();
              return utils.linesToString([
                `uniform ${variablePrecision} sampler2D ${this.id}`,
                `${variablePrecision} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,
                `${variablePrecision} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`
              ]);
            }
          }
          module3.exports = {
            WebGL2KernelValueUnsignedInput
          };
        }, { "../../../utils": 114, "../../web-gl/kernel-value/unsigned-input": 69 }], 105: [function(require2, module3, exports3) {
          const { WebGLKernel } = require2("../web-gl/kernel");
          const { WebGL2FunctionNode } = require2("./function-node");
          const { FunctionBuilder } = require2("../function-builder");
          const { utils } = require2("../../utils");
          const { fragmentShader } = require2("./fragment-shader");
          const { vertexShader } = require2("./vertex-shader");
          const { lookupKernelValueType } = require2("./kernel-value-maps");
          let isSupported = null;
          let testCanvas = null;
          let testContext = null;
          let testExtensions = null;
          let features = null;
          class WebGL2Kernel extends WebGLKernel {
            static get isSupported() {
              if (isSupported !== null) {
                return isSupported;
              }
              this.setupFeatureChecks();
              isSupported = this.isContextMatch(testContext);
              return isSupported;
            }
            static setupFeatureChecks() {
              if (typeof document !== "undefined") {
                testCanvas = document.createElement("canvas");
              } else if (typeof OffscreenCanvas !== "undefined") {
                testCanvas = new OffscreenCanvas(0, 0);
              }
              if (!testCanvas) return;
              testContext = testCanvas.getContext("webgl2");
              if (!testContext || !testContext.getExtension) return;
              testExtensions = {
                EXT_color_buffer_float: testContext.getExtension("EXT_color_buffer_float"),
                OES_texture_float_linear: testContext.getExtension("OES_texture_float_linear")
              };
              features = this.getFeatures();
            }
            static isContextMatch(context) {
              if (typeof WebGL2RenderingContext !== "undefined") {
                return context instanceof WebGL2RenderingContext;
              }
              return false;
            }
            static getFeatures() {
              const gl = this.testContext;
              return Object.freeze({
                isFloatRead: this.getIsFloatRead(),
                isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
                isSpeedTacticSupported: this.getIsSpeedTacticSupported(),
                kernelMap: true,
                isTextureFloat: true,
                isDrawBuffers: true,
                channelCount: this.getChannelCount(),
                maxTextureSize: this.getMaxTextureSize(),
                lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
                lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
                mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
                mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
                highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
                highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
              });
            }
            static getIsTextureFloat() {
              return true;
            }
            static getChannelCount() {
              return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);
            }
            static getMaxTextureSize() {
              return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
            }
            static lookupKernelValueType(type, dynamic, precision, value2) {
              return lookupKernelValueType(type, dynamic, precision, value2);
            }
            static get testCanvas() {
              return testCanvas;
            }
            static get testContext() {
              return testContext;
            }
            static get features() {
              return features;
            }
            static get fragmentShader() {
              return fragmentShader;
            }
            static get vertexShader() {
              return vertexShader;
            }
            initContext() {
              const settings = {
                alpha: false,
                depth: false,
                antialias: false
              };
              return this.canvas.getContext("webgl2", settings);
            }
            initExtensions() {
              this.extensions = {
                EXT_color_buffer_float: this.context.getExtension("EXT_color_buffer_float"),
                OES_texture_float_linear: this.context.getExtension("OES_texture_float_linear")
              };
            }
            validateSettings(args) {
              if (!this.validate) {
                this.texSize = utils.getKernelTextureSize({
                  optimizeFloatMemory: this.optimizeFloatMemory,
                  precision: this.precision
                }, this.output);
                return;
              }
              const { features: features2 } = this.constructor;
              if (this.precision === "single" && !features2.isFloatRead) {
                throw new Error("Float texture outputs are not supported");
              } else if (!this.graphical && this.precision === null) {
                this.precision = features2.isFloatRead ? "single" : "unsigned";
              }
              if (this.fixIntegerDivisionAccuracy === null) {
                this.fixIntegerDivisionAccuracy = !features2.isIntegerDivisionAccurate;
              } else if (this.fixIntegerDivisionAccuracy && features2.isIntegerDivisionAccurate) {
                this.fixIntegerDivisionAccuracy = false;
              }
              this.checkOutput();
              if (!this.output || this.output.length === 0) {
                if (args.length !== 1) {
                  throw new Error("Auto output only supported for kernels with only one input");
                }
                const argType = utils.getVariableType(args[0], this.strictIntegers);
                switch (argType) {
                  case "Array":
                    this.output = utils.getDimensions(argType);
                    break;
                  case "NumberTexture":
                  case "MemoryOptimizedNumberTexture":
                  case "ArrayTexture(1)":
                  case "ArrayTexture(2)":
                  case "ArrayTexture(3)":
                  case "ArrayTexture(4)":
                    this.output = args[0].output;
                    break;
                  default:
                    throw new Error("Auto output not supported for input type: " + argType);
                }
              }
              if (this.graphical) {
                if (this.output.length !== 2) {
                  throw new Error("Output must have 2 dimensions on graphical mode");
                }
                if (this.precision === "single") {
                  console.warn("Cannot use graphical mode and single precision at the same time");
                  this.precision = "unsigned";
                }
                this.texSize = utils.clone(this.output);
                return;
              } else if (!this.graphical && this.precision === null && features2.isTextureFloat) {
                this.precision = "single";
              }
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              this.checkTextureSize();
            }
            translateSource() {
              const functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {
                fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
              });
              this.translatedSource = functionBuilder.getPrototypeString("kernel");
              this.setupReturnTypes(functionBuilder);
            }
            drawBuffers() {
              this.context.drawBuffers(this.drawBuffersMap);
            }
            getTextureFormat() {
              const { context: gl } = this;
              switch (this.getInternalFormat()) {
                case gl.R32F:
                  return gl.RED;
                case gl.RG32F:
                  return gl.RG;
                case gl.RGBA32F:
                  return gl.RGBA;
                case gl.RGBA:
                  return gl.RGBA;
                default:
                  throw new Error("Unknown internal format");
              }
            }
            getInternalFormat() {
              const { context: gl } = this;
              if (this.precision === "single") {
                if (this.pipeline) {
                  switch (this.returnType) {
                    case "Number":
                    case "Float":
                    case "Integer":
                      if (this.optimizeFloatMemory) {
                        return gl.RGBA32F;
                      } else {
                        return gl.R32F;
                      }
                    case "Array(2)":
                      return gl.RG32F;
                    case "Array(3)":
                    case "Array(4)":
                      return gl.RGBA32F;
                    default:
                      throw new Error("Unhandled return type");
                  }
                }
                return gl.RGBA32F;
              }
              return gl.RGBA;
            }
            _setupOutputTexture() {
              const gl = this.context;
              if (this.texture) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
                return;
              }
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              const texture = gl.createTexture();
              const texSize = this.texSize;
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              const format = this.getInternalFormat();
              if (this.precision === "single") {
                gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
              }
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
              this.texture = new this.TextureConstructor({
                texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              });
            }
            _setupSubOutputTextures() {
              const gl = this.context;
              if (this.mappedTextures) {
                for (let i = 0; i < this.subKernels.length; i++) {
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);
                }
                return;
              }
              const texSize = this.texSize;
              this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
              this.mappedTextures = [];
              for (let i = 0; i < this.subKernels.length; i++) {
                const texture = this.createTexture();
                this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
                gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                const format = this.getInternalFormat();
                if (this.precision === "single") {
                  gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
                } else {
                  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
                }
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);
                this.mappedTextures.push(new this.TextureConstructor({
                  texture,
                  size: texSize,
                  dimensions: this.threadDim,
                  output: this.output,
                  context: this.context,
                  internalFormat: this.getInternalFormat(),
                  textureFormat: this.getTextureFormat(),
                  kernel: this
                }));
              }
            }
            _getHeaderString() {
              return "";
            }
            _getTextureCoordinate() {
              const subKernels = this.subKernels;
              const variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);
              if (subKernels === null || subKernels.length < 1) {
                return `in ${variablePrecision} vec2 vTexCoord;
`;
              } else {
                return `out ${variablePrecision} vec2 vTexCoord;
`;
              }
            }
            _getMainArgumentsString(args) {
              const result = [];
              const argumentNames = this.argumentNames;
              for (let i = 0; i < argumentNames.length; i++) {
                result.push(this.kernelArguments[i].getSource(args[i]));
              }
              return result.join("");
            }
            getKernelString() {
              const result = [this.getKernelResultDeclaration()];
              const subKernels = this.subKernels;
              if (subKernels !== null) {
                result.push(
                  "layout(location = 0) out vec4 data0"
                );
                switch (this.returnType) {
                  case "Number":
                  case "Float":
                  case "Integer":
                    for (let i = 0; i < subKernels.length; i++) {
                      const subKernel = subKernels[i];
                      result.push(
                        subKernel.returnType === "Integer" ? `int subKernelResult_${subKernel.name} = 0` : `float subKernelResult_${subKernel.name} = 0.0`,
                        `layout(location = ${i + 1}) out vec4 data${i + 1}`
                      );
                    }
                    break;
                  case "Array(2)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec2 subKernelResult_${subKernels[i].name}`,
                        `layout(location = ${i + 1}) out vec4 data${i + 1}`
                      );
                    }
                    break;
                  case "Array(3)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec3 subKernelResult_${subKernels[i].name}`,
                        `layout(location = ${i + 1}) out vec4 data${i + 1}`
                      );
                    }
                    break;
                  case "Array(4)":
                    for (let i = 0; i < subKernels.length; i++) {
                      result.push(
                        `vec4 subKernelResult_${subKernels[i].name}`,
                        `layout(location = ${i + 1}) out vec4 data${i + 1}`
                      );
                    }
                    break;
                }
              } else {
                result.push(
                  "out vec4 data0"
                );
              }
              return utils.linesToString(result) + this.translatedSource;
            }
            getMainResultGraphical() {
              return utils.linesToString([
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  data0 = actualColor"
              ]);
            }
            getMainResultPackedPixels() {
              switch (this.returnType) {
                case "LiteralInteger":
                case "Number":
                case "Integer":
                case "Float":
                  return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();
                default:
                  throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`);
              }
            }
            getMainResultKernelPackedPixels() {
              return utils.linesToString([
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                `  data0 = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(kernelResult)`
              ]);
            }
            getMainResultSubKernelPackedPixels() {
              const result = [];
              if (!this.subKernels) return "";
              for (let i = 0; i < this.subKernels.length; i++) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  data${i + 1} = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(float(subKernelResult_${this.subKernels[i].name}))`
                  );
                } else {
                  result.push(
                    `  data${i + 1} = ${this.useLegacyEncoder ? "legacyEncode32" : "encode32"}(subKernelResult_${this.subKernels[i].name})`
                  );
                }
              }
              return utils.linesToString(result);
            }
            getMainResultKernelMemoryOptimizedFloats(result, channel) {
              result.push(
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                `  data0.${channel} = kernelResult`
              );
            }
            getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; i++) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  data${i + 1}.${channel} = float(subKernelResult_${subKernel.name})`
                  );
                } else {
                  result.push(
                    `  data${i + 1}.${channel} = subKernelResult_${subKernel.name}`
                  );
                }
              }
            }
            getMainResultKernelNumberTexture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  data0[0] = kernelResult"
              ];
            }
            getMainResultSubKernelNumberTexture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                const subKernel = this.subKernels[i];
                if (subKernel.returnType === "Integer") {
                  result.push(
                    `  data${i + 1}[0] = float(subKernelResult_${subKernel.name})`
                  );
                } else {
                  result.push(
                    `  data${i + 1}[0] = subKernelResult_${subKernel.name}`
                  );
                }
              }
              return result;
            }
            getMainResultKernelArray2Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  data0[0] = kernelResult[0]",
                "  data0[1] = kernelResult[1]"
              ];
            }
            getMainResultSubKernelArray2Texture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                const subKernel = this.subKernels[i];
                result.push(
                  `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,
                  `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`
                );
              }
              return result;
            }
            getMainResultKernelArray3Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  data0[0] = kernelResult[0]",
                "  data0[1] = kernelResult[1]",
                "  data0[2] = kernelResult[2]"
              ];
            }
            getMainResultSubKernelArray3Texture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                const subKernel = this.subKernels[i];
                result.push(
                  `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,
                  `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`,
                  `  data${i + 1}[2] = subKernelResult_${subKernel.name}[2]`
                );
              }
              return result;
            }
            getMainResultKernelArray4Texture() {
              return [
                "  threadId = indexTo3D(index, uOutputDim)",
                "  kernel()",
                "  data0 = kernelResult"
              ];
            }
            getMainResultSubKernelArray4Texture() {
              const result = [];
              if (!this.subKernels) return result;
              for (let i = 0; i < this.subKernels.length; ++i) {
                result.push(
                  `  data${i + 1} = subKernelResult_${this.subKernels[i].name}`
                );
              }
              return result;
            }
            destroyExtensions() {
              this.extensions.EXT_color_buffer_float = null;
              this.extensions.OES_texture_float_linear = null;
            }
            toJSON() {
              const json = super.toJSON();
              json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();
              json.settings.threadDim = this.threadDim;
              return json;
            }
          }
          module3.exports = {
            WebGL2Kernel
          };
        }, { "../../utils": 114, "../function-builder": 9, "../web-gl/kernel": 70, "./fragment-shader": 72, "./function-node": 73, "./kernel-value-maps": 74, "./vertex-shader": 106 }], 106: [function(require2, module3, exports3) {
          const vertexShader = `#version 300 es
__FLOAT_TACTIC_DECLARATION__;
__INT_TACTIC_DECLARATION__;
__SAMPLER_2D_TACTIC_DECLARATION__;

in vec2 aPos;
in vec2 aTexCoord;

out vec2 vTexCoord;
uniform vec2 ratio;

void main(void) {
  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);
  vTexCoord = aTexCoord;
}`;
          module3.exports = {
            vertexShader
          };
        }, {}], 107: [function(require2, module3, exports3) {
          const lib = require2("./index");
          const GPU = lib.GPU;
          for (const p in lib) {
            if (!lib.hasOwnProperty(p)) continue;
            if (p === "GPU") continue;
            GPU[p] = lib[p];
          }
          if (typeof window !== "undefined") {
            bindTo(window);
          }
          if (typeof self !== "undefined") {
            bindTo(self);
          }
          function bindTo(target) {
            if (target.GPU) return;
            Object.defineProperty(target, "GPU", {
              get() {
                return GPU;
              }
            });
          }
          module3.exports = lib;
        }, { "./index": 109 }], 108: [function(require2, module3, exports3) {
          const { gpuMock } = require2("gpu-mock.js");
          const { utils } = require2("./utils");
          const { Kernel } = require2("./backend/kernel");
          const { CPUKernel } = require2("./backend/cpu/kernel");
          const { HeadlessGLKernel } = require2("./backend/headless-gl/kernel");
          const { WebGL2Kernel } = require2("./backend/web-gl2/kernel");
          const { WebGLKernel } = require2("./backend/web-gl/kernel");
          const { kernelRunShortcut } = require2("./kernel-run-shortcut");
          const kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];
          const kernelTypes = ["gpu", "cpu"];
          const internalKernels = {
            "headlessgl": HeadlessGLKernel,
            "webgl2": WebGL2Kernel,
            "webgl": WebGLKernel
          };
          let validate = true;
          class GPU {
            static disableValidation() {
              validate = false;
            }
            static enableValidation() {
              validate = true;
            }
            static get isGPUSupported() {
              return kernelOrder.some((Kernel2) => Kernel2.isSupported);
            }
            static get isKernelMapSupported() {
              return kernelOrder.some((Kernel2) => Kernel2.isSupported && Kernel2.features.kernelMap);
            }
            static get isOffscreenCanvasSupported() {
              return typeof Worker !== "undefined" && typeof OffscreenCanvas !== "undefined" || typeof importScripts !== "undefined";
            }
            static get isWebGLSupported() {
              return WebGLKernel.isSupported;
            }
            static get isWebGL2Supported() {
              return WebGL2Kernel.isSupported;
            }
            static get isHeadlessGLSupported() {
              return HeadlessGLKernel.isSupported;
            }
            static get isCanvasSupported() {
              return typeof HTMLCanvasElement !== "undefined";
            }
            static get isGPUHTMLImageArraySupported() {
              return WebGL2Kernel.isSupported;
            }
            static get isSinglePrecisionSupported() {
              return kernelOrder.some((Kernel2) => Kernel2.isSupported && Kernel2.features.isFloatRead && Kernel2.features.isTextureFloat);
            }
            constructor(settings) {
              settings = settings || {};
              this.canvas = settings.canvas || null;
              this.context = settings.context || null;
              this.mode = settings.mode;
              this.Kernel = null;
              this.kernels = [];
              this.functions = [];
              this.nativeFunctions = [];
              this.injectedNative = null;
              if (this.mode === "dev") return;
              this.chooseKernel();
              if (settings.functions) {
                for (let i = 0; i < settings.functions.length; i++) {
                  this.addFunction(settings.functions[i]);
                }
              }
              if (settings.nativeFunctions) {
                for (const p in settings.nativeFunctions) {
                  if (!settings.nativeFunctions.hasOwnProperty(p)) continue;
                  const s = settings.nativeFunctions[p];
                  const { name: name2, source } = s;
                  this.addNativeFunction(name2, source, s);
                }
              }
            }
            chooseKernel() {
              if (this.Kernel) return;
              let Kernel2 = null;
              if (this.context) {
                for (let i = 0; i < kernelOrder.length; i++) {
                  const ExternalKernel = kernelOrder[i];
                  if (ExternalKernel.isContextMatch(this.context)) {
                    if (!ExternalKernel.isSupported) {
                      throw new Error(`Kernel type ${ExternalKernel.name} not supported`);
                    }
                    Kernel2 = ExternalKernel;
                    break;
                  }
                }
                if (Kernel2 === null) {
                  throw new Error("unknown Context");
                }
              } else if (this.mode) {
                if (this.mode in internalKernels) {
                  if (!validate || internalKernels[this.mode].isSupported) {
                    Kernel2 = internalKernels[this.mode];
                  }
                } else if (this.mode === "gpu") {
                  for (let i = 0; i < kernelOrder.length; i++) {
                    if (kernelOrder[i].isSupported) {
                      Kernel2 = kernelOrder[i];
                      break;
                    }
                  }
                } else if (this.mode === "cpu") {
                  Kernel2 = CPUKernel;
                }
                if (!Kernel2) {
                  throw new Error(`A requested mode of "${this.mode}" and is not supported`);
                }
              } else {
                for (let i = 0; i < kernelOrder.length; i++) {
                  if (kernelOrder[i].isSupported) {
                    Kernel2 = kernelOrder[i];
                    break;
                  }
                }
                if (!Kernel2) {
                  Kernel2 = CPUKernel;
                }
              }
              if (!this.mode) {
                this.mode = Kernel2.mode;
              }
              this.Kernel = Kernel2;
            }
            createKernel(source, settings) {
              if (typeof source === "undefined") {
                throw new Error("Missing source parameter");
              }
              if (typeof source !== "object" && !utils.isFunction(source) && typeof source !== "string") {
                throw new Error("source parameter not a function");
              }
              const kernels = this.kernels;
              if (this.mode === "dev") {
                const devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));
                kernels.push(devKernel);
                return devKernel;
              }
              source = typeof source === "function" ? source.toString() : source;
              const switchableKernels = {};
              const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};
              if (settings && typeof settings.argumentTypes === "object") {
                settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map((argumentName) => settings.argumentTypes[argumentName]);
              }
              function onRequestFallback(args) {
                console.warn("Falling back to CPU");
                const fallbackKernel = new CPUKernel(source, {
                  argumentTypes: kernelRun.argumentTypes,
                  constantTypes: kernelRun.constantTypes,
                  graphical: kernelRun.graphical,
                  loopMaxIterations: kernelRun.loopMaxIterations,
                  constants: kernelRun.constants,
                  dynamicOutput: kernelRun.dynamicOutput,
                  dynamicArgument: kernelRun.dynamicArguments,
                  output: kernelRun.output,
                  precision: kernelRun.precision,
                  pipeline: kernelRun.pipeline,
                  immutable: kernelRun.immutable,
                  optimizeFloatMemory: kernelRun.optimizeFloatMemory,
                  fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,
                  functions: kernelRun.functions,
                  nativeFunctions: kernelRun.nativeFunctions,
                  injectedNative: kernelRun.injectedNative,
                  subKernels: kernelRun.subKernels,
                  strictIntegers: kernelRun.strictIntegers,
                  debug: kernelRun.debug
                });
                fallbackKernel.build.apply(fallbackKernel, args);
                const result = fallbackKernel.run.apply(fallbackKernel, args);
                kernelRun.replaceKernel(fallbackKernel);
                return result;
              }
              function onRequestSwitchKernel(reasons, args, _kernel) {
                if (_kernel.debug) {
                  console.warn("Switching kernels");
                }
                let newOutput = null;
                if (_kernel.signature && !switchableKernels[_kernel.signature]) {
                  switchableKernels[_kernel.signature] = _kernel;
                }
                if (_kernel.dynamicOutput) {
                  for (let i = reasons.length - 1; i >= 0; i--) {
                    const reason = reasons[i];
                    if (reason.type === "outputPrecisionMismatch") {
                      newOutput = reason.needed;
                    }
                  }
                }
                const Constructor = _kernel.constructor;
                const argumentTypes = Constructor.getArgumentTypes(_kernel, args);
                const signature = Constructor.getSignature(_kernel, argumentTypes);
                const existingKernel = switchableKernels[signature];
                if (existingKernel) {
                  existingKernel.onActivate(_kernel);
                  return existingKernel;
                }
                const newKernel = switchableKernels[signature] = new Constructor(source, {
                  argumentTypes,
                  constantTypes: _kernel.constantTypes,
                  graphical: _kernel.graphical,
                  loopMaxIterations: _kernel.loopMaxIterations,
                  constants: _kernel.constants,
                  dynamicOutput: _kernel.dynamicOutput,
                  dynamicArgument: _kernel.dynamicArguments,
                  context: _kernel.context,
                  canvas: _kernel.canvas,
                  output: newOutput || _kernel.output,
                  precision: _kernel.precision,
                  pipeline: _kernel.pipeline,
                  immutable: _kernel.immutable,
                  optimizeFloatMemory: _kernel.optimizeFloatMemory,
                  fixIntegerDivisionAccuracy: _kernel.fixIntegerDivisionAccuracy,
                  functions: _kernel.functions,
                  nativeFunctions: _kernel.nativeFunctions,
                  injectedNative: _kernel.injectedNative,
                  subKernels: _kernel.subKernels,
                  strictIntegers: _kernel.strictIntegers,
                  debug: _kernel.debug,
                  gpu: _kernel.gpu,
                  validate,
                  returnType: _kernel.returnType,
                  tactic: _kernel.tactic,
                  onRequestFallback,
                  onRequestSwitchKernel,
                  texture: _kernel.texture,
                  mappedTextures: _kernel.mappedTextures,
                  drawBuffersMap: _kernel.drawBuffersMap
                });
                newKernel.build.apply(newKernel, args);
                kernelRun.replaceKernel(newKernel);
                kernels.push(newKernel);
                return newKernel;
              }
              const mergedSettings = Object.assign({
                context: this.context,
                canvas: this.canvas,
                functions: this.functions,
                nativeFunctions: this.nativeFunctions,
                injectedNative: this.injectedNative,
                gpu: this,
                validate,
                onRequestFallback,
                onRequestSwitchKernel
              }, settingsCopy);
              const kernel = new this.Kernel(source, mergedSettings);
              const kernelRun = kernelRunShortcut(kernel);
              if (!this.canvas) {
                this.canvas = kernel.canvas;
              }
              if (!this.context) {
                this.context = kernel.context;
              }
              kernels.push(kernel);
              return kernelRun;
            }
            createKernelMap() {
              let fn;
              let settings;
              const argument2Type = typeof arguments[arguments.length - 2];
              if (argument2Type === "function" || argument2Type === "string") {
                fn = arguments[arguments.length - 2];
                settings = arguments[arguments.length - 1];
              } else {
                fn = arguments[arguments.length - 1];
              }
              if (this.mode !== "dev") {
                if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {
                  if (this.mode && kernelTypes.indexOf(this.mode) < 0) {
                    throw new Error(`kernelMap not supported on ${this.Kernel.name}`);
                  }
                }
              }
              const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);
              if (settings && typeof settings.argumentTypes === "object") {
                settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map((argumentName) => settings.argumentTypes[argumentName]);
              }
              if (Array.isArray(arguments[0])) {
                settingsCopy.subKernels = [];
                const functions = arguments[0];
                for (let i = 0; i < functions.length; i++) {
                  const source = functions[i].toString();
                  const name2 = utils.getFunctionNameFromString(source);
                  settingsCopy.subKernels.push({
                    name: name2,
                    source,
                    property: i
                  });
                }
              } else {
                settingsCopy.subKernels = [];
                const functions = arguments[0];
                for (let p in functions) {
                  if (!functions.hasOwnProperty(p)) continue;
                  const source = functions[p].toString();
                  const name2 = utils.getFunctionNameFromString(source);
                  settingsCopy.subKernels.push({
                    name: name2 || p,
                    source,
                    property: p
                  });
                }
              }
              return this.createKernel(fn, settingsCopy);
            }
            combineKernels() {
              const firstKernel = arguments[0];
              const combinedKernel = arguments[arguments.length - 1];
              if (firstKernel.kernel.constructor.mode === "cpu") return combinedKernel;
              const canvas = arguments[0].canvas;
              const context = arguments[0].context;
              const max = arguments.length - 1;
              for (let i = 0; i < max; i++) {
                arguments[i].setCanvas(canvas).setContext(context).setPipeline(true);
              }
              return function() {
                const texture = combinedKernel.apply(this, arguments);
                if (texture.toArray) {
                  return texture.toArray();
                }
                return texture;
              };
            }
            setFunctions(functions) {
              this.functions = functions;
              return this;
            }
            setNativeFunctions(nativeFunctions) {
              this.nativeFunctions = nativeFunctions;
              return this;
            }
            addFunction(source, settings) {
              this.functions.push({ source, settings });
              return this;
            }
            addNativeFunction(name2, source, settings) {
              if (this.kernels.length > 0) {
                throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');
              }
              this.nativeFunctions.push(Object.assign({ name: name2, source }, settings));
              return this;
            }
            injectNative(source) {
              this.injectedNative = source;
              return this;
            }
            destroy() {
              return new Promise((resolve, reject) => {
                if (!this.kernels) {
                  resolve();
                }
                setTimeout(() => {
                  try {
                    for (let i = 0; i < this.kernels.length; i++) {
                      this.kernels[i].destroy(true);
                    }
                    let firstKernel = this.kernels[0];
                    if (firstKernel) {
                      if (firstKernel.kernel) {
                        firstKernel = firstKernel.kernel;
                      }
                      if (firstKernel.constructor.destroyContext) {
                        firstKernel.constructor.destroyContext(this.context);
                      }
                    }
                  } catch (e) {
                    reject(e);
                  }
                  resolve();
                }, 0);
              });
            }
          }
          function upgradeDeprecatedCreateKernelSettings(settings) {
            if (!settings) {
              return {};
            }
            const upgradedSettings = Object.assign({}, settings);
            if (settings.hasOwnProperty("floatOutput")) {
              utils.warnDeprecated("setting", "floatOutput", "precision");
              upgradedSettings.precision = settings.floatOutput ? "single" : "unsigned";
            }
            if (settings.hasOwnProperty("outputToTexture")) {
              utils.warnDeprecated("setting", "outputToTexture", "pipeline");
              upgradedSettings.pipeline = Boolean(settings.outputToTexture);
            }
            if (settings.hasOwnProperty("outputImmutable")) {
              utils.warnDeprecated("setting", "outputImmutable", "immutable");
              upgradedSettings.immutable = Boolean(settings.outputImmutable);
            }
            if (settings.hasOwnProperty("floatTextures")) {
              utils.warnDeprecated("setting", "floatTextures", "optimizeFloatMemory");
              upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);
            }
            return upgradedSettings;
          }
          module3.exports = {
            GPU,
            kernelOrder,
            kernelTypes
          };
        }, { "./backend/cpu/kernel": 8, "./backend/headless-gl/kernel": 34, "./backend/kernel": 36, "./backend/web-gl/kernel": 70, "./backend/web-gl2/kernel": 105, "./kernel-run-shortcut": 111, "./utils": 114, "gpu-mock.js": 4 }], 109: [function(require2, module3, exports3) {
          const { GPU } = require2("./gpu");
          const { alias } = require2("./alias");
          const { utils } = require2("./utils");
          const { Input: Input2, input } = require2("./input");
          const { Texture: Texture2 } = require2("./texture");
          const { FunctionBuilder } = require2("./backend/function-builder");
          const { FunctionNode } = require2("./backend/function-node");
          const { CPUFunctionNode } = require2("./backend/cpu/function-node");
          const { CPUKernel } = require2("./backend/cpu/kernel");
          const { HeadlessGLKernel } = require2("./backend/headless-gl/kernel");
          const { WebGLFunctionNode } = require2("./backend/web-gl/function-node");
          const { WebGLKernel } = require2("./backend/web-gl/kernel");
          const { kernelValueMaps: webGLKernelValueMaps } = require2("./backend/web-gl/kernel-value-maps");
          const { WebGL2FunctionNode } = require2("./backend/web-gl2/function-node");
          const { WebGL2Kernel } = require2("./backend/web-gl2/kernel");
          const { kernelValueMaps: webGL2KernelValueMaps } = require2("./backend/web-gl2/kernel-value-maps");
          const { GLKernel } = require2("./backend/gl/kernel");
          const { Kernel } = require2("./backend/kernel");
          const { FunctionTracer } = require2("./backend/function-tracer");
          const mathRandom = require2("./plugins/math-random-uniformly-distributed");
          module3.exports = {
            alias,
            CPUFunctionNode,
            CPUKernel,
            GPU,
            FunctionBuilder,
            FunctionNode,
            HeadlessGLKernel,
            Input: Input2,
            input,
            Texture: Texture2,
            utils,
            WebGL2FunctionNode,
            WebGL2Kernel,
            webGL2KernelValueMaps,
            WebGLFunctionNode,
            WebGLKernel,
            webGLKernelValueMaps,
            GLKernel,
            Kernel,
            FunctionTracer,
            plugins: {
              mathRandom
            }
          };
        }, { "./alias": 5, "./backend/cpu/function-node": 6, "./backend/cpu/kernel": 8, "./backend/function-builder": 9, "./backend/function-node": 10, "./backend/function-tracer": 11, "./backend/gl/kernel": 13, "./backend/headless-gl/kernel": 34, "./backend/kernel": 36, "./backend/web-gl/function-node": 38, "./backend/web-gl/kernel": 70, "./backend/web-gl/kernel-value-maps": 39, "./backend/web-gl2/function-node": 73, "./backend/web-gl2/kernel": 105, "./backend/web-gl2/kernel-value-maps": 74, "./gpu": 108, "./input": 110, "./plugins/math-random-uniformly-distributed": 112, "./texture": 113, "./utils": 114 }], 110: [function(require2, module3, exports3) {
          class Input2 {
            constructor(value2, size) {
              this.value = value2;
              if (Array.isArray(size)) {
                this.size = size;
              } else {
                this.size = new Int32Array(3);
                if (size.z) {
                  this.size = new Int32Array([size.x, size.y, size.z]);
                } else if (size.y) {
                  this.size = new Int32Array([size.x, size.y]);
                } else {
                  this.size = new Int32Array([size.x]);
                }
              }
              const [w, h, d] = this.size;
              if (d) {
                if (this.value.length !== w * h * d) {
                  throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${h * w * d}`);
                }
              } else if (h) {
                if (this.value.length !== w * h) {
                  throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} = ${h * w}`);
                }
              } else {
                if (this.value.length !== w) {
                  throw new Error(`Input size ${this.value.length} does not match ${w}`);
                }
              }
            }
            toArray() {
              const { utils } = require2("./utils");
              const [w, h, d] = this.size;
              if (d) {
                return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);
              } else if (h) {
                return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);
              } else {
                return this.value;
              }
            }
          }
          function input(value2, size) {
            return new Input2(value2, size);
          }
          module3.exports = {
            Input: Input2,
            input
          };
        }, { "./utils": 114 }], 111: [function(require2, module3, exports3) {
          const { utils } = require2("./utils");
          function kernelRunShortcut(kernel) {
            let run = function() {
              kernel.build.apply(kernel, arguments);
              run = function() {
                let result = kernel.run.apply(kernel, arguments);
                if (kernel.switchingKernels) {
                  const reasons = kernel.resetSwitchingKernels();
                  const newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);
                  shortcut.kernel = kernel = newKernel;
                  result = newKernel.run.apply(newKernel, arguments);
                }
                if (kernel.renderKernels) {
                  return kernel.renderKernels();
                } else if (kernel.renderOutput) {
                  return kernel.renderOutput();
                } else {
                  return result;
                }
              };
              return run.apply(kernel, arguments);
            };
            const shortcut = function() {
              return run.apply(kernel, arguments);
            };
            shortcut.exec = function() {
              return new Promise((accept, reject) => {
                try {
                  accept(run.apply(this, arguments));
                } catch (e) {
                  reject(e);
                }
              });
            };
            shortcut.replaceKernel = function(replacementKernel) {
              kernel = replacementKernel;
              bindKernelToShortcut(kernel, shortcut);
            };
            bindKernelToShortcut(kernel, shortcut);
            return shortcut;
          }
          function bindKernelToShortcut(kernel, shortcut) {
            if (shortcut.kernel) {
              shortcut.kernel = kernel;
              return;
            }
            const properties = utils.allPropertiesOf(kernel);
            for (let i = 0; i < properties.length; i++) {
              const property = properties[i];
              if (property[0] === "_" && property[1] === "_") continue;
              if (typeof kernel[property] === "function") {
                if (property.substring(0, 3) === "add" || property.substring(0, 3) === "set") {
                  shortcut[property] = function() {
                    shortcut.kernel[property].apply(shortcut.kernel, arguments);
                    return shortcut;
                  };
                } else {
                  shortcut[property] = function() {
                    return shortcut.kernel[property].apply(shortcut.kernel, arguments);
                  };
                }
              } else {
                shortcut.__defineGetter__(property, () => shortcut.kernel[property]);
                shortcut.__defineSetter__(property, (value2) => {
                  shortcut.kernel[property] = value2;
                });
              }
            }
            shortcut.kernel = kernel;
          }
          module3.exports = {
            kernelRunShortcut
          };
        }, { "./utils": 114 }], 112: [function(require2, module3, exports3) {
          const source = `// https://www.shadertoy.com/view/4t2SDh
//note: uniformly distributed, normalized rand, [0,1]
highp float randomSeedShift = 1.0;
highp float slide = 1.0;
uniform highp float randomSeed1;
uniform highp float randomSeed2;

highp float nrand(highp vec2 n) {
  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);
  randomSeedShift = result;
  if (randomSeedShift > 0.5) {
    slide += 0.00009; 
  } else {
    slide += 0.0009;
  }
  return result;
}`;
          const name2 = "math-random-uniformly-distributed";
          const functionMatch = `Math.random()`;
          const functionReplace = `nrand(vTexCoord)`;
          const functionReturnType = "Number";
          const onBeforeRun = (kernel) => {
            kernel.setUniform1f("randomSeed1", Math.random());
            kernel.setUniform1f("randomSeed2", Math.random());
          };
          const plugin = {
            name: name2,
            onBeforeRun,
            functionMatch,
            functionReplace,
            functionReturnType,
            source
          };
          module3.exports = plugin;
        }, {}], 113: [function(require2, module3, exports3) {
          class Texture2 {
            constructor(settings) {
              const {
                texture,
                size,
                dimensions,
                output,
                context,
                type = "NumberTexture",
                kernel,
                internalFormat,
                textureFormat
              } = settings;
              if (!output) throw new Error('settings property "output" required.');
              if (!context) throw new Error('settings property "context" required.');
              if (!texture) throw new Error('settings property "texture" required.');
              if (!kernel) throw new Error('settings property "kernel" required.');
              this.texture = texture;
              if (texture._refs) {
                texture._refs++;
              } else {
                texture._refs = 1;
              }
              this.size = size;
              this.dimensions = dimensions;
              this.output = output;
              this.context = context;
              this.kernel = kernel;
              this.type = type;
              this._deleted = false;
              this.internalFormat = internalFormat;
              this.textureFormat = textureFormat;
            }
            toArray() {
              throw new Error(`Not implemented on ${this.constructor.name}`);
            }
            clone() {
              throw new Error(`Not implemented on ${this.constructor.name}`);
            }
            delete() {
              throw new Error(`Not implemented on ${this.constructor.name}`);
            }
            clear() {
              throw new Error(`Not implemented on ${this.constructor.name}`);
            }
          }
          module3.exports = {
            Texture: Texture2
          };
        }, {}], 114: [function(require2, module3, exports3) {
          const acorn = require2("acorn");
          const { Input: Input2 } = require2("./input");
          const { Texture: Texture2 } = require2("./texture");
          const FUNCTION_NAME = /function ([^(]*)/;
          const STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
          const ARGUMENT_NAMES = /([^\s,]+)/g;
          const utils = {
            systemEndianness() {
              return _systemEndianness;
            },
            getSystemEndianness() {
              const b = new ArrayBuffer(4);
              const a = new Uint32Array(b);
              const c = new Uint8Array(b);
              a[0] = 3735928559;
              if (c[0] === 239) return "LE";
              if (c[0] === 222) return "BE";
              throw new Error("unknown endianness");
            },
            isFunction(funcObj) {
              return typeof funcObj === "function";
            },
            isFunctionString(fn) {
              if (typeof fn === "string") {
                return fn.slice(0, "function".length).toLowerCase() === "function";
              }
              return false;
            },
            getFunctionNameFromString(funcStr) {
              const result = FUNCTION_NAME.exec(funcStr);
              if (!result || result.length === 0) return null;
              return result[1].trim();
            },
            getFunctionBodyFromString(funcStr) {
              return funcStr.substring(funcStr.indexOf("{") + 1, funcStr.lastIndexOf("}"));
            },
            getArgumentNamesFromString(fn) {
              const fnStr = fn.replace(STRIP_COMMENTS, "");
              let result = fnStr.slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")")).match(ARGUMENT_NAMES);
              if (result === null) {
                result = [];
              }
              return result;
            },
            clone(obj) {
              if (obj === null || typeof obj !== "object" || obj.hasOwnProperty("isActiveClone")) return obj;
              const temp = obj.constructor();
              for (let key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  obj.isActiveClone = null;
                  temp[key] = utils.clone(obj[key]);
                  delete obj.isActiveClone;
                }
              }
              return temp;
            },
            isArray(array) {
              return !isNaN(array.length);
            },
            getVariableType(value2, strictIntegers) {
              if (utils.isArray(value2)) {
                if (value2.length > 0 && value2[0].nodeName === "IMG") {
                  return "HTMLImageArray";
                }
                return "Array";
              }
              switch (value2.constructor) {
                case Boolean:
                  return "Boolean";
                case Number:
                  if (strictIntegers && Number.isInteger(value2)) {
                    return "Integer";
                  }
                  return "Float";
                case Texture2:
                  return value2.type;
                case Input2:
                  return "Input";
              }
              if ("nodeName" in value2) {
                switch (value2.nodeName) {
                  case "IMG":
                    return "HTMLImage";
                  case "CANVAS":
                    return "HTMLImage";
                  case "VIDEO":
                    return "HTMLVideo";
                }
              } else if (value2.hasOwnProperty("type")) {
                return value2.type;
              } else if (typeof OffscreenCanvas !== "undefined" && value2 instanceof OffscreenCanvas) {
                return "OffscreenCanvas";
              } else if (typeof ImageBitmap !== "undefined" && value2 instanceof ImageBitmap) {
                return "ImageBitmap";
              } else if (typeof ImageData !== "undefined" && value2 instanceof ImageData) {
                return "ImageData";
              }
              return "Unknown";
            },
            getKernelTextureSize(settings, dimensions) {
              let [w, h, d] = dimensions;
              let texelCount = (w || 1) * (h || 1) * (d || 1);
              if (settings.optimizeFloatMemory && settings.precision === "single") {
                w = texelCount = Math.ceil(texelCount / 4);
              }
              if (h > 1 && w * h === texelCount) {
                return new Int32Array([w, h]);
              }
              return utils.closestSquareDimensions(texelCount);
            },
            closestSquareDimensions(length) {
              const sqrt = Math.sqrt(length);
              let high = Math.ceil(sqrt);
              let low = Math.floor(sqrt);
              while (high * low < length) {
                high--;
                low = Math.ceil(length / high);
              }
              return new Int32Array([low, Math.ceil(length / low)]);
            },
            getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {
              const totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);
              const texelCount = totalArea / bitRatio;
              return utils.closestSquareDimensions(texelCount);
            },
            getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {
              const [w, h, d] = dimensions;
              const totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);
              const texelCount = totalArea / (4 / bitRatio);
              return utils.closestSquareDimensions(texelCount);
            },
            roundTo(n, d) {
              return Math.floor((n + d - 1) / d) * d;
            },
            getDimensions(x, pad) {
              let ret;
              if (utils.isArray(x)) {
                const dim = [];
                let temp = x;
                while (utils.isArray(temp)) {
                  dim.push(temp.length);
                  temp = temp[0];
                }
                ret = dim.reverse();
              } else if (x instanceof Texture2) {
                ret = x.output;
              } else if (x instanceof Input2) {
                ret = x.size;
              } else {
                throw new Error(`Unknown dimensions of ${x}`);
              }
              if (pad) {
                ret = Array.from(ret);
                while (ret.length < 3) {
                  ret.push(1);
                }
              }
              return new Int32Array(ret);
            },
            flatten2dArrayTo(array, target) {
              let offset = 0;
              for (let y = 0; y < array.length; y++) {
                target.set(array[y], offset);
                offset += array[y].length;
              }
            },
            flatten3dArrayTo(array, target) {
              let offset = 0;
              for (let z = 0; z < array.length; z++) {
                for (let y = 0; y < array[z].length; y++) {
                  target.set(array[z][y], offset);
                  offset += array[z][y].length;
                }
              }
            },
            flatten4dArrayTo(array, target) {
              let offset = 0;
              for (let l = 0; l < array.length; l++) {
                for (let z = 0; z < array[l].length; z++) {
                  for (let y = 0; y < array[l][z].length; y++) {
                    target.set(array[l][z][y], offset);
                    offset += array[l][z][y].length;
                  }
                }
              }
            },
            flattenTo(array, target) {
              if (utils.isArray(array[0])) {
                if (utils.isArray(array[0][0])) {
                  if (utils.isArray(array[0][0][0])) {
                    utils.flatten4dArrayTo(array, target);
                  } else {
                    utils.flatten3dArrayTo(array, target);
                  }
                } else {
                  utils.flatten2dArrayTo(array, target);
                }
              } else {
                target.set(array);
              }
            },
            splitArray(array, part) {
              const result = [];
              for (let i = 0; i < array.length; i += part) {
                result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));
              }
              return result;
            },
            getAstString(source, ast) {
              const lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
              const start = ast.loc.start;
              const end = ast.loc.end;
              const result = [];
              if (start.line === end.line) {
                result.push(lines[start.line - 1].substring(start.column, end.column));
              } else {
                result.push(lines[start.line - 1].slice(start.column));
                for (let i = start.line; i < end.line; i++) {
                  result.push(lines[i]);
                }
                result.push(lines[end.line - 1].slice(0, end.column));
              }
              return result.join("\n");
            },
            allPropertiesOf(obj) {
              const props = [];
              do {
                props.push.apply(props, Object.getOwnPropertyNames(obj));
              } while (obj = Object.getPrototypeOf(obj));
              return props;
            },
            linesToString(lines) {
              if (lines.length > 0) {
                return lines.join(";\n") + ";\n";
              } else {
                return "\n";
              }
            },
            warnDeprecated(type, oldName, newName) {
              if (newName) {
                console.warn(`You are using a deprecated ${type} "${oldName}". It has been replaced with "${newName}". Fixing, but please upgrade as it will soon be removed.`);
              } else {
                console.warn(`You are using a deprecated ${type} "${oldName}". It has been removed. Fixing, but please upgrade as it will soon be removed.`);
              }
            },
            flipPixels: (pixels, width, height) => {
              const halfHeight = height / 2 | 0;
              const bytesPerRow = width * 4;
              const temp = new Uint8ClampedArray(width * 4);
              const result = pixels.slice(0);
              for (let y = 0; y < halfHeight; ++y) {
                const topOffset = y * bytesPerRow;
                const bottomOffset = (height - y - 1) * bytesPerRow;
                temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
                result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
                result.set(temp, bottomOffset);
              }
              return result;
            },
            erectPackedFloat: (array, width) => {
              return array.subarray(0, width);
            },
            erect2DPackedFloat: (array, width, height) => {
              const yResults = new Array(height);
              for (let y = 0; y < height; y++) {
                const xStart = y * width;
                const xEnd = xStart + width;
                yResults[y] = array.subarray(xStart, xEnd);
              }
              return yResults;
            },
            erect3DPackedFloat: (array, width, height, depth) => {
              const zResults = new Array(depth);
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const xStart = z * height * width + y * width;
                  const xEnd = xStart + width;
                  yResults[y] = array.subarray(xStart, xEnd);
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            erectMemoryOptimizedFloat: (array, width) => {
              return array.subarray(0, width);
            },
            erectMemoryOptimized2DFloat: (array, width, height) => {
              const yResults = new Array(height);
              for (let y = 0; y < height; y++) {
                const offset = y * width;
                yResults[y] = array.subarray(offset, offset + width);
              }
              return yResults;
            },
            erectMemoryOptimized3DFloat: (array, width, height, depth) => {
              const zResults = new Array(depth);
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const offset = z * height * width + y * width;
                  yResults[y] = array.subarray(offset, offset + width);
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            erectFloat: (array, width) => {
              const xResults = new Float32Array(width);
              let i = 0;
              for (let x = 0; x < width; x++) {
                xResults[x] = array[i];
                i += 4;
              }
              return xResults;
            },
            erect2DFloat: (array, width, height) => {
              const yResults = new Array(height);
              let i = 0;
              for (let y = 0; y < height; y++) {
                const xResults = new Float32Array(width);
                for (let x = 0; x < width; x++) {
                  xResults[x] = array[i];
                  i += 4;
                }
                yResults[y] = xResults;
              }
              return yResults;
            },
            erect3DFloat: (array, width, height, depth) => {
              const zResults = new Array(depth);
              let i = 0;
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const xResults = new Float32Array(width);
                  for (let x = 0; x < width; x++) {
                    xResults[x] = array[i];
                    i += 4;
                  }
                  yResults[y] = xResults;
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            erectArray2: (array, width) => {
              const xResults = new Array(width);
              const xResultsMax = width * 4;
              let i = 0;
              for (let x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x, x + 2);
              }
              return xResults;
            },
            erect2DArray2: (array, width, height) => {
              const yResults = new Array(height);
              const XResultsMax = width * 4;
              for (let y = 0; y < height; y++) {
                const xResults = new Array(width);
                const offset = y * XResultsMax;
                let i = 0;
                for (let x = 0; x < XResultsMax; x += 4) {
                  xResults[i++] = array.subarray(x + offset, x + offset + 2);
                }
                yResults[y] = xResults;
              }
              return yResults;
            },
            erect3DArray2: (array, width, height, depth) => {
              const xResultsMax = width * 4;
              const zResults = new Array(depth);
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const xResults = new Array(width);
                  const offset = z * xResultsMax * height + y * xResultsMax;
                  let i = 0;
                  for (let x = 0; x < xResultsMax; x += 4) {
                    xResults[i++] = array.subarray(x + offset, x + offset + 2);
                  }
                  yResults[y] = xResults;
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            erectArray3: (array, width) => {
              const xResults = new Array(width);
              const xResultsMax = width * 4;
              let i = 0;
              for (let x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x, x + 3);
              }
              return xResults;
            },
            erect2DArray3: (array, width, height) => {
              const xResultsMax = width * 4;
              const yResults = new Array(height);
              for (let y = 0; y < height; y++) {
                const xResults = new Array(width);
                const offset = y * xResultsMax;
                let i = 0;
                for (let x = 0; x < xResultsMax; x += 4) {
                  xResults[i++] = array.subarray(x + offset, x + offset + 3);
                }
                yResults[y] = xResults;
              }
              return yResults;
            },
            erect3DArray3: (array, width, height, depth) => {
              const xResultsMax = width * 4;
              const zResults = new Array(depth);
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const xResults = new Array(width);
                  const offset = z * xResultsMax * height + y * xResultsMax;
                  let i = 0;
                  for (let x = 0; x < xResultsMax; x += 4) {
                    xResults[i++] = array.subarray(x + offset, x + offset + 3);
                  }
                  yResults[y] = xResults;
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            erectArray4: (array, width) => {
              const xResults = new Array(array);
              const xResultsMax = width * 4;
              let i = 0;
              for (let x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x, x + 4);
              }
              return xResults;
            },
            erect2DArray4: (array, width, height) => {
              const xResultsMax = width * 4;
              const yResults = new Array(height);
              for (let y = 0; y < height; y++) {
                const xResults = new Array(width);
                const offset = y * xResultsMax;
                let i = 0;
                for (let x = 0; x < xResultsMax; x += 4) {
                  xResults[i++] = array.subarray(x + offset, x + offset + 4);
                }
                yResults[y] = xResults;
              }
              return yResults;
            },
            erect3DArray4: (array, width, height, depth) => {
              const xResultsMax = width * 4;
              const zResults = new Array(depth);
              for (let z = 0; z < depth; z++) {
                const yResults = new Array(height);
                for (let y = 0; y < height; y++) {
                  const xResults = new Array(width);
                  const offset = z * xResultsMax * height + y * xResultsMax;
                  let i = 0;
                  for (let x = 0; x < xResultsMax; x += 4) {
                    xResults[i++] = array.subarray(x + offset, x + offset + 4);
                  }
                  yResults[y] = xResults;
                }
                zResults[z] = yResults;
              }
              return zResults;
            },
            flattenFunctionToString: (source, settings) => {
              const { findDependency, thisLookup, doNotDefine } = settings;
              let flattened = settings.flattened;
              if (!flattened) {
                flattened = settings.flattened = {};
              }
              const ast = acorn.parse(source);
              const functionDependencies = [];
              let indent = 0;
              function flatten2(ast2) {
                if (Array.isArray(ast2)) {
                  const results = [];
                  for (let i = 0; i < ast2.length; i++) {
                    results.push(flatten2(ast2[i]));
                  }
                  return results.join("");
                }
                switch (ast2.type) {
                  case "Program":
                    return flatten2(ast2.body) + (ast2.body[0].type === "VariableDeclaration" ? ";" : "");
                  case "FunctionDeclaration":
                    return `function ${ast2.id.name}(${ast2.params.map(flatten2).join(", ")}) ${flatten2(ast2.body)}`;
                  case "BlockStatement": {
                    const result2 = [];
                    indent += 2;
                    for (let i = 0; i < ast2.body.length; i++) {
                      const flat = flatten2(ast2.body[i]);
                      if (flat) {
                        result2.push(" ".repeat(indent) + flat, ";\n");
                      }
                    }
                    indent -= 2;
                    return `{
${result2.join("")}}`;
                  }
                  case "VariableDeclaration":
                    const declarations = utils.normalizeDeclarations(ast2).map(flatten2).filter((r) => r !== null);
                    if (declarations.length < 1) {
                      return "";
                    } else {
                      return `${ast2.kind} ${declarations.join(",")}`;
                    }
                  case "VariableDeclarator":
                    if (ast2.init.object && ast2.init.object.type === "ThisExpression") {
                      const lookup = thisLookup(ast2.init.property.name, true);
                      if (lookup) {
                        return `${ast2.id.name} = ${flatten2(ast2.init)}`;
                      } else {
                        return null;
                      }
                    } else {
                      return `${ast2.id.name} = ${flatten2(ast2.init)}`;
                    }
                  case "CallExpression": {
                    if (ast2.callee.property.name === "subarray") {
                      return `${flatten2(ast2.callee.object)}.${flatten2(ast2.callee.property)}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                    }
                    if (ast2.callee.object.name === "gl" || ast2.callee.object.name === "context") {
                      return `${flatten2(ast2.callee.object)}.${flatten2(ast2.callee.property)}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                    }
                    if (ast2.callee.object.type === "ThisExpression") {
                      functionDependencies.push(findDependency("this", ast2.callee.property.name));
                      return `${ast2.callee.property.name}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                    } else if (ast2.callee.object.name) {
                      const foundSource = findDependency(ast2.callee.object.name, ast2.callee.property.name);
                      if (foundSource === null) {
                        return `${ast2.callee.object.name}.${ast2.callee.property.name}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                      } else {
                        functionDependencies.push(foundSource);
                        return `${ast2.callee.property.name}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                      }
                    } else if (ast2.callee.object.type === "MemberExpression") {
                      return `${flatten2(ast2.callee.object)}.${ast2.callee.property.name}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                    } else {
                      throw new Error("unknown ast.callee");
                    }
                  }
                  case "ReturnStatement":
                    return `return ${flatten2(ast2.argument)}`;
                  case "BinaryExpression":
                    return `(${flatten2(ast2.left)}${ast2.operator}${flatten2(ast2.right)})`;
                  case "UnaryExpression":
                    if (ast2.prefix) {
                      return `${ast2.operator} ${flatten2(ast2.argument)}`;
                    } else {
                      return `${flatten2(ast2.argument)} ${ast2.operator}`;
                    }
                  case "ExpressionStatement":
                    return `${flatten2(ast2.expression)}`;
                  case "SequenceExpression":
                    return `(${flatten2(ast2.expressions)})`;
                  case "ArrowFunctionExpression":
                    return `(${ast2.params.map(flatten2).join(", ")}) => ${flatten2(ast2.body)}`;
                  case "Literal":
                    return ast2.raw;
                  case "Identifier":
                    return ast2.name;
                  case "MemberExpression":
                    if (ast2.object.type === "ThisExpression") {
                      return thisLookup(ast2.property.name);
                    }
                    if (ast2.computed) {
                      return `${flatten2(ast2.object)}[${flatten2(ast2.property)}]`;
                    }
                    return flatten2(ast2.object) + "." + flatten2(ast2.property);
                  case "ThisExpression":
                    return "this";
                  case "NewExpression":
                    return `new ${flatten2(ast2.callee)}(${ast2.arguments.map((value2) => flatten2(value2)).join(", ")})`;
                  case "ForStatement":
                    return `for (${flatten2(ast2.init)};${flatten2(ast2.test)};${flatten2(ast2.update)}) ${flatten2(ast2.body)}`;
                  case "AssignmentExpression":
                    return `${flatten2(ast2.left)}${ast2.operator}${flatten2(ast2.right)}`;
                  case "UpdateExpression":
                    return `${flatten2(ast2.argument)}${ast2.operator}`;
                  case "IfStatement":
                    return `if (${flatten2(ast2.test)}) ${flatten2(ast2.consequent)}`;
                  case "ThrowStatement":
                    return `throw ${flatten2(ast2.argument)}`;
                  case "ObjectPattern":
                    return ast2.properties.map(flatten2).join(", ");
                  case "ArrayPattern":
                    return ast2.elements.map(flatten2).join(", ");
                  case "DebuggerStatement":
                    return "debugger;";
                  case "ConditionalExpression":
                    return `${flatten2(ast2.test)}?${flatten2(ast2.consequent)}:${flatten2(ast2.alternate)}`;
                  case "Property":
                    if (ast2.kind === "init") {
                      return flatten2(ast2.key);
                    }
                }
                throw new Error(`unhandled ast.type of ${ast2.type}`);
              }
              const result = flatten2(ast);
              if (functionDependencies.length > 0) {
                const flattenedFunctionDependencies = [];
                for (let i = 0; i < functionDependencies.length; i++) {
                  const functionDependency = functionDependencies[i];
                  if (!flattened[functionDependency]) {
                    flattened[functionDependency] = true;
                  }
                  functionDependency ? flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + "\n") : "";
                }
                return flattenedFunctionDependencies.join("") + result;
              }
              return result;
            },
            normalizeDeclarations: (ast) => {
              if (ast.type !== "VariableDeclaration") throw new Error('Ast is not of type "VariableDeclaration"');
              const normalizedDeclarations = [];
              for (let declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {
                const declaration = ast.declarations[declarationIndex];
                if (declaration.id && declaration.id.type === "ObjectPattern" && declaration.id.properties) {
                  const { properties } = declaration.id;
                  for (let propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {
                    const property = properties[propertyIndex];
                    if (property.value.type === "ObjectPattern" && property.value.properties) {
                      for (let subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {
                        const subProperty = property.value.properties[subPropertyIndex];
                        if (subProperty.type === "Property") {
                          normalizedDeclarations.push({
                            type: "VariableDeclarator",
                            id: {
                              type: "Identifier",
                              name: subProperty.key.name
                            },
                            init: {
                              type: "MemberExpression",
                              object: {
                                type: "MemberExpression",
                                object: declaration.init,
                                property: {
                                  type: "Identifier",
                                  name: property.key.name
                                },
                                computed: false
                              },
                              property: {
                                type: "Identifier",
                                name: subProperty.key.name
                              },
                              computed: false
                            }
                          });
                        } else {
                          throw new Error("unexpected state");
                        }
                      }
                    } else if (property.value.type === "Identifier") {
                      normalizedDeclarations.push({
                        type: "VariableDeclarator",
                        id: {
                          type: "Identifier",
                          name: property.value && property.value.name ? property.value.name : property.key.name
                        },
                        init: {
                          type: "MemberExpression",
                          object: declaration.init,
                          property: {
                            type: "Identifier",
                            name: property.key.name
                          },
                          computed: false
                        }
                      });
                    } else {
                      throw new Error("unexpected state");
                    }
                  }
                } else if (declaration.id && declaration.id.type === "ArrayPattern" && declaration.id.elements) {
                  const { elements } = declaration.id;
                  for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {
                    const element = elements[elementIndex];
                    if (element.type === "Identifier") {
                      normalizedDeclarations.push({
                        type: "VariableDeclarator",
                        id: {
                          type: "Identifier",
                          name: element.name
                        },
                        init: {
                          type: "MemberExpression",
                          object: declaration.init,
                          property: {
                            type: "Literal",
                            value: elementIndex,
                            raw: elementIndex.toString(),
                            start: element.start,
                            end: element.end
                          },
                          computed: true
                        }
                      });
                    } else {
                      throw new Error("unexpected state");
                    }
                  }
                } else {
                  normalizedDeclarations.push(declaration);
                }
              }
              return normalizedDeclarations;
            },
            splitHTMLImageToRGB: (gpu, image) => {
              const rKernel = gpu.createKernel(function(a) {
                const pixel = a[this.thread.y][this.thread.x];
                return pixel.r * 255;
              }, {
                output: [image.width, image.height],
                precision: "unsigned",
                argumentTypes: { a: "HTMLImage" }
              });
              const gKernel = gpu.createKernel(function(a) {
                const pixel = a[this.thread.y][this.thread.x];
                return pixel.g * 255;
              }, {
                output: [image.width, image.height],
                precision: "unsigned",
                argumentTypes: { a: "HTMLImage" }
              });
              const bKernel = gpu.createKernel(function(a) {
                const pixel = a[this.thread.y][this.thread.x];
                return pixel.b * 255;
              }, {
                output: [image.width, image.height],
                precision: "unsigned",
                argumentTypes: { a: "HTMLImage" }
              });
              const aKernel = gpu.createKernel(function(a) {
                const pixel = a[this.thread.y][this.thread.x];
                return pixel.a * 255;
              }, {
                output: [image.width, image.height],
                precision: "unsigned",
                argumentTypes: { a: "HTMLImage" }
              });
              const result = [
                rKernel(image),
                gKernel(image),
                bKernel(image),
                aKernel(image)
              ];
              result.rKernel = rKernel;
              result.gKernel = gKernel;
              result.bKernel = bKernel;
              result.aKernel = aKernel;
              result.gpu = gpu;
              return result;
            },
            splitRGBAToCanvases: (gpu, rgba, width, height) => {
              const visualKernelR = gpu.createKernel(function(v) {
                const pixel = v[this.thread.y][this.thread.x];
                this.color(pixel.r / 255, 0, 0, 255);
              }, {
                output: [width, height],
                graphical: true,
                argumentTypes: { v: "Array2D(4)" }
              });
              visualKernelR(rgba);
              const visualKernelG = gpu.createKernel(function(v) {
                const pixel = v[this.thread.y][this.thread.x];
                this.color(0, pixel.g / 255, 0, 255);
              }, {
                output: [width, height],
                graphical: true,
                argumentTypes: { v: "Array2D(4)" }
              });
              visualKernelG(rgba);
              const visualKernelB = gpu.createKernel(function(v) {
                const pixel = v[this.thread.y][this.thread.x];
                this.color(0, 0, pixel.b / 255, 255);
              }, {
                output: [width, height],
                graphical: true,
                argumentTypes: { v: "Array2D(4)" }
              });
              visualKernelB(rgba);
              const visualKernelA = gpu.createKernel(function(v) {
                const pixel = v[this.thread.y][this.thread.x];
                this.color(255, 255, 255, pixel.a / 255);
              }, {
                output: [width, height],
                graphical: true,
                argumentTypes: { v: "Array2D(4)" }
              });
              visualKernelA(rgba);
              return [
                visualKernelR.canvas,
                visualKernelG.canvas,
                visualKernelB.canvas,
                visualKernelA.canvas
              ];
            },
            getMinifySafeName: (fn) => {
              try {
                const ast = acorn.parse(`const value = ${fn.toString()}`);
                const { init } = ast.body[0].declarations[0];
                return init.body.name || init.body.body[0].argument.name;
              } catch (e) {
                throw new Error("Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }");
              }
            },
            sanitizeName: function(name2) {
              if (dollarSign.test(name2)) {
                name2 = name2.replace(dollarSign, "S_S");
              }
              if (doubleUnderscore.test(name2)) {
                name2 = name2.replace(doubleUnderscore, "U_U");
              } else if (singleUnderscore.test(name2)) {
                name2 = name2.replace(singleUnderscore, "u_u");
              }
              return name2;
            }
          };
          const dollarSign = /\$/;
          const doubleUnderscore = /__/;
          const singleUnderscore = /_/;
          const _systemEndianness = utils.getSystemEndianness();
          module3.exports = {
            utils
          };
        }, { "./input": 110, "./texture": 113, "acorn": 1 }] }, {}, [107])(107);
      });
    }
  });

  // node_modules/three/build/three.core.js
  var REVISION = "173";
  var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
  var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var ConstantColorFactor = 211;
  var OneMinusConstantColorFactor = 212;
  var ConstantAlphaFactor = 213;
  var OneMinusConstantAlphaFactor = 214;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var AgXToneMapping = 6;
  var NeutralToneMapping = 7;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedInt248Type = 1020;
  var UnsignedInt5999Type = 35902;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var RGB_BPTC_SIGNED_Format = 36494;
  var RGB_BPTC_UNSIGNED_Format = 36495;
  var RED_RGTC1_Format = 36283;
  var SIGNED_RED_RGTC1_Format = 36284;
  var RED_GREEN_RGTC2_Format = 36285;
  var SIGNED_RED_GREEN_RGTC2_Format = 36286;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var NoColorSpace = "";
  var SRGBColorSpace = "srgb";
  var LinearSRGBColorSpace = "srgb-linear";
  var LinearTransfer = "linear";
  var SRGBTransfer = "srgb";
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var NeverCompare = 512;
  var LessCompare = 513;
  var EqualCompare = 514;
  var LessEqualCompare = 515;
  var GreaterCompare = 516;
  var NotEqualCompare = 517;
  var GreaterEqualCompare = 518;
  var AlwaysCompare = 519;
  var StaticDrawUsage = 35044;
  var GLSL3 = "300 es";
  var WebGLCoordinateSystem = 2e3;
  var WebGPUCoordinateSystem = 2001;
  var EventDispatcher = class {
    addEventListener(type, listener) {
      if (this._listeners === void 0) this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0) return false;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0) return;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      const listeners = this._listeners;
      if (listeners === void 0) return;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
        event.target = null;
      }
    }
  };
  var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  var _seed = 1234567;
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value2, min, max) {
    return Math.max(min, Math.min(max, value2));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  }
  function inverseLerp(x, y, value2) {
    if (x !== y) {
      return (value2 - x) / (y - x);
    } else {
      return 0;
    }
  }
  function lerp(x, y, t) {
    return (1 - t) * x + t * y;
  }
  function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
  }
  function pingpong(x, length = 1) {
    return length - Math.abs(euclideanModulo(x, length * 2) - length);
  }
  function smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  }
  function smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  }
  function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  }
  function randFloat(low, high) {
    return low + Math.random() * (high - low);
  }
  function randFloatSpread(range) {
    return range * (0.5 - Math.random());
  }
  function seededRandom(s) {
    if (s !== void 0) _seed = s;
    let t = _seed += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
  function degToRad(degrees) {
    return degrees * DEG2RAD;
  }
  function radToDeg(radians) {
    return radians * RAD2DEG;
  }
  function isPowerOfTwo(value2) {
    return (value2 & value2 - 1) === 0 && value2 !== 0;
  }
  function ceilPowerOfTwo(value2) {
    return Math.pow(2, Math.ceil(Math.log(value2) / Math.LN2));
  }
  function floorPowerOfTwo(value2) {
    return Math.pow(2, Math.floor(Math.log(value2) / Math.LN2));
  }
  function setQuaternionFromProperEuler(q, a, b, c, order) {
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch (order) {
      case "XYX":
        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
        break;
      case "YZY":
        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
        break;
      case "ZXZ":
        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
        break;
      case "XZX":
        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
        break;
      case "YXY":
        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
        break;
      case "ZYZ":
        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
  function denormalize(value2, array) {
    switch (array.constructor) {
      case Float32Array:
        return value2;
      case Uint32Array:
        return value2 / 4294967295;
      case Uint16Array:
        return value2 / 65535;
      case Uint8Array:
        return value2 / 255;
      case Int32Array:
        return Math.max(value2 / 2147483647, -1);
      case Int16Array:
        return Math.max(value2 / 32767, -1);
      case Int8Array:
        return Math.max(value2 / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize(value2, array) {
    switch (array.constructor) {
      case Float32Array:
        return value2;
      case Uint32Array:
        return Math.round(value2 * 4294967295);
      case Uint16Array:
        return Math.round(value2 * 65535);
      case Uint8Array:
        return Math.round(value2 * 255);
      case Int32Array:
        return Math.round(value2 * 2147483647);
      case Int16Array:
        return Math.round(value2 * 32767);
      case Int8Array:
        return Math.round(value2 * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  var MathUtils = {
    DEG2RAD,
    RAD2DEG,
    generateUUID,
    clamp,
    euclideanModulo,
    mapLinear,
    inverseLerp,
    lerp,
    damp,
    pingpong,
    smoothstep,
    smootherstep,
    randInt,
    randFloat,
    randFloatSpread,
    seededRandom,
    degToRad,
    radToDeg,
    isPowerOfTwo,
    ceilPowerOfTwo,
    floorPowerOfTwo,
    setQuaternionFromProperEuler,
    normalize,
    denormalize
  };
  var Vector2 = class _Vector2 {
    constructor(x = 0, y = 0) {
      _Vector2.prototype.isVector2 = true;
      this.x = x;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value2) {
      this.x = value2;
    }
    get height() {
      return this.y;
    }
    set height(value2) {
      this.y = value2;
    }
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value2) {
      switch (index) {
        case 0:
          this.x = value2;
          break;
        case 1:
          this.y = value2;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  };
  var Matrix3 = class _Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      _Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x, y) {
      if (x.isVector2) {
        this.set(
          1,
          0,
          x.x,
          0,
          1,
          x.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y) {
      this.set(
        x,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  };
  var _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i = array.length - 1; i >= 0; --i) {
      if (array[i] >= 65535) return true;
    }
    return false;
  }
  function createElementNS(name2) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name2);
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  var _cache = {};
  function warnOnce(message) {
    if (message in _cache) return;
    _cache[message] = true;
    console.warn(message);
  }
  function probeAsync(gl, sync, interval) {
    return new Promise(function(resolve, reject) {
      function probe() {
        switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {
          case gl.WAIT_FAILED:
            reject();
            break;
          case gl.TIMEOUT_EXPIRED:
            setTimeout(probe, interval);
            break;
          default:
            resolve();
        }
      }
      setTimeout(probe, interval);
    });
  }
  function toNormalizedProjectionMatrix(projectionMatrix) {
    const m = projectionMatrix.elements;
    m[2] = 0.5 * m[2] + 0.5 * m[3];
    m[6] = 0.5 * m[6] + 0.5 * m[7];
    m[10] = 0.5 * m[10] + 0.5 * m[11];
    m[14] = 0.5 * m[14] + 0.5 * m[15];
  }
  function toReversedProjectionMatrix(projectionMatrix) {
    const m = projectionMatrix.elements;
    const isPerspectiveMatrix = m[11] === -1;
    if (isPerspectiveMatrix) {
      m[10] = -m[10] - 1;
      m[14] = -m[14];
    } else {
      m[10] = -m[10];
      m[14] = -m[14] + 1;
    }
  }
  var LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  var XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color.r = SRGBToLinear(color.r);
          color.g = SRGBToLinear(color.g);
          color.b = SRGBToLinear(color.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color.r = LinearToSRGB(color.r);
          color.g = LinearToSRGB(color.g);
          color.b = LinearToSRGB(color.b);
        }
        return color;
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  var ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var _canvas;
  var ImageUtils = class {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0) _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      return canvas.toDataURL("image/png");
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i++) {
          data[i] = SRGBToLinear(data[i] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i = 0; i < data.length; i++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
          } else {
            data[i] = SRGBToLinear(data[i]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  };
  var _sourceId = 0;
  var Source = class {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    set needsUpdate(value2) {
      if (value2 === true) this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i = 0, l = data.length; i < l; i++) {
            if (data[i].isDataTexture) {
              url.push(serializeImage(data[i].image));
            } else {
              url.push(serializeImage(data[i]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  };
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var _textureId = 0;
  var Texture = class _Texture extends EventDispatcher {
    constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.pmremVersion = 0;
    }
    get image() {
      return this.source.data;
    }
    set image(value2 = null) {
      this.source.data = value2;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0) output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping) return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value2) {
      if (value2 === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    set needsPMREMUpdate(value2) {
      if (value2 === true) {
        this.pmremVersion++;
      }
    }
  };
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  var Vector4 = class _Vector4 {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      _Vector4.prototype.isVector4 = true;
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value2) {
      this.z = value2;
    }
    get height() {
      return this.w;
    }
    set height(value2) {
      this.w = value2;
    }
    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value2) {
      switch (index) {
        case 0:
          this.x = value2;
          break;
        case 1:
          this.y = value2;
          break;
        case 2:
          this.z = value2;
          break;
        case 3:
          this.w = value2;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }
        this.set(x, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3) s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      this.w = clamp(this.w, min.w, max.w);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  };
  var RenderTarget = class extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1
      }, options);
      const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      texture.flipY = false;
      texture.generateMipmaps = options.generateMipmaps;
      texture.internalFormat = options.internalFormat;
      this.textures = [];
      const count = options.count;
      for (let i = 0; i < count; i++) {
        this.textures[i] = texture.clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
      }
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
    }
    get texture() {
      return this.textures[0];
    }
    set texture(value2) {
      this.textures[0] = value2;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
      if (current !== null) current.renderTarget = this;
      this._depthTexture = current;
    }
    get depthTexture() {
      return this._depthTexture;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        for (let i = 0, il = this.textures.length; i < il; i++) {
          this.textures[i].image.width = width;
          this.textures[i].image.height = height;
          this.textures[i].image.depth = depth;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i = 0, il = source.textures.length; i < il; i++) {
        this.textures[i] = source.textures[i].clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
      }
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var WebGLRenderTarget = class extends RenderTarget {
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  };
  var DataArrayTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  };
  var Data3DTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isData3DTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  var Quaternion = class {
    constructor(x = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value2) {
      this._x = value2;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value2) {
      this._y = value2;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value2) {
      this._z = value2;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value2) {
      this._w = value2;
      this._onChangeCallback();
    }
    set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update = true) {
      const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z / 2);
      const s1 = sin(x / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      const x = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      this._onChangeCallback();
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  };
  var Vector3 = class _Vector3 {
    constructor(x = 0, y = 0, z = 0) {
      _Vector3.prototype.isVector3 = true;
      this.x = x;
      this.y = y;
      this.z = z;
    }
    set(x, y, z) {
      if (z === void 0) z = this.z;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z) {
      this.z = z;
      return this;
    }
    setComponent(index, value2) {
      switch (index) {
        case 0:
          this.x = value2;
          break;
        case 1:
          this.y = value2;
          break;
        case 2:
          this.z = value2;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    reflect(normal) {
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  };
  var _vector$c = /* @__PURE__ */ new Vector3();
  var _quaternion$4 = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max;
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i = 0, il = array.length; i < il; i += 3) {
        this.expandByPoint(_vector$b.fromArray(array, i));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i = 0, il = attribute.count; i < il; i++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i = 0, l = positionAttribute.count; i < l; i++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$b);
      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$b = /* @__PURE__ */ new Vector3();
  var _box$4 = /* @__PURE__ */ new Box3();
  var _v0$2 = /* @__PURE__ */ new Vector3();
  var _v1$7 = /* @__PURE__ */ new Vector3();
  var _v2$4 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _box$3 = /* @__PURE__ */ new Box3();
  var _v1$6 = /* @__PURE__ */ new Vector3();
  var _v2$3 = /* @__PURE__ */ new Vector3();
  var Sphere = class {
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _vector$a = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal$1 = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin2 = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin2;
      this.direction = direction;
    }
    set(origin2, direction) {
      this.origin.copy(origin2);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0) return null;
      if (t0 < 0) return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin2 = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin2.x) * invdirx;
        tmax = (box.max.x - origin2.x) * invdirx;
      } else {
        tmin = (box.max.x - origin2.x) * invdirx;
        tmax = (box.min.x - origin2.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin2.y) * invdiry;
        tymax = (box.max.y - origin2.y) * invdiry;
      } else {
        tymin = (box.max.y - origin2.y) * invdiry;
        tymax = (box.min.y - origin2.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax) return null;
      if (tymin > tmin || isNaN(tmin)) tmin = tymin;
      if (tymax < tmax || isNaN(tmax)) tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin2.z) * invdirz;
        tzmax = (box.max.z - origin2.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin2.z) * invdirz;
        tzmax = (box.min.z - origin2.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Matrix4 = class _Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      _Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new _Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x, y, z) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
      if (x.isVector3) {
        this.set(
          1,
          0,
          0,
          x.x,
          0,
          1,
          0,
          x.y,
          0,
          0,
          1,
          x.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x = axis.x, y = axis.y, z = axis.z;
      const tx = t * x, ty = t * y;
      this.set(
        tx * x + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x,
        0,
        tx * z - s * y,
        ty * z + s * x,
        t * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y, z) {
      this.set(
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z2 = z + z;
      const xx = x * x2, xy = x * y2, xz = x * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x2, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i]) return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  };
  var _v1$5 = /* @__PURE__ */ new Vector3();
  var _m1$2 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var _matrix$2 = /* @__PURE__ */ new Matrix4();
  var _quaternion$3 = /* @__PURE__ */ new Quaternion();
  var Euler = class _Euler {
    constructor(x = 0, y = 0, z = 0, order = _Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value2) {
      this._x = value2;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value2) {
      this._y = value2;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value2) {
      this._z = value2;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value2) {
      this._order = value2;
      this._onChangeCallback();
    }
    set(x, y, z, order = this._order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0) this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  };
  Euler.DEFAULT_ORDER = "XYZ";
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$4 = /* @__PURE__ */ new Vector3();
  var _q1 = /* @__PURE__ */ new Quaternion();
  var _m1$1 = /* @__PURE__ */ new Matrix4();
  var _target = /* @__PURE__ */ new Vector3();
  var _position$3 = /* @__PURE__ */ new Vector3();
  var _scale$2 = /* @__PURE__ */ new Vector3();
  var _quaternion$2 = /* @__PURE__ */ new Quaternion();
  var _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  var _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  var _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  var _addedEvent = { type: "added" };
  var _removedEvent = { type: "removed" };
  var _childaddedEvent = { type: "childadded", child: null };
  var _childremovedEvent = { type: "childremoved", child: null };
  var Object3D = class _Object3D extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = _Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeShadow() {
    }
    onAfterShadow() {
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }
      const parent2 = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent2) {
        _m1$1.extractRotation(parent2.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    removeFromParent() {
      const parent2 = this.parent;
      if (parent2 !== null) {
        parent2.remove(this);
      }
      return this;
    }
    clear() {
      return this.remove(...this.children);
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name2) {
      return this.getObjectByProperty("name", name2);
    }
    getObjectByProperty(name2, value2) {
      if (this[name2] === value2) return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name2, value2);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name2, value2, result = []) {
      if (this[name2] === value2) result.push(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].getObjectsByProperty(name2, value2, result);
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent2 = this.parent;
      if (parent2 !== null) {
        callback(parent2);
        parent2.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        child.updateMatrixWorld(force);
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent2 = this.parent;
      if (updateParents === true && parent2 !== null) {
        parent2.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "") object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0) object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.visibility = this._visibility;
        object.active = this._active;
        object.bounds = this._bounds.map((bound) => ({
          boxInitialized: bound.boxInitialized,
          boxMin: bound.box.min.toArray(),
          boxMax: bound.box.max.toArray(),
          sphereInitialized: bound.sphereInitialized,
          sphereRadius: bound.sphere.radius,
          sphereCenter: bound.sphere.center.toArray()
        }));
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.geometryCount = this._geometryCount;
        object.matricesTexture = this._matricesTexture.toJSON(meta);
        if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);
        if (this.boundingSphere !== null) {
          object.boundingSphere = {
            center: object.boundingSphere.center.toArray(),
            radius: object.boundingSphere.radius
          };
        }
        if (this.boundingBox !== null) {
          object.boundingBox = {
            min: object.boundingBox.min.toArray(),
            max: object.boundingBox.max.toArray()
          };
        }
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0) output.geometries = geometries;
        if (materials.length > 0) output.materials = materials;
        if (textures.length > 0) output.textures = textures;
        if (images.length > 0) output.images = images;
        if (shapes.length > 0) output.shapes = shapes;
        if (skeletons.length > 0) output.skeletons = skeletons;
        if (animations.length > 0) output.animations = animations;
        if (nodes.length > 0) output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  };
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$2 = /* @__PURE__ */ new Vector3();
  var _v3$2 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var _v40 = /* @__PURE__ */ new Vector4();
  var _v41 = /* @__PURE__ */ new Vector4();
  var _v42 = /* @__PURE__ */ new Vector4();
  var Triangle = class _Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target) target.z = 0;
        if ("w" in target) target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return _Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return _Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return _Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return _Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return _Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  var Color = class {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value2 = r;
        if (value2 && value2.isColor) {
          this.copy(value2);
        } else if (typeof value2 === "number") {
          this.setHex(value2);
        } else if (typeof value2 === "string") {
          this.setStyle(value2);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0) return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
        let color;
        const name2 = m[1];
        const components = m[2];
        switch (name2) {
          case "rgb":
          case "rgba":
            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
      }
      return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  };
  var _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  var _materialId = 0;
  var Material = class extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value2) {
      if (this._alphaTest > 0 !== value2 > 0) {
        this.version++;
      }
      this._alphaTest = value2;
    }
    // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0) return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== void 0) data.roughness = this.roughness;
      if (this.metalness !== void 0) data.metalness = this.metalness;
      if (this.sheen !== void 0) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0) data.shininess = this.shininess;
      if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0) data.dispersion = this.dispersion;
      if (this.iridescence !== void 0) data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0) data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors === true) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
      if (this.depthTest === false) data.depthTest = this.depthTest;
      if (this.depthWrite === false) data.depthWrite = this.depthWrite;
      if (this.colorWrite === false) data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== void 0) data.dashSize = this.dashSize;
      if (this.gapSize !== void 0) data.gapSize = this.gapSize;
      if (this.scale !== void 0) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaHash === true) data.alphaHash = true;
      if (this.alphaToCoverage === true) data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
      if (this.forceSinglePass === true) data.forceSinglePass = true;
      if (this.wireframe === true) data.wireframe = true;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = true;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (this.fog === false) data.fog = false;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value2) {
      if (value2 === true) this.version++;
    }
    onBuild() {
      console.warn("Material: onBuild() has been removed.");
    }
  };
  var MeshBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _vector2$1 = /* @__PURE__ */ new Vector2();
  var _id$2 = 0;
  var BufferAttribute = class {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      Object.defineProperty(this, "id", { value: _id$2++ });
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value2) {
      if (value2 === true) this.version++;
    }
    setUsage(value2) {
      this.usage = value2;
      return this;
    }
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.transformDirection(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    set(value2, offset = 0) {
      this.array.set(value2, offset);
      return this;
    }
    getComponent(index, component) {
      let value2 = this.array[index * this.itemSize + component];
      if (this.normalized) value2 = denormalize(value2, this.array);
      return value2;
    }
    setComponent(index, component, value2) {
      if (this.normalized) value2 = normalize(value2, this.array);
      this.array[index * this.itemSize + component] = value2;
      return this;
    }
    getX(index) {
      let x = this.array[index * this.itemSize];
      if (this.normalized) x = denormalize(x, this.array);
      return x;
    }
    setX(index, x) {
      if (this.normalized) x = normalize(x, this.array);
      this.array[index * this.itemSize] = x;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized) y = normalize(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized) z = normalize(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized) w = normalize(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    setXYZW(index, x, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
        w = normalize(w, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "") data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      return data;
    }
  };
  var Uint16BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  };
  var Uint32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  };
  var Float32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  };
  var _id$1 = 0;
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _obj = /* @__PURE__ */ new Object3D();
  var _offset = /* @__PURE__ */ new Vector3();
  var _box$2 = /* @__PURE__ */ new Box3();
  var _boxMorphTargets = /* @__PURE__ */ new Box3();
  var _vector$8 = /* @__PURE__ */ new Vector3();
  var BufferGeometry = class _BufferGeometry extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    getIndirect() {
      return this.indirect;
    }
    getAttribute(name2) {
      return this.attributes[name2];
    }
    setAttribute(name2, attribute) {
      this.attributes[name2] = attribute;
      return this;
    }
    deleteAttribute(name2) {
      delete this.attributes[name2];
      return this;
    }
    hasAttribute(name2) {
      return this.attributes[name2] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x, y, z) {
      _m1.makeTranslation(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x, y, z) {
      _m1.makeScale(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i = 0, l = points.length; i < l; i++) {
          const point = points[i];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i = 0; i < l; i++) {
          const point = points[i];
          positionAttribute.setXYZ(i, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$8.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i = 0; i < positionAttribute.count; i++) {
        tan1[i] = new Vector3();
        tan2[i] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$8.fromBufferAttribute(normals, i);
        _vector$8.normalize();
        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new _BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name2 in attributes) {
        const attribute = attributes[name2];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name2, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name2 in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name2];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name2] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0) data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name2 in attributes) {
        const attribute = attributes[name2];
        this.setAttribute(name2, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name2 in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name2];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name2] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  var _ray$3 = /* @__PURE__ */ new Ray();
  var _sphere$6 = /* @__PURE__ */ new Sphere();
  var _sphereHitAt = /* @__PURE__ */ new Vector3();
  var _vA$1 = /* @__PURE__ */ new Vector3();
  var _vB$1 = /* @__PURE__ */ new Vector3();
  var _vC$1 = /* @__PURE__ */ new Vector3();
  var _tempA = /* @__PURE__ */ new Vector3();
  var _morphA = /* @__PURE__ */ new Vector3();
  var _intersectionPoint = /* @__PURE__ */ new Vector3();
  var _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  var Mesh = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name2 = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name2] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i = 0, il = morphPosition.length; i < il; i++) {
          const influence = morphInfluences[i];
          const morphAttribute = morphPosition[i];
          if (influence === 0) continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0) return;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const c = index.getX(i + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = i;
            const b = i + 1;
            const c = i + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  };
  function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  var BoxGeometry = class _BoxGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxGeometry";
      this.parameters = {
        width,
        height,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp = cloneUniforms(uniforms[u]);
      for (const p in tmp) {
        merged[p] = tmp[p];
      }
    }
    return merged;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  function getUnlitUniformColorSpace(renderer) {
    const currentRenderTarget = renderer.getRenderTarget();
    if (currentRenderTarget === null) {
      return renderer.outputColorSpace;
    }
    if (currentRenderTarget.isXRRenderTarget === true) {
      return currentRenderTarget.texture.colorSpace;
    }
    return ColorManagement.workingColorSpace;
  }
  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  var ShaderMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name2 in this.uniforms) {
        const uniform = this.uniforms[name2];
        const value2 = uniform.value;
        if (value2 && value2.isTexture) {
          data.uniforms[name2] = {
            type: "t",
            value: value2.toJSON(meta).uuid
          };
        } else if (value2 && value2.isColor) {
          data.uniforms[name2] = {
            type: "c",
            value: value2.getHex()
          };
        } else if (value2 && value2.isVector2) {
          data.uniforms[name2] = {
            type: "v2",
            value: value2.toArray()
          };
        } else if (value2 && value2.isVector3) {
          data.uniforms[name2] = {
            type: "v3",
            value: value2.toArray()
          };
        } else if (value2 && value2.isVector4) {
          data.uniforms[name2] = {
            type: "v4",
            value: value2.toArray()
          };
        } else if (value2 && value2.isMatrix3) {
          data.uniforms[name2] = {
            type: "m3",
            value: value2.toArray()
          };
        } else if (value2 && value2.isMatrix4) {
          data.uniforms[name2] = {
            type: "m4",
            value: value2.toArray()
          };
        } else {
          data.uniforms[name2] = {
            value: value2
          };
        }
      }
      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  };
  var Camera = class extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _v3$1 = /* @__PURE__ */ new Vector3();
  var _minTarget = /* @__PURE__ */ new Vector2();
  var _maxTarget = /* @__PURE__ */ new Vector2();
  var PerspectiveCamera = class extends Camera {
    constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
      super();
      this.isPerspectiveCamera = true;
      this.type = "PerspectiveCamera";
      this.fov = fov2;
      this.zoom = 1;
      this.near = near;
      this.far = far;
      this.focus = 10;
      this.aspect = aspect2;
      this.view = null;
      this.filmGauge = 35;
      this.filmOffset = 0;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    /**
     * Sets the FOV by focal length in respect to the current .filmGauge.
     *
     * The default film gauge is 35, so that the focal length can be specified for
     * a 35mm (full frame) camera.
     *
     * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
     */
    setFocalLength(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    /**
     * Calculates the focal length from the current .fov and .filmGauge.
     *
     * @returns {number}
     */
    getFocalLength() {
      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(
        Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
      );
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
     * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
     * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
     *
     * @param {number} distance
     * @param {Vector2} minTarget
     * @param {Vector2} maxTarget
     */
    getViewBounds(distance, minTarget, maxTarget) {
      _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
      _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
    }
    /**
     * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
     *
     * @param {number} distance
     * @param {Vector2} target - Vector2 target used to store result where x is width and y is height.
     * @returns {Vector2}
     */
    getViewSize(distance, target) {
      this.getViewBounds(distance, _minTarget, _maxTarget);
      return target.subVectors(_maxTarget, _minTarget);
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *
     * then for each monitor you would call it like this
     *
     *   const w = 1920;
     *   const h = 1080;
     *   const fullWidth = w * 3;
     *   const fullHeight = h * 2;
     *
     *   --A--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     *   --B--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     *   --C--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     *   --D--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     *   --E--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     *   --F--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     *
     *   Note there is no reason monitors have to be the same size or in a grid.
     *
     * @param {number} fullWidth
     * @param {number} fullHeight
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     */
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const near = this.near;
      let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0) left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  };
  var fov = -90;
  var aspect = 1;
  var CubeCamera = class extends Object3D {
    constructor(near, far, renderTarget) {
      super();
      this.type = "CubeCamera";
      this.renderTarget = renderTarget;
      this.coordinateSystem = null;
      this.activeMipmapLevel = 0;
      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
      cameraPX.layers = this.layers;
      this.add(cameraPX);
      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
      cameraNX.layers = this.layers;
      this.add(cameraNX);
      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
      cameraPY.layers = this.layers;
      this.add(cameraPY);
      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
      cameraNY.layers = this.layers;
      this.add(cameraNY);
      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraPZ.layers = this.layers;
      this.add(cameraPZ);
      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraNZ.layers = this.layers;
      this.add(cameraNZ);
    }
    updateCoordinateSystem() {
      const coordinateSystem = this.coordinateSystem;
      const cameras = this.children.concat();
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
      for (const camera of cameras) this.remove(camera);
      if (coordinateSystem === WebGLCoordinateSystem) {
        cameraPX.up.set(0, 1, 0);
        cameraPX.lookAt(1, 0, 0);
        cameraNX.up.set(0, 1, 0);
        cameraNX.lookAt(-1, 0, 0);
        cameraPY.up.set(0, 0, -1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, 1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, 1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, 1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(-1, 0, 0);
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(1, 0, 0);
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else {
        throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
      }
      for (const camera of cameras) {
        this.add(camera);
        camera.updateMatrixWorld();
      }
    }
    update(renderer, scene) {
      if (this.parent === null) this.updateMatrixWorld();
      const { renderTarget, activeMipmapLevel } = this;
      if (this.coordinateSystem !== renderer.coordinateSystem) {
        this.coordinateSystem = renderer.coordinateSystem;
        this.updateCoordinateSystem();
      }
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
      const currentRenderTarget = renderer.getRenderTarget();
      const currentActiveCubeFace = renderer.getActiveCubeFace();
      const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();
      const currentXrEnabled = renderer.xr.enabled;
      renderer.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);
      renderer.render(scene, cameraPX);
      renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);
      renderer.render(scene, cameraNX);
      renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);
      renderer.render(scene, cameraPY);
      renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);
      renderer.render(scene, cameraNY);
      renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);
      renderer.render(scene, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);
      renderer.render(scene, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  };
  var CubeTexture = class extends Texture {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
      images = images !== void 0 ? images : [];
      mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isCubeTexture = true;
      this.flipY = false;
    }
    get images() {
      return this.image;
    }
    set images(value2) {
      this.image = value2;
    }
  };
  var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
    constructor(size = 1, options = {}) {
      super(size, size, options);
      this.isWebGLCubeRenderTarget = true;
      const image = { width: size, height: size, depth: 1 };
      const images = [image, image, image, image, image, image];
      this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      this.texture.isRenderTargetTexture = true;
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    }
    fromEquirectangularTexture(renderer, texture) {
      this.texture.type = texture.type;
      this.texture.colorSpace = texture.colorSpace;
      this.texture.generateMipmaps = texture.generateMipmaps;
      this.texture.minFilter = texture.minFilter;
      this.texture.magFilter = texture.magFilter;
      const shader = {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: (
          /* glsl */
          `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
        ),
        fragmentShader: (
          /* glsl */
          `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        )
      };
      const geometry = new BoxGeometry(5, 5, 5);
      const material = new ShaderMaterial({
        name: "CubemapFromEquirect",
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material.uniforms.tEquirect.value = texture;
      const mesh = new Mesh(geometry, material);
      const currentMinFilter = texture.minFilter;
      if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
      const camera = new CubeCamera(1, 10, this);
      camera.update(renderer, mesh);
      texture.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
    clear(renderer, color, depth, stencil) {
      const currentRenderTarget = renderer.getRenderTarget();
      for (let i = 0; i < 6; i++) {
        renderer.setRenderTarget(this, i);
        renderer.clear(color, depth, stencil);
      }
      renderer.setRenderTarget(currentRenderTarget);
    }
  };
  var Group = class extends Object3D {
    constructor() {
      super();
      this.isGroup = true;
      this.type = "Group";
    }
  };
  var _moveEvent = { type: "move" };
  var WebXRController = class {
    constructor() {
      this._targetRay = null;
      this._grip = null;
      this._hand = null;
    }
    getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = { pinching: false };
      }
      return this._hand;
    }
    getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }
      return this._targetRay;
    }
    getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }
      return this._grip;
    }
    dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    }
    connect(inputSource) {
      if (inputSource && inputSource.hand) {
        const hand = this._hand;
        if (hand) {
          for (const inputjoint of inputSource.hand.values()) {
            this._getHandJoint(hand, inputjoint);
          }
        }
      }
      this.dispatchEvent({ type: "connected", data: inputSource });
      return this;
    }
    disconnect(inputSource) {
      this.dispatchEvent({ type: "disconnected", data: inputSource });
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    }
    update(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (const inputjoint of inputSource.hand.values()) {
            const jointPose = frame.getJointPose(inputjoint, referenceSpace);
            const joint = this._getHandJoint(hand, inputjoint);
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.matrixWorldNeedsUpdate = true;
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
          }
          const indexTip = hand.joints["index-finger-tip"];
          const thumbTip = hand.joints["thumb-tip"];
          const distance = indexTip.position.distanceTo(thumbTip.position);
          const distanceToPinch = 0.02;
          const threshold = 5e-3;
          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: "pinchend",
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: "pinchstart",
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
              grip.matrixWorldNeedsUpdate = true;
              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }
              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose === null && gripPose !== null) {
            inputPose = gripPose;
          }
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            targetRay.matrixWorldNeedsUpdate = true;
            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }
            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }
            this.dispatchEvent(_moveEvent);
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
    // private method
    _getHandJoint(hand, inputjoint) {
      if (hand.joints[inputjoint.jointName] === void 0) {
        const joint = new Group();
        joint.matrixAutoUpdate = false;
        joint.visible = false;
        hand.joints[inputjoint.jointName] = joint;
        hand.add(joint);
      }
      return hand.joints[inputjoint.jointName];
    }
  };
  var Scene = class extends Object3D {
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  };
  var InstancedBufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized, meshPerAttribute = 1) {
      super(array, itemSize, normalized);
      this.isInstancedBufferAttribute = true;
      this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
      super.copy(source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  };
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal = new Vector3(1, 0, 0), constant = 0) {
      this.isPlane = true;
      this.normal = normal;
      this.constant = constant;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a, b, c) {
      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    intersectLine(line, target) {
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return null;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return null;
      }
      return target.copy(line.start).addScaledVector(direction, t);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _sphere$3 = /* @__PURE__ */ new Sphere();
  var _vector$6 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
      this.planes = [p0, p1, p2, p3, p4, p5];
    }
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      if (coordinateSystem === WebGLCoordinateSystem) {
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        planes[5].setComponents(me2, me6, me10, me14).normalize();
      } else {
        throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
      }
      return this;
    }
    intersectsObject(object) {
      if (object.boundingSphere !== void 0) {
        if (object.boundingSphere === null) object.computeBoundingSphere();
        _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
      } else {
        const geometry = object.geometry;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      }
      return this.intersectsSphere(_sphere$3);
    }
    intersectsSprite(sprite) {
      _sphere$3.center.set(0, 0, 0);
      _sphere$3.radius = 0.7071067811865476;
      _sphere$3.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$3);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i = 0; i < 6; i++) {
        const distance = planes[i].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$6) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var LineBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isLineBasicMaterial = true;
      this.type = "LineBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.linewidth = 1;
      this.linecap = "round";
      this.linejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.linewidth = source.linewidth;
      this.linecap = source.linecap;
      this.linejoin = source.linejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var _vStart = /* @__PURE__ */ new Vector3();
  var _vEnd = /* @__PURE__ */ new Vector3();
  var _inverseMatrix$1 = /* @__PURE__ */ new Matrix4();
  var _ray$1 = /* @__PURE__ */ new Ray();
  var _sphere$1 = /* @__PURE__ */ new Sphere();
  var _intersectPointOnRay = /* @__PURE__ */ new Vector3();
  var _intersectPointOnSegment = /* @__PURE__ */ new Vector3();
  var Line = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
      super();
      this.isLine = true;
      this.type = "Line";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    computeLineDistances() {
      const geometry = this.geometry;
      if (geometry.index === null) {
        const positionAttribute = geometry.attributes.position;
        const lineDistances = [0];
        for (let i = 1, l = positionAttribute.count; i < l; i++) {
          _vStart.fromBufferAttribute(positionAttribute, i - 1);
          _vEnd.fromBufferAttribute(positionAttribute, i);
          lineDistances[i] = lineDistances[i - 1];
          lineDistances[i] += _vStart.distanceTo(_vEnd);
        }
        geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
      } else {
        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
      return this;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Line.threshold;
      const drawRange = geometry.drawRange;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$1.copy(geometry.boundingSphere);
      _sphere$1.applyMatrix4(matrixWorld);
      _sphere$1.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
      _inverseMatrix$1.copy(matrixWorld).invert();
      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      const step = this.isLineSegments ? 2 : 1;
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index.count, drawRange.start + drawRange.count);
        for (let i = start, l = end - 1; i < l; i += step) {
          const a = index.getX(i);
          const b = index.getX(i + 1);
          const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, i);
          if (intersect) {
            intersects.push(intersect);
          }
        }
        if (this.isLineLoop) {
          const a = index.getX(end - 1);
          const b = index.getX(start);
          const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, end - 1);
          if (intersect) {
            intersects.push(intersect);
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
        for (let i = start, l = end - 1; i < l; i += step) {
          const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i, i + 1, i);
          if (intersect) {
            intersects.push(intersect);
          }
        }
        if (this.isLineLoop) {
          const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1);
          if (intersect) {
            intersects.push(intersect);
          }
        }
      }
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name2 = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name2] = m;
          }
        }
      }
    }
  };
  function checkIntersection(object, raycaster, ray, thresholdSq, a, b, i) {
    const positionAttribute = object.geometry.attributes.position;
    _vStart.fromBufferAttribute(positionAttribute, a);
    _vEnd.fromBufferAttribute(positionAttribute, b);
    const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);
    if (distSq > thresholdSq) return;
    _intersectPointOnRay.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);
    if (distance < raycaster.near || distance > raycaster.far) return;
    return {
      distance,
      // What do we want? intersection point on the ray or on the segment??
      // point: raycaster.ray.at( distance ),
      point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),
      index: i,
      face: null,
      faceIndex: null,
      barycoord: null,
      object
    };
  }
  var PointsMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isPointsMaterial = true;
      this.type = "PointsMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.alphaMap = null;
      this.size = 1;
      this.sizeAttenuation = true;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.size = source.size;
      this.sizeAttenuation = source.sizeAttenuation;
      this.fog = source.fog;
      return this;
    }
  };
  var _inverseMatrix = /* @__PURE__ */ new Matrix4();
  var _ray = /* @__PURE__ */ new Ray();
  var _sphere = /* @__PURE__ */ new Sphere();
  var _position$2 = /* @__PURE__ */ new Vector3();
  var Points = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
      super();
      this.isPoints = true;
      this.type = "Points";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const matrixWorld = this.matrixWorld;
      const threshold = raycaster.params.Points.threshold;
      const drawRange = geometry.drawRange;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere.copy(geometry.boundingSphere);
      _sphere.applyMatrix4(matrixWorld);
      _sphere.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere) === false) return;
      _inverseMatrix.copy(matrixWorld).invert();
      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      const localThresholdSq = localThreshold * localThreshold;
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index.count, drawRange.start + drawRange.count);
        for (let i = start, il = end; i < il; i++) {
          const a = index.getX(i);
          _position$2.fromBufferAttribute(positionAttribute, a);
          testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
        for (let i = start, l = end; i < l; i++) {
          _position$2.fromBufferAttribute(positionAttribute, i);
          testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);
        }
      }
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name2 = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name2] = m;
          }
        }
      }
    }
  };
  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    const rayPointDistanceSq = _ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray.closestPointToPoint(point, intersectPoint);
      intersectPoint.applyMatrix4(matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far) return;
      intersects.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index,
        face: null,
        faceIndex: null,
        barycoord: null,
        object
      });
    }
  }
  var DepthTexture = class extends Texture {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat) {
      if (format !== DepthFormat && format !== DepthStencilFormat) {
        throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      }
      if (type === void 0 && format === DepthFormat) type = UnsignedIntType;
      if (type === void 0 && format === DepthStencilFormat) type = UnsignedInt248Type;
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.isDepthTexture = true;
      this.image = { width, height };
      this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
      this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
      this.flipY = false;
      this.generateMipmaps = false;
      this.compareFunction = null;
    }
    copy(source) {
      super.copy(source);
      this.compareFunction = source.compareFunction;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
      return data;
    }
  };
  var CircleGeometry = class _CircleGeometry extends BufferGeometry {
    constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
      super();
      this.type = "CircleGeometry";
      this.parameters = {
        radius,
        segments,
        thetaStart,
        thetaLength
      };
      segments = Math.max(3, segments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      const vertex2 = new Vector3();
      const uv = new Vector2();
      vertices.push(0, 0, 0);
      normals.push(0, 0, 1);
      uvs.push(0.5, 0.5);
      for (let s = 0, i = 3; s <= segments; s++, i += 3) {
        const segment = thetaStart + s / segments * thetaLength;
        vertex2.x = radius * Math.cos(segment);
        vertex2.y = radius * Math.sin(segment);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, 0, 1);
        uv.x = (vertices[i] / radius + 1) / 2;
        uv.y = (vertices[i + 1] / radius + 1) / 2;
        uvs.push(uv.x, uv.y);
      }
      for (let i = 1; i <= segments; i++) {
        indices.push(i, i + 1, 0);
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
    }
  };
  var CylinderGeometry = class _CylinderGeometry extends BufferGeometry {
    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
      super();
      this.type = "CylinderGeometry";
      this.parameters = {
        radiusTop,
        radiusBottom,
        height,
        radialSegments,
        heightSegments,
        openEnded,
        thetaStart,
        thetaLength
      };
      const scope = this;
      radialSegments = Math.floor(radialSegments);
      heightSegments = Math.floor(heightSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let index = 0;
      const indexArray = [];
      const halfHeight = height / 2;
      let groupStart = 0;
      generateTorso();
      if (openEnded === false) {
        if (radiusTop > 0) generateCap(true);
        if (radiusBottom > 0) generateCap(false);
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function generateTorso() {
        const normal = new Vector3();
        const vertex2 = new Vector3();
        let groupCount = 0;
        const slope = (radiusBottom - radiusTop) / height;
        for (let y = 0; y <= heightSegments; y++) {
          const indexRow = [];
          const v = y / heightSegments;
          const radius = v * (radiusBottom - radiusTop) + radiusTop;
          for (let x = 0; x <= radialSegments; x++) {
            const u = x / radialSegments;
            const theta = u * thetaLength + thetaStart;
            const sinTheta = Math.sin(theta);
            const cosTheta = Math.cos(theta);
            vertex2.x = radius * sinTheta;
            vertex2.y = -v * height + halfHeight;
            vertex2.z = radius * cosTheta;
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normal.set(sinTheta, slope, cosTheta).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(u, 1 - v);
            indexRow.push(index++);
          }
          indexArray.push(indexRow);
        }
        for (let x = 0; x < radialSegments; x++) {
          for (let y = 0; y < heightSegments; y++) {
            const a = indexArray[y][x];
            const b = indexArray[y + 1][x];
            const c = indexArray[y + 1][x + 1];
            const d = indexArray[y][x + 1];
            if (radiusTop > 0 || y !== 0) {
              indices.push(a, b, d);
              groupCount += 3;
            }
            if (radiusBottom > 0 || y !== heightSegments - 1) {
              indices.push(b, c, d);
              groupCount += 3;
            }
          }
        }
        scope.addGroup(groupStart, groupCount, 0);
        groupStart += groupCount;
      }
      function generateCap(top) {
        const centerIndexStart = index;
        const uv = new Vector2();
        const vertex2 = new Vector3();
        let groupCount = 0;
        const radius = top === true ? radiusTop : radiusBottom;
        const sign = top === true ? 1 : -1;
        for (let x = 1; x <= radialSegments; x++) {
          vertices.push(0, halfHeight * sign, 0);
          normals.push(0, sign, 0);
          uvs.push(0.5, 0.5);
          index++;
        }
        const centerIndexEnd = index;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * thetaLength + thetaStart;
          const cosTheta = Math.cos(theta);
          const sinTheta = Math.sin(theta);
          vertex2.x = radius * sinTheta;
          vertex2.y = halfHeight * sign;
          vertex2.z = radius * cosTheta;
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normals.push(0, sign, 0);
          uv.x = cosTheta * 0.5 + 0.5;
          uv.y = sinTheta * 0.5 * sign + 0.5;
          uvs.push(uv.x, uv.y);
          index++;
        }
        for (let x = 0; x < radialSegments; x++) {
          const c = centerIndexStart + x;
          const i = centerIndexEnd + x;
          if (top === true) {
            indices.push(i, i + 1, c);
          } else {
            indices.push(i + 1, i, c);
          }
          groupCount += 3;
        }
        scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
        groupStart += groupCount;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
  };
  var PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  };
  var SphereGeometry = class _SphereGeometry extends BufferGeometry {
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
      super();
      this.type = "SphereGeometry";
      this.parameters = {
        radius,
        widthSegments,
        heightSegments,
        phiStart,
        phiLength,
        thetaStart,
        thetaLength
      };
      widthSegments = Math.max(3, Math.floor(widthSegments));
      heightSegments = Math.max(2, Math.floor(heightSegments));
      const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
      let index = 0;
      const grid = [];
      const vertex2 = new Vector3();
      const normal = new Vector3();
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy <= heightSegments; iy++) {
        const verticesRow = [];
        const v = iy / heightSegments;
        let uOffset = 0;
        if (iy === 0 && thetaStart === 0) {
          uOffset = 0.5 / widthSegments;
        } else if (iy === heightSegments && thetaEnd === Math.PI) {
          uOffset = -0.5 / widthSegments;
        }
        for (let ix = 0; ix <= widthSegments; ix++) {
          const u = ix / widthSegments;
          vertex2.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
          vertex2.y = radius * Math.cos(thetaStart + v * thetaLength);
          vertex2.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal.copy(vertex2).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u + uOffset, 1 - v);
          verticesRow.push(index++);
        }
        grid.push(verticesRow);
      }
      for (let iy = 0; iy < heightSegments; iy++) {
        for (let ix = 0; ix < widthSegments; ix++) {
          const a = grid[iy][ix + 1];
          const b = grid[iy][ix];
          const c = grid[iy + 1][ix];
          const d = grid[iy + 1][ix + 1];
          if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
          if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
  };
  var MeshLambertMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshLambertMaterial = true;
      this.type = "MeshLambertMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      this.fog = source.fog;
      return this;
    }
  };
  var MeshDepthMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDepthMaterial = true;
      this.type = "MeshDepthMaterial";
      this.depthPacking = BasicDepthPacking;
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.depthPacking = source.depthPacking;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      return this;
    }
  };
  var MeshDistanceMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDistanceMaterial = true;
      this.type = "MeshDistanceMaterial";
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      return this;
    }
  };
  function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type) return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  }
  function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  }
  var Interpolant = class {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      this.parameterPositions = parameterPositions;
      this._cachedIndex = 0;
      this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
      this.sampleValues = sampleValues;
      this.valueSize = sampleSize;
      this.settings = null;
      this.DefaultSettings_ = {};
    }
    evaluate(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan: if (!(t < t1)) {
              for (let giveUpAt = i1 + 2; ; ) {
                if (t1 === void 0) {
                  if (t < t0) break forward_scan;
                  i1 = pp.length;
                  this._cachedIndex = i1;
                  return this.copySampleValue_(i1 - 1);
                }
                if (i1 === giveUpAt) break;
                t0 = t1;
                t1 = pp[++i1];
                if (t < t1) {
                  break seek;
                }
              }
              right = pp.length;
              break linear_scan;
            }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.copySampleValue_(0);
                }
                if (i1 === giveUpAt) break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.copySampleValue_(0);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.copySampleValue_(i1 - 1);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    }
    // Template methods for derived classes:
    interpolate_() {
      throw new Error("call to abstract method");
    }
    intervalChanged_() {
    }
  };
  var CubicInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      this._weightPrev = -0;
      this._offsetPrev = -0;
      this._weightNext = -0;
      this._offsetNext = -0;
      this.DefaultSettings_ = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
    }
    intervalChanged_(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  };
  var LinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  };
  var DiscreteInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  };
  var KeyframeTrack = class {
    constructor(name2, times, values, interpolation) {
      if (name2 === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name2);
      this.name = name2;
      this.times = convertArray(times, this.TimeBufferType);
      this.values = convertArray(values, this.ValueBufferType);
      this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        json = {
          "name": track.name,
          "times": convertArray(track.times, Array),
          "values": convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    }
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
    getValueSize() {
      return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = times.slice(from, to);
        this.values = this.values.slice(from * stride, to * stride);
      }
      return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value2 = values[i];
            if (isNaN(value2)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value2);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
      const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== times[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value2 = values[offset + j];
              if (value2 !== values[offsetP + j] || value2 !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = times.slice(0, writeIndex);
        this.values = values.slice(0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    }
    clone() {
      const times = this.times.slice();
      const values = this.values.slice();
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  };
  KeyframeTrack.prototype.TimeBufferType = Float32Array;
  KeyframeTrack.prototype.ValueBufferType = Float32Array;
  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  var BooleanKeyframeTrack = class extends KeyframeTrack {
    // No interpolation parameter because only InterpolateDiscrete is valid.
    constructor(name2, times, values) {
      super(name2, times, values);
    }
  };
  BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
  BooleanKeyframeTrack.prototype.ValueBufferType = Array;
  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ColorKeyframeTrack = class extends KeyframeTrack {
  };
  ColorKeyframeTrack.prototype.ValueTypeName = "color";
  var NumberKeyframeTrack = class extends KeyframeTrack {
  };
  NumberKeyframeTrack.prototype.ValueTypeName = "number";
  var QuaternionLinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  };
  var QuaternionKeyframeTrack = class extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  };
  QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var StringKeyframeTrack = class extends KeyframeTrack {
    // No interpolation parameter because only InterpolateDiscrete is valid.
    constructor(name2, times, values) {
      super(name2, times, values);
    }
  };
  StringKeyframeTrack.prototype.ValueTypeName = "string";
  StringKeyframeTrack.prototype.ValueBufferType = Array;
  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var VectorKeyframeTrack = class extends KeyframeTrack {
  };
  VectorKeyframeTrack.prototype.ValueTypeName = "vector";
  var Cache = {
    enabled: false,
    files: {},
    add: function(key, file) {
      if (this.enabled === false) return;
      this.files[key] = file;
    },
    get: function(key) {
      if (this.enabled === false) return;
      return this.files[key];
    },
    remove: function(key) {
      delete this.files[key];
    },
    clear: function() {
      this.files = {};
    }
  };
  var LoadingManager = class {
    constructor(onLoad, onProgress, onError) {
      const scope = this;
      let isLoading = false;
      let itemsLoaded = 0;
      let itemsTotal = 0;
      let urlModifier = void 0;
      const handlers = [];
      this.onStart = void 0;
      this.onLoad = onLoad;
      this.onProgress = onProgress;
      this.onError = onError;
      this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
          if (scope.onStart !== void 0) {
            scope.onStart(url, itemsLoaded, itemsTotal);
          }
        }
        isLoading = true;
      };
      this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== void 0) {
          scope.onProgress(url, itemsLoaded, itemsTotal);
        }
        if (itemsLoaded === itemsTotal) {
          isLoading = false;
          if (scope.onLoad !== void 0) {
            scope.onLoad();
          }
        }
      };
      this.itemError = function(url) {
        if (scope.onError !== void 0) {
          scope.onError(url);
        }
      };
      this.resolveURL = function(url) {
        if (urlModifier) {
          return urlModifier(url);
        }
        return url;
      };
      this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
      };
      this.addHandler = function(regex, loader) {
        handlers.push(regex, loader);
        return this;
      };
      this.removeHandler = function(regex) {
        const index = handlers.indexOf(regex);
        if (index !== -1) {
          handlers.splice(index, 2);
        }
        return this;
      };
      this.getHandler = function(file) {
        for (let i = 0, l = handlers.length; i < l; i += 2) {
          const regex = handlers[i];
          const loader = handlers[i + 1];
          if (regex.global) regex.lastIndex = 0;
          if (regex.test(file)) {
            return loader;
          }
        }
        return null;
      };
    }
  };
  var DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
  var Loader = class {
    constructor(manager) {
      this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
      this.crossOrigin = "anonymous";
      this.withCredentials = false;
      this.path = "";
      this.resourcePath = "";
      this.requestHeader = {};
    }
    load() {
    }
    loadAsync(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
    setWithCredentials(value2) {
      this.withCredentials = value2;
      return this;
    }
    setPath(path) {
      this.path = path;
      return this;
    }
    setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
    setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  };
  Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  var ImageLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      if (this.path !== void 0) url = this.path + url;
      url = this.manager.resolveURL(url);
      const scope = this;
      const cached = Cache.get(url);
      if (cached !== void 0) {
        scope.manager.itemStart(url);
        setTimeout(function() {
          if (onLoad) onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }
      const image = createElementNS("img");
      function onImageLoad() {
        removeEventListeners();
        Cache.add(url, this);
        if (onLoad) onLoad(this);
        scope.manager.itemEnd(url);
      }
      function onImageError(event) {
        removeEventListeners();
        if (onError) onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }
      function removeEventListeners() {
        image.removeEventListener("load", onImageLoad, false);
        image.removeEventListener("error", onImageError, false);
      }
      image.addEventListener("load", onImageLoad, false);
      image.addEventListener("error", onImageError, false);
      if (url.slice(0, 5) !== "data:") {
        if (this.crossOrigin !== void 0) image.crossOrigin = this.crossOrigin;
      }
      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  };
  var TextureLoader = class extends Loader {
    constructor(manager) {
      super(manager);
    }
    load(url, onLoad, onProgress, onError) {
      const texture = new Texture();
      const loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function(image) {
        texture.image = image;
        texture.needsUpdate = true;
        if (onLoad !== void 0) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  };
  var Light = class extends Object3D {
    constructor(color, intensity = 1) {
      super();
      this.isLight = true;
      this.type = "Light";
      this.color = new Color(color);
      this.intensity = intensity;
    }
    dispose() {
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== void 0) data.object.distance = this.distance;
      if (this.angle !== void 0) data.object.angle = this.angle;
      if (this.decay !== void 0) data.object.decay = this.decay;
      if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
      if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
      if (this.target !== void 0) data.object.target = this.target.uuid;
      return data;
    }
  };
  var _projScreenMatrix$1 = /* @__PURE__ */ new Matrix4();
  var _lightPositionWorld$1 = /* @__PURE__ */ new Vector3();
  var _lookTarget$1 = /* @__PURE__ */ new Vector3();
  var LightShadow = class {
    constructor(camera) {
      this.camera = camera;
      this.intensity = 1;
      this.bias = 0;
      this.normalBias = 0;
      this.radius = 1;
      this.blurSamples = 8;
      this.mapSize = new Vector2(512, 512);
      this.map = null;
      this.mapPass = null;
      this.matrix = new Matrix4();
      this.autoUpdate = true;
      this.needsUpdate = false;
      this._frustum = new Frustum();
      this._frameExtents = new Vector2(1, 1);
      this._viewportCount = 1;
      this._viewports = [
        new Vector4(0, 0, 1, 1)
      ];
    }
    getViewportCount() {
      return this._viewportCount;
    }
    getFrustum() {
      return this._frustum;
    }
    updateMatrices(light) {
      const shadowCamera = this.camera;
      const shadowMatrix = this.matrix;
      _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
      shadowCamera.position.copy(_lightPositionWorld$1);
      _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
      shadowCamera.lookAt(_lookTarget$1);
      shadowCamera.updateMatrixWorld();
      _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
      shadowMatrix.set(
        0.5,
        0,
        0,
        0.5,
        0,
        0.5,
        0,
        0.5,
        0,
        0,
        0.5,
        0.5,
        0,
        0,
        0,
        1
      );
      shadowMatrix.multiply(_projScreenMatrix$1);
    }
    getViewport(viewportIndex) {
      return this._viewports[viewportIndex];
    }
    getFrameExtents() {
      return this._frameExtents;
    }
    dispose() {
      if (this.map) {
        this.map.dispose();
      }
      if (this.mapPass) {
        this.mapPass.dispose();
      }
    }
    copy(source) {
      this.camera = source.camera.clone();
      this.intensity = source.intensity;
      this.bias = source.bias;
      this.radius = source.radius;
      this.mapSize.copy(source.mapSize);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    toJSON() {
      const object = {};
      if (this.intensity !== 1) object.intensity = this.intensity;
      if (this.bias !== 0) object.bias = this.bias;
      if (this.normalBias !== 0) object.normalBias = this.normalBias;
      if (this.radius !== 1) object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  };
  var OrthographicCamera = class extends Camera {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
      super();
      this.isOrthographicCamera = true;
      this.type = "OrthographicCamera";
      this.zoom = 1;
      this.view = null;
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      return data;
    }
  };
  var DirectionalLightShadow = class extends LightShadow {
    constructor() {
      super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
      this.isDirectionalLightShadow = true;
    }
  };
  var DirectionalLight = class extends Light {
    constructor(color, intensity) {
      super(color, intensity);
      this.isDirectionalLight = true;
      this.type = "DirectionalLight";
      this.position.copy(Object3D.DEFAULT_UP);
      this.updateMatrix();
      this.target = new Object3D();
      this.shadow = new DirectionalLightShadow();
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source) {
      super.copy(source);
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  var AmbientLight = class extends Light {
    constructor(color, intensity) {
      super(color, intensity);
      this.isAmbientLight = true;
      this.type = "AmbientLight";
    }
  };
  var InstancedBufferGeometry = class extends BufferGeometry {
    constructor() {
      super();
      this.isInstancedBufferGeometry = true;
      this.type = "InstancedBufferGeometry";
      this.instanceCount = Infinity;
    }
    copy(source) {
      super.copy(source);
      this.instanceCount = source.instanceCount;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.instanceCount = this.instanceCount;
      data.isInstancedBufferGeometry = true;
      return data;
    }
  };
  var ArrayCamera = class extends PerspectiveCamera {
    constructor(array = []) {
      super();
      this.isArrayCamera = true;
      this.cameras = array;
      this.index = 0;
    }
  };
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp(
    "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
  );
  var _supportedObjectNames = ["material", "materials", "bones", "map"];
  var Composite = class {
    constructor(targetGroup, path, optionalParsedPath) {
      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
      this._targetGroup = targetGroup;
      this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0) binding.getValue(array, offset);
    }
    setValue(array, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array, offset);
      }
    }
    bind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    }
    unbind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  };
  var PropertyBinding = class _PropertyBinding {
    constructor(rootNode, path, parsedPath) {
      this.path = path;
      this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
      this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
      this.rootNode = rootNode;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new _PropertyBinding(root, path, parsedPath);
      } else {
        return new _PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    /**
     * Replaces spaces with underscores and removes unsupported characters from
     * node names, to ensure compatibility with parseTrackName().
     *
     * @param {string} name Node name to be sanitized.
     * @return {string}
     */
    static sanitizeNodeName(name2) {
      return name2.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    static parseTrackName(trackName) {
      const matches = _trackRe.exec(trackName);
      if (matches === null) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    }
    static findNode(root, nodeName) {
      if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result) return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer, offset) {
      buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i = 0, n = source.length; i !== n; ++i) {
        buffer[offset++] = source[i];
      }
    }
    _getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          case "map":
            if ("map" in targetObject) {
              targetObject = targetObject.map;
              break;
            }
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.map) {
              console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              return;
            }
            targetObject = targetObject.material.map;
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.isMaterial === true) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.isObject3D === true) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  };
  PropertyBinding.Composite = Composite;
  PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
  ];
  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
      // Direct
      PropertyBinding.prototype._setValue_direct,
      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      // EntireArray
      PropertyBinding.prototype._setValue_array,
      PropertyBinding.prototype._setValue_array_setNeedsUpdate,
      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      // ArrayElement
      PropertyBinding.prototype._setValue_arrayElement,
      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      // HasToFromArray
      PropertyBinding.prototype._setValue_fromArray,
      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  var _controlInterpolantsResultBuffer = new Float32Array(1);
  var Spherical = class {
    constructor(radius = 1, phi = 0, theta = 0) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
    copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this;
    }
    // restrict phi to be between EPS and PI-EPS
    makeSafe() {
      const EPS = 1e-6;
      this.phi = clamp(this.phi, EPS, Math.PI - EPS);
      return this;
    }
    setFromVector3(v) {
      return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
      this.radius = Math.sqrt(x * x + y * y + z * z);
      if (this.radius === 0) {
        this.theta = 0;
        this.phi = 0;
      } else {
        this.theta = Math.atan2(x, z);
        this.phi = Math.acos(clamp(y / this.radius, -1, 1));
      }
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Controls = class extends EventDispatcher {
    constructor(object, domElement = null) {
      super();
      this.object = object;
      this.domElement = domElement;
      this.enabled = true;
      this.state = -1;
      this.keys = {};
      this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };
      this.touches = { ONE: null, TWO: null };
    }
    connect() {
    }
    disconnect() {
    }
    dispose() {
    }
    update() {
    }
  };
  function getByteLength(width, height, format, type) {
    const typeByteLength = getTextureTypeByteLength(type);
    switch (format) {
      // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
      case AlphaFormat:
        return width * height;
      case LuminanceFormat:
        return width * height;
      case LuminanceAlphaFormat:
        return width * height * 2;
      case RedFormat:
        return width * height / typeByteLength.components * typeByteLength.byteLength;
      case RedIntegerFormat:
        return width * height / typeByteLength.components * typeByteLength.byteLength;
      case RGFormat:
        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
      case RGIntegerFormat:
        return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
      case RGBFormat:
        return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;
      case RGBAFormat:
        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
      case RGBAIntegerFormat:
        return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
      case RGB_S3TC_DXT1_Format:
      case RGBA_S3TC_DXT1_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
      case RGBA_S3TC_DXT3_Format:
      case RGBA_S3TC_DXT5_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
      case RGB_PVRTC_2BPPV1_Format:
      case RGBA_PVRTC_2BPPV1_Format:
        return Math.max(width, 16) * Math.max(height, 8) / 4;
      case RGB_PVRTC_4BPPV1_Format:
      case RGBA_PVRTC_4BPPV1_Format:
        return Math.max(width, 8) * Math.max(height, 8) / 2;
      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
      case RGB_ETC1_Format:
      case RGB_ETC2_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
      case RGBA_ETC2_EAC_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
      case RGBA_ASTC_4x4_Format:
        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
      case RGBA_ASTC_5x4_Format:
        return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;
      case RGBA_ASTC_5x5_Format:
        return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_6x5_Format:
        return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_6x6_Format:
        return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_8x5_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_8x6_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_8x8_Format:
        return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;
      case RGBA_ASTC_10x5_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;
      case RGBA_ASTC_10x6_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;
      case RGBA_ASTC_10x8_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;
      case RGBA_ASTC_10x10_Format:
        return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;
      case RGBA_ASTC_12x10_Format:
        return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;
      case RGBA_ASTC_12x12_Format:
        return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;
      // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
      case RGBA_BPTC_Format:
      case RGB_BPTC_SIGNED_Format:
      case RGB_BPTC_UNSIGNED_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
      // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
      case RED_RGTC1_Format:
      case SIGNED_RED_RGTC1_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;
      case RED_GREEN_RGTC2_Format:
      case SIGNED_RED_GREEN_RGTC2_Format:
        return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
    }
    throw new Error(
      `Unable to determine texture byte length for ${format} format.`
    );
  }
  function getTextureTypeByteLength(type) {
    switch (type) {
      case UnsignedByteType:
      case ByteType:
        return { byteLength: 1, components: 1 };
      case UnsignedShortType:
      case ShortType:
      case HalfFloatType:
        return { byteLength: 2, components: 1 };
      case UnsignedShort4444Type:
      case UnsignedShort5551Type:
        return { byteLength: 2, components: 4 };
      case UnsignedIntType:
      case IntType:
      case FloatType:
        return { byteLength: 4, components: 1 };
      case UnsignedInt5999Type:
        return { byteLength: 4, components: 3 };
    }
    throw new Error(`Unknown texture type ${type}.`);
  }
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }

  // node_modules/three/build/three.module.js
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true) return;
        if (animationLoop === null) return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value2) {
        context = value2;
      }
    };
  }
  function WebGLAttributes(gl) {
    const buffers = /* @__PURE__ */ new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const size = array.byteLength;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type;
      if (array instanceof Float32Array) {
        type = gl.FLOAT;
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          type = gl.HALF_FLOAT;
        } else {
          type = gl.UNSIGNED_SHORT;
        }
      } else if (array instanceof Int16Array) {
        type = gl.SHORT;
      } else if (array instanceof Uint32Array) {
        type = gl.UNSIGNED_INT;
      } else if (array instanceof Int32Array) {
        type = gl.INT;
      } else if (array instanceof Int8Array) {
        type = gl.BYTE;
      } else if (array instanceof Uint8Array) {
        type = gl.UNSIGNED_BYTE;
      } else if (array instanceof Uint8ClampedArray) {
        type = gl.UNSIGNED_BYTE;
      } else {
        throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version,
        size
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRanges = attribute.updateRanges;
      gl.bindBuffer(bufferType, buffer);
      if (updateRanges.length === 0) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        updateRanges.sort((a, b) => a.start - b.start);
        let mergeIndex = 0;
        for (let i = 1; i < updateRanges.length; i++) {
          const previousRange = updateRanges[mergeIndex];
          const range = updateRanges[i];
          if (range.start <= previousRange.start + previousRange.count + 1) {
            previousRange.count = Math.max(
              previousRange.count,
              range.start + range.count - previousRange.start
            );
          } else {
            ++mergeIndex;
            updateRanges[mergeIndex] = range;
          }
        }
        updateRanges.length = mergeIndex + 1;
        for (let i = 0, l = updateRanges.length; i < l; i++) {
          const range = updateRanges[i];
          gl.bufferSubData(
            bufferType,
            range.start * array.BYTES_PER_ELEMENT,
            array,
            range.start,
            range.count
          );
        }
        attribute.clearUpdateRanges();
      }
      attribute.onUploadCallback();
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update(attribute, bufferType) {
      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        if (data.size !== attribute.array.byteLength) {
          throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
        }
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update
    };
  }
  var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
  var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
  var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
  var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n		emissiveColor = sRGBTransferEOTF( emissiveColor );\n	#endif\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
  var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
  var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
  var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
  var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
  var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
  var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
  var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		#else\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
  var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
  var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
  var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
  var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var ShaderChunk = {
    alphahash_fragment,
    alphahash_pars_fragment,
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    alphatest_pars_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    batching_pars_vertex,
    batching_vertex,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    iridescence_fragment,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    colorspace_fragment,
    colorspace_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_pars_fragment,
    lights_lambert_fragment,
    lights_lambert_pars_fragment,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphinstance_vertex,
    morphcolor_vertex,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normal_pars_fragment,
    normal_pars_vertex,
    normal_vertex,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    iridescence_pars_fragment,
    opaque_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmission_fragment,
    transmission_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    worldpos_vertex,
    background_vert: vertex$h,
    background_frag: fragment$h,
    backgroundCube_vert: vertex$g,
    backgroundCube_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
  };
  var UniformsLib = {
    common: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    },
    specularmap: {
      specularMap: { value: null },
      specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    envmap: {
      envMap: { value: null },
      envMapRotation: { value: /* @__PURE__ */ new Matrix3() },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      // basic, lambert, phong
      ior: { value: 1.5 },
      // physical
      refractionRatio: { value: 0.98 }
      // basic, lambert, phong
    },
    aomap: {
      aoMap: { value: null },
      aoMapIntensity: { value: 1 },
      aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    lightmap: {
      lightMap: { value: null },
      lightMapIntensity: { value: 1 },
      lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    bumpmap: {
      bumpMap: { value: null },
      bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      bumpScale: { value: 1 }
    },
    normalmap: {
      normalMap: { value: null },
      normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 }
    },
    emissivemap: {
      emissiveMap: { value: null },
      emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    metalnessmap: {
      metalnessMap: { value: null },
      metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    roughnessmap: {
      roughnessMap: { value: null },
      roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    gradientmap: {
      gradientMap: { value: null }
    },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: /* @__PURE__ */ new Color(16777215) }
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: {
        direction: {},
        color: {}
      } },
      directionalLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: { value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      } },
      spotLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      spotLightMap: { value: [] },
      spotShadowMap: { value: [] },
      spotLightMatrix: { value: [] },
      pointLights: { value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      } },
      pointLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      } },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      } },
      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
      rectAreaLights: { value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      } },
      ltc_1: { value: null },
      ltc_2: { value: null }
    },
    points: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 },
      uvTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    sprite: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          specular: { value: /* @__PURE__ */ new Color(1118481) },
          shininess: { value: 30 }
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: { value: null }
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: { value: 1 },
          dashSize: { value: 1 },
          totalSize: { value: 2 }
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshnormal_vert,
      fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: { value: /* @__PURE__ */ new Matrix3() },
        t2D: { value: null },
        backgroundIntensity: { value: 1 }
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    backgroundCube: {
      uniforms: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        backgroundBlurriness: { value: 0 },
        backgroundIntensity: { value: 1 },
        backgroundRotation: { value: /* @__PURE__ */ new Matrix3() }
      },
      vertexShader: ShaderChunk.backgroundCube_vert,
      fragmentShader: ShaderChunk.backgroundCube_frag
    },
    cube: {
      uniforms: {
        tCube: { value: null },
        tFlip: { value: -1 },
        opacity: { value: 1 }
      },
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: { value: /* @__PURE__ */ new Vector3() },
          nearDistance: { value: 1 },
          farDistance: { value: 1e3 }
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: { value: /* @__PURE__ */ new Color(0) },
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: /* @__PURE__ */ mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalMap: { value: null },
        clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        dispersion: { value: 0 },
        iridescence: { value: 0 },
        iridescenceMap: { value: null },
        iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        iridescenceIOR: { value: 1.3 },
        iridescenceThicknessMinimum: { value: 100 },
        iridescenceThicknessMaximum: { value: 400 },
        iridescenceThicknessMap: { value: null },
        iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheen: { value: 0 },
        sheenColor: { value: /* @__PURE__ */ new Color(0) },
        sheenColorMap: { value: null },
        sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: /* @__PURE__ */ new Color(0) },
        specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
        specularColorMap: { value: null },
        specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
        anisotropyMap: { value: null },
        anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  var _rgb = { r: 0, b: 0, g: 0 };
  var _e1$1 = /* @__PURE__ */ new Euler();
  var _m1$12 = /* @__PURE__ */ new Matrix4();
  function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function getBackground(scene) {
      let background = scene.isScene === true ? scene.background : null;
      if (background && background.isTexture) {
        const usePMREM = scene.backgroundBlurriness > 0;
        background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
      }
      return background;
    }
    function render(scene) {
      let forceClear = false;
      const background = getBackground(scene);
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();
      if (environmentBlendMode === "additive") {
        state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
      } else if (environmentBlendMode === "alpha-blend") {
        state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
      }
      if (renderer.autoClear || forceClear) {
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
      }
    }
    function addToRenderList(renderList, scene) {
      const background = getBackground(scene);
      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(
            new BoxGeometry(1, 1, 1),
            new ShaderMaterial({
              name: "BackgroundCubeMaterial",
              uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
              vertexShader: ShaderLib.backgroundCube.vertexShader,
              fragmentShader: ShaderLib.backgroundCube.fragmentShader,
              side: BackSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer2, scene2, camera) {
            this.matrixWorld.copyPosition(camera.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        _e1$1.copy(scene.backgroundRotation);
        _e1$1.x *= -1;
        _e1$1.y *= -1;
        _e1$1.z *= -1;
        if (background.isCubeTexture && background.isRenderTargetTexture === false) {
          _e1$1.y *= -1;
          _e1$1.z *= -1;
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
        boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
        boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$12.makeRotationFromEuler(_e1$1));
        boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        boxMesh.layers.enableAll();
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(
            new PlaneGeometry(2, 2),
            new ShaderMaterial({
              name: "BackgroundMaterial",
              uniforms: cloneUniforms(ShaderLib.background.uniforms),
              vertexShader: ShaderLib.background.vertexShader,
              fragmentShader: ShaderLib.background.fragmentShader,
              side: FrontSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        planeMesh.layers.enableAll();
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha2) {
      color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
      state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
    }
    function dispose() {
      if (boxMesh !== void 0) {
        boxMesh.geometry.dispose();
        boxMesh.material.dispose();
        boxMesh = void 0;
      }
      if (planeMesh !== void 0) {
        planeMesh.geometry.dispose();
        planeMesh.material.dispose();
        planeMesh = void 0;
      }
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha2 = 1) {
        clearColor.set(color);
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha2) {
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      render,
      addToRenderList,
      dispose
    };
  }
  function WebGLBindingStates(gl, attributes) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      const state = getBindingState(geometry, program, material);
      if (currentState !== state) {
        currentState = state;
        bindVertexArrayObject(currentState.object);
      }
      updateBuffers = needsUpdate(object, geometry, program, index);
      if (updateBuffers) saveCache(object, geometry, program, index);
      if (index !== null) {
        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
      }
      if (updateBuffers || forceUpdate) {
        forceUpdate = false;
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      return gl.createVertexArray();
    }
    function bindVertexArrayObject(vao) {
      return gl.bindVertexArray(vao);
    }
    function deleteVertexArrayObject(vao) {
      return gl.deleteVertexArray(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        // for backward compatibility on non-VAO support browser
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(object, geometry, program, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name2 in programAttributes) {
        const programAttribute = programAttributes[name2];
        if (programAttribute.location >= 0) {
          const cachedAttribute = cachedAttributes[name2];
          let geometryAttribute = geometryAttributes[name2];
          if (geometryAttribute === void 0) {
            if (name2 === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
            if (name2 === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
          }
          if (cachedAttribute === void 0) return true;
          if (cachedAttribute.attribute !== geometryAttribute) return true;
          if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
          attributesNum++;
        }
      }
      if (currentState.attributesNum !== attributesNum) return true;
      if (currentState.index !== index) return true;
      return false;
    }
    function saveCache(object, geometry, program, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name2 in programAttributes) {
        const programAttribute = programAttributes[name2];
        if (programAttribute.location >= 0) {
          let attribute = attributes2[name2];
          if (attribute === void 0) {
            if (name2 === "instanceMatrix" && object.instanceMatrix) attribute = object.instanceMatrix;
            if (name2 === "instanceColor" && object.instanceColor) attribute = object.instanceColor;
          }
          const data = {};
          data.attribute = attribute;
          if (attribute && attribute.data) {
            data.data = attribute.data;
          }
          cache[name2] = data;
          attributesNum++;
        }
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        gl.vertexAttribDivisor(attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
      if (integer === true) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name2 in programAttributes) {
        const programAttribute = programAttributes[name2];
        if (programAttribute.location >= 0) {
          let geometryAttribute = geometryAttributes[name2];
          if (geometryAttribute === void 0) {
            if (name2 === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
            if (name2 === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
          }
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0) continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            const integer = type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType;
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data.isInstancedInterleavedBuffer) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  stride * bytesPerElement,
                  (offset + size / programAttribute.locationSize * i) * bytesPerElement,
                  integer
                );
              }
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  size * bytesPerElement,
                  size / programAttribute.locationSize * i * bytesPerElement,
                  integer
                );
              }
            }
          } else if (materialDefaultAttributeValues !== void 0) {
            const value2 = materialDefaultAttributeValues[name2];
            if (value2 !== void 0) {
              switch (value2.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute.location, value2);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute.location, value2);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute.location, value2);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute.location, value2);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0) return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0) continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      forceUpdate = true;
      if (currentState === defaultState) return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info) {
    let mode;
    function setMode(value2) {
      mode = value2;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0) return;
      gl.drawArraysInstanced(mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    function renderMultiDraw(starts, counts, drawCount) {
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      info.update(elementCount, mode, 1);
    }
    function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < starts.length; i++) {
          renderInstances(starts[i], counts[i], primcount[i]);
        }
      } else {
        extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i] * primcount[i];
        }
        info.update(elementCount, mode, 1);
      }
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
    this.renderMultiDraw = renderMultiDraw;
    this.renderMultiDrawInstances = renderMultiDrawInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters, utils) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0) return maxAnisotropy;
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function textureFormatReadable(textureFormat) {
      if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
        return false;
      }
      return true;
    }
    function textureTypeReadable(textureType) {
      const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float"));
      if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
      textureType !== FloatType && !halfFloatSupportedByExt) {
        return false;
      }
      return true;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has("EXT_clip_control");
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const maxSamples = gl.getParameter(gl.MAX_SAMPLES);
    return {
      isWebGL2: true,
      // keeping this for backwards compatibility
      getMaxAnisotropy,
      getMaxPrecision,
      textureFormatReadable,
      textureTypeReadable,
      precision,
      logarithmicDepthBuffer,
      reverseDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
      const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
      // run another frame in order to reset the state:
      numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
      globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer) {
    let cubemaps = /* @__PURE__ */ new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const renderTarget = new WebGLCubeRenderTarget(image.height);
              renderTarget.fromEquirectangularTexture(renderer, texture);
              cubemaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var LOD_MIN = 4;
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var MAX_SAMPLES = 20;
  var _flatCamera = /* @__PURE__ */ new OrthographicCamera();
  var _clearColor = /* @__PURE__ */ new Color();
  var _oldTarget = null;
  var _oldActiveCubeFace = 0;
  var _oldActiveMipmapLevel = 0;
  var _oldXrEnabled = false;
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, 1)
  ];
  var PMREMGenerator = class {
    constructor(renderer) {
      this._renderer = renderer;
      this._pingPongRenderTarget = null;
      this._lodMax = 0;
      this._cubeSize = 0;
      this._lodPlanes = [];
      this._sizeLods = [];
      this._sigmas = [];
      this._blurMaterial = null;
      this._cubemapMaterial = null;
      this._equirectMaterial = null;
      this._compileMaterial(this._blurMaterial);
    }
    /**
     * Generates a PMREM from a supplied Scene, which can be faster than using an
     * image if networking bandwidth is low. Optional sigma specifies a blur radius
     * in radians to be applied to the scene before PMREM generation. Optional near
     * and far planes ensure the scene is rendered in its entirety (the cubeCamera
     * is placed at the origin).
     *
     * @param {Scene} scene
     * @param {number} sigma
     * @param {number} near
     * @param {number} far
     * @return {WebGLRenderTarget}
     */
    fromScene(scene, sigma = 0, near = 0.1, far = 100) {
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      _oldXrEnabled = this._renderer.xr.enabled;
      this._renderer.xr.enabled = false;
      this._setSize(256);
      const cubeUVRenderTarget = this._allocateTargets();
      cubeUVRenderTarget.depthBuffer = true;
      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     * The smallest supported equirectangular image size is 64 x 32.
     *
     * @param {Texture} equirectangular
     * @param {WebGLRenderTarget} [renderTarget=null] - Optional render target.
     * @return {WebGLRenderTarget}
     */
    fromEquirectangular(equirectangular, renderTarget = null) {
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * as this matches best with the 256 x 256 cubemap output.
     * The smallest supported cube size is 16 x 16.
     *
     * @param {Texture} cubemap
     * @param {null} [renderTarget=null] - Optional render target.
     * @return {WebGLRenderTarget}
     */
    fromCubemap(cubemap, renderTarget = null) {
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileCubemapShader() {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
        this._compileMaterial(this._cubemapMaterial);
      }
    }
    /**
     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileEquirectangularShader() {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
        this._compileMaterial(this._equirectMaterial);
      }
    }
    /**
     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
     * one of them will cause any others to also become unusable.
     */
    dispose() {
      this._dispose();
      if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
      if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
    }
    // private interface
    _setSize(cubeSize) {
      this._lodMax = Math.floor(Math.log2(cubeSize));
      this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
      if (this._blurMaterial !== null) this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
      for (let i = 0; i < this._lodPlanes.length; i++) {
        this._lodPlanes[i].dispose();
      }
    }
    _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
      this._renderer.xr.enabled = _oldXrEnabled;
      outputTarget.scissorTest = false;
      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
      if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
        this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
      } else {
        this._setSize(texture.image.width / 4);
      }
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      _oldXrEnabled = this._renderer.xr.enabled;
      this._renderer.xr.enabled = false;
      const cubeUVRenderTarget = renderTarget || this._allocateTargets();
      this._textureToCubeUV(texture, cubeUVRenderTarget);
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    _allocateTargets() {
      const width = 3 * Math.max(this._cubeSize, 16 * 7);
      const height = 4 * this._cubeSize;
      const params = {
        magFilter: LinearFilter,
        minFilter: LinearFilter,
        generateMipmaps: false,
        type: HalfFloatType,
        format: RGBAFormat,
        colorSpace: LinearSRGBColorSpace,
        depthBuffer: false
      };
      const cubeUVRenderTarget = _createRenderTarget(width, height, params);
      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
        if (this._pingPongRenderTarget !== null) {
          this._dispose();
        }
        this._pingPongRenderTarget = _createRenderTarget(width, height, params);
        const { _lodMax } = this;
        ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
        this._blurMaterial = _getBlurShader(_lodMax, width, height);
      }
      return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
      const tmpMesh = new Mesh(this._lodPlanes[0], material);
      this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
      const fov2 = 90;
      const aspect2 = 1;
      const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
      const upSign = [1, -1, 1, 1, 1, 1];
      const forwardSign = [1, 1, 1, -1, -1, -1];
      const renderer = this._renderer;
      const originalAutoClear = renderer.autoClear;
      const toneMapping = renderer.toneMapping;
      renderer.getClearColor(_clearColor);
      renderer.toneMapping = NoToneMapping;
      renderer.autoClear = false;
      const backgroundMaterial = new MeshBasicMaterial({
        name: "PMREM.Background",
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      let useSolidColor = false;
      const background = scene.background;
      if (background) {
        if (background.isColor) {
          backgroundMaterial.color.copy(background);
          scene.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundMaterial.color.copy(_clearColor);
        useSolidColor = true;
      }
      for (let i = 0; i < 6; i++) {
        const col = i % 3;
        if (col === 0) {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(forwardSign[i], 0, 0);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[i]);
          cubeCamera.lookAt(0, forwardSign[i], 0);
        } else {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(0, 0, forwardSign[i]);
        }
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        if (useSolidColor) {
          renderer.render(backgroundBox, cubeCamera);
        }
        renderer.render(scene, cubeCamera);
      }
      backgroundBox.geometry.dispose();
      backgroundBox.material.dispose();
      renderer.toneMapping = toneMapping;
      renderer.autoClear = originalAutoClear;
      scene.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
      const renderer = this._renderer;
      const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
      if (isCubeTexture) {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial();
        }
        this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
      } else {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial();
        }
      }
      const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
      const mesh = new Mesh(this._lodPlanes[0], material);
      const uniforms = material.uniforms;
      uniforms["envMap"].value = texture;
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
      const renderer = this._renderer;
      const autoClear = renderer.autoClear;
      renderer.autoClear = false;
      const n = this._lodPlanes.length;
      for (let i = 1; i < n; i++) {
        const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
        const poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];
        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
      }
      renderer.autoClear = autoClear;
    }
    /**
     * This is a two-pass Gaussian blur for a cubemap. Normally this is done
     * vertically and horizontally, but this breaks down on a cube. Here we apply
     * the blur latitudinally (around the poles), and then longitudinally (towards
     * the poles) to approximate the orthogonally-separable blur. It is least
     * accurate at the poles, but still does a decent job.
     *
     * @param {WebGLRenderTarget} cubeUVRenderTarget
     * @param {number} lodIn
     * @param {number} lodOut
     * @param {number} sigma
     * @param {Vector3} [poleAxis]
     */
    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      const pingPongRenderTarget = this._pingPongRenderTarget;
      this._halfBlur(
        cubeUVRenderTarget,
        pingPongRenderTarget,
        lodIn,
        lodOut,
        sigma,
        "latitudinal",
        poleAxis
      );
      this._halfBlur(
        pingPongRenderTarget,
        cubeUVRenderTarget,
        lodOut,
        lodOut,
        sigma,
        "longitudinal",
        poleAxis
      );
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      const renderer = this._renderer;
      const blurMaterial = this._blurMaterial;
      if (direction !== "latitudinal" && direction !== "longitudinal") {
        console.error(
          "blur direction must be either latitudinal or longitudinal!"
        );
      }
      const STANDARD_DEVIATIONS = 3;
      const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
      const blurUniforms = blurMaterial.uniforms;
      const pixels = this._sizeLods[lodIn] - 1;
      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      const sigmaPixels = sigmaRadians / radiansPerPixel;
      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
      if (samples > MAX_SAMPLES) {
        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
      }
      const weights = [];
      let sum = 0;
      for (let i = 0; i < MAX_SAMPLES; ++i) {
        const x2 = i / sigmaPixels;
        const weight = Math.exp(-x2 * x2 / 2);
        weights.push(weight);
        if (i === 0) {
          sum += weight;
        } else if (i < samples) {
          sum += 2 * weight;
        }
      }
      for (let i = 0; i < weights.length; i++) {
        weights[i] = weights[i] / sum;
      }
      blurUniforms["envMap"].value = targetIn.texture;
      blurUniforms["samples"].value = samples;
      blurUniforms["weights"].value = weights;
      blurUniforms["latitudinal"].value = direction === "latitudinal";
      if (poleAxis) {
        blurUniforms["poleAxis"].value = poleAxis;
      }
      const { _lodMax } = this;
      blurUniforms["dTheta"].value = radiansPerPixel;
      blurUniforms["mipInt"].value = _lodMax - lodIn;
      const outputSize = this._sizeLods[lodOut];
      const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
      const y = 4 * (this._cubeSize - outputSize);
      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  };
  function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for (let i = 0; i < totalLods; i++) {
      const sizeLod = Math.pow(2, lod);
      sizeLods.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i > lodMax - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
      } else if (i === 0) {
        sigma = 0;
      }
      sigmas.push(sigma);
      const texelSize = 1 / (sizeLod - 2);
      const min = -texelSize;
      const max = 1 + texelSize;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position = new Float32Array(positionSize * vertices * cubeFaces);
      const uv = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x = face % 3 * 2 / 3 - 1;
        const y = face > 2 ? 0 : -1;
        const coordinates = [
          x,
          y,
          0,
          x + 2 / 3,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y + 1,
          0
        ];
        position.set(coordinates, positionSize * vertices * face);
        uv.set(uv1, uvSize * vertices * face);
        const fill = [face, face, face, face, face, face];
        faceIndex.set(fill, faceIndexSize * vertices * face);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      lodPlanes.push(planes);
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { lodPlanes, sizeLods, sigmas };
  }
  function _createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
  }
  function _getBlurShader(lodMax, width, height) {
    const weights = new Float32Array(MAX_SAMPLES);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new ShaderMaterial({
      name: "SphericalGaussianBlur",
      defines: {
        "n": MAX_SAMPLES,
        "CUBEUV_TEXEL_WIDTH": 1 / width,
        "CUBEUV_TEXEL_HEIGHT": 1 / height,
        "CUBEUV_MAX_MIP": `${lodMax}.0`
      },
      uniforms: {
        "envMap": { value: null },
        "samples": { value: 1 },
        "weights": { value: weights },
        "latitudinal": { value: false },
        "dTheta": { value: 0 },
        "mipInt": { value: 0 },
        "poleAxis": { value: poleAxis }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getEquirectMaterial() {
    return new ShaderMaterial({
      name: "EquirectangularToCubeUV",
      uniforms: {
        "envMap": { value: null }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCubemapMaterial() {
    return new ShaderMaterial({
      name: "CubemapToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "flipEnvMap": { value: -1 }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCommonVertexShader() {
    return (
      /* glsl */
      `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
    );
  }
  function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = /* @__PURE__ */ new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
        if (isEquirectMap || isCubeMap) {
          let renderTarget = cubeUVmaps.get(texture);
          const currentPMREMVersion = renderTarget !== void 0 ? renderTarget.texture.pmremVersion : 0;
          if (texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion) {
            if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
            renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
            renderTarget.texture.pmremVersion = texture.pmremVersion;
            cubeUVmaps.set(texture, renderTarget);
            return renderTarget.texture;
          } else {
            if (renderTarget !== void 0) {
              return renderTarget.texture;
            } else {
              const image = texture.image;
              if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
                renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                renderTarget.texture.pmremVersion = texture.pmremVersion;
                cubeUVmaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return renderTarget.texture;
              } else {
                return null;
              }
            }
          }
        }
      }
      return texture;
    }
    function isCubeTextureComplete(image) {
      let count = 0;
      const length = 6;
      for (let i = 0; i < length; i++) {
        if (image[i] !== void 0) count++;
      }
      return count === length;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemapUV = cubeUVmaps.get(texture);
      if (cubemapUV !== void 0) {
        cubeUVmaps.delete(texture);
        cubemapUV.dispose();
      }
    }
    function dispose() {
      cubeUVmaps = /* @__PURE__ */ new WeakMap();
      if (pmremGenerator !== null) {
        pmremGenerator.dispose();
        pmremGenerator = null;
      }
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name2) {
      if (extensions[name2] !== void 0) {
        return extensions[name2];
      }
      let extension;
      switch (name2) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name2);
      }
      extensions[name2] = extension;
      return extension;
    }
    return {
      has: function(name2) {
        return getExtension(name2) !== null;
      },
      init: function() {
        getExtension("EXT_color_buffer_float");
        getExtension("WEBGL_clip_cull_distance");
        getExtension("OES_texture_float_linear");
        getExtension("EXT_color_buffer_half_float");
        getExtension("WEBGL_multisampled_render_to_texture");
        getExtension("WEBGL_render_shared_exponent");
      },
      get: function(name2) {
        const extension = getExtension(name2);
        if (extension === null) {
          warnOnce("THREE.WebGLRenderer: " + name2 + " extension not supported.");
        }
        return extension;
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = /* @__PURE__ */ new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      if (geometry.index !== null) {
        attributes.remove(geometry.index);
      }
      for (const name2 in geometry.attributes) {
        attributes.remove(geometry.attributes[name2]);
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      delete geometries[geometry.id];
      const attribute = wireframeAttributes.get(geometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(geometry);
      }
      bindingStates.releaseStatesOfGeometry(geometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      if (geometries[geometry.id] === true) return geometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      geometries[geometry.id] = true;
      info.memory.geometries++;
      return geometry;
    }
    function update(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name2 in geometryAttributes) {
        attributes.update(geometryAttributes[name2], gl.ARRAY_BUFFER);
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version3 = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version3 = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else if (geometryPosition !== void 0) {
        const array = geometryPosition.array;
        version3 = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      } else {
        return;
      }
      const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version3;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute) attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info) {
    let mode;
    function setMode(value2) {
      mode = value2;
    }
    let type, bytesPerElement;
    function setIndex(value2) {
      type = value2.type;
      bytesPerElement = value2.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0) return;
      gl.drawElementsInstanced(mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    function renderMultiDraw(starts, counts, drawCount) {
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      extension.multiDrawElementsWEBGL(mode, counts, 0, type, starts, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      info.update(elementCount, mode, 1);
    }
    function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < starts.length; i++) {
          renderInstances(starts[i] / bytesPerElement, counts[i], primcount[i]);
        }
      } else {
        extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, type, starts, 0, primcount, 0, drawCount);
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i] * primcount[i];
        }
        info.update(elementCount, mode, 1);
      }
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
    this.renderMultiDraw = renderMultiDraw;
    this.renderMultiDrawInstances = renderMultiDrawInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case gl.TRIANGLES:
          render.triangles += instanceCount * (count / 3);
          break;
        case gl.LINES:
          render.lines += instanceCount * (count / 2);
          break;
        case gl.LINE_STRIP:
          render.lines += instanceCount * (count - 1);
          break;
        case gl.LINE_LOOP:
          render.lines += instanceCount * count;
          break;
        case gl.POINTS:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update
    };
  }
  function WebGLMorphtargets(gl, capabilities, textures) {
    const morphTextures = /* @__PURE__ */ new WeakMap();
    const morph = new Vector4();
    function update(object, geometry, program) {
      const objectInfluences = object.morphTargetInfluences;
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let entry = morphTextures.get(geometry);
      if (entry === void 0 || entry.count !== morphTargetsCount) {
        let disposeTexture = function() {
          texture.dispose();
          morphTextures.delete(geometry);
          geometry.removeEventListener("dispose", disposeTexture);
        };
        if (entry !== void 0) entry.texture.dispose();
        const hasMorphPosition = geometry.morphAttributes.position !== void 0;
        const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
        const hasMorphColors = geometry.morphAttributes.color !== void 0;
        const morphTargets = geometry.morphAttributes.position || [];
        const morphNormals = geometry.morphAttributes.normal || [];
        const morphColors = geometry.morphAttributes.color || [];
        let vertexDataCount = 0;
        if (hasMorphPosition === true) vertexDataCount = 1;
        if (hasMorphNormals === true) vertexDataCount = 2;
        if (hasMorphColors === true) vertexDataCount = 3;
        let width = geometry.attributes.position.count * vertexDataCount;
        let height = 1;
        if (width > capabilities.maxTextureSize) {
          height = Math.ceil(width / capabilities.maxTextureSize);
          width = capabilities.maxTextureSize;
        }
        const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
        const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
        texture.type = FloatType;
        texture.needsUpdate = true;
        const vertexDataStride = vertexDataCount * 4;
        for (let i = 0; i < morphTargetsCount; i++) {
          const morphTarget = morphTargets[i];
          const morphNormal = morphNormals[i];
          const morphColor = morphColors[i];
          const offset = width * height * 4 * i;
          for (let j = 0; j < morphTarget.count; j++) {
            const stride = j * vertexDataStride;
            if (hasMorphPosition === true) {
              morph.fromBufferAttribute(morphTarget, j);
              buffer[offset + stride + 0] = morph.x;
              buffer[offset + stride + 1] = morph.y;
              buffer[offset + stride + 2] = morph.z;
              buffer[offset + stride + 3] = 0;
            }
            if (hasMorphNormals === true) {
              morph.fromBufferAttribute(morphNormal, j);
              buffer[offset + stride + 4] = morph.x;
              buffer[offset + stride + 5] = morph.y;
              buffer[offset + stride + 6] = morph.z;
              buffer[offset + stride + 7] = 0;
            }
            if (hasMorphColors === true) {
              morph.fromBufferAttribute(morphColor, j);
              buffer[offset + stride + 8] = morph.x;
              buffer[offset + stride + 9] = morph.y;
              buffer[offset + stride + 10] = morph.z;
              buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
            }
          }
        }
        entry = {
          count: morphTargetsCount,
          texture,
          size: new Vector2(width, height)
        };
        morphTextures.set(geometry, entry);
        geometry.addEventListener("dispose", disposeTexture);
      }
      if (object.isInstancedMesh === true && object.morphTexture !== null) {
        program.getUniforms().setValue(gl, "morphTexture", object.morphTexture, textures);
      } else {
        let morphInfluencesSum = 0;
        for (let i = 0; i < objectInfluences.length; i++) {
          morphInfluencesSum += objectInfluences[i];
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
      }
      program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
      program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
    }
    return {
      update
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = /* @__PURE__ */ new WeakMap();
    function update(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
          object.addEventListener("dispose", onInstancedMeshDispose);
        }
        if (updateMap.get(object) !== frame) {
          attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
          if (object.instanceColor !== null) {
            attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
          }
          updateMap.set(object, frame);
        }
      }
      if (object.isSkinnedMesh) {
        const skeleton = object.skeleton;
        if (updateMap.get(skeleton) !== frame) {
          skeleton.update();
          updateMap.set(skeleton, frame);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = /* @__PURE__ */ new WeakMap();
    }
    function onInstancedMeshDispose(event) {
      const instancedMesh = event.target;
      instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
      attributes.remove(instancedMesh.instanceMatrix);
      if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
      update,
      dispose
    };
  }
  var emptyTexture = /* @__PURE__ */ new Texture();
  var emptyShadowTexture = /* @__PURE__ */ new DepthTexture(1, 1);
  var emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
  var empty3dTexture = /* @__PURE__ */ new Data3DTexture();
  var emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache[0] = v.r;
        cache[1] = v.g;
        cache[2] = v.b;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v)) return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements)) return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v)) return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements)) return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v)) return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements)) return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2i(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform2iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3i(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform3iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform4iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
  }
  function setValueV2ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2ui(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform2uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3ui(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform3uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v)) return;
      gl.uniform4uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    let emptyTexture2D;
    if (this.type === gl.SAMPLER_2D_SHADOW) {
      emptyShadowTexture.compareFunction = LessEqualCompare;
      emptyTexture2D = emptyShadowTexture;
    } else {
      emptyTexture2D = emptyTexture;
    }
    textures.setTexture2D(v || emptyTexture2D, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v || empty3dTexture, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyArrayTexture, unit);
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      // FLOAT
      case 35664:
        return setValueV2f;
      // _VEC2
      case 35665:
        return setValueV3f;
      // _VEC3
      case 35666:
        return setValueV4f;
      // _VEC4
      case 35674:
        return setValueM2;
      // _MAT2
      case 35675:
        return setValueM3;
      // _MAT3
      case 35676:
        return setValueM4;
      // _MAT4
      case 5124:
      case 35670:
        return setValueV1i;
      // INT, BOOL
      case 35667:
      case 35671:
        return setValueV2i;
      // _VEC2
      case 35668:
      case 35672:
        return setValueV3i;
      // _VEC3
      case 35669:
      case 35673:
        return setValueV4i;
      // _VEC4
      case 5125:
        return setValueV1ui;
      // UINT
      case 36294:
        return setValueV2ui;
      // _VEC2
      case 36295:
        return setValueV3ui;
      // _VEC3
      case 36296:
        return setValueV4ui;
      // _VEC4
      case 35678:
      // SAMPLER_2D
      case 36198:
      // SAMPLER_EXTERNAL_OES
      case 36298:
      // INT_SAMPLER_2D
      case 36306:
      // UNSIGNED_INT_SAMPLER_2D
      case 35682:
        return setValueT1;
      case 35679:
      // SAMPLER_3D
      case 36299:
      // INT_SAMPLER_3D
      case 36307:
        return setValueT3D1;
      case 35680:
      // SAMPLER_CUBE
      case 36300:
      // INT_SAMPLER_CUBE
      case 36308:
      // UNSIGNED_INT_SAMPLER_CUBE
      case 36293:
        return setValueT6;
      case 36289:
      // SAMPLER_2D_ARRAY
      case 36303:
      // INT_SAMPLER_2D_ARRAY
      case 36311:
      // UNSIGNED_INT_SAMPLER_2D_ARRAY
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
  }
  function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
  }
  function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
  }
  function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
  }
  function setValueT1Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT3DArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture3D(v[i] || empty3dTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function setValueT2DArrayArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      // FLOAT
      case 35664:
        return setValueV2fArray;
      // _VEC2
      case 35665:
        return setValueV3fArray;
      // _VEC3
      case 35666:
        return setValueV4fArray;
      // _VEC4
      case 35674:
        return setValueM2Array;
      // _MAT2
      case 35675:
        return setValueM3Array;
      // _MAT3
      case 35676:
        return setValueM4Array;
      // _MAT4
      case 5124:
      case 35670:
        return setValueV1iArray;
      // INT, BOOL
      case 35667:
      case 35671:
        return setValueV2iArray;
      // _VEC2
      case 35668:
      case 35672:
        return setValueV3iArray;
      // _VEC3
      case 35669:
      case 35673:
        return setValueV4iArray;
      // _VEC4
      case 5125:
        return setValueV1uiArray;
      // UINT
      case 36294:
        return setValueV2uiArray;
      // _VEC2
      case 36295:
        return setValueV3uiArray;
      // _VEC3
      case 36296:
        return setValueV4uiArray;
      // _VEC4
      case 35678:
      // SAMPLER_2D
      case 36198:
      // SAMPLER_EXTERNAL_OES
      case 36298:
      // INT_SAMPLER_2D
      case 36306:
      // UNSIGNED_INT_SAMPLER_2D
      case 35682:
        return setValueT1Array;
      case 35679:
      // SAMPLER_3D
      case 36299:
      // INT_SAMPLER_3D
      case 36307:
        return setValueT3DArray;
      case 35680:
      // SAMPLER_CUBE
      case 36300:
      // INT_SAMPLER_CUBE
      case 36308:
      // UNSIGNED_INT_SAMPLER_CUBE
      case 36293:
        return setValueT6Array;
      case 36289:
      // SAMPLER_2D_ARRAY
      case 36303:
      // INT_SAMPLER_2D_ARRAY
      case 36311:
      // UNSIGNED_INT_SAMPLER_2D_ARRAY
      case 36292:
        return setValueT2DArrayArray;
    }
  }
  var SingleUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.type = activeInfo.type;
      this.setValue = getSingularSetter(activeInfo.type);
    }
  };
  var PureArrayUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.type = activeInfo.type;
      this.size = activeInfo.size;
      this.setValue = getPureArraySetter(activeInfo.type);
    }
  };
  var StructuredUniform = class {
    constructor(id) {
      this.id = id;
      this.seq = [];
      this.map = {};
    }
    setValue(gl, value2, textures) {
      const seq = this.seq;
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        u.setValue(gl, value2[u.id], textures);
      }
    }
  };
  var RePathPart = /(\w+)(\])?(\[|\.)?/g;
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex) id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  var WebGLUniforms = class {
    constructor(gl, program) {
      this.seq = [];
      this.map = {};
      const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
      for (let i = 0; i < n; ++i) {
        const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
        parseUniform(info, addr, this);
      }
    }
    setValue(gl, name2, value2, textures) {
      const u = this.map[name2];
      if (u !== void 0) u.setValue(gl, value2, textures);
    }
    setOptional(gl, object, name2) {
      const v = object[name2];
      if (v !== void 0) this.setValue(gl, name2, v);
    }
    static upload(gl, seq, values, textures) {
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i], v = values[u.id];
        if (v.needsUpdate !== false) {
          u.setValue(gl, v.value, textures);
        }
      }
    }
    static seqWithValue(seq, values) {
      const r = [];
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        if (u.id in values) r.push(u);
      }
      return r;
    }
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var COMPLETION_STATUS_KHR = 37297;
  var programIdCount = 0;
  function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i = from; i < to; i++) {
      const line = i + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
  }
  var _m0 = /* @__PURE__ */ new Matrix3();
  function getEncodingComponents(colorSpace) {
    ColorManagement._getMatrix(_m0, ColorManagement.workingColorSpace, colorSpace);
    const encodingMatrix = `mat3( ${_m0.elements.map((v) => v.toFixed(4))} )`;
    switch (ColorManagement.getTransfer(colorSpace)) {
      case LinearTransfer:
        return [encodingMatrix, "LinearTransferOETF"];
      case SRGBTransfer:
        return [encodingMatrix, "sRGBTransferOETF"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported color space: ", colorSpace);
        return [encodingMatrix, "LinearTransferOETF"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  function getTexelEncodingFunction(functionName, colorSpace) {
    const components = getEncodingComponents(colorSpace);
    return [
      `vec4 ${functionName}( vec4 value ) {`,
      `	return ${components[1]}( vec4( value.rgb * ${components[0]}, value.a ) );`,
      "}"
    ].join("\n");
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "Cineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case AgXToneMapping:
        toneMappingName = "AgX";
        break;
      case NeutralToneMapping:
        toneMappingName = "Neutral";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  var _v0 = /* @__PURE__ */ new Vector3();
  function getLuminanceFunction() {
    ColorManagement.getLuminanceCoefficients(_v0);
    const r = _v0.x.toFixed(4);
    const g = _v0.y.toFixed(4);
    const b = _v0.z.toFixed(4);
    return [
      "float luminance( const in vec3 rgb ) {",
      `	const vec3 weights = vec3( ${r}, ${g}, ${b} );`,
      "	return dot( weights, rgb );",
      "}"
    ].join("\n");
  }
  function generateVertexExtensions(parameters) {
    const chunks = [
      parameters.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
      parameters.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name2 in defines) {
      const value2 = defines[name2];
      if (value2 === false) continue;
      chunks.push("#define " + name2 + " " + value2);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name2 = info.name;
      let locationSize = 1;
      if (info.type === gl.FLOAT_MAT2) locationSize = 2;
      if (info.type === gl.FLOAT_MAT3) locationSize = 3;
      if (info.type === gl.FLOAT_MAT4) locationSize = 4;
      attributes[name2] = {
        type: info.type,
        location: gl.getAttribLocation(program, name2),
        locationSize
      };
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  var shaderChunkMap = /* @__PURE__ */ new Map();
  function includeReplacer(match, include) {
    let string = ShaderChunk[include];
    if (string === void 0) {
      const newInclude = shaderChunkMap.get(include);
      if (newInclude !== void 0) {
        string = ShaderChunk[newInclude];
        console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
      } else {
        throw new Error("Can not resolve #include <" + include + ">");
      }
    }
    return resolveIncludes(string);
  }
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null) return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1 / imageHeight;
    const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
    return { texelWidth, texelHeight, maxMip };
  }
  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = generateCubeUVSize(parameters);
    const customVertexExtensions = generateVertexExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
        parameters.batching ? "#define USE_BATCHING" : "",
        parameters.batchingColor ? "#define USE_BATCHING_COLOR" : "",
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        //
        parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
        parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
        parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
        parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
        parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
        parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
        parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
        parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
        parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
        parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
        parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
        parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
        parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
        parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
        parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
        parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
        parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
        parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
        parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
        parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
        parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
        parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
        parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
        //
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.morphColors ? "#define USE_MORPHCOLORS" : "",
        parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
        parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "#ifdef USE_INSTANCING_MORPH",
        "	uniform sampler2D morphTexture;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
        envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.dispersion ? "#define USE_DISPERSION" : "",
        parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaTest ? "#define USE_ALPHATEST" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
        parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        parameters.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        // this code is required here because it is used by the toneMapping() function defined below
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        parameters.opaque ? "#define OPAQUE" : "",
        ShaderChunk["colorspace_pars_fragment"],
        // this code is required here because it is used by the various encoding/decoding function defined below
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
        getLuminanceFunction(),
        parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        customVertexExtensions,
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    function onFirstUse(self2) {
      if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
          runnable = false;
          if (typeof renderer.debug.onShaderError === "function") {
            renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
          } else {
            const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
            const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
            console.error(
              "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nMaterial Name: " + self2.name + "\nMaterial Type: " + self2.type + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
            );
          }
        } else if (programLog !== "") {
          console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        } else if (vertexLog === "" || fragmentLog === "") {
          haveDiagnostics = false;
        }
        if (haveDiagnostics) {
          self2.diagnostics = {
            runnable,
            programLog,
            vertexShader: {
              log: vertexLog,
              prefix: prefixVertex
            },
            fragmentShader: {
              log: fragmentLog,
              prefix: prefixFragment
            }
          };
        }
      }
      gl.deleteShader(glVertexShader);
      gl.deleteShader(glFragmentShader);
      cachedUniforms = new WebGLUniforms(gl, program);
      cachedAttributes = fetchAttributeLocations(gl, program);
    }
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        onFirstUse(this);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        onFirstUse(this);
      }
      return cachedAttributes;
    };
    let programReady = parameters.rendererExtensionParallelShaderCompile === false;
    this.isReady = function() {
      if (programReady === false) {
        programReady = gl.getProgramParameter(program, COMPLETION_STATUS_KHR);
      }
      return programReady;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  var _id = 0;
  var WebGLShaderCache = class {
    constructor() {
      this.shaderCache = /* @__PURE__ */ new Map();
      this.materialCache = /* @__PURE__ */ new Map();
    }
    update(material) {
      const vertexShader = material.vertexShader;
      const fragmentShader = material.fragmentShader;
      const vertexShaderStage = this._getShaderStage(vertexShader);
      const fragmentShaderStage = this._getShaderStage(fragmentShader);
      const materialShaders = this._getShaderCacheForMaterial(material);
      if (materialShaders.has(vertexShaderStage) === false) {
        materialShaders.add(vertexShaderStage);
        vertexShaderStage.usedTimes++;
      }
      if (materialShaders.has(fragmentShaderStage) === false) {
        materialShaders.add(fragmentShaderStage);
        fragmentShaderStage.usedTimes++;
      }
      return this;
    }
    remove(material) {
      const materialShaders = this.materialCache.get(material);
      for (const shaderStage of materialShaders) {
        shaderStage.usedTimes--;
        if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
      }
      this.materialCache.delete(material);
      return this;
    }
    getVertexShaderID(material) {
      return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
      return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
      this.shaderCache.clear();
      this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
      const cache = this.materialCache;
      let set = cache.get(material);
      if (set === void 0) {
        set = /* @__PURE__ */ new Set();
        cache.set(material, set);
      }
      return set;
    }
    _getShaderStage(code) {
      const cache = this.shaderCache;
      let stage = cache.get(code);
      if (stage === void 0) {
        stage = new WebGLShaderStage(code);
        cache.set(code, stage);
      }
      return stage;
    }
  };
  var WebGLShaderStage = class {
    constructor(code) {
      this.id = _id++;
      this.code = code;
      this.usedTimes = 0;
    }
  };
  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const _activeChannels = /* @__PURE__ */ new Set();
    const programs = [];
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function getChannel(value2) {
      _activeChannels.add(value2);
      if (value2 === 0) return "uv";
      return `uv${value2}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
      const fog = scene.fog;
      const geometry = object.geometry;
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
      const shaderID = shaderIDs[material.type];
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let morphTextureStride = 0;
      if (geometry.morphAttributes.position !== void 0) morphTextureStride = 1;
      if (geometry.morphAttributes.normal !== void 0) morphTextureStride = 2;
      if (geometry.morphAttributes.color !== void 0) morphTextureStride = 3;
      let vertexShader, fragmentShader;
      let customVertexShaderID, customFragmentShaderID;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
        _customShaders.update(material);
        customVertexShaderID = _customShaders.getVertexShaderID(material);
        customFragmentShaderID = _customShaders.getFragmentShaderID(material);
      }
      const currentRenderTarget = renderer.getRenderTarget();
      const reverseDepthBuffer = renderer.state.buffers.depth.getReversed();
      const IS_INSTANCEDMESH = object.isInstancedMesh === true;
      const IS_BATCHEDMESH = object.isBatchedMesh === true;
      const HAS_MAP = !!material.map;
      const HAS_MATCAP = !!material.matcap;
      const HAS_ENVMAP = !!envMap;
      const HAS_AOMAP = !!material.aoMap;
      const HAS_LIGHTMAP = !!material.lightMap;
      const HAS_BUMPMAP = !!material.bumpMap;
      const HAS_NORMALMAP = !!material.normalMap;
      const HAS_DISPLACEMENTMAP = !!material.displacementMap;
      const HAS_EMISSIVEMAP = !!material.emissiveMap;
      const HAS_METALNESSMAP = !!material.metalnessMap;
      const HAS_ROUGHNESSMAP = !!material.roughnessMap;
      const HAS_ANISOTROPY = material.anisotropy > 0;
      const HAS_CLEARCOAT = material.clearcoat > 0;
      const HAS_DISPERSION = material.dispersion > 0;
      const HAS_IRIDESCENCE = material.iridescence > 0;
      const HAS_SHEEN = material.sheen > 0;
      const HAS_TRANSMISSION = material.transmission > 0;
      const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
      const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
      const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
      const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
      const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
      const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
      const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
      const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
      const HAS_SPECULARMAP = !!material.specularMap;
      const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
      const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
      const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
      const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
      const HAS_GRADIENTMAP = !!material.gradientMap;
      const HAS_ALPHAMAP = !!material.alphaMap;
      const HAS_ALPHATEST = material.alphaTest > 0;
      const HAS_ALPHAHASH = !!material.alphaHash;
      const HAS_EXTENSIONS = !!material.extensions;
      let toneMapping = NoToneMapping;
      if (material.toneMapped) {
        if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
          toneMapping = renderer.toneMapping;
        }
      }
      const parameters = {
        shaderID,
        shaderType: material.type,
        shaderName: material.name,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        customVertexShaderID,
        customFragmentShaderID,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        batching: IS_BATCHEDMESH,
        batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
        instancing: IS_INSTANCEDMESH,
        instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
        instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,
        supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
        outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
        alphaToCoverage: !!material.alphaToCoverage,
        map: HAS_MAP,
        matcap: HAS_MATCAP,
        envMap: HAS_ENVMAP,
        envMapMode: HAS_ENVMAP && envMap.mapping,
        envMapCubeUVHeight,
        aoMap: HAS_AOMAP,
        lightMap: HAS_LIGHTMAP,
        bumpMap: HAS_BUMPMAP,
        normalMap: HAS_NORMALMAP,
        displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
        emissiveMap: HAS_EMISSIVEMAP,
        normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
        normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
        metalnessMap: HAS_METALNESSMAP,
        roughnessMap: HAS_ROUGHNESSMAP,
        anisotropy: HAS_ANISOTROPY,
        anisotropyMap: HAS_ANISOTROPYMAP,
        clearcoat: HAS_CLEARCOAT,
        clearcoatMap: HAS_CLEARCOATMAP,
        clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
        clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
        dispersion: HAS_DISPERSION,
        iridescence: HAS_IRIDESCENCE,
        iridescenceMap: HAS_IRIDESCENCEMAP,
        iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
        sheen: HAS_SHEEN,
        sheenColorMap: HAS_SHEEN_COLORMAP,
        sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
        specularMap: HAS_SPECULARMAP,
        specularColorMap: HAS_SPECULAR_COLORMAP,
        specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
        transmission: HAS_TRANSMISSION,
        transmissionMap: HAS_TRANSMISSIONMAP,
        thicknessMap: HAS_THICKNESSMAP,
        gradientMap: HAS_GRADIENTMAP,
        opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,
        alphaMap: HAS_ALPHAMAP,
        alphaTest: HAS_ALPHATEST,
        alphaHash: HAS_ALPHAHASH,
        combine: material.combine,
        //
        mapUv: HAS_MAP && getChannel(material.map.channel),
        aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
        lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
        bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
        normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
        displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
        emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
        metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
        roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
        anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
        clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
        clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
        clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
        iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
        iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
        sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
        sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
        specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
        specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
        specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
        transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
        thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
        alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
        //
        vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
        vertexColors: material.vertexColors,
        vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
        pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
        fog: !!fog,
        useFog: material.fog === true,
        fogExp2: !!fog && fog.isFogExp2,
        flatShading: material.flatShading === true,
        sizeAttenuation: material.sizeAttenuation === true,
        logarithmicDepthBuffer,
        reverseDepthBuffer,
        skinning: object.isSkinnedMesh === true,
        morphTargets: geometry.morphAttributes.position !== void 0,
        morphNormals: geometry.morphAttributes.normal !== void 0,
        morphColors: geometry.morphAttributes.color !== void 0,
        morphTargetsCount,
        morphTextureStride,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numSpotLightMaps: lights.spotLightMap.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
        numLightProbes: lights.numLightProbes,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer.shadowMap.type,
        toneMapping,
        decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && ColorManagement.getTransfer(material.map.colorSpace) === SRGBTransfer,
        decodeVideoTextureEmissive: HAS_EMISSIVEMAP && material.emissiveMap.isVideoTexture === true && ColorManagement.getTransfer(material.emissiveMap.colorSpace) === SRGBTransfer,
        premultipliedAlpha: material.premultipliedAlpha,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        useDepthPacking: material.depthPacking >= 0,
        depthPacking: material.depthPacking || 0,
        index0AttributeName: material.index0AttributeName,
        extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has("WEBGL_clip_cull_distance"),
        extensionMultiDraw: (HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has("WEBGL_multi_draw"),
        rendererExtensionParallelShaderCompile: extensions.has("KHR_parallel_shader_compile"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      parameters.vertexUv1s = _activeChannels.has(1);
      parameters.vertexUv2s = _activeChannels.has(2);
      parameters.vertexUv3s = _activeChannels.has(3);
      _activeChannels.clear();
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.customVertexShaderID);
        array.push(parameters.customFragmentShaderID);
      }
      if (parameters.defines !== void 0) {
        for (const name2 in parameters.defines) {
          array.push(name2);
          array.push(parameters.defines[name2]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        getProgramCacheKeyParameters(array, parameters);
        getProgramCacheKeyBooleans(array, parameters);
        array.push(renderer.outputColorSpace);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
      array.push(parameters.precision);
      array.push(parameters.outputColorSpace);
      array.push(parameters.envMapMode);
      array.push(parameters.envMapCubeUVHeight);
      array.push(parameters.mapUv);
      array.push(parameters.alphaMapUv);
      array.push(parameters.lightMapUv);
      array.push(parameters.aoMapUv);
      array.push(parameters.bumpMapUv);
      array.push(parameters.normalMapUv);
      array.push(parameters.displacementMapUv);
      array.push(parameters.emissiveMapUv);
      array.push(parameters.metalnessMapUv);
      array.push(parameters.roughnessMapUv);
      array.push(parameters.anisotropyMapUv);
      array.push(parameters.clearcoatMapUv);
      array.push(parameters.clearcoatNormalMapUv);
      array.push(parameters.clearcoatRoughnessMapUv);
      array.push(parameters.iridescenceMapUv);
      array.push(parameters.iridescenceThicknessMapUv);
      array.push(parameters.sheenColorMapUv);
      array.push(parameters.sheenRoughnessMapUv);
      array.push(parameters.specularMapUv);
      array.push(parameters.specularColorMapUv);
      array.push(parameters.specularIntensityMapUv);
      array.push(parameters.transmissionMapUv);
      array.push(parameters.thicknessMapUv);
      array.push(parameters.combine);
      array.push(parameters.fogExp2);
      array.push(parameters.sizeAttenuation);
      array.push(parameters.morphTargetsCount);
      array.push(parameters.morphAttributeCount);
      array.push(parameters.numDirLights);
      array.push(parameters.numPointLights);
      array.push(parameters.numSpotLights);
      array.push(parameters.numSpotLightMaps);
      array.push(parameters.numHemiLights);
      array.push(parameters.numRectAreaLights);
      array.push(parameters.numDirLightShadows);
      array.push(parameters.numPointLightShadows);
      array.push(parameters.numSpotLightShadows);
      array.push(parameters.numSpotLightShadowsWithMaps);
      array.push(parameters.numLightProbes);
      array.push(parameters.shadowMapType);
      array.push(parameters.toneMapping);
      array.push(parameters.numClippingPlanes);
      array.push(parameters.numClipIntersection);
      array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
      _programLayers.disableAll();
      if (parameters.supportsVertexTextures)
        _programLayers.enable(0);
      if (parameters.instancing)
        _programLayers.enable(1);
      if (parameters.instancingColor)
        _programLayers.enable(2);
      if (parameters.instancingMorph)
        _programLayers.enable(3);
      if (parameters.matcap)
        _programLayers.enable(4);
      if (parameters.envMap)
        _programLayers.enable(5);
      if (parameters.normalMapObjectSpace)
        _programLayers.enable(6);
      if (parameters.normalMapTangentSpace)
        _programLayers.enable(7);
      if (parameters.clearcoat)
        _programLayers.enable(8);
      if (parameters.iridescence)
        _programLayers.enable(9);
      if (parameters.alphaTest)
        _programLayers.enable(10);
      if (parameters.vertexColors)
        _programLayers.enable(11);
      if (parameters.vertexAlphas)
        _programLayers.enable(12);
      if (parameters.vertexUv1s)
        _programLayers.enable(13);
      if (parameters.vertexUv2s)
        _programLayers.enable(14);
      if (parameters.vertexUv3s)
        _programLayers.enable(15);
      if (parameters.vertexTangents)
        _programLayers.enable(16);
      if (parameters.anisotropy)
        _programLayers.enable(17);
      if (parameters.alphaHash)
        _programLayers.enable(18);
      if (parameters.batching)
        _programLayers.enable(19);
      if (parameters.dispersion)
        _programLayers.enable(20);
      if (parameters.batchingColor)
        _programLayers.enable(21);
      array.push(_programLayers.mask);
      _programLayers.disableAll();
      if (parameters.fog)
        _programLayers.enable(0);
      if (parameters.useFog)
        _programLayers.enable(1);
      if (parameters.flatShading)
        _programLayers.enable(2);
      if (parameters.logarithmicDepthBuffer)
        _programLayers.enable(3);
      if (parameters.reverseDepthBuffer)
        _programLayers.enable(4);
      if (parameters.skinning)
        _programLayers.enable(5);
      if (parameters.morphTargets)
        _programLayers.enable(6);
      if (parameters.morphNormals)
        _programLayers.enable(7);
      if (parameters.morphColors)
        _programLayers.enable(8);
      if (parameters.premultipliedAlpha)
        _programLayers.enable(9);
      if (parameters.shadowMapEnabled)
        _programLayers.enable(10);
      if (parameters.doubleSided)
        _programLayers.enable(11);
      if (parameters.flipSided)
        _programLayers.enable(12);
      if (parameters.useDepthPacking)
        _programLayers.enable(13);
      if (parameters.dithering)
        _programLayers.enable(14);
      if (parameters.transmission)
        _programLayers.enable(15);
      if (parameters.sheen)
        _programLayers.enable(16);
      if (parameters.opaque)
        _programLayers.enable(17);
      if (parameters.pointsUvs)
        _programLayers.enable(18);
      if (parameters.decodeVideoTexture)
        _programLayers.enable(19);
      if (parameters.decodeVideoTextureEmissive)
        _programLayers.enable(20);
      if (parameters.alphaToCoverage)
        _programLayers.enable(21);
      array.push(_programLayers.mask);
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    function releaseShaderCache(material) {
      _customShaders.remove(material);
    }
    function dispose() {
      _customShaders.dispose();
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      releaseShaderCache,
      // Exposed for resource monitoring & error feedback via renderer.info:
      programs,
      dispose
    };
  }
  function WebGLProperties() {
    let properties = /* @__PURE__ */ new WeakMap();
    function has(object) {
      return properties.has(object);
    }
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update(object, key, value2) {
      properties.get(object)[key] = value2;
    }
    function dispose() {
      properties = /* @__PURE__ */ new WeakMap();
    }
    return {
      has,
      get,
      remove,
      update,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transmissive.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
      let renderItem = renderItems[renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.push(renderItem);
      } else if (material.transparent === true) {
        transparent.push(renderItem);
      } else {
        opaque.push(renderItem);
      }
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.unshift(renderItem);
      } else if (material.transparent === true) {
        transparent.unshift(renderItem);
      } else {
        opaque.unshift(renderItem);
      }
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
      if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
      if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null) break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transmissive,
      transparent,
      init,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists() {
    let lists = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth) {
      const listArray = lists.get(scene);
      let list;
      if (listArray === void 0) {
        list = new WebGLRenderList();
        lists.set(scene, [list]);
      } else {
        if (renderCallDepth >= listArray.length) {
          list = new WebGLRenderList();
          listArray.push(list);
        } else {
          list = listArray[renderCallDepth];
        }
      }
      return list;
    }
    function dispose() {
      lists = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowIntensity: 1,
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
  }
  function WebGLLights(extensions) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1,
        numLightProbes: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0,
      numLightProbes: 0
    };
    for (let i = 0; i < 9; i++) state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      let numSpotMaps = 0;
      let numSpotShadowsWithMaps = 0;
      let numLightProbes = 0;
      lights.sort(shadowCastingAndTexturingLightsFirst);
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity;
          g += color.g * intensity;
          b += color.b * intensity;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
          numLightProbes++;
        } else if (light.isDirectionalLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.distance = distance;
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          state.spot[spotLength] = uniforms;
          const shadow = light.shadow;
          if (light.map) {
            state.spotLightMap[numSpotMaps] = light.map;
            numSpotMaps++;
            shadow.updateMatrices(light);
            if (light.castShadow) numSpotShadowsWithMaps++;
          }
          state.spotLightMatrix[spotLength] = shadow.matrix;
          if (light.castShadow) {
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            numSpotShadows++;
          }
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowIntensity = shadow.intensity;
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache.get(light);
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (extensions.has("OES_texture_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
          state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps || hash.numLightProbes !== numLightProbes) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
        state.spotLightMap.length = numSpotMaps;
        state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
        state.numLightProbes = numLightProbes;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        hash.numSpotMaps = numSpotMaps;
        hash.numLightProbes = numLightProbes;
        state.version = nextVersion++;
      }
    }
    function setupView(lights, camera) {
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      const viewMatrix = camera.matrixWorldInverse;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        if (light.isDirectionalLight) {
          const uniforms = state.directional[directionalLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = state.spot[spotLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = state.rectArea[rectAreaLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = state.point[pointLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = state.hemi[hemiLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          hemiLength++;
        }
      }
    }
    return {
      setup,
      setupView,
      state
    };
  }
  function WebGLRenderState(extensions) {
    const lights = new WebGLLights(extensions);
    const lightsArray = [];
    const shadowsArray = [];
    function init(camera) {
      state.camera = camera;
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights() {
      lights.setup(lightsArray);
    }
    function setupLightsView(camera) {
      lights.setupView(lightsArray, camera);
    }
    const state = {
      lightsArray,
      shadowsArray,
      camera: null,
      lights,
      transmissionRenderTarget: {}
    };
    return {
      init,
      state,
      setupLights,
      setupLightsView,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions) {
    let renderStates = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth = 0) {
      const renderStateArray = renderStates.get(scene);
      let renderState;
      if (renderStateArray === void 0) {
        renderState = new WebGLRenderState(extensions);
        renderStates.set(scene, [renderState]);
      } else {
        if (renderCallDepth >= renderStateArray.length) {
          renderState = new WebGLRenderState(extensions);
          renderStateArray.push(renderState);
        } else {
          renderState = renderStateArray[renderCallDepth];
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  function WebGLShadowMap(renderer, objects, capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = capabilities.maxTextureSize;
    const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: { value: null },
        resolution: { value: new Vector2() },
        radius: { value: 4 }
      },
      vertexShader: vertex,
      fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute(
      "position",
      new BufferAttribute(
        new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
        3
      )
    );
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
      if (scope.enabled === false) return;
      if (scope.autoUpdate === false && scope.needsUpdate === false) return;
      if (lights.length === 0) return;
      const currentRenderTarget = renderer.getRenderTarget();
      const activeCubeFace = renderer.getActiveCubeFace();
      const activeMipmapLevel = renderer.getActiveMipmapLevel();
      const _state = renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
      const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
          if (_shadowMapSize.x > _maxTextureSize) {
            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > _maxTextureSize) {
            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null || toVSM === true || fromVSM === true) {
          const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
          if (shadow.map !== null) {
            shadow.map.dispose();
          }
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        renderer.setRenderTarget(shadow.map);
        renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(
            _viewportSize.x * viewport.x,
            _viewportSize.y * viewport.y,
            _viewportSize.x * viewport.z,
            _viewportSize.y * viewport.w
          );
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene, camera, shadow.camera, light, this.type);
        }
        if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
          VSMPass(shadow, camera);
        }
        shadow.needsUpdate = false;
      }
      _previousType = this.type;
      scope.needsUpdate = false;
      renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
      const geometry = objects.update(fullScreenMesh);
      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialVertical.needsUpdate = true;
        shadowMaterialHorizontal.needsUpdate = true;
      }
      if (shadow.mapPass === null) {
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
      }
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      renderer.setRenderTarget(shadow.mapPass);
      renderer.clear();
      renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
      renderer.setRenderTarget(shadow.map);
      renderer.clear();
      renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
      let result = null;
      const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
      if (customMaterial !== void 0) {
        result = customMaterial;
      } else {
        result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
          const keyA = result.uuid, keyB = material.uuid;
          let materialsForVariant = _materialCache[keyA];
          if (materialsForVariant === void 0) {
            materialsForVariant = {};
            _materialCache[keyA] = materialsForVariant;
          }
          let cachedMaterial = materialsForVariant[keyB];
          if (cachedMaterial === void 0) {
            cachedMaterial = result.clone();
            materialsForVariant[keyB] = cachedMaterial;
            material.addEventListener("dispose", onMaterialDispose);
          }
          result = cachedMaterial;
        }
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.alphaMap = material.alphaMap;
      result.alphaTest = material.alphaTest;
      result.map = material.map;
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.displacementMap = material.displacementMap;
      result.displacementScale = material.displacementScale;
      result.displacementBias = material.displacementBias;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        const materialProperties = renderer.properties.get(result);
        materialProperties.light = light;
      }
      return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
      if (object.visible === false) return;
      const visible = object.layers.test(camera.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group = groups[k];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);
                renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, group);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, material, light, type);
            object.onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);
            renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
            object.onAfterShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera, shadowCamera, light, type);
      }
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      for (const id in _materialCache) {
        const cache = _materialCache[id];
        const uuid = event.target.uuid;
        if (uuid in cache) {
          const shadowMaterial = cache[uuid];
          shadowMaterial.dispose();
          delete cache[uuid];
        }
      }
    }
  }
  var reversedFuncs = {
    [NeverDepth]: AlwaysDepth,
    [LessDepth]: GreaterDepth,
    [EqualDepth]: NotEqualDepth,
    [LessEqualDepth]: GreaterEqualDepth,
    [AlwaysDepth]: NeverDepth,
    [GreaterDepth]: LessDepth,
    [NotEqualDepth]: EqualDepth,
    [GreaterEqualDepth]: LessEqualDepth
  };
  function WebGLState(gl, extensions) {
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let reversed = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setReversed: function(value2) {
          if (reversed !== value2) {
            const ext = extensions.get("EXT_clip_control");
            if (reversed) {
              ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT);
            } else {
              ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.NEGATIVE_ONE_TO_ONE_EXT);
            }
            const oldDepth = currentDepthClear;
            currentDepthClear = null;
            this.setClear(oldDepth);
          }
          reversed = value2;
        },
        getReversed: function() {
          return reversed;
        },
        setTest: function(depthTest) {
          if (depthTest) {
            enable(gl.DEPTH_TEST);
          } else {
            disable(gl.DEPTH_TEST);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (reversed) depthFunc = reversedFuncs[depthFunc];
          if (currentDepthFunc !== depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(gl.NEVER);
                break;
              case AlwaysDepth:
                gl.depthFunc(gl.ALWAYS);
                break;
              case LessDepth:
                gl.depthFunc(gl.LESS);
                break;
              case LessEqualDepth:
                gl.depthFunc(gl.LEQUAL);
                break;
              case EqualDepth:
                gl.depthFunc(gl.EQUAL);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(gl.GEQUAL);
                break;
              case GreaterDepth:
                gl.depthFunc(gl.GREATER);
                break;
              case NotEqualDepth:
                gl.depthFunc(gl.NOTEQUAL);
                break;
              default:
                gl.depthFunc(gl.LEQUAL);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            if (reversed) {
              depth = 1 - depth;
            }
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
          reversed = false;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(gl.STENCIL_TEST);
            } else {
              disable(gl.STENCIL_TEST);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = /* @__PURE__ */ new WeakMap();
    const uboProgramMap = /* @__PURE__ */ new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentBlendColor = new Color(0, 0, 0);
    let currentBlendAlpha = 0;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version3 = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
      version3 = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version3 >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version3 = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version3 >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count, dimensions) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      for (let i = 0; i < count; i++) {
        if (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY) {
          gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        } else {
          gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        }
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
    emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(gl.CULL_FACE);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function bindFramebuffer(target, framebuffer) {
      if (currentBoundFramebuffers[target] !== framebuffer) {
        gl.bindFramebuffer(target, framebuffer);
        currentBoundFramebuffers[target] = framebuffer;
        if (target === gl.DRAW_FRAMEBUFFER) {
          currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
        }
        if (target === gl.FRAMEBUFFER) {
          currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
        }
        return true;
      }
      return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
      let drawBuffers2 = defaultDrawbuffers;
      let needsUpdate = false;
      if (renderTarget) {
        drawBuffers2 = currentDrawbuffers.get(framebuffer);
        if (drawBuffers2 === void 0) {
          drawBuffers2 = [];
          currentDrawbuffers.set(framebuffer, drawBuffers2);
        }
        const textures = renderTarget.textures;
        if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
          for (let i = 0, il = textures.length; i < il; i++) {
            drawBuffers2[i] = gl.COLOR_ATTACHMENT0 + i;
          }
          drawBuffers2.length = textures.length;
          needsUpdate = true;
        }
      } else {
        if (drawBuffers2[0] !== gl.BACK) {
          drawBuffers2[0] = gl.BACK;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        gl.drawBuffers(drawBuffers2);
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: gl.FUNC_ADD,
      [SubtractEquation]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    equationToGL[MinEquation] = gl.MIN;
    equationToGL[MaxEquation] = gl.MAX;
    const factorToGL = {
      [ZeroFactor]: gl.ZERO,
      [OneFactor]: gl.ONE,
      [SrcColorFactor]: gl.SRC_COLOR,
      [SrcAlphaFactor]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor]: gl.DST_COLOR,
      [DstAlphaFactor]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,
      [ConstantColorFactor]: gl.CONSTANT_COLOR,
      [OneMinusConstantColorFactor]: gl.ONE_MINUS_CONSTANT_COLOR,
      [ConstantAlphaFactor]: gl.CONSTANT_ALPHA,
      [OneMinusConstantAlphaFactor]: gl.ONE_MINUS_CONSTANT_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled === true) {
          disable(gl.BLEND);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (currentBlendingEnabled === false) {
        enable(gl.BLEND);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(gl.FUNC_ADD);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.ONE, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlendColor.set(0, 0, 0);
          currentBlendAlpha = 0;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {
        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);
        currentBlendColor.copy(blendColor);
        currentBlendAlpha = blendAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
      let flipSided = material.side === BackSide;
      if (frontFaceCW) flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(gl.CW);
        } else {
          gl.frontFace(gl.CCW);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(gl.CULL_FACE);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(gl.BACK);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(gl.FRONT);
          } else {
            gl.cullFace(gl.FRONT_AND_BACK);
          }
        }
      } else {
        disable(gl.CULL_FACE);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable) gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(gl.POLYGON_OFFSET_FILL);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(gl.POLYGON_OFFSET_FILL);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(gl.SCISSOR_TEST);
      } else {
        disable(gl.SCISSOR_TEST);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0) webglSlot = gl.TEXTURE0 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
      if (webglSlot === void 0) {
        if (currentTextureSlot === null) {
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        } else {
          webglSlot = currentTextureSlot;
        }
      }
      let boundTexture = currentBoundTextures[webglSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[webglSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          currentTextureSlot = webglSlot;
        }
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexImage3D() {
      try {
        gl.compressedTexImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage2D() {
      try {
        gl.texSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage3D() {
      try {
        gl.texSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage2D() {
      try {
        gl.compressedTexSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage3D() {
      try {
        gl.compressedTexSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage2D() {
      try {
        gl.texStorage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage3D() {
      try {
        gl.texStorage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function updateUBOMapping(uniformsGroup, program) {
      let mapping = uboProgramMap.get(program);
      if (mapping === void 0) {
        mapping = /* @__PURE__ */ new WeakMap();
        uboProgramMap.set(program, mapping);
      }
      let blockIndex = mapping.get(uniformsGroup);
      if (blockIndex === void 0) {
        blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
        mapping.set(uniformsGroup, blockIndex);
      }
    }
    function uniformBlockBinding(uniformsGroup, program) {
      const mapping = uboProgramMap.get(program);
      const blockIndex = mapping.get(uniformsGroup);
      if (uboBindings.get(program) !== blockIndex) {
        gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
        uboBindings.set(program, blockIndex);
      }
    }
    function reset() {
      gl.disable(gl.BLEND);
      gl.disable(gl.CULL_FACE);
      gl.disable(gl.DEPTH_TEST);
      gl.disable(gl.POLYGON_OFFSET_FILL);
      gl.disable(gl.SCISSOR_TEST);
      gl.disable(gl.STENCIL_TEST);
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.ONE, gl.ZERO);
      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
      gl.blendColor(0, 0, 0, 0);
      gl.colorMask(true, true, true, true);
      gl.clearColor(0, 0, 0, 0);
      gl.depthMask(true);
      gl.depthFunc(gl.LESS);
      depthBuffer.setReversed(false);
      gl.clearDepth(1);
      gl.stencilMask(4294967295);
      gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
      gl.clearStencil(0);
      gl.cullFace(gl.BACK);
      gl.frontFace(gl.CCW);
      gl.polygonOffset(0, 0);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
      gl.useProgram(null);
      gl.lineWidth(1);
      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentBoundFramebuffers = {};
      currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      defaultDrawbuffers = [];
      currentProgram = null;
      currentBlendingEnabled = false;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentBlendColor = new Color(0, 0, 0);
      currentBlendAlpha = 0;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      bindFramebuffer,
      drawBuffers,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      compressedTexImage3D,
      texImage2D,
      texImage3D,
      updateUBOMapping,
      uniformBlockBinding,
      texStorage2D,
      texStorage3D,
      texSubImage2D,
      texSubImage3D,
      compressedTexSubImage2D,
      compressedTexSubImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _imageDimensions = new Vector2();
    const _videoTextures = /* @__PURE__ */ new WeakMap();
    let _canvas2;
    const _sources = /* @__PURE__ */ new WeakMap();
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? (
        // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height)
      ) : createElementNS("canvas");
    }
    function resizeImage(image, needsNewCanvas, maxSize) {
      let scale = 1;
      const dimensions = getDimensions(image);
      if (dimensions.width > maxSize || dimensions.height > maxSize) {
        scale = maxSize / Math.max(dimensions.width, dimensions.height);
      }
      if (scale < 1) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap || typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
          const width = Math.floor(scale * dimensions.width);
          const height = Math.floor(scale * dimensions.height);
          if (_canvas2 === void 0) _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + dimensions.width + "x" + dimensions.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + dimensions.width + "x" + dimensions.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function textureNeedsGenerateMipmaps(texture) {
      return texture.generateMipmaps;
    }
    function generateMipmap(target) {
      _gl.generateMipmap(target);
    }
    function getTargetType(texture) {
      if (texture.isWebGLCubeRenderTarget) return _gl.TEXTURE_CUBE_MAP;
      if (texture.isWebGL3DRenderTarget) return _gl.TEXTURE_3D;
      if (texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture) return _gl.TEXTURE_2D_ARRAY;
      return _gl.TEXTURE_2D;
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0) return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === _gl.RED) {
        if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
      }
      if (glFormat === _gl.RED_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
        if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
        if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
        if (glType === _gl.BYTE) internalFormat = _gl.R8I;
        if (glType === _gl.SHORT) internalFormat = _gl.R16I;
        if (glType === _gl.INT) internalFormat = _gl.R32I;
      }
      if (glFormat === _gl.RG) {
        if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
      }
      if (glFormat === _gl.RG_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8UI;
        if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RG16UI;
        if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RG32UI;
        if (glType === _gl.BYTE) internalFormat = _gl.RG8I;
        if (glType === _gl.SHORT) internalFormat = _gl.RG16I;
        if (glType === _gl.INT) internalFormat = _gl.RG32I;
      }
      if (glFormat === _gl.RGB_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8UI;
        if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGB16UI;
        if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGB32UI;
        if (glType === _gl.BYTE) internalFormat = _gl.RGB8I;
        if (glType === _gl.SHORT) internalFormat = _gl.RGB16I;
        if (glType === _gl.INT) internalFormat = _gl.RGB32I;
      }
      if (glFormat === _gl.RGBA_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8UI;
        if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGBA16UI;
        if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGBA32UI;
        if (glType === _gl.BYTE) internalFormat = _gl.RGBA8I;
        if (glType === _gl.SHORT) internalFormat = _gl.RGBA16I;
        if (glType === _gl.INT) internalFormat = _gl.RGBA32I;
      }
      if (glFormat === _gl.RGB) {
        if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = _gl.RGB9_E5;
      }
      if (glFormat === _gl.RGBA) {
        const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
        if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
        if (glType === _gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
        if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
        if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
      }
      if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function getInternalDepthFormat(useStencil, depthType) {
      let glInternalFormat;
      if (useStencil) {
        if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
          glInternalFormat = _gl.DEPTH24_STENCIL8;
        } else if (depthType === FloatType) {
          glInternalFormat = _gl.DEPTH32F_STENCIL8;
        } else if (depthType === UnsignedShortType) {
          glInternalFormat = _gl.DEPTH24_STENCIL8;
          console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.");
        }
      } else {
        if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
          glInternalFormat = _gl.DEPTH_COMPONENT24;
        } else if (depthType === FloatType) {
          glInternalFormat = _gl.DEPTH_COMPONENT32F;
        } else if (depthType === UnsignedShortType) {
          glInternalFormat = _gl.DEPTH_COMPONENT16;
        }
      }
      return glInternalFormat;
    }
    function getMipLevels(texture, image) {
      if (textureNeedsGenerateMipmaps(texture) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        return Math.log2(Math.max(image.width, image.height)) + 1;
      } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
        return texture.mipmaps.length;
      } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
        return image.mipmaps.length;
      } else {
        return 1;
      }
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0) return;
      const source = texture.source;
      const webglTextures = _sources.get(source);
      if (webglTextures) {
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        webglTexture.usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
        if (Object.keys(webglTextures).length === 0) {
          _sources.delete(source);
        }
      }
      properties.remove(texture);
    }
    function deleteTexture(texture) {
      const textureProperties = properties.get(texture);
      _gl.deleteTexture(textureProperties.__webglTexture);
      const source = texture.source;
      const webglTextures = _sources.get(source);
      delete webglTextures[textureProperties.__cacheKey];
      info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
        properties.remove(renderTarget.depthTexture);
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) {
            for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
          } else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          }
          if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        }
        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer) {
          for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
            if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
          }
        }
        if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      const textures = renderTarget.textures;
      for (let i = 0, il = textures.length; i < il; i++) {
        const attachmentProperties = properties.get(textures[i]);
        if (attachmentProperties.__webglTexture) {
          _gl.deleteTexture(attachmentProperties.__webglTexture);
          info.memory.textures--;
        }
        properties.remove(textures[i]);
      }
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= capabilities.maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function getTextureCacheKey(texture) {
      const array = [];
      array.push(texture.wrapS);
      array.push(texture.wrapT);
      array.push(texture.wrapR || 0);
      array.push(texture.magFilter);
      array.push(texture.minFilter);
      array.push(texture.anisotropy);
      array.push(texture.internalFormat);
      array.push(texture.format);
      array.push(texture.type);
      array.push(texture.generateMipmaps);
      array.push(texture.premultiplyAlpha);
      array.push(texture.flipY);
      array.push(texture.unpackAlignment);
      array.push(texture.colorSpace);
      return array.join();
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture) updateVideoTexture(texture);
      if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === null) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
      [RepeatWrapping]: _gl.REPEAT,
      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
      [NearestFilter]: _gl.NEAREST,
      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter]: _gl.LINEAR,
      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
      [NeverCompare]: _gl.NEVER,
      [AlwaysCompare]: _gl.ALWAYS,
      [LessCompare]: _gl.LESS,
      [LessEqualCompare]: _gl.LEQUAL,
      [EqualCompare]: _gl.EQUAL,
      [GreaterEqualCompare]: _gl.GEQUAL,
      [GreaterCompare]: _gl.GREATER,
      [NotEqualCompare]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture) {
      if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false && (texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter || texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter)) {
        console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");
      }
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
      }
      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
      if (texture.compareFunction) {
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
      }
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        if (texture.magFilter === NearestFilter) return;
        if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;
        if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false) return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          const extension = extensions.get("EXT_texture_filter_anisotropic");
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      let forceUpload = false;
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
      }
      const source = texture.source;
      let webglTextures = _sources.get(source);
      if (webglTextures === void 0) {
        webglTextures = {};
        _sources.set(source, webglTextures);
      }
      const textureCacheKey = getTextureCacheKey(texture);
      if (textureCacheKey !== textureProperties.__cacheKey) {
        if (webglTextures[textureCacheKey] === void 0) {
          webglTextures[textureCacheKey] = {
            texture: _gl.createTexture(),
            usedTimes: 0
          };
          info.memory.textures++;
          forceUpload = true;
        }
        webglTextures[textureCacheKey].usedTimes++;
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        if (webglTexture !== void 0) {
          webglTextures[textureProperties.__cacheKey].usedTimes--;
          if (webglTexture.usedTimes === 0) {
            deleteTexture(texture);
          }
        }
        textureProperties.__cacheKey = textureCacheKey;
        textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
      }
      return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = _gl.TEXTURE_2D;
      if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
      if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
        const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
        const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
        let image = resizeImage(texture.image, false, capabilities.maxTextureSize);
        image = verifyColorSpace(texture, image);
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        let glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
        setTextureParameters(textureType, texture);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const dataReady = source.dataReady;
        const levels = getMipLevels(texture, image);
        if (texture.isDepthTexture) {
          glInternalFormat = getInternalDepthFormat(texture.format === DepthStencilFormat, texture.type);
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
            }
          }
        } else if (texture.isDataTexture) {
          if (mipmaps.length > 0) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            }
          }
        } else if (texture.isCompressedTexture) {
          if (texture.isCompressedArrayTexture) {
            if (useTexStorage && allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      if (texture.layerUpdates.size > 0) {
                        const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture.format, texture.type);
                        for (const layerIndex of texture.layerUpdates) {
                          const layerData = mipmap.data.subarray(
                            layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
                            (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
                          );
                          state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData);
                        }
                        texture.clearLayerUpdates();
                      } else {
                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);
                      }
                    }
                  } else {
                    state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          } else {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    }
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else if (texture.isDataArrayTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            if (dataReady) {
              if (texture.layerUpdates.size > 0) {
                const layerByteLength = getByteLength(image.width, image.height, texture.format, texture.type);
                for (const layerIndex of texture.layerUpdates) {
                  const layerData = image.data.subarray(
                    layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
                    (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
                  );
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
                }
                texture.clearLayerUpdates();
              } else {
                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
              }
            }
          } else {
            state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isData3DTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            if (dataReady) {
              state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            }
          } else {
            state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isFramebufferTexture) {
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            } else {
              let width = image.width, height = image.height;
              for (let i = 0; i < levels; i++) {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                width >>= 1;
                height >>= 1;
              }
            }
          }
        } else {
          if (mipmaps.length > 0) {
            if (useTexStorage && allocateMemory) {
              const dimensions = getDimensions(mipmaps[0]);
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                const dimensions = getDimensions(image);
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
              }
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(textureType);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate) texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6) return;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
        const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
        const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
        const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for (let i = 0; i < 6; i++) {
          if (!isCompressed && !isDataTexture) {
            cubeImage[i] = resizeImage(texture.image[i], true, capabilities.maxCubemapSize);
          } else {
            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
          }
          cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
        }
        const image = cubeImage[0], glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const useTexStorage = texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const dataReady = source.dataReady;
        let levels = getMipLevels(texture, image);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
        let mipmaps;
        if (isCompressed) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
          }
          for (let i = 0; i < 6; i++) {
            mipmaps = cubeImage[i].mipmaps;
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    if (dataReady) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    }
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                }
              } else {
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else {
          mipmaps = texture.mipmaps;
          if (useTexStorage && allocateMemory) {
            if (mipmaps.length > 0) levels++;
            const dimensions = getDimensions(cubeImage[0]);
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);
          }
          for (let i = 0; i < 6; i++) {
            if (isDataTexture) {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                const mipmapImage = mipmap.image[i].image;
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                if (useTexStorage) {
                  if (dataReady) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                  }
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                }
              }
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate) texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      textureProperties.__renderTarget = renderTarget;
      if (!renderTargetProperties.__hasExternalTextures) {
        const width = Math.max(1, renderTarget.width >> level);
        const height = Math.max(1, renderTarget.height >> level);
        if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
          state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
        } else {
          state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples(renderTarget));
      } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level);
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
      if (renderTarget.depthBuffer) {
        const depthTexture = renderTarget.depthTexture;
        const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
        const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);
        const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const samples = getRenderTargetSamples(renderTarget);
        const isUseMultisampledRTT = useMultisampledRTT(renderTarget);
        if (isUseMultisampledRTT) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (isMultisample) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
      } else {
        const textures = renderTarget.textures;
        for (let i = 0; i < textures.length; i++) {
          const texture = textures[i];
          const glFormat = utils.convert(texture.format, texture.colorSpace);
          const glType = utils.convert(texture.type);
          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
          const samples = getRenderTargetSamples(renderTarget);
          if (isMultisample && useMultisampledRTT(renderTarget) === false) {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        }
      }
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      const textureProperties = properties.get(renderTarget.depthTexture);
      textureProperties.__renderTarget = renderTarget;
      if (!textureProperties.__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = textureProperties.__webglTexture;
      const samples = getRenderTargetSamples(renderTarget);
      if (renderTarget.depthTexture.format === DepthFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {
        const depthTexture = renderTarget.depthTexture;
        if (renderTargetProperties.__depthDisposeCallback) {
          renderTargetProperties.__depthDisposeCallback();
        }
        if (depthTexture) {
          const disposeEvent = () => {
            delete renderTargetProperties.__boundDepthTexture;
            delete renderTargetProperties.__depthDisposeCallback;
            depthTexture.removeEventListener("dispose", disposeEvent);
          };
          depthTexture.addEventListener("dispose", disposeEvent);
          renderTargetProperties.__depthDisposeCallback = disposeEvent;
        }
        renderTargetProperties.__boundDepthTexture = depthTexture;
      }
      if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
        if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer[i] === void 0) {
              renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            } else {
              const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
              const renderbuffer = renderTargetProperties.__webglDepthbuffer[i];
              _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
            }
          }
        } else {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          if (renderTargetProperties.__webglDepthbuffer === void 0) {
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
          } else {
            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderbuffer = renderTargetProperties.__webglDepthbuffer;
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
          }
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      if (colorTexture !== void 0) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
      }
      if (depthTexture !== void 0) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function setupRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      const textures = renderTarget.textures;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultipleRenderTargets = textures.length > 1;
      if (!isMultipleRenderTargets) {
        if (textureProperties.__webglTexture === void 0) {
          textureProperties.__webglTexture = _gl.createTexture();
        }
        textureProperties.__version = texture.version;
        info.memory.textures++;
      }
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          if (texture.mipmaps && texture.mipmaps.length > 0) {
            renderTargetProperties.__webglFramebuffer[i] = [];
            for (let level = 0; level < texture.mipmaps.length; level++) {
              renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
            }
          } else {
            renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
          }
        }
      } else {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer = [];
          for (let level = 0; level < texture.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        }
        if (isMultipleRenderTargets) {
          for (let i = 0, il = textures.length; i < il; i++) {
            const attachmentProperties = properties.get(textures[i]);
            if (attachmentProperties.__webglTexture === void 0) {
              attachmentProperties.__webglTexture = _gl.createTexture();
              info.memory.textures++;
            }
          }
        }
        if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = [];
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            const texture2 = textures[i];
            renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const glFormat = utils.convert(texture2.format, texture2.colorSpace);
            const glType = utils.convert(texture2.type);
            const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
        }
      }
      if (isCube) {
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
        for (let i = 0; i < 6; i++) {
          if (texture.mipmaps && texture.mipmaps.length > 0) {
            for (let level = 0; level < texture.mipmaps.length; level++) {
              setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
            }
          } else {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
          }
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        state.unbindTexture();
      } else if (isMultipleRenderTargets) {
        for (let i = 0, il = textures.length; i < il; i++) {
          const attachment = textures[i];
          const attachmentProperties = properties.get(attachment);
          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
          setTextureParameters(_gl.TEXTURE_2D, attachment);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
          if (textureNeedsGenerateMipmaps(attachment)) {
            generateMipmap(_gl.TEXTURE_2D);
          }
        }
        state.unbindTexture();
      } else {
        let glTextureType = _gl.TEXTURE_2D;
        if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
          glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
        }
        state.bindTexture(glTextureType, textureProperties.__webglTexture);
        setTextureParameters(glTextureType, texture);
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          for (let level = 0; level < texture.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
        }
        if (textureNeedsGenerateMipmaps(texture)) {
          generateMipmap(glTextureType);
        }
        state.unbindTexture();
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const textures = renderTarget.textures;
      for (let i = 0, il = textures.length; i < il; i++) {
        const texture = textures[i];
        if (textureNeedsGenerateMipmaps(texture)) {
          const targetType = getTargetType(renderTarget);
          const webglTexture = properties.get(texture).__webglTexture;
          state.bindTexture(targetType, webglTexture);
          generateMipmap(targetType);
          state.unbindTexture();
        }
      }
    }
    const invalidationArrayRead = [];
    const invalidationArrayDraw = [];
    function updateMultisampleRenderTarget(renderTarget) {
      if (renderTarget.samples > 0) {
        if (useMultisampledRTT(renderTarget) === false) {
          const textures = renderTarget.textures;
          const width = renderTarget.width;
          const height = renderTarget.height;
          let mask = _gl.COLOR_BUFFER_BIT;
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderTargetProperties = properties.get(renderTarget);
          const isMultipleRenderTargets = textures.length > 1;
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            if (renderTarget.resolveDepthBuffer) {
              if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
              if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
            }
            if (isMultipleRenderTargets) {
              _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const webglTexture = properties.get(textures[i]).__webglTexture;
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
            }
            _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
            if (supportsInvalidateFramebuffer === true) {
              invalidationArrayRead.length = 0;
              invalidationArrayDraw.length = 0;
              invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i);
              if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {
                invalidationArrayRead.push(depthStyle);
                invalidationArrayDraw.push(depthStyle);
                _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);
              }
              _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const webglTexture = properties.get(textures[i]).__webglTexture;
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
            }
          }
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        } else {
          if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {
            const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
          }
        }
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return Math.min(capabilities.maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      return renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    function verifyColorSpace(texture, image) {
      const colorSpace = texture.colorSpace;
      const format = texture.format;
      const type = texture.type;
      if (texture.isCompressedTexture === true || texture.isVideoTexture === true) return image;
      if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
        if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {
          if (format !== RGBAFormat || type !== UnsignedByteType) {
            console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
          }
        } else {
          console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
        }
      }
      return image;
    }
    function getDimensions(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement) {
        _imageDimensions.width = image.naturalWidth || image.width;
        _imageDimensions.height = image.naturalHeight || image.height;
      } else if (typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
        _imageDimensions.width = image.displayWidth;
        _imageDimensions.height = image.displayHeight;
      } else {
        _imageDimensions.width = image.width;
        _imageDimensions.height = image.height;
      }
      return _imageDimensions;
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
  }
  function WebGLUtils(gl, extensions) {
    function convert(p, colorSpace = NoColorSpace) {
      let extension;
      const transfer = ColorManagement.getTransfer(colorSpace);
      if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
      if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
      if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
      if (p === UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;
      if (p === ByteType) return gl.BYTE;
      if (p === ShortType) return gl.SHORT;
      if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
      if (p === IntType) return gl.INT;
      if (p === UnsignedIntType) return gl.UNSIGNED_INT;
      if (p === FloatType) return gl.FLOAT;
      if (p === HalfFloatType) return gl.HALF_FLOAT;
      if (p === AlphaFormat) return gl.ALPHA;
      if (p === RGBFormat) return gl.RGB;
      if (p === RGBAFormat) return gl.RGBA;
      if (p === LuminanceFormat) return gl.LUMINANCE;
      if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
      if (p === DepthFormat) return gl.DEPTH_COMPONENT;
      if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
      if (p === RedFormat) return gl.RED;
      if (p === RedIntegerFormat) return gl.RED_INTEGER;
      if (p === RGFormat) return gl.RG;
      if (p === RGIntegerFormat) return gl.RG_INTEGER;
      if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        if (transfer === SRGBTransfer) {
          extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC1_Format || p === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
          if (p === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
          if (p === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        } else {
          return null;
        }
      }
      if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
        extension = extensions.get("EXT_texture_compression_rgtc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
          if (p === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (p === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (p === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) return gl.UNSIGNED_INT_24_8;
      return gl[p] !== void 0 ? gl[p] : null;
    }
    return { convert };
  }
  var _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
  var _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
  var WebXRDepthSensing = class {
    constructor() {
      this.texture = null;
      this.mesh = null;
      this.depthNear = 0;
      this.depthFar = 0;
    }
    init(renderer, depthData, renderState) {
      if (this.texture === null) {
        const texture = new Texture();
        const texProps = renderer.properties.get(texture);
        texProps.__webglTexture = depthData.texture;
        if (depthData.depthNear !== renderState.depthNear || depthData.depthFar !== renderState.depthFar) {
          this.depthNear = depthData.depthNear;
          this.depthFar = depthData.depthFar;
        }
        this.texture = texture;
      }
    }
    getMesh(cameraXR) {
      if (this.texture !== null) {
        if (this.mesh === null) {
          const viewport = cameraXR.cameras[0].viewport;
          const material = new ShaderMaterial({
            vertexShader: _occlusion_vertex,
            fragmentShader: _occlusion_fragment,
            uniforms: {
              depthColor: { value: this.texture },
              depthWidth: { value: viewport.z },
              depthHeight: { value: viewport.w }
            }
          });
          this.mesh = new Mesh(new PlaneGeometry(20, 20), material);
        }
      }
      return this.mesh;
    }
    reset() {
      this.texture = null;
      this.mesh = null;
    }
    getDepthTexture() {
      return this.texture;
    }
  };
  var WebXRManager = class extends EventDispatcher {
    constructor(renderer, gl) {
      super();
      const scope = this;
      let session = null;
      let framebufferScaleFactor = 1;
      let referenceSpace = null;
      let referenceSpaceType = "local-floor";
      let foveation = 1;
      let customReferenceSpace = null;
      let pose = null;
      let glBinding = null;
      let glProjLayer = null;
      let glBaseLayer = null;
      let xrFrame = null;
      const depthSensing = new WebXRDepthSensing();
      const attributes = gl.getContextAttributes();
      let initialRenderTarget = null;
      let newRenderTarget = null;
      const controllers = [];
      const controllerInputSources = [];
      const currentSize = new Vector2();
      let currentPixelRatio = null;
      const cameraL = new PerspectiveCamera();
      cameraL.viewport = new Vector4();
      const cameraR = new PerspectiveCamera();
      cameraR.viewport = new Vector4();
      const cameras = [cameraL, cameraR];
      const cameraXR = new ArrayCamera();
      let _currentDepthNear = null;
      let _currentDepthFar = null;
      this.cameraAutoUpdate = true;
      this.enabled = false;
      this.isPresenting = false;
      this.getController = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getTargetRaySpace();
      };
      this.getControllerGrip = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getGripSpace();
      };
      this.getHand = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getHandSpace();
      };
      function onSessionEvent(event) {
        const controllerIndex = controllerInputSources.indexOf(event.inputSource);
        if (controllerIndex === -1) {
          return;
        }
        const controller = controllers[controllerIndex];
        if (controller !== void 0) {
          controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
          controller.dispatchEvent({ type: event.type, data: event.inputSource });
        }
      }
      function onSessionEnd() {
        session.removeEventListener("select", onSessionEvent);
        session.removeEventListener("selectstart", onSessionEvent);
        session.removeEventListener("selectend", onSessionEvent);
        session.removeEventListener("squeeze", onSessionEvent);
        session.removeEventListener("squeezestart", onSessionEvent);
        session.removeEventListener("squeezeend", onSessionEvent);
        session.removeEventListener("end", onSessionEnd);
        session.removeEventListener("inputsourceschange", onInputSourcesChange);
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          if (inputSource === null) continue;
          controllerInputSources[i] = null;
          controllers[i].disconnect(inputSource);
        }
        _currentDepthNear = null;
        _currentDepthFar = null;
        depthSensing.reset();
        renderer.setRenderTarget(initialRenderTarget);
        glBaseLayer = null;
        glProjLayer = null;
        glBinding = null;
        session = null;
        newRenderTarget = null;
        animation.stop();
        scope.isPresenting = false;
        renderer.setPixelRatio(currentPixelRatio);
        renderer.setSize(currentSize.width, currentSize.height, false);
        scope.dispatchEvent({ type: "sessionend" });
      }
      this.setFramebufferScaleFactor = function(value2) {
        framebufferScaleFactor = value2;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }
      };
      this.setReferenceSpaceType = function(value2) {
        referenceSpaceType = value2;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }
      };
      this.getReferenceSpace = function() {
        return customReferenceSpace || referenceSpace;
      };
      this.setReferenceSpace = function(space) {
        customReferenceSpace = space;
      };
      this.getBaseLayer = function() {
        return glProjLayer !== null ? glProjLayer : glBaseLayer;
      };
      this.getBinding = function() {
        return glBinding;
      };
      this.getFrame = function() {
        return xrFrame;
      };
      this.getSession = function() {
        return session;
      };
      this.setSession = async function(value2) {
        session = value2;
        if (session !== null) {
          initialRenderTarget = renderer.getRenderTarget();
          session.addEventListener("select", onSessionEvent);
          session.addEventListener("selectstart", onSessionEvent);
          session.addEventListener("selectend", onSessionEvent);
          session.addEventListener("squeeze", onSessionEvent);
          session.addEventListener("squeezestart", onSessionEvent);
          session.addEventListener("squeezeend", onSessionEvent);
          session.addEventListener("end", onSessionEnd);
          session.addEventListener("inputsourceschange", onInputSourcesChange);
          if (attributes.xrCompatible !== true) {
            await gl.makeXRCompatible();
          }
          currentPixelRatio = renderer.getPixelRatio();
          renderer.getSize(currentSize);
          const useLayers = typeof XRWebGLBinding !== "undefined" && "createProjectionLayer" in XRWebGLBinding.prototype;
          if (!useLayers) {
            const layerInit = {
              antialias: attributes.antialias,
              alpha: true,
              depth: attributes.depth,
              stencil: attributes.stencil,
              framebufferScaleFactor
            };
            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
            session.updateRenderState({ baseLayer: glBaseLayer });
            renderer.setPixelRatio(1);
            renderer.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);
            newRenderTarget = new WebGLRenderTarget(
              glBaseLayer.framebufferWidth,
              glBaseLayer.framebufferHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                colorSpace: renderer.outputColorSpace,
                stencilBuffer: attributes.stencil
              }
            );
          } else {
            let depthFormat = null;
            let depthType = null;
            let glDepthFormat = null;
            if (attributes.depth) {
              glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
              depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
              depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
            }
            const projectionlayerInit = {
              colorFormat: gl.RGBA8,
              depthFormat: glDepthFormat,
              scaleFactor: framebufferScaleFactor
            };
            glBinding = new XRWebGLBinding(session, gl);
            glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
            session.updateRenderState({ layers: [glProjLayer] });
            renderer.setPixelRatio(1);
            renderer.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);
            newRenderTarget = new WebGLRenderTarget(
              glProjLayer.textureWidth,
              glProjLayer.textureHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                stencilBuffer: attributes.stencil,
                colorSpace: renderer.outputColorSpace,
                samples: attributes.antialias ? 4 : 0,
                resolveDepthBuffer: glProjLayer.ignoreDepthValues === false
              }
            );
          }
          newRenderTarget.isXRRenderTarget = true;
          this.setFoveation(foveation);
          customReferenceSpace = null;
          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
          animation.setContext(session);
          animation.start();
          scope.isPresenting = true;
          scope.dispatchEvent({ type: "sessionstart" });
        }
      };
      this.getEnvironmentBlendMode = function() {
        if (session !== null) {
          return session.environmentBlendMode;
        }
      };
      this.getDepthTexture = function() {
        return depthSensing.getDepthTexture();
      };
      function onInputSourcesChange(event) {
        for (let i = 0; i < event.removed.length; i++) {
          const inputSource = event.removed[i];
          const index = controllerInputSources.indexOf(inputSource);
          if (index >= 0) {
            controllerInputSources[index] = null;
            controllers[index].disconnect(inputSource);
          }
        }
        for (let i = 0; i < event.added.length; i++) {
          const inputSource = event.added[i];
          let controllerIndex = controllerInputSources.indexOf(inputSource);
          if (controllerIndex === -1) {
            for (let i2 = 0; i2 < controllers.length; i2++) {
              if (i2 >= controllerInputSources.length) {
                controllerInputSources.push(inputSource);
                controllerIndex = i2;
                break;
              } else if (controllerInputSources[i2] === null) {
                controllerInputSources[i2] = inputSource;
                controllerIndex = i2;
                break;
              }
            }
            if (controllerIndex === -1) break;
          }
          const controller = controllers[controllerIndex];
          if (controller) {
            controller.connect(inputSource);
          }
        }
      }
      const cameraLPos = new Vector3();
      const cameraRPos = new Vector3();
      function setProjectionFromUnion(camera, cameraL2, cameraR2) {
        cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
        cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
        const ipd = cameraLPos.distanceTo(cameraRPos);
        const projL = cameraL2.projectionMatrix.elements;
        const projR = cameraR2.projectionMatrix.elements;
        const near = projL[14] / (projL[10] - 1);
        const far = projL[14] / (projL[10] + 1);
        const topFov = (projL[9] + 1) / projL[5];
        const bottomFov = (projL[9] - 1) / projL[5];
        const leftFov = (projL[8] - 1) / projL[0];
        const rightFov = (projR[8] + 1) / projR[0];
        const left = near * leftFov;
        const right = near * rightFov;
        const zOffset = ipd / (-leftFov + rightFov);
        const xOffset = zOffset * -leftFov;
        cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
        camera.translateX(xOffset);
        camera.translateZ(zOffset);
        camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        if (projL[10] === -1) {
          camera.projectionMatrix.copy(cameraL2.projectionMatrix);
          camera.projectionMatrixInverse.copy(cameraL2.projectionMatrixInverse);
        } else {
          const near2 = near + zOffset;
          const far2 = far + zOffset;
          const left2 = left - xOffset;
          const right2 = right + (ipd - xOffset);
          const top2 = topFov * far / far2 * near2;
          const bottom2 = bottomFov * far / far2 * near2;
          camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
          camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        }
      }
      function updateCamera(camera, parent2) {
        if (parent2 === null) {
          camera.matrixWorld.copy(camera.matrix);
        } else {
          camera.matrixWorld.multiplyMatrices(parent2.matrixWorld, camera.matrix);
        }
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
      }
      this.updateCamera = function(camera) {
        if (session === null) return;
        let depthNear = camera.near;
        let depthFar = camera.far;
        if (depthSensing.texture !== null) {
          if (depthSensing.depthNear > 0) depthNear = depthSensing.depthNear;
          if (depthSensing.depthFar > 0) depthFar = depthSensing.depthFar;
        }
        cameraXR.near = cameraR.near = cameraL.near = depthNear;
        cameraXR.far = cameraR.far = cameraL.far = depthFar;
        if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
          session.updateRenderState({
            depthNear: cameraXR.near,
            depthFar: cameraXR.far
          });
          _currentDepthNear = cameraXR.near;
          _currentDepthFar = cameraXR.far;
        }
        cameraL.layers.mask = camera.layers.mask | 2;
        cameraR.layers.mask = camera.layers.mask | 4;
        cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;
        const parent2 = camera.parent;
        const cameras2 = cameraXR.cameras;
        updateCamera(cameraXR, parent2);
        for (let i = 0; i < cameras2.length; i++) {
          updateCamera(cameras2[i], parent2);
        }
        if (cameras2.length === 2) {
          setProjectionFromUnion(cameraXR, cameraL, cameraR);
        } else {
          cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
        }
        updateUserCamera(camera, cameraXR, parent2);
      };
      function updateUserCamera(camera, cameraXR2, parent2) {
        if (parent2 === null) {
          camera.matrix.copy(cameraXR2.matrixWorld);
        } else {
          camera.matrix.copy(parent2.matrixWorld);
          camera.matrix.invert();
          camera.matrix.multiply(cameraXR2.matrixWorld);
        }
        camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
        camera.updateMatrixWorld(true);
        camera.projectionMatrix.copy(cameraXR2.projectionMatrix);
        camera.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
        if (camera.isPerspectiveCamera) {
          camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
          camera.zoom = 1;
        }
      }
      this.getCamera = function() {
        return cameraXR;
      };
      this.getFoveation = function() {
        if (glProjLayer === null && glBaseLayer === null) {
          return void 0;
        }
        return foveation;
      };
      this.setFoveation = function(value2) {
        foveation = value2;
        if (glProjLayer !== null) {
          glProjLayer.fixedFoveation = value2;
        }
        if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
          glBaseLayer.fixedFoveation = value2;
        }
      };
      this.hasDepthSensing = function() {
        return depthSensing.texture !== null;
      };
      this.getDepthSensingMesh = function() {
        return depthSensing.getMesh(cameraXR);
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time, frame) {
        pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
        xrFrame = frame;
        if (pose !== null) {
          const views = pose.views;
          if (glBaseLayer !== null) {
            renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
            renderer.setRenderTarget(newRenderTarget);
          }
          let cameraXRNeedsUpdate = false;
          if (views.length !== cameraXR.cameras.length) {
            cameraXR.cameras.length = 0;
            cameraXRNeedsUpdate = true;
          }
          for (let i = 0; i < views.length; i++) {
            const view = views[i];
            let viewport = null;
            if (glBaseLayer !== null) {
              viewport = glBaseLayer.getViewport(view);
            } else {
              const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
              viewport = glSubImage.viewport;
              if (i === 0) {
                renderer.setRenderTargetTextures(
                  newRenderTarget,
                  glSubImage.colorTexture,
                  glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
                );
                renderer.setRenderTarget(newRenderTarget);
              }
            }
            let camera = cameras[i];
            if (camera === void 0) {
              camera = new PerspectiveCamera();
              camera.layers.enable(i);
              camera.viewport = new Vector4();
              cameras[i] = camera;
            }
            camera.matrix.fromArray(view.transform.matrix);
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.projectionMatrix.fromArray(view.projectionMatrix);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
            camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
            if (i === 0) {
              cameraXR.matrix.copy(camera.matrix);
              cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
            }
            if (cameraXRNeedsUpdate === true) {
              cameraXR.cameras.push(camera);
            }
          }
          const enabledFeatures = session.enabledFeatures;
          const gpuDepthSensingEnabled = enabledFeatures && enabledFeatures.includes("depth-sensing") && session.depthUsage == "gpu-optimized";
          if (gpuDepthSensingEnabled && glBinding) {
            const depthData = glBinding.getDepthInformation(views[0]);
            if (depthData && depthData.isValid && depthData.texture) {
              depthSensing.init(renderer, depthData, session.renderState);
            }
          }
        }
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          const controller = controllers[i];
          if (inputSource !== null && controller !== void 0) {
            controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
          }
        }
        if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
        if (frame.detectedPlanes) {
          scope.dispatchEvent({ type: "planesdetected", data: frame });
        }
        xrFrame = null;
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
      };
      this.dispose = function() {
      };
    }
  };
  var _e1 = /* @__PURE__ */ new Euler();
  var _m12 = /* @__PURE__ */ new Matrix4();
  function WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
      if (map.matrixAutoUpdate === true) {
        map.updateMatrix();
      }
      uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
      fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsStandard(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide) {
          uniforms.bumpScale.value *= -1;
        }
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide) {
          uniforms.normalScale.value.negate();
        }
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
        refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
        refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      const materialProperties = properties.get(material);
      const envMap = materialProperties.envMap;
      const envMapRotation = materialProperties.envMapRotation;
      if (envMap) {
        uniforms.envMap.value = envMap;
        _e1.copy(envMapRotation);
        _e1.x *= -1;
        _e1.y *= -1;
        _e1.z *= -1;
        if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {
          _e1.y *= -1;
          _e1.z *= -1;
        }
        uniforms.envMapRotation.value.setFromMatrix4(_m12.makeRotationFromEuler(_e1));
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.ior.value = material.ior;
        uniforms.refractionRatio.value = material.refractionRatio;
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        uniforms.lightMapIntensity.value = material.lightMapIntensity;
        refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
        refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.uvTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.metalness.value = material.metalness;
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
        refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
      }
      uniforms.roughness.value = material.roughness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
        refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
      }
      if (material.envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
      uniforms.ior.value = material.ior;
      if (material.sheen > 0) {
        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
        uniforms.sheenRoughness.value = material.sheenRoughness;
        if (material.sheenColorMap) {
          uniforms.sheenColorMap.value = material.sheenColorMap;
          refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
        }
        if (material.sheenRoughnessMap) {
          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
          refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
        }
      }
      if (material.clearcoat > 0) {
        uniforms.clearcoat.value = material.clearcoat;
        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
        if (material.clearcoatMap) {
          uniforms.clearcoatMap.value = material.clearcoatMap;
          refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
        }
        if (material.clearcoatRoughnessMap) {
          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
          refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
        }
        if (material.clearcoatNormalMap) {
          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
          refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
          if (material.side === BackSide) {
            uniforms.clearcoatNormalScale.value.negate();
          }
        }
      }
      if (material.dispersion > 0) {
        uniforms.dispersion.value = material.dispersion;
      }
      if (material.iridescence > 0) {
        uniforms.iridescence.value = material.iridescence;
        uniforms.iridescenceIOR.value = material.iridescenceIOR;
        uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
        uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
        if (material.iridescenceMap) {
          uniforms.iridescenceMap.value = material.iridescenceMap;
          refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
        }
        if (material.iridescenceThicknessMap) {
          uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
          refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
        }
      }
      if (material.transmission > 0) {
        uniforms.transmission.value = material.transmission;
        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
        if (material.transmissionMap) {
          uniforms.transmissionMap.value = material.transmissionMap;
          refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
        }
        uniforms.thickness.value = material.thickness;
        if (material.thicknessMap) {
          uniforms.thicknessMap.value = material.thicknessMap;
          refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
        }
        uniforms.attenuationDistance.value = material.attenuationDistance;
        uniforms.attenuationColor.value.copy(material.attenuationColor);
      }
      if (material.anisotropy > 0) {
        uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
        if (material.anisotropyMap) {
          uniforms.anisotropyMap.value = material.anisotropyMap;
          refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
        }
      }
      uniforms.specularIntensity.value = material.specularIntensity;
      uniforms.specularColor.value.copy(material.specularColor);
      if (material.specularColorMap) {
        uniforms.specularColorMap.value = material.specularColorMap;
        refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
      }
      if (material.specularIntensityMap) {
        uniforms.specularIntensityMap.value = material.specularIntensityMap;
        refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      const light = properties.get(material).light;
      uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
      uniforms.nearDistance.value = light.shadow.camera.near;
      uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
    function bind(uniformsGroup, program) {
      const webglProgram = program.program;
      state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
      let buffer = buffers[uniformsGroup.id];
      if (buffer === void 0) {
        prepareUniformsGroup(uniformsGroup);
        buffer = createBuffer(uniformsGroup);
        buffers[uniformsGroup.id] = buffer;
        uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
      }
      const webglProgram = program.program;
      state.updateUBOMapping(uniformsGroup, webglProgram);
      const frame = info.render.frame;
      if (updateList[uniformsGroup.id] !== frame) {
        updateBufferData(uniformsGroup);
        updateList[uniformsGroup.id] = frame;
      }
    }
    function createBuffer(uniformsGroup) {
      const bindingPointIndex = allocateBindingPointIndex();
      uniformsGroup.__bindingPointIndex = bindingPointIndex;
      const buffer = gl.createBuffer();
      const size = uniformsGroup.__size;
      const usage = uniformsGroup.usage;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
      return buffer;
    }
    function allocateBindingPointIndex() {
      for (let i = 0; i < maxBindingPoints; i++) {
        if (allocatedBindingPoints.indexOf(i) === -1) {
          allocatedBindingPoints.push(i);
          return i;
        }
      }
      console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
      return 0;
    }
    function updateBufferData(uniformsGroup) {
      const buffer = buffers[uniformsGroup.id];
      const uniforms = uniformsGroup.uniforms;
      const cache = uniformsGroup.__cache;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      for (let i = 0, il = uniforms.length; i < il; i++) {
        const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
        for (let j = 0, jl = uniformArray.length; j < jl; j++) {
          const uniform = uniformArray[j];
          if (hasUniformChanged(uniform, i, j, cache) === true) {
            const offset = uniform.__offset;
            const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
            let arrayOffset = 0;
            for (let k = 0; k < values.length; k++) {
              const value2 = values[k];
              const info2 = getUniformSize(value2);
              if (typeof value2 === "number" || typeof value2 === "boolean") {
                uniform.__data[0] = value2;
                gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
              } else if (value2.isMatrix3) {
                uniform.__data[0] = value2.elements[0];
                uniform.__data[1] = value2.elements[1];
                uniform.__data[2] = value2.elements[2];
                uniform.__data[3] = 0;
                uniform.__data[4] = value2.elements[3];
                uniform.__data[5] = value2.elements[4];
                uniform.__data[6] = value2.elements[5];
                uniform.__data[7] = 0;
                uniform.__data[8] = value2.elements[6];
                uniform.__data[9] = value2.elements[7];
                uniform.__data[10] = value2.elements[8];
                uniform.__data[11] = 0;
              } else {
                value2.toArray(uniform.__data, arrayOffset);
                arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
              }
            }
            gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
          }
        }
      }
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, indexArray, cache) {
      const value2 = uniform.value;
      const indexString = index + "_" + indexArray;
      if (cache[indexString] === void 0) {
        if (typeof value2 === "number" || typeof value2 === "boolean") {
          cache[indexString] = value2;
        } else {
          cache[indexString] = value2.clone();
        }
        return true;
      } else {
        const cachedObject = cache[indexString];
        if (typeof value2 === "number" || typeof value2 === "boolean") {
          if (cachedObject !== value2) {
            cache[indexString] = value2;
            return true;
          }
        } else {
          if (cachedObject.equals(value2) === false) {
            cachedObject.copy(value2);
            return true;
          }
        }
      }
      return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
      const uniforms = uniformsGroup.uniforms;
      let offset = 0;
      const chunkSize = 16;
      for (let i = 0, l = uniforms.length; i < l; i++) {
        const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
        for (let j = 0, jl = uniformArray.length; j < jl; j++) {
          const uniform = uniformArray[j];
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          for (let k = 0, kl = values.length; k < kl; k++) {
            const value2 = values[k];
            const info2 = getUniformSize(value2);
            const chunkOffset2 = offset % chunkSize;
            const chunkPadding = chunkOffset2 % info2.boundary;
            const chunkStart = chunkOffset2 + chunkPadding;
            offset += chunkPadding;
            if (chunkStart !== 0 && chunkSize - chunkStart < info2.storage) {
              offset += chunkSize - chunkStart;
            }
            uniform.__data = new Float32Array(info2.storage / Float32Array.BYTES_PER_ELEMENT);
            uniform.__offset = offset;
            offset += info2.storage;
          }
        }
      }
      const chunkOffset = offset % chunkSize;
      if (chunkOffset > 0) offset += chunkSize - chunkOffset;
      uniformsGroup.__size = offset;
      uniformsGroup.__cache = {};
      return this;
    }
    function getUniformSize(value2) {
      const info2 = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      };
      if (typeof value2 === "number" || typeof value2 === "boolean") {
        info2.boundary = 4;
        info2.storage = 4;
      } else if (value2.isVector2) {
        info2.boundary = 8;
        info2.storage = 8;
      } else if (value2.isVector3 || value2.isColor) {
        info2.boundary = 16;
        info2.storage = 12;
      } else if (value2.isVector4) {
        info2.boundary = 16;
        info2.storage = 16;
      } else if (value2.isMatrix3) {
        info2.boundary = 48;
        info2.storage = 48;
      } else if (value2.isMatrix4) {
        info2.boundary = 64;
        info2.storage = 64;
      } else if (value2.isTexture) {
        console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
      } else {
        console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value2);
      }
      return info2;
    }
    function onUniformsGroupsDispose(event) {
      const uniformsGroup = event.target;
      uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
      const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
      allocatedBindingPoints.splice(index, 1);
      gl.deleteBuffer(buffers[uniformsGroup.id]);
      delete buffers[uniformsGroup.id];
      delete updateList[uniformsGroup.id];
    }
    function dispose() {
      for (const id in buffers) {
        gl.deleteBuffer(buffers[id]);
      }
      allocatedBindingPoints = [];
      buffers = {};
      updateList = {};
    }
    return {
      bind,
      update,
      dispose
    };
  }
  var WebGLRenderer = class {
    constructor(parameters = {}) {
      const {
        canvas = createCanvasElement(),
        context = null,
        depth = true,
        stencil = false,
        alpha = false,
        antialias = false,
        premultipliedAlpha = true,
        preserveDrawingBuffer = false,
        powerPreference = "default",
        failIfMajorPerformanceCaveat = false,
        reverseDepthBuffer = false
      } = parameters;
      this.isWebGLRenderer = true;
      let _alpha;
      if (context !== null) {
        if (typeof WebGLRenderingContext !== "undefined" && context instanceof WebGLRenderingContext) {
          throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
        }
        _alpha = context.getContextAttributes().alpha;
      } else {
        _alpha = alpha;
      }
      const uintClearColor = new Uint32Array(4);
      const intClearColor = new Int32Array(4);
      let currentRenderList = null;
      let currentRenderState = null;
      const renderListStack = [];
      const renderStateStack = [];
      this.domElement = canvas;
      this.debug = {
        /**
         * Enables error checking and reporting when shader programs are being compiled
         * @type {boolean}
         */
        checkShaderErrors: true,
        /**
         * Callback for custom error reporting.
         * @type {?Function}
         */
        onShaderError: null
      };
      this.autoClear = true;
      this.autoClearColor = true;
      this.autoClearDepth = true;
      this.autoClearStencil = true;
      this.sortObjects = true;
      this.clippingPlanes = [];
      this.localClippingEnabled = false;
      this._outputColorSpace = SRGBColorSpace;
      this.toneMapping = NoToneMapping;
      this.toneMappingExposure = 1;
      const _this = this;
      let _isContextLost = false;
      let _currentActiveCubeFace = 0;
      let _currentActiveMipmapLevel = 0;
      let _currentRenderTarget = null;
      let _currentMaterialId = -1;
      let _currentCamera = null;
      const _currentViewport = new Vector4();
      const _currentScissor = new Vector4();
      let _currentScissorTest = null;
      const _currentClearColor = new Color(0);
      let _currentClearAlpha = 0;
      let _width = canvas.width;
      let _height = canvas.height;
      let _pixelRatio = 1;
      let _opaqueSort = null;
      let _transparentSort = null;
      const _viewport = new Vector4(0, 0, _width, _height);
      const _scissor = new Vector4(0, 0, _width, _height);
      let _scissorTest = false;
      const _frustum = new Frustum();
      let _clippingEnabled = false;
      let _localClippingEnabled = false;
      this.transmissionResolutionScale = 1;
      const _currentProjectionMatrix = new Matrix4();
      const _projScreenMatrix = new Matrix4();
      const _vector3 = new Vector3();
      const _vector4 = new Vector4();
      const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
      let _renderBackground = false;
      function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
      }
      let _gl = context;
      function getContext(contextName, contextAttributes) {
        return canvas.getContext(contextName, contextAttributes);
      }
      try {
        const contextAttributes = {
          alpha: true,
          depth,
          stencil,
          antialias,
          premultipliedAlpha,
          preserveDrawingBuffer,
          powerPreference,
          failIfMajorPerformanceCaveat
        };
        if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${REVISION}`);
        canvas.addEventListener("webglcontextlost", onContextLost, false);
        canvas.addEventListener("webglcontextrestored", onContextRestore, false);
        canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
        if (_gl === null) {
          const contextName = "webgl2";
          _gl = getContext(contextName, contextAttributes);
          if (_gl === null) {
            if (getContext(contextName)) {
              throw new Error("Error creating WebGL context with your selected attributes.");
            } else {
              throw new Error("Error creating WebGL context.");
            }
          }
        }
      } catch (error) {
        console.error("THREE.WebGLRenderer: " + error.message);
        throw error;
      }
      let extensions, capabilities, state, info;
      let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
      let programCache, materials, renderLists, renderStates, clipping, shadowMap;
      let background, morphtargets, bufferRenderer, indexedBufferRenderer;
      let utils, bindingStates, uniformsGroups;
      function initGLContext() {
        extensions = new WebGLExtensions(_gl);
        extensions.init();
        utils = new WebGLUtils(_gl, extensions);
        capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);
        state = new WebGLState(_gl, extensions);
        if (capabilities.reverseDepthBuffer && reverseDepthBuffer) {
          state.buffers.depth.setReversed(true);
        }
        info = new WebGLInfo(_gl);
        properties = new WebGLProperties();
        textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new WebGLCubeMaps(_this);
        cubeuvmaps = new WebGLCubeUVMaps(_this);
        attributes = new WebGLAttributes(_gl);
        bindingStates = new WebGLBindingStates(_gl, attributes);
        geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
        clipping = new WebGLClipping(properties);
        programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new WebGLMaterials(_this, properties);
        renderLists = new WebGLRenderLists();
        renderStates = new WebGLRenderStates(extensions);
        background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
        shadowMap = new WebGLShadowMap(_this, objects, capabilities);
        uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
        bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);
        indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
      }
      initGLContext();
      const xr = new WebXRManager(_this, _gl);
      this.xr = xr;
      this.getContext = function() {
        return _gl;
      };
      this.getContextAttributes = function() {
        return _gl.getContextAttributes();
      };
      this.forceContextLoss = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension) extension.loseContext();
      };
      this.forceContextRestore = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension) extension.restoreContext();
      };
      this.getPixelRatio = function() {
        return _pixelRatio;
      };
      this.setPixelRatio = function(value2) {
        if (value2 === void 0) return;
        _pixelRatio = value2;
        this.setSize(_width, _height, false);
      };
      this.getSize = function(target) {
        return target.set(_width, _height);
      };
      this.setSize = function(width, height, updateStyle = true) {
        if (xr.isPresenting) {
          console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
          return;
        }
        _width = width;
        _height = height;
        canvas.width = Math.floor(width * _pixelRatio);
        canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle === true) {
          canvas.style.width = width + "px";
          canvas.style.height = height + "px";
        }
        this.setViewport(0, 0, width, height);
      };
      this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
      };
      this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        canvas.width = Math.floor(width * pixelRatio);
        canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
      };
      this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
      };
      this.getViewport = function(target) {
        return target.copy(_viewport);
      };
      this.setViewport = function(x, y, width, height) {
        if (x.isVector4) {
          _viewport.set(x.x, x.y, x.z, x.w);
        } else {
          _viewport.set(x, y, width, height);
        }
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).round());
      };
      this.getScissor = function(target) {
        return target.copy(_scissor);
      };
      this.setScissor = function(x, y, width, height) {
        if (x.isVector4) {
          _scissor.set(x.x, x.y, x.z, x.w);
        } else {
          _scissor.set(x, y, width, height);
        }
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());
      };
      this.getScissorTest = function() {
        return _scissorTest;
      };
      this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
      };
      this.setOpaqueSort = function(method) {
        _opaqueSort = method;
      };
      this.setTransparentSort = function(method) {
        _transparentSort = method;
      };
      this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
      };
      this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
      };
      this.getClearAlpha = function() {
        return background.getClearAlpha();
      };
      this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
      };
      this.clear = function(color = true, depth2 = true, stencil2 = true) {
        let bits = 0;
        if (color) {
          let isIntegerFormat = false;
          if (_currentRenderTarget !== null) {
            const targetFormat = _currentRenderTarget.texture.format;
            isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
          }
          if (isIntegerFormat) {
            const targetType = _currentRenderTarget.texture.type;
            const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
            const clearColor = background.getClearColor();
            const a = background.getClearAlpha();
            const r = clearColor.r;
            const g = clearColor.g;
            const b = clearColor.b;
            if (isUnsignedType) {
              uintClearColor[0] = r;
              uintClearColor[1] = g;
              uintClearColor[2] = b;
              uintClearColor[3] = a;
              _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
            } else {
              intClearColor[0] = r;
              intClearColor[1] = g;
              intClearColor[2] = b;
              intClearColor[3] = a;
              _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
            }
          } else {
            bits |= _gl.COLOR_BUFFER_BIT;
          }
        }
        if (depth2) {
          bits |= _gl.DEPTH_BUFFER_BIT;
        }
        if (stencil2) {
          bits |= _gl.STENCIL_BUFFER_BIT;
          this.state.buffers.stencil.setMask(4294967295);
        }
        _gl.clear(bits);
      };
      this.clearColor = function() {
        this.clear(true, false, false);
      };
      this.clearDepth = function() {
        this.clear(false, true, false);
      };
      this.clearStencil = function() {
        this.clear(false, false, true);
      };
      this.dispose = function() {
        canvas.removeEventListener("webglcontextlost", onContextLost, false);
        canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
        canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
        background.dispose();
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        uniformsGroups.dispose();
        programCache.dispose();
        xr.dispose();
        xr.removeEventListener("sessionstart", onXRSessionStart);
        xr.removeEventListener("sessionend", onXRSessionEnd);
        animation.stop();
      };
      function onContextLost(event) {
        event.preventDefault();
        console.log("THREE.WebGLRenderer: Context Lost.");
        _isContextLost = true;
      }
      function onContextRestore() {
        console.log("THREE.WebGLRenderer: Context Restored.");
        _isContextLost = false;
        const infoAutoReset = info.autoReset;
        const shadowMapEnabled = shadowMap.enabled;
        const shadowMapAutoUpdate = shadowMap.autoUpdate;
        const shadowMapNeedsUpdate = shadowMap.needsUpdate;
        const shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
      }
      function onContextCreationError(event) {
        console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
      }
      function onMaterialDispose(event) {
        const material = event.target;
        material.removeEventListener("dispose", onMaterialDispose);
        deallocateMaterial(material);
      }
      function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
      }
      function releaseMaterialProgramReferences(material) {
        const programs = properties.get(material).programs;
        if (programs !== void 0) {
          programs.forEach(function(program) {
            programCache.releaseProgram(program);
          });
          if (material.isShaderMaterial) {
            programCache.releaseShaderCache(material);
          }
        }
      }
      this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null) scene = _emptyScene;
        const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        const program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        let index = geometry.index;
        let rangeFactor = 1;
        if (material.wireframe === true) {
          index = geometries.getWireframeAttribute(geometry);
          if (index === void 0) return;
          rangeFactor = 2;
        }
        const drawRange = geometry.drawRange;
        const position = geometry.attributes.position;
        let drawStart = drawRange.start * rangeFactor;
        let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
        if (group !== null) {
          drawStart = Math.max(drawStart, group.start * rangeFactor);
          drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
        }
        if (index !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, index.count);
        } else if (position !== void 0 && position !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, position.count);
        }
        const drawCount = drawEnd - drawStart;
        if (drawCount < 0 || drawCount === Infinity) return;
        bindingStates.setup(object, material, program, geometry, index);
        let attribute;
        let renderer = bufferRenderer;
        if (index !== null) {
          attribute = attributes.get(index);
          renderer = indexedBufferRenderer;
          renderer.setIndex(attribute);
        }
        if (object.isMesh) {
          if (material.wireframe === true) {
            state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
            renderer.setMode(_gl.LINES);
          } else {
            renderer.setMode(_gl.TRIANGLES);
          }
        } else if (object.isLine) {
          let lineWidth = material.linewidth;
          if (lineWidth === void 0) lineWidth = 1;
          state.setLineWidth(lineWidth * getTargetPixelRatio());
          if (object.isLineSegments) {
            renderer.setMode(_gl.LINES);
          } else if (object.isLineLoop) {
            renderer.setMode(_gl.LINE_LOOP);
          } else {
            renderer.setMode(_gl.LINE_STRIP);
          }
        } else if (object.isPoints) {
          renderer.setMode(_gl.POINTS);
        } else if (object.isSprite) {
          renderer.setMode(_gl.TRIANGLES);
        }
        if (object.isBatchedMesh) {
          if (object._multiDrawInstances !== null) {
            renderer.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
          } else {
            if (!extensions.get("WEBGL_multi_draw")) {
              const starts = object._multiDrawStarts;
              const counts = object._multiDrawCounts;
              const drawCount2 = object._multiDrawCount;
              const bytesPerElement = index ? attributes.get(index).bytesPerElement : 1;
              const uniforms = properties.get(material).currentProgram.getUniforms();
              for (let i = 0; i < drawCount2; i++) {
                uniforms.setValue(_gl, "_gl_DrawID", i);
                renderer.render(starts[i] / bytesPerElement, counts[i]);
              }
            } else {
              renderer.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
            }
          }
        } else if (object.isInstancedMesh) {
          renderer.renderInstances(drawStart, drawCount, object.count);
        } else if (geometry.isInstancedBufferGeometry) {
          const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
          const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
          renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else {
          renderer.render(drawStart, drawCount);
        }
      };
      function prepareMaterial(material, scene, object) {
        if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
          material.side = BackSide;
          material.needsUpdate = true;
          getProgram(material, scene, object);
          material.side = FrontSide;
          material.needsUpdate = true;
          getProgram(material, scene, object);
          material.side = DoubleSide;
        } else {
          getProgram(material, scene, object);
        }
      }
      this.compile = function(scene, camera, targetScene = null) {
        if (targetScene === null) targetScene = scene;
        currentRenderState = renderStates.get(targetScene);
        currentRenderState.init(camera);
        renderStateStack.push(currentRenderState);
        targetScene.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera.layers)) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          }
        });
        if (scene !== targetScene) {
          scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
              currentRenderState.pushLight(object);
              if (object.castShadow) {
                currentRenderState.pushShadow(object);
              }
            }
          });
        }
        currentRenderState.setupLights();
        const materials2 = /* @__PURE__ */ new Set();
        scene.traverse(function(object) {
          if (!(object.isMesh || object.isPoints || object.isLine || object.isSprite)) {
            return;
          }
          const material = object.material;
          if (material) {
            if (Array.isArray(material)) {
              for (let i = 0; i < material.length; i++) {
                const material2 = material[i];
                prepareMaterial(material2, targetScene, object);
                materials2.add(material2);
              }
            } else {
              prepareMaterial(material, targetScene, object);
              materials2.add(material);
            }
          }
        });
        renderStateStack.pop();
        currentRenderState = null;
        return materials2;
      };
      this.compileAsync = function(scene, camera, targetScene = null) {
        const materials2 = this.compile(scene, camera, targetScene);
        return new Promise((resolve) => {
          function checkMaterialsReady() {
            materials2.forEach(function(material) {
              const materialProperties = properties.get(material);
              const program = materialProperties.currentProgram;
              if (program.isReady()) {
                materials2.delete(material);
              }
            });
            if (materials2.size === 0) {
              resolve(scene);
              return;
            }
            setTimeout(checkMaterialsReady, 10);
          }
          if (extensions.get("KHR_parallel_shader_compile") !== null) {
            checkMaterialsReady();
          } else {
            setTimeout(checkMaterialsReady, 10);
          }
        });
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time) {
        if (onAnimationFrameCallback) onAnimationFrameCallback(time);
      }
      function onXRSessionStart() {
        animation.stop();
      }
      function onXRSessionEnd() {
        animation.start();
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      if (typeof self !== "undefined") animation.setContext(self);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
      };
      xr.addEventListener("sessionstart", onXRSessionStart);
      xr.addEventListener("sessionend", onXRSessionEnd);
      this.render = function(scene, camera) {
        if (camera !== void 0 && camera.isCamera !== true) {
          console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          return;
        }
        if (_isContextLost === true) return;
        if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
        if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
          if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
          camera = xr.getCamera();
        }
        if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init(camera);
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
        currentRenderList = renderLists.get(scene, renderListStack.length);
        currentRenderList.init();
        renderListStack.push(currentRenderList);
        if (xr.enabled === true && xr.isPresenting === true) {
          const depthSensingMesh = _this.xr.getDepthSensingMesh();
          if (depthSensingMesh !== null) {
            projectObject(depthSensingMesh, camera, -Infinity, _this.sortObjects);
          }
        }
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList.finish();
        if (_this.sortObjects === true) {
          currentRenderList.sort(_opaqueSort, _transparentSort);
        }
        _renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
        if (_renderBackground) {
          background.addToRenderList(currentRenderList, scene);
        }
        this.info.render.frame++;
        if (_clippingEnabled === true) clipping.beginShadows();
        const shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true) clipping.endShadows();
        if (this.info.autoReset === true) this.info.reset();
        const opaqueObjects = currentRenderList.opaque;
        const transmissiveObjects = currentRenderList.transmissive;
        currentRenderState.setupLights();
        if (camera.isArrayCamera) {
          const cameras = camera.cameras;
          if (transmissiveObjects.length > 0) {
            for (let i = 0, l = cameras.length; i < l; i++) {
              const camera2 = cameras[i];
              renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera2);
            }
          }
          if (_renderBackground) background.render(scene);
          for (let i = 0, l = cameras.length; i < l; i++) {
            const camera2 = cameras[i];
            renderScene(currentRenderList, scene, camera2, camera2.viewport);
          }
        } else {
          if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
          if (_renderBackground) background.render(scene);
          renderScene(currentRenderList, scene, camera);
        }
        if (_currentRenderTarget !== null && _currentActiveMipmapLevel === 0) {
          textures.updateMultisampleRenderTarget(_currentRenderTarget);
          textures.updateRenderTargetMipmap(_currentRenderTarget);
        }
        if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) {
          currentRenderState = renderStateStack[renderStateStack.length - 1];
          if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);
        } else {
          currentRenderState = null;
        }
        renderListStack.pop();
        if (renderListStack.length > 0) {
          currentRenderList = renderListStack[renderListStack.length - 1];
        } else {
          currentRenderList = null;
        }
      };
      function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible) {
          if (object.isGroup) {
            groupOrder = object.renderOrder;
          } else if (object.isLOD) {
            if (object.autoUpdate === true) object.update(camera);
          } else if (object.isLight) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          } else if (object.isSprite) {
            if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
              if (sortObjects) {
                _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              const geometry = objects.update(object);
              const material = object.material;
              if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
              }
            }
          } else if (object.isMesh || object.isLine || object.isPoints) {
            if (!object.frustumCulled || _frustum.intersectsObject(object)) {
              const geometry = objects.update(object);
              const material = object.material;
              if (sortObjects) {
                if (object.boundingSphere !== void 0) {
                  if (object.boundingSphere === null) object.computeBoundingSphere();
                  _vector4.copy(object.boundingSphere.center);
                } else {
                  if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                  _vector4.copy(geometry.boundingSphere.center);
                }
                _vector4.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              if (Array.isArray(material)) {
                const groups = geometry.groups;
                for (let i = 0, l = groups.length; i < l; i++) {
                  const group = groups[i];
                  const groupMaterial = material[group.materialIndex];
                  if (groupMaterial && groupMaterial.visible) {
                    currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group);
                  }
                }
              } else if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
              }
            }
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          projectObject(children[i], camera, groupOrder, sortObjects);
        }
      }
      function renderScene(currentRenderList2, scene, camera, viewport) {
        const opaqueObjects = currentRenderList2.opaque;
        const transmissiveObjects = currentRenderList2.transmissive;
        const transparentObjects = currentRenderList2.transparent;
        currentRenderState.setupLightsView(camera);
        if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
        if (viewport) state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
      }
      function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        if (overrideMaterial !== null) {
          return;
        }
        if (currentRenderState.state.transmissionRenderTarget[camera.id] === void 0) {
          currentRenderState.state.transmissionRenderTarget[camera.id] = new WebGLRenderTarget(1, 1, {
            generateMipmaps: true,
            type: extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float") ? HalfFloatType : UnsignedByteType,
            minFilter: LinearMipmapLinearFilter,
            samples: 4,
            stencilBuffer: stencil,
            resolveDepthBuffer: false,
            resolveStencilBuffer: false,
            colorSpace: ColorManagement.workingColorSpace
          });
        }
        const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera.id];
        const activeViewport = camera.viewport || _currentViewport;
        transmissionRenderTarget.setSize(activeViewport.z * _this.transmissionResolutionScale, activeViewport.w * _this.transmissionResolutionScale);
        const currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(transmissionRenderTarget);
        _this.getClearColor(_currentClearColor);
        _currentClearAlpha = _this.getClearAlpha();
        if (_currentClearAlpha < 1) _this.setClearColor(16777215, 0.5);
        _this.clear();
        if (_renderBackground) background.render(scene);
        const currentToneMapping = _this.toneMapping;
        _this.toneMapping = NoToneMapping;
        const currentCameraViewport = camera.viewport;
        if (camera.viewport !== void 0) camera.viewport = void 0;
        currentRenderState.setupLightsView(camera);
        if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
        renderObjects(opaqueObjects, scene, camera);
        textures.updateMultisampleRenderTarget(transmissionRenderTarget);
        textures.updateRenderTargetMipmap(transmissionRenderTarget);
        if (extensions.has("WEBGL_multisampled_render_to_texture") === false) {
          let renderTargetNeedsUpdate = false;
          for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
            const renderItem = transmissiveObjects[i];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = renderItem.material;
            const group = renderItem.group;
            if (material.side === DoubleSide && object.layers.test(camera.layers)) {
              const currentSide = material.side;
              material.side = BackSide;
              material.needsUpdate = true;
              renderObject(object, scene, camera, geometry, material, group);
              material.side = currentSide;
              material.needsUpdate = true;
              renderTargetNeedsUpdate = true;
            }
          }
          if (renderTargetNeedsUpdate === true) {
            textures.updateMultisampleRenderTarget(transmissionRenderTarget);
            textures.updateRenderTargetMipmap(transmissionRenderTarget);
          }
        }
        _this.setRenderTarget(currentRenderTarget);
        _this.setClearColor(_currentClearColor, _currentClearAlpha);
        if (currentCameraViewport !== void 0) camera.viewport = currentCameraViewport;
        _this.toneMapping = currentToneMapping;
      }
      function renderObjects(renderList, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for (let i = 0, l = renderList.length; i < l; i++) {
          const renderItem = renderList[i];
          const object = renderItem.object;
          const geometry = renderItem.geometry;
          const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
          const group = renderItem.group;
          if (object.layers.test(camera.layers)) {
            renderObject(object, scene, camera, geometry, material, group);
          }
        }
      }
      function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
          material.side = BackSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = FrontSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = DoubleSide;
        } else {
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        }
        object.onAfterRender(_this, scene, camera, geometry, material, group);
      }
      function getProgram(material, scene, object) {
        if (scene.isScene !== true) scene = _emptyScene;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        const shadowsArray = currentRenderState.state.shadowsArray;
        const lightsStateVersion = lights.state.version;
        const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        const programCacheKey = programCache.getProgramCacheKey(parameters2);
        let programs = materialProperties.programs;
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        materialProperties.envMapRotation = materialProperties.environment !== null && material.envMap === null ? scene.environmentRotation : material.envMapRotation;
        if (programs === void 0) {
          material.addEventListener("dispose", onMaterialDispose);
          programs = /* @__PURE__ */ new Map();
          materialProperties.programs = programs;
        }
        let program = programs.get(programCacheKey);
        if (program !== void 0) {
          if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
            updateCommonMaterialProperties(material, parameters2);
            return program;
          }
        } else {
          parameters2.uniforms = programCache.getUniforms(material);
          material.onBeforeCompile(parameters2, _this);
          program = programCache.acquireProgram(parameters2, programCacheKey);
          programs.set(programCacheKey, program);
          materialProperties.uniforms = parameters2.uniforms;
        }
        const uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
          uniforms.clippingPlanes = clipping.uniform;
        }
        updateCommonMaterialProperties(material, parameters2);
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
          uniforms.ambientLightColor.value = lights.state.ambient;
          uniforms.lightProbe.value = lights.state.probe;
          uniforms.directionalLights.value = lights.state.directional;
          uniforms.directionalLightShadows.value = lights.state.directionalShadow;
          uniforms.spotLights.value = lights.state.spot;
          uniforms.spotLightShadows.value = lights.state.spotShadow;
          uniforms.rectAreaLights.value = lights.state.rectArea;
          uniforms.ltc_1.value = lights.state.rectAreaLTC1;
          uniforms.ltc_2.value = lights.state.rectAreaLTC2;
          uniforms.pointLights.value = lights.state.point;
          uniforms.pointLightShadows.value = lights.state.pointShadow;
          uniforms.hemisphereLights.value = lights.state.hemi;
          uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
          uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
          uniforms.spotShadowMap.value = lights.state.spotShadowMap;
          uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
          uniforms.spotLightMap.value = lights.state.spotLightMap;
          uniforms.pointShadowMap.value = lights.state.pointShadowMap;
          uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        }
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = null;
        return program;
      }
      function getUniformList(materialProperties) {
        if (materialProperties.uniformsList === null) {
          const progUniforms = materialProperties.currentProgram.getUniforms();
          materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);
        }
        return materialProperties.uniformsList;
      }
      function updateCommonMaterialProperties(material, parameters2) {
        const materialProperties = properties.get(material);
        materialProperties.outputColorSpace = parameters2.outputColorSpace;
        materialProperties.batching = parameters2.batching;
        materialProperties.batchingColor = parameters2.batchingColor;
        materialProperties.instancing = parameters2.instancing;
        materialProperties.instancingColor = parameters2.instancingColor;
        materialProperties.instancingMorph = parameters2.instancingMorph;
        materialProperties.skinning = parameters2.skinning;
        materialProperties.morphTargets = parameters2.morphTargets;
        materialProperties.morphNormals = parameters2.morphNormals;
        materialProperties.morphColors = parameters2.morphColors;
        materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
        materialProperties.numIntersection = parameters2.numClipIntersection;
        materialProperties.vertexAlphas = parameters2.vertexAlphas;
        materialProperties.vertexTangents = parameters2.vertexTangents;
        materialProperties.toneMapping = parameters2.toneMapping;
      }
      function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true) scene = _emptyScene;
        textures.resetTextureUnits();
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
        const morphTargets = !!geometry.morphAttributes.position;
        const morphNormals = !!geometry.morphAttributes.normal;
        const morphColors = !!geometry.morphAttributes.color;
        let toneMapping = NoToneMapping;
        if (material.toneMapped) {
          if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
            toneMapping = _this.toneMapping;
          }
        }
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
          if (_localClippingEnabled === true || camera !== _currentCamera) {
            const useCache = camera === _currentCamera && material.id === _currentMaterialId;
            clipping.setState(material, camera, useCache);
          }
        }
        let needsProgramChange = false;
        if (material.version === materialProperties.__version) {
          if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
            needsProgramChange = true;
          } else if (materialProperties.outputColorSpace !== colorSpace) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batching === false) {
            needsProgramChange = true;
          } else if (!object.isBatchedMesh && materialProperties.batching === true) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null) {
            needsProgramChange = true;
          } else if (object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancing === false) {
            needsProgramChange = true;
          } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
            needsProgramChange = true;
          } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
            needsProgramChange = true;
          } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null) {
            needsProgramChange = true;
          } else if (materialProperties.envMap !== envMap) {
            needsProgramChange = true;
          } else if (material.fog === true && materialProperties.fog !== fog) {
            needsProgramChange = true;
          } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
            needsProgramChange = true;
          } else if (materialProperties.vertexAlphas !== vertexAlphas) {
            needsProgramChange = true;
          } else if (materialProperties.vertexTangents !== vertexTangents) {
            needsProgramChange = true;
          } else if (materialProperties.morphTargets !== morphTargets) {
            needsProgramChange = true;
          } else if (materialProperties.morphNormals !== morphNormals) {
            needsProgramChange = true;
          } else if (materialProperties.morphColors !== morphColors) {
            needsProgramChange = true;
          } else if (materialProperties.toneMapping !== toneMapping) {
            needsProgramChange = true;
          } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {
            needsProgramChange = true;
          }
        } else {
          needsProgramChange = true;
          materialProperties.__version = material.version;
        }
        let program = materialProperties.currentProgram;
        if (needsProgramChange === true) {
          program = getProgram(material, scene, object);
        }
        let refreshProgram = false;
        let refreshMaterial = false;
        let refreshLights = false;
        const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
          refreshProgram = true;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
          _currentMaterialId = material.id;
          refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
          const reverseDepthBuffer2 = state.buffers.depth.getReversed();
          if (reverseDepthBuffer2) {
            _currentProjectionMatrix.copy(camera.projectionMatrix);
            toNormalizedProjectionMatrix(_currentProjectionMatrix);
            toReversedProjectionMatrix(_currentProjectionMatrix);
            p_uniforms.setValue(_gl, "projectionMatrix", _currentProjectionMatrix);
          } else {
            p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
          }
          p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
          const uCamPos = p_uniforms.map.cameraPosition;
          if (uCamPos !== void 0) {
            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
          }
          if (capabilities.logarithmicDepthBuffer) {
            p_uniforms.setValue(
              _gl,
              "logDepthBufFC",
              2 / (Math.log(camera.far + 1) / Math.LN2)
            );
          }
          if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
            p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
          }
          if (_currentCamera !== camera) {
            _currentCamera = camera;
            refreshMaterial = true;
            refreshLights = true;
          }
        }
        if (object.isSkinnedMesh) {
          p_uniforms.setOptional(_gl, object, "bindMatrix");
          p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
          const skeleton = object.skeleton;
          if (skeleton) {
            if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
            p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
          }
        }
        if (object.isBatchedMesh) {
          p_uniforms.setOptional(_gl, object, "batchingTexture");
          p_uniforms.setValue(_gl, "batchingTexture", object._matricesTexture, textures);
          p_uniforms.setOptional(_gl, object, "batchingIdTexture");
          p_uniforms.setValue(_gl, "batchingIdTexture", object._indirectTexture, textures);
          p_uniforms.setOptional(_gl, object, "batchingColorTexture");
          if (object._colorsTexture !== null) {
            p_uniforms.setValue(_gl, "batchingColorTexture", object._colorsTexture, textures);
          }
        }
        const morphAttributes = geometry.morphAttributes;
        if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0) {
          morphtargets.update(object, geometry, program);
        }
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
          materialProperties.receiveShadow = object.receiveShadow;
          p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
        }
        if (material.isMeshGouraudMaterial && material.envMap !== null) {
          m_uniforms.envMap.value = envMap;
          m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        }
        if (material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null) {
          m_uniforms.envMapIntensity.value = scene.environmentIntensity;
        }
        if (refreshMaterial) {
          p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
          if (materialProperties.needsLights) {
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
          }
          if (fog && material.fog === true) {
            materials.refreshFogUniforms(m_uniforms, fog);
          }
          materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera.id]);
          WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
          WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
          material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) {
          p_uniforms.setValue(_gl, "center", object.center);
        }
        p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
        p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
        p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
        if (material.isShaderMaterial || material.isRawShaderMaterial) {
          const groups = material.uniformsGroups;
          for (let i = 0, l = groups.length; i < l; i++) {
            const group = groups[i];
            uniformsGroups.update(group, program);
            uniformsGroups.bind(group, program);
          }
        }
        return program;
      }
      function markUniformsLightsNeedsUpdate(uniforms, value2) {
        uniforms.ambientLightColor.needsUpdate = value2;
        uniforms.lightProbe.needsUpdate = value2;
        uniforms.directionalLights.needsUpdate = value2;
        uniforms.directionalLightShadows.needsUpdate = value2;
        uniforms.pointLights.needsUpdate = value2;
        uniforms.pointLightShadows.needsUpdate = value2;
        uniforms.spotLights.needsUpdate = value2;
        uniforms.spotLightShadows.needsUpdate = value2;
        uniforms.rectAreaLights.needsUpdate = value2;
        uniforms.hemisphereLights.needsUpdate = value2;
      }
      function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
      }
      this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
      };
      this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
      };
      this.getRenderTarget = function() {
        return _currentRenderTarget;
      };
      this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
        properties.get(renderTarget.texture).__webglTexture = colorTexture;
        properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__hasExternalTextures = true;
        renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
        if (!renderTargetProperties.__autoAllocateDepthBuffer) {
          if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
            console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
            renderTargetProperties.__useRenderToTexture = false;
          }
        }
      };
      this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
        renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
      };
      const _scratchFrameBuffer = _gl.createFramebuffer();
      this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        let useDefaultFramebuffer = true;
        let framebuffer = null;
        let isCube = false;
        let isRenderTarget3D = false;
        if (renderTarget) {
          const renderTargetProperties = properties.get(renderTarget);
          if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, null);
            useDefaultFramebuffer = false;
          } else if (renderTargetProperties.__webglFramebuffer === void 0) {
            textures.setupRenderTarget(renderTarget);
          } else if (renderTargetProperties.__hasExternalTextures) {
            textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
          } else if (renderTarget.depthBuffer) {
            const depthTexture = renderTarget.depthTexture;
            if (renderTargetProperties.__boundDepthTexture !== depthTexture) {
              if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {
                throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
              }
              textures.setupDepthRenderbuffer(renderTarget);
            }
          }
          const texture = renderTarget.texture;
          if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
            isRenderTarget3D = true;
          }
          const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
          if (renderTarget.isWebGLCubeRenderTarget) {
            if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
              framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
            } else {
              framebuffer = __webglFramebuffer[activeCubeFace];
            }
            isCube = true;
          } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
            framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
          } else {
            if (Array.isArray(__webglFramebuffer)) {
              framebuffer = __webglFramebuffer[activeMipmapLevel];
            } else {
              framebuffer = __webglFramebuffer;
            }
          }
          _currentViewport.copy(renderTarget.viewport);
          _currentScissor.copy(renderTarget.scissor);
          _currentScissorTest = renderTarget.scissorTest;
        } else {
          _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
          _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
          _currentScissorTest = _scissorTest;
        }
        if (activeMipmapLevel !== 0) {
          framebuffer = _scratchFrameBuffer;
        }
        const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (framebufferBound && useDefaultFramebuffer) {
          state.drawBuffers(renderTarget, framebuffer);
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
          const textureProperties = properties.get(renderTarget.texture);
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
          const textureProperties = properties.get(renderTarget.texture);
          const layer = activeCubeFace;
          _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel, layer);
        } else if (renderTarget !== null && activeMipmapLevel !== 0) {
          const textureProperties = properties.get(renderTarget.texture);
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, textureProperties.__webglTexture, activeMipmapLevel);
        }
        _currentMaterialId = -1;
      };
      this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          return;
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
          framebuffer = framebuffer[activeCubeFaceIndex];
        }
        if (framebuffer) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          try {
            const texture = renderTarget.texture;
            const textureFormat = texture.format;
            const textureType = texture.type;
            if (!capabilities.textureFormatReadable(textureFormat)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
              return;
            }
            if (!capabilities.textureTypeReadable(textureType)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
              return;
            }
            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
            }
          } finally {
            const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
          }
        }
      };
      this.readRenderTargetPixelsAsync = async function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
          framebuffer = framebuffer[activeCubeFaceIndex];
        }
        if (framebuffer) {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          }
          if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            const glBuffer = _gl.createBuffer();
            _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
            _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ);
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);
            const currFramebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
            state.bindFramebuffer(_gl.FRAMEBUFFER, currFramebuffer);
            const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
            _gl.flush();
            await probeAsync(_gl, sync, 4);
            _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
            _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer);
            _gl.deleteBuffer(glBuffer);
            _gl.deleteSync(sync);
            return buffer;
          } else {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
          }
        }
      };
      this.copyFramebufferToTexture = function(texture, position = null, level = 0) {
        if (texture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyFramebufferToTexture function signature has changed.");
          position = arguments[0] || null;
          texture = arguments[1];
        }
        const levelScale = Math.pow(2, -level);
        const width = Math.floor(texture.image.width * levelScale);
        const height = Math.floor(texture.image.height * levelScale);
        const x = position !== null ? position.x : 0;
        const y = position !== null ? position.y : 0;
        textures.setTexture2D(texture, 0);
        _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x, y, width, height);
        state.unbindTexture();
      };
      const _srcFramebuffer = _gl.createFramebuffer();
      const _dstFramebuffer = _gl.createFramebuffer();
      this.copyTextureToTexture = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = null) {
        if (srcTexture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed.");
          dstPosition = arguments[0] || null;
          srcTexture = arguments[1];
          dstTexture = arguments[2];
          dstLevel = arguments[3] || 0;
          srcRegion = null;
        }
        if (dstLevel === null) {
          if (srcLevel !== 0) {
            warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");
            dstLevel = srcLevel;
            srcLevel = 0;
          } else {
            dstLevel = 0;
          }
        }
        let width, height, depth2, minX, minY, minZ;
        let dstX, dstY, dstZ;
        const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;
        if (srcRegion !== null) {
          width = srcRegion.max.x - srcRegion.min.x;
          height = srcRegion.max.y - srcRegion.min.y;
          depth2 = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
          minX = srcRegion.min.x;
          minY = srcRegion.min.y;
          minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;
        } else {
          const levelScale = Math.pow(2, -srcLevel);
          width = Math.floor(image.width * levelScale);
          height = Math.floor(image.height * levelScale);
          if (srcTexture.isDataArrayTexture) {
            depth2 = image.depth;
          } else if (srcTexture.isData3DTexture) {
            depth2 = Math.floor(image.depth * levelScale);
          } else {
            depth2 = 1;
          }
          minX = 0;
          minY = 0;
          minZ = 0;
        }
        if (dstPosition !== null) {
          dstX = dstPosition.x;
          dstY = dstPosition.y;
          dstZ = dstPosition.z;
        } else {
          dstX = 0;
          dstY = 0;
          dstZ = 0;
        }
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        let glTarget;
        if (dstTexture.isData3DTexture) {
          textures.setTexture3D(dstTexture, 0);
          glTarget = _gl.TEXTURE_3D;
        } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {
          textures.setTexture2DArray(dstTexture, 0);
          glTarget = _gl.TEXTURE_2D_ARRAY;
        } else {
          textures.setTexture2D(dstTexture, 0);
          glTarget = _gl.TEXTURE_2D;
        }
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
        const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
        const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
        const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
        const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
        const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);
        const isSrc3D = srcTexture.isDataArrayTexture || srcTexture.isData3DTexture;
        const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture;
        if (srcTexture.isDepthTexture) {
          const srcTextureProperties = properties.get(srcTexture);
          const dstTextureProperties = properties.get(dstTexture);
          const srcRenderTargetProperties = properties.get(srcTextureProperties.__renderTarget);
          const dstRenderTargetProperties = properties.get(dstTextureProperties.__renderTarget);
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, srcRenderTargetProperties.__webglFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, dstRenderTargetProperties.__webglFramebuffer);
          for (let i = 0; i < depth2; i++) {
            if (isSrc3D) {
              _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(srcTexture).__webglTexture, srcLevel, minZ + i);
              _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, properties.get(dstTexture).__webglTexture, dstLevel, dstZ + i);
            }
            _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST);
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        } else if (srcLevel !== 0 || srcTexture.isRenderTargetTexture || properties.has(srcTexture)) {
          const srcTextureProperties = properties.get(srcTexture);
          const dstTextureProperties = properties.get(dstTexture);
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, _srcFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, _dstFramebuffer);
          for (let i = 0; i < depth2; i++) {
            if (isSrc3D) {
              _gl.framebufferTextureLayer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, srcTextureProperties.__webglTexture, srcLevel, minZ + i);
            } else {
              _gl.framebufferTexture2D(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, srcTextureProperties.__webglTexture, srcLevel);
            }
            if (isDst3D) {
              _gl.framebufferTextureLayer(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, dstTextureProperties.__webglTexture, dstLevel, dstZ + i);
            } else {
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, dstTextureProperties.__webglTexture, dstLevel);
            }
            if (srcLevel !== 0) {
              _gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, _gl.COLOR_BUFFER_BIT, _gl.NEAREST);
            } else if (isDst3D) {
              _gl.copyTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ + i, minX, minY, width, height);
            } else {
              _gl.copyTexSubImage2D(glTarget, dstLevel, dstX, dstY, minX, minY, width, height);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        } else {
          if (isDst3D) {
            if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
              _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image.data);
            } else if (dstTexture.isCompressedArrayTexture) {
              _gl.compressedTexSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, image.data);
            } else {
              _gl.texSubImage3D(glTarget, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image);
            }
          } else {
            if (srcTexture.isDataTexture) {
              _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);
            } else if (srcTexture.isCompressedTexture) {
              _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);
            } else {
              _gl.texSubImage2D(_gl.TEXTURE_2D, dstLevel, dstX, dstY, width, height, glFormat, glType, image);
            }
          }
        }
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
        if (dstLevel === 0 && dstTexture.generateMipmaps) {
          _gl.generateMipmap(glTarget);
        }
        state.unbindTexture();
      };
      this.copyTextureToTexture3D = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
        if (srcTexture.isTexture !== true) {
          warnOnce("WebGLRenderer: copyTextureToTexture3D function signature has changed.");
          srcRegion = arguments[0] || null;
          dstPosition = arguments[1] || null;
          srcTexture = arguments[2];
          dstTexture = arguments[3];
          level = arguments[4] || 0;
        }
        warnOnce('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');
        return this.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);
      };
      this.initRenderTarget = function(target) {
        if (properties.get(target).__webglFramebuffer === void 0) {
          textures.setupRenderTarget(target);
        }
      };
      this.initTexture = function(texture) {
        if (texture.isCubeTexture) {
          textures.setTextureCube(texture, 0);
        } else if (texture.isData3DTexture) {
          textures.setTexture3D(texture, 0);
        } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
          textures.setTexture2DArray(texture, 0);
        } else {
          textures.setTexture2D(texture, 0);
        }
        state.unbindTexture();
      };
      this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
      };
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    get coordinateSystem() {
      return WebGLCoordinateSystem;
    }
    get outputColorSpace() {
      return this._outputColorSpace;
    }
    set outputColorSpace(colorSpace) {
      this._outputColorSpace = colorSpace;
      const gl = this.getContext();
      gl.drawingBufferColorspace = ColorManagement._getDrawingBufferColorSpace(colorSpace);
      gl.unpackColorSpace = ColorManagement._getUnpackColorSpace();
    }
  };

  // src/search/find-user-matches.js
  function findUserMatches(searchText, userList) {
    if (!searchText) return;
    const mushMatch = new RegExp([...searchText.replace(/[^a-z0-9]/gi, "")].join(".*"), "i");
    const mushMatchLead = new RegExp("^" + [...searchText.replace(/[^a-z0-9]/gi, "")].join(".*"), "i");
    const searchWordRegExp = new RegExp(
      searchText.split(/\s+/).sort((w1, w2) => w2.length - w1.length || (w1 > w2 ? 1 : w1 < w2 ? -1 : 0)).map((word) => "(" + word.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&") + ")").join("|"),
      "gi"
    );
    const matches = [];
    for (const user of userList) {
      let rank = 0;
      if (user.displayName) {
        searchWordRegExp.lastIndex = 0;
        while (true) {
          const match = searchWordRegExp.exec(user.displayName);
          if (!match) break;
          rank += match[0].length / user.displayName.length * 20;
          if (match.index === 0) rank += 30;
        }
        if (mushMatch.test(user.displayName)) rank += 3;
        if (mushMatchLead.test(user.displayName)) rank += 5;
      }
      searchWordRegExp.lastIndex = 0;
      while (true) {
        const match = searchWordRegExp.exec(user.shortHandle);
        if (!match) break;
        rank += match[0].length / user.shortHandle.length * 30;
        if (match.index === 0) rank += 40;
      }
      if (mushMatch.test(user.shortHandle)) rank += 3;
      if (mushMatchLead.test(user.shortHandle)) rank += 5;
      if (rank) matches.push({ user, rank });
    }
    matches.sort((m1, m2) => m2.rank - m1.rank);
    return matches?.length ? matches : void 0;
  }

  // src/core/crc32.js
  var calcCRC32 = /* @__PURE__ */ function() {
    function calcCRC322(str) {
      if (!str) return 0;
      if (!crcTable) crcTable = makeCRCTable();
      var crc = 0 ^ -1;
      for (var i = 0; i < str.length; i++) {
        crc = crc >>> 8 ^ crcTable[(crc ^ str.charCodeAt(i)) & 255];
      }
      return (crc ^ -1) >>> 0;
    }
    let crcTable;
    function makeCRCTable() {
      var c;
      var crcTable2 = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
        }
        crcTable2[n] = c;
      }
      return crcTable2;
    }
    return calcCRC322;
  }();

  // src/colors/hsl-to-rgb.js
  var hslToRgb = /* @__PURE__ */ function() {
    function hslToRgb2(h, s, l) {
      let r, g, b;
      if (s === 0) {
        r = g = b = l;
      } else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hueToRgb(p, q, h + 1 / 3);
        g = hueToRgb(p, q, h);
        b = hueToRgb(p, q, h - 1 / 3);
      }
      return Math.round(r * 255) * 256 * 256 + Math.round(g * 255) * 256 + Math.round(b * 255);
    }
    function hueToRgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    return hslToRgb2;
  }();

  // src/colors/rnd-user-colorer.js
  function rndUserColorer(shortDID) {
    const crc32 = calcCRC32(shortDID);
    let hue = Math.abs(crc32) % 2e3 / 2e3;
    const warmerHue = hue * hue;
    hue = hue * 0.7 + warmerHue * 0.3;
    const hexColor = hslToRgb(hue, 1, 0.7);
    return hexColor;
  }

  // src/tiles/get-user-coord-bounds.js
  function getUserCoordBounds(users) {
    const bounds = { x: { min: NaN, max: NaN }, y: { min: NaN, max: NaN }, weight: { min: NaN, max: NaN } };
    for (const shortDID in users) {
      const [shortHandle, x, y, weight] = users[shortDID];
      if (!Number.isFinite(bounds.x.min) || x < bounds.x.min) bounds.x.min = x;
      if (!Number.isFinite(bounds.x.max) || x > bounds.x.max) bounds.x.max = x;
      if (!Number.isFinite(bounds.y.min) || y < bounds.y.min) bounds.y.min = y;
      if (!Number.isFinite(bounds.y.max) || y > bounds.y.max) bounds.y.max = y;
      if (!Number.isFinite(bounds.weight.min) || weight < bounds.weight.min) bounds.weight.min = weight;
      if (!Number.isFinite(bounds.weight.max) || weight > bounds.weight.max) bounds.weight.max = weight;
    }
    return bounds;
  }

  // src/geometry/distance.js
  function distance2D(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  }

  // src/tiles/map-user-coords-to-atlas.js
  function mapUserCoordsToAtlas(x, y, bounds, result) {
    const xRatiod = (x - bounds.x.min) / (bounds.x.max - bounds.x.min) - 0.5;
    const yRatiod = (y - bounds.y.min) / (bounds.y.max - bounds.y.min) - 0.5;
    const r = distance2D(xRatiod, yRatiod, 0, 0);
    let h = (1 - r * r) * 0.3 - 0.265;
    result.x = xRatiod;
    result.y = -yRatiod;
    result.h = h;
  }

  // src/tiles/process-users-to-tiles.js
  async function processUsersToTiles({ users, dimensionCount, sleep }) {
    const usersBounds = getUserCoordBounds(users);
    const tilePrototypes = [];
    for (const shortDID in users) {
      const usrTuple = users[shortDID];
      const tileX = Math.floor((usrTuple[1] - usersBounds.x.min) / (usersBounds.x.max - usersBounds.x.min) * dimensionCount);
      const tileY = Math.floor((usrTuple[2] - usersBounds.y.min) / (usersBounds.y.max - usersBounds.y.min) * dimensionCount);
      const tileIndex = tileX + tileY * dimensionCount;
      const tileBucket = tilePrototypes[tileIndex] || (tilePrototypes[tileIndex] = []);
      if (tilePrototypes.length % 1e4 === 9999 && typeof sleep === "function") await sleep();
      tileBucket.push({ shortDID, usrTuple });
    }
    let processedBuckets = 0;
    for (const tileBucket of tilePrototypes) {
      if (!tileBucket) continue;
      if (processedBuckets % 100 === 99 && typeof sleep === "function") await sleep();
      tileBucket.sort((a, b) => b.usrTuple[3] - a.usrTuple[3]);
      processedBuckets++;
    }
    const xyhBuf = { x: 0, y: 0, h: 0 };
    const byShortDID = {};
    const byShortHandle = {};
    const all = [];
    const tiles = [];
    processedBuckets = 0;
    for (let iBucket = 0; iBucket < tilePrototypes.length; iBucket++) {
      const tileBucket = tilePrototypes[iBucket];
      if (!tileBucket) continue;
      if (processedBuckets % 100 === 99 && typeof sleep === "function") await sleep();
      tiles[iBucket] = tileBucket.map((entry) => {
        mapUserCoordsToAtlas(entry.usrTuple[1], entry.usrTuple[2], usersBounds, xyhBuf);
        const weightRatio = entry.usrTuple[3] && (entry.usrTuple[3] - usersBounds.weight.min) / (usersBounds.weight.max - usersBounds.weight.min);
        const weight = weightRatio ? Math.max(7e-4, 0.01 * weightRatio * Math.sqrt(weightRatio)) : 5e-4;
        const userEntry = {
          shortDID: entry.shortDID,
          shortHandle: entry.usrTuple[0],
          x: xyhBuf.x,
          y: xyhBuf.y,
          h: xyhBuf.h,
          weight,
          displayName: entry.usrTuple[4],
          colorRGB: rndUserColorer(entry.shortDID)
        };
        byShortDID[entry.shortDID] = userEntry;
        byShortHandle[userEntry.shortHandle] = userEntry;
        all.push(userEntry);
        return userEntry;
      });
      processedBuckets++;
    }
    return { byShortDID, byShortHandle, all, tiles, dimensionCount };
  }

  // src/webgl/clock.js
  function makeClock() {
    const clock = {
      worldStartTime: performance.now(),
      nowMSec: 0,
      nowSeconds: 0,
      update
    };
    return clock;
    function update() {
      clock.nowSeconds = (clock.nowMSec = performance.now() - clock.worldStartTime) / 1e3;
    }
  }

  // src/ui/elem.js
  function elem(tagName, style) {
    const el = document.createElement(tagName);
    if (style && typeof /** @type {*} */
    style.appendChild === "function") {
      const tmp = parent;
      style = /** @type {*} */
      parent;
      parent = tmp;
    }
    if (typeof style === "string") {
      if (
        /** @type{*} */
        style.indexOf(":") >= 0
      ) el.style.cssText = style;
      else el.className = style;
    } else if (style) {
      let setParent;
      let appendChildren;
      for (const key in style) {
        if (key === "parent" || key === "parentElement") {
          setParent = /** @type {*} */
          style[key];
          continue;
        } else if (key === "children") {
          appendChildren = /** @type {*} */
          style[key];
          continue;
        } else if (style[key] == null || typeof style[key] === "function" && !(key in el)) continue;
        if (key in el.style) el.style[key] = /** @type {*} */
        style[key];
        else if (key in el) el[key] = style[key];
      }
      if (appendChildren) {
        for (const child of appendChildren) {
          if (child == null) continue;
          if (typeof child === "string") {
            const childText = document.createTextNode(child);
            el.appendChild(childText);
          } else {
            el.appendChild(child);
          }
        }
      }
      if (setParent && typeof setParent.appendChild === "function") setParent.appendChild(el);
    }
    return (
      /** @type {*} */
      el
    );
  }

  // package.json
  var version = "1.2.3";

  // src/webgl/create-dom-layout.js
  function createDOMLayout({ canvas3D, statsElem, userCount }) {
    let title, titleBar, subtitleArea, rightStatus, searchMode, bottomStatusLine;
    const root = elem("div", {
      parent: document.body,
      style: `
          position: fixed; left: 0; top: 0; width: 100%; height: 100%;
          display: grid; grid-template-rows: auto auto 1fr auto; grid-template-columns: 1fr;
          opacity: 0.07; pointer-events: none;
          transition: opacity 8s;
          `,
      children: [
        canvas3D,
        titleBar = elem("div", {
          style: `
              background: rgba(0,0,0,0.5); color: gold;
              display: grid; grid-template-rows: auto; grid-template-columns: auto 1fr auto;
              z-index: 10;
              max-height: 5em;`,
          children: [
            statsElem,
            title = elem("h3", {
              style: `
                  text-align: center;
                  font-weight: 100;
                  align-self: center;
                  margin: 0.1em;
                  `,
              children: [
                elem("span", "display: inline-block; width: 1em;"),
                elem("span", { textContent: "Atlas 3D" }),
                elem("span", {
                  className: "search-icon",
                  innerHTML: `<style>
                        .search-icon {
                          display: inline-block;
                          transform: rotate(314deg);
                          cursor: pointer;
                        }
                        .search-icon:before {
                          content: '';
                          display: inline-block;
                          border-top: solid 1px currentColor;
                          width: 0.3em;
                          height: 0.25em;
                        }
                        .search-icon:after {
                          content: '';
                          display: inline-block;
                          border: solid 1.3px currentColor;
                          border-radius: 1em;
                          width: 0.5em;
                          height: 0.5em;
                        }
                        </style>`
                })
              ]
            }),
            rightStatus = elem("div", {
              style: `
                    font-size: 80%;
                    align-self: center;
                    padding-right: 0.3em;
                    text-align: center;
                    line-height: 1;
                  `
            })
          ]
        }),
        subtitleArea = elem("div", "color: gold; z-index: 200; position: relative;"),
        bottomStatusLine = createBottomStatusLine()
      ]
    });
    setTimeout(() => {
      root.style.opacity = "1";
      root.style.pointerEvents = "all";
    }, 400);
    canvas3D.style.cssText = `
        position: fixed;
        left: 0; top: 0; width: 100%; height: 100%;
        `;
    canvas3D.className = "atlas-3d";
    statsElem.style.position = "relative";
    const status = createStatusRenderer(rightStatus);
    return { root, titleBar, subtitleArea, title, rightStatus, status, bottomStatusLine };
    function createStatusRenderer(rightStatus2) {
      let cameraPos, cameraMovementIcon;
      const usersCountStr = userCount.toString();
      elem("div", {
        parent: rightStatus2,
        children: [
          elem("div", {
            innerHTML: usersCountStr.slice(0, 3) + '<span style="display: inline-block; width: 0.1em;"></span>' + usersCountStr.slice(3)
          }),
          elem("div", { textContent: "users" })
        ]
      });
      const cameraStatusLine = elem("div", {
        parent: rightStatus2,
        style: `font-size: 80%; opacity: 0.7; margin-top: 0.3em; transition: opacity 2s;`,
        children: [
          cameraPos = elem("span", { textContent: "0.00, 0.00, 0.00" }),
          elem("span", { style: "display: inline-block; width: 0.25em;" }),
          cameraMovementIcon = elem("span", { textContent: ">" })
        ]
      });
      return {
        update
      };
      function update(camera, rotating, fallbackFirehoseMode) {
        cameraPos.textContent = camera.position.x.toFixed(2) + ", " + camera.position.y.toFixed(2) + ", " + camera.position.z.toFixed(2);
        cameraMovementIcon.textContent = rotating ? fallbackFirehoseMode ? ">>" : ">" : fallbackFirehoseMode ? "|||" : "||";
        cameraStatusLine.style.opacity = rotating ? "0.4" : "0.7";
      }
    }
    function createBottomStatusLine() {
      let flashesSection, labelsElem, hitTestElem, avatarImagesElem, avatarRequestsElem, avatarCachedAvatars, flashesElem, cometsElem, likesElem, postsElem, repostsElem, followsElem, unknownsPerSecElem, unknownsTotalElem;
      let flashStatsHidden = true;
      const bottomStatusLine2 = (
        /** @type {HTMLDivElement & { update: typeof update }} */
        elem("div", {
          style: `
                grid-row: 5;
                color: #cc903b;
                z-index: 10;
                font-size: 80%;
                text-shadow: 6px -2px 7px black, -3px -6px 7px black, 5px 4px 7px black;
                padding: 0.25em;
                padding-right: 0.5em;
                text-align: right;
                line-height: 1.5;
                pointer-events: none;
            `,
          children: [
            elem("div", {
              children: [elem("a", {
                href: "https://bsky.app/profile/oyin.bo",
                innerHTML: "created by <b>@oyin.bo</b>",
                style: "color: gray; text-decoration: none; font-weight: 100; pointer-events: all;"
              })]
            }),
            elem("div", {
              children: [elem("a", {
                href: "https://bsky.jazco.dev/",
                innerHTML: "exploiting geo-spatial data from <b>@jaz.bsky.social</b>",
                style: "color: gray; text-decoration: none; font-weight: 100; pointer-events: all;"
              })]
            }),
            elem("div", { height: "0.5em" }),
            elem("div", {
              pointerEvents: "all",
              children: [
                flashesSection = elem("span", {
                  children: [
                    elem("span", {
                      textContent: "v",
                      style: `
                          opacity: 0.8;
                          color: transparent;
                          text-shadow: cornflowerblue 0px 0px 0px;
                          font-size: 91%;
                          position: relative;
                          display: inline-block;
                          top: -0.07em;
                      `
                    }),
                    elem("span", {
                      textContent: version + " ",
                      style: `
                          text-shadow: black 0 0 2px, black 0 0 2px;
                      `
                    }),
                    elem("span", {
                      textContent: "@",
                      style: `
                          opacity: 0.6;
                          color: transparent;
                          text-shadow: cornflowerblue 0px 0px 0px;
                          font-size: 91%;
                          position: relative;
                          display: inline-block;
                          top: -0.07em;
                      `
                    }),
                    labelsElem = elem("span", { opacity: "0.8", textContent: "0" }),
                    hitTestElem = elem("span", {
                      opacity: "0.8",
                      style: `
                        opacity: 0.8;
                        zoom: 0.6;
                        display: inline-block;
                        position: relative;
                        top: -0.5em;
                      `
                    }),
                    elem("span", {
                      textContent: " \u{1F63A}",
                      style: `
                          opacity: 0.6;
                          color: transparent;
                          text-shadow: cornflowerblue 0px 0px 0px;
                          font-size: 68%;
                          position: relative;
                          display: inline-block;
                          top: -0.15em;
                      `
                    }),
                    avatarImagesElem = elem("span", { opacity: "0.8", textContent: "0" }),
                    elem("span", {
                      style: `
                        zoom: 0.6;
                        display: inline-block;
                        position: relative;
                        top: -0.5em;
                      `,
                      children: [
                        avatarCachedAvatars = elem("span", { opacity: "0.8" }),
                        elem("span", { opacity: "0.6", textContent: "+" }),
                        avatarRequestsElem = elem("span", { opacity: "0.8", textContent: "0" })
                      ]
                    }),
                    elem("span", { textContent: " \u26ED", color: "transparent", textShadow: "0 0 0 cornflowerblue" }),
                    flashesElem = elem("span", "0"),
                    elem("span", { textContent: " \u2604\uFE0F", style: `
                  font-size: 80%;
                  position: relative;
                  top: -0.1em;
                  color: transparent;
                  opacity: 0.7;
                  text-shadow:
                    0 0 black,
                    cornflowerblue -1px -1px 0px,
                    cornflowerblue 1px 1px 0px,
                    cornflowerblue -1px 1px 0px,
                    cornflowerblue 1px -1px 0px;
                  ` }),
                    cometsElem = elem("span", "0"),
                    " "
                  ],
                  display: flashStatsHidden ? "none" : "inline",
                  color: "cornflowerblue",
                  borderRadius: "0.2em",
                  background: "#00000073",
                  boxShadow: "0 0 5px black, 0 0 5px black"
                }),
                "posts+",
                postsElem = elem("span", { color: "gold" }),
                " \u2661+",
                // heart
                likesElem = elem("span", { color: "gold" }),
                " RT+",
                repostsElem = elem("span", { color: "gold" }),
                " follows+",
                followsElem = elem("span", { color: "gold" }),
                " ",
                elem("span", { textContent: "+", color: "#1ca1a1" }),
                unknownsPerSecElem = elem("span", { color: "cyan" }),
                elem("span", { textContent: "/", color: "#1ca1a1" }),
                unknownsTotalElem = elem("span", { color: "cyan" }),
                elem("span", { textContent: "?", color: "#1ca1a1" })
              ]
            })
          ]
        })
      );
      bottomStatusLine2.addEventListener("click", () => {
        flashStatsHidden = !flashStatsHidden;
        flashesSection.style.display = flashStatsHidden ? "none" : "inline";
      });
      bottomStatusLine2.update = update;
      return bottomStatusLine2;
      function update(outcome, labelsOutcome) {
        labelsElem.textContent = labelsOutcome.labelCount.toLocaleString();
        hitTestElem.textContent = labelsOutcome.hitTestCount.toLocaleString();
        avatarImagesElem.textContent = labelsOutcome.avatarImages.toLocaleString();
        avatarRequestsElem.textContent = labelsOutcome.avatarRequestCount.toLocaleString();
        avatarCachedAvatars.textContent = labelsOutcome.allCachedAvatars.toLocaleString();
        flashesElem.textContent = outcome.flashes.toLocaleString();
        cometsElem.textContent = outcome.comets.toLocaleString();
        likesElem.textContent = outcome.likes.toLocaleString();
        postsElem.textContent = outcome.posts.toLocaleString();
        repostsElem.textContent = outcome.reposts.toLocaleString();
        followsElem.textContent = outcome.follows.toLocaleString();
        unknownsPerSecElem.textContent = outcome.unknowns.toLocaleString();
        unknownsTotalElem.textContent = outcome.unknownsTotal.toLocaleString();
        outcome.likes = 0;
        outcome.posts = 0;
        outcome.reposts = 0;
        outcome.follows = 0;
        outcome.unknowns = 0;
      }
    }
  }

  // node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js
  function workerBootstrap() {
    var modules = /* @__PURE__ */ Object.create(null);
    function registerModule(ref, callback) {
      var id = ref.id;
      var name2 = ref.name;
      var dependencies = ref.dependencies;
      if (dependencies === void 0) dependencies = [];
      var init = ref.init;
      if (init === void 0) init = function() {
      };
      var getTransferables = ref.getTransferables;
      if (getTransferables === void 0) getTransferables = null;
      if (modules[id]) {
        return;
      }
      try {
        dependencies = dependencies.map(function(dep) {
          if (dep && dep.isWorkerModule) {
            registerModule(dep, function(depResult) {
              if (depResult instanceof Error) {
                throw depResult;
              }
            });
            dep = modules[dep.id].value;
          }
          return dep;
        });
        init = rehydrate("<" + name2 + ">.init", init);
        if (getTransferables) {
          getTransferables = rehydrate("<" + name2 + ">.getTransferables", getTransferables);
        }
        var value2 = null;
        if (typeof init === "function") {
          value2 = init.apply(void 0, dependencies);
        } else {
          console.error("worker module init function failed to rehydrate");
        }
        modules[id] = {
          id,
          value: value2,
          getTransferables
        };
        callback(value2);
      } catch (err) {
        if (!(err && err.noLog)) {
          console.error(err);
        }
        callback(err);
      }
    }
    function callModule(ref, callback) {
      var ref$1;
      var id = ref.id;
      var args = ref.args;
      if (!modules[id] || typeof modules[id].value !== "function") {
        callback(new Error("Worker module " + id + ": not found or its 'init' did not return a function"));
      }
      try {
        var result = (ref$1 = modules[id]).value.apply(ref$1, args);
        if (result && typeof result.then === "function") {
          result.then(handleResult, function(rej) {
            return callback(rej instanceof Error ? rej : new Error("" + rej));
          });
        } else {
          handleResult(result);
        }
      } catch (err) {
        callback(err);
      }
      function handleResult(result2) {
        try {
          var tx = modules[id].getTransferables && modules[id].getTransferables(result2);
          if (!tx || !Array.isArray(tx) || !tx.length) {
            tx = void 0;
          }
          callback(result2, tx);
        } catch (err) {
          console.error(err);
          callback(err);
        }
      }
    }
    function rehydrate(name2, str) {
      var result = void 0;
      self.troikaDefine = function(r) {
        return result = r;
      };
      var url = URL.createObjectURL(
        new Blob(
          ["/** " + name2.replace(/\*/g, "") + " **/\n\ntroikaDefine(\n" + str + "\n)"],
          { type: "application/javascript" }
        )
      );
      try {
        importScripts(url);
      } catch (err) {
        console.error(err);
      }
      URL.revokeObjectURL(url);
      delete self.troikaDefine;
      return result;
    }
    self.addEventListener("message", function(e) {
      var ref = e.data;
      var messageId = ref.messageId;
      var action = ref.action;
      var data = ref.data;
      try {
        if (action === "registerModule") {
          registerModule(data, function(result) {
            if (result instanceof Error) {
              postMessage({
                messageId,
                success: false,
                error: result.message
              });
            } else {
              postMessage({
                messageId,
                success: true,
                result: { isCallable: typeof result === "function" }
              });
            }
          });
        }
        if (action === "callModule") {
          callModule(data, function(result, transferables) {
            if (result instanceof Error) {
              postMessage({
                messageId,
                success: false,
                error: result.message
              });
            } else {
              postMessage({
                messageId,
                success: true,
                result
              }, transferables || void 0);
            }
          });
        }
      } catch (err) {
        postMessage({
          messageId,
          success: false,
          error: err.stack
        });
      }
    });
  }
  function defineMainThreadModule(options) {
    var moduleFunc = function() {
      var args = [], len = arguments.length;
      while (len--) args[len] = arguments[len];
      return moduleFunc._getInitResult().then(function(initResult) {
        if (typeof initResult === "function") {
          return initResult.apply(void 0, args);
        } else {
          throw new Error("Worker module function was called but `init` did not return a callable function");
        }
      });
    };
    moduleFunc._getInitResult = function() {
      var dependencies = options.dependencies;
      var init = options.init;
      dependencies = Array.isArray(dependencies) ? dependencies.map(function(dep) {
        if (dep) {
          dep = dep.onMainThread || dep;
          if (dep._getInitResult) {
            dep = dep._getInitResult();
          }
        }
        return dep;
      }) : [];
      var initPromise = Promise.all(dependencies).then(function(deps) {
        return init.apply(null, deps);
      });
      moduleFunc._getInitResult = function() {
        return initPromise;
      };
      return initPromise;
    };
    return moduleFunc;
  }
  var supportsWorkers = function() {
    var supported = false;
    if (typeof window !== "undefined" && typeof window.document !== "undefined") {
      try {
        var worker = new Worker(
          URL.createObjectURL(new Blob([""], { type: "application/javascript" }))
        );
        worker.terminate();
        supported = true;
      } catch (err) {
        if (typeof process !== "undefined" && false) ;
        else {
          console.log(
            "Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [" + err.message + "]"
          );
        }
      }
    }
    supportsWorkers = function() {
      return supported;
    };
    return supported;
  };
  var _workerModuleId = 0;
  var _messageId = 0;
  var _allowInitAsString = false;
  var workers = /* @__PURE__ */ Object.create(null);
  var registeredModules = /* @__PURE__ */ Object.create(null);
  var openRequests = /* @__PURE__ */ Object.create(null);
  function defineWorkerModule(options) {
    if ((!options || typeof options.init !== "function") && !_allowInitAsString) {
      throw new Error("requires `options.init` function");
    }
    var dependencies = options.dependencies;
    var init = options.init;
    var getTransferables = options.getTransferables;
    var workerId = options.workerId;
    var onMainThread = defineMainThreadModule(options);
    if (workerId == null) {
      workerId = "#default";
    }
    var id = "workerModule" + ++_workerModuleId;
    var name2 = options.name || id;
    var registrationPromise = null;
    dependencies = dependencies && dependencies.map(function(dep) {
      if (typeof dep === "function" && !dep.workerModuleData) {
        _allowInitAsString = true;
        dep = defineWorkerModule({
          workerId,
          name: "<" + name2 + "> function dependency: " + dep.name,
          init: "function(){return (\n" + stringifyFunction(dep) + "\n)}"
        });
        _allowInitAsString = false;
      }
      if (dep && dep.workerModuleData) {
        dep = dep.workerModuleData;
      }
      return dep;
    });
    function moduleFunc() {
      var args = [], len = arguments.length;
      while (len--) args[len] = arguments[len];
      if (!supportsWorkers()) {
        return onMainThread.apply(void 0, args);
      }
      if (!registrationPromise) {
        registrationPromise = callWorker(workerId, "registerModule", moduleFunc.workerModuleData);
        var unregister = function() {
          registrationPromise = null;
          registeredModules[workerId].delete(unregister);
        };
        (registeredModules[workerId] || (registeredModules[workerId] = /* @__PURE__ */ new Set())).add(unregister);
      }
      return registrationPromise.then(function(ref) {
        var isCallable = ref.isCallable;
        if (isCallable) {
          return callWorker(workerId, "callModule", { id, args });
        } else {
          throw new Error("Worker module function was called but `init` did not return a callable function");
        }
      });
    }
    moduleFunc.workerModuleData = {
      isWorkerModule: true,
      id,
      name: name2,
      dependencies,
      init: stringifyFunction(init),
      getTransferables: getTransferables && stringifyFunction(getTransferables)
    };
    moduleFunc.onMainThread = onMainThread;
    return moduleFunc;
  }
  function terminateWorker(workerId) {
    if (registeredModules[workerId]) {
      registeredModules[workerId].forEach(function(unregister) {
        unregister();
      });
    }
    if (workers[workerId]) {
      workers[workerId].terminate();
      delete workers[workerId];
    }
  }
  function stringifyFunction(fn) {
    var str = fn.toString();
    if (!/^function/.test(str) && /^\w+\s*\(/.test(str)) {
      str = "function " + str;
    }
    return str;
  }
  function getWorker(workerId) {
    var worker = workers[workerId];
    if (!worker) {
      var bootstrap = stringifyFunction(workerBootstrap);
      worker = workers[workerId] = new Worker(
        URL.createObjectURL(
          new Blob(
            ["/** Worker Module Bootstrap: " + workerId.replace(/\*/g, "") + " **/\n\n;(" + bootstrap + ")()"],
            { type: "application/javascript" }
          )
        )
      );
      worker.onmessage = function(e) {
        var response = e.data;
        var msgId = response.messageId;
        var callback = openRequests[msgId];
        if (!callback) {
          throw new Error("WorkerModule response with empty or unknown messageId");
        }
        delete openRequests[msgId];
        callback(response);
      };
    }
    return worker;
  }
  function callWorker(workerId, action, data) {
    return new Promise(function(resolve, reject) {
      var messageId = ++_messageId;
      openRequests[messageId] = function(response) {
        if (response.success) {
          resolve(response.result);
        } else {
          reject(new Error("Error in worker " + action + " call: " + response.error));
        }
      };
      getWorker(workerId).postMessage({
        messageId,
        action,
        data
      });
    });
  }

  // node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs
  function SDFGenerator() {
    var exports = function(exports2) {
      function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t, pointOut) {
        var t2 = 1 - t;
        pointOut.x = t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2;
        pointOut.y = t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2;
      }
      function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t, pointOut) {
        var t2 = 1 - t;
        pointOut.x = t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3;
        pointOut.y = t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3;
      }
      function forEachPathCommand(pathString, commandCallback) {
        var segmentRE = /([MLQCZ])([^MLQCZ]*)/g;
        var match, firstX, firstY, prevX, prevY;
        while (match = segmentRE.exec(pathString)) {
          var args = match[2].replace(/^\s*|\s*$/g, "").split(/[,\s]+/).map(function(v) {
            return parseFloat(v);
          });
          switch (match[1]) {
            case "M":
              prevX = firstX = args[0];
              prevY = firstY = args[1];
              break;
            case "L":
              if (args[0] !== prevX || args[1] !== prevY) {
                commandCallback("L", prevX, prevY, prevX = args[0], prevY = args[1]);
              }
              break;
            case "Q": {
              commandCallback("Q", prevX, prevY, prevX = args[2], prevY = args[3], args[0], args[1]);
              break;
            }
            case "C": {
              commandCallback("C", prevX, prevY, prevX = args[4], prevY = args[5], args[0], args[1], args[2], args[3]);
              break;
            }
            case "Z":
              if (prevX !== firstX || prevY !== firstY) {
                commandCallback("L", prevX, prevY, firstX, firstY);
              }
              break;
          }
        }
      }
      function pathToLineSegments(pathString, segmentCallback, curvePoints) {
        if (curvePoints === void 0) curvePoints = 16;
        var tempPoint = { x: 0, y: 0 };
        forEachPathCommand(pathString, function(command, startX, startY, endX, endY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y) {
          switch (command) {
            case "L":
              segmentCallback(startX, startY, endX, endY);
              break;
            case "Q": {
              var prevCurveX = startX;
              var prevCurveY = startY;
              for (var i = 1; i < curvePoints; i++) {
                pointOnQuadraticBezier(
                  startX,
                  startY,
                  ctrl1X,
                  ctrl1Y,
                  endX,
                  endY,
                  i / (curvePoints - 1),
                  tempPoint
                );
                segmentCallback(prevCurveX, prevCurveY, tempPoint.x, tempPoint.y);
                prevCurveX = tempPoint.x;
                prevCurveY = tempPoint.y;
              }
              break;
            }
            case "C": {
              var prevCurveX$1 = startX;
              var prevCurveY$1 = startY;
              for (var i$1 = 1; i$1 < curvePoints; i$1++) {
                pointOnCubicBezier(
                  startX,
                  startY,
                  ctrl1X,
                  ctrl1Y,
                  ctrl2X,
                  ctrl2Y,
                  endX,
                  endY,
                  i$1 / (curvePoints - 1),
                  tempPoint
                );
                segmentCallback(prevCurveX$1, prevCurveY$1, tempPoint.x, tempPoint.y);
                prevCurveX$1 = tempPoint.x;
                prevCurveY$1 = tempPoint.y;
              }
              break;
            }
          }
        });
      }
      var viewportQuadVertex = "precision highp float;attribute vec2 aUV;varying vec2 vUV;void main(){vUV=aUV;gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
      var copyTexFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){gl_FragColor=texture2D(tex,vUV);}";
      var cache = /* @__PURE__ */ new WeakMap();
      var glContextParams = {
        premultipliedAlpha: false,
        preserveDrawingBuffer: true,
        antialias: false,
        depth: false
      };
      function withWebGLContext(glOrCanvas, callback) {
        var gl = glOrCanvas.getContext ? glOrCanvas.getContext("webgl", glContextParams) : glOrCanvas;
        var wrapper = cache.get(gl);
        if (!wrapper) {
          let getExtension = function(name2) {
            var ext = extensions[name2];
            if (!ext) {
              ext = extensions[name2] = gl.getExtension(name2);
              if (!ext) {
                throw new Error(name2 + " not supported");
              }
            }
            return ext;
          }, compileShader = function(src, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            return shader;
          }, withProgram = function(name2, vert, frag, func) {
            if (!programs[name2]) {
              var attributes = {};
              var uniforms = {};
              var program = gl.createProgram();
              gl.attachShader(program, compileShader(vert, gl.VERTEX_SHADER));
              gl.attachShader(program, compileShader(frag, gl.FRAGMENT_SHADER));
              gl.linkProgram(program);
              programs[name2] = {
                program,
                transaction: function transaction(func2) {
                  gl.useProgram(program);
                  func2({
                    setUniform: function setUniform(type, name3) {
                      var values = [], len = arguments.length - 2;
                      while (len-- > 0) values[len] = arguments[len + 2];
                      var uniformLoc = uniforms[name3] || (uniforms[name3] = gl.getUniformLocation(program, name3));
                      gl["uniform" + type].apply(gl, [uniformLoc].concat(values));
                    },
                    setAttribute: function setAttribute(name3, size, usage, instancingDivisor, data) {
                      var attr = attributes[name3];
                      if (!attr) {
                        attr = attributes[name3] = {
                          buf: gl.createBuffer(),
                          // TODO should we destroy our buffers?
                          loc: gl.getAttribLocation(program, name3),
                          data: null
                        };
                      }
                      gl.bindBuffer(gl.ARRAY_BUFFER, attr.buf);
                      gl.vertexAttribPointer(attr.loc, size, gl.FLOAT, false, 0, 0);
                      gl.enableVertexAttribArray(attr.loc);
                      if (isWebGL2) {
                        gl.vertexAttribDivisor(attr.loc, instancingDivisor);
                      } else {
                        getExtension("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(attr.loc, instancingDivisor);
                      }
                      if (data !== attr.data) {
                        gl.bufferData(gl.ARRAY_BUFFER, data, usage);
                        attr.data = data;
                      }
                    }
                  });
                }
              };
            }
            programs[name2].transaction(func);
          }, withTexture = function(name2, func) {
            textureUnit++;
            try {
              gl.activeTexture(gl.TEXTURE0 + textureUnit);
              var texture = textures[name2];
              if (!texture) {
                texture = textures[name2] = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              }
              gl.bindTexture(gl.TEXTURE_2D, texture);
              func(texture, textureUnit);
            } finally {
              textureUnit--;
            }
          }, withTextureFramebuffer = function(texture, textureUnit2, func) {
            var framebuffer = gl.createFramebuffer();
            framebufferStack.push(framebuffer);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.activeTexture(gl.TEXTURE0 + textureUnit2);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            try {
              func(framebuffer);
            } finally {
              gl.deleteFramebuffer(framebuffer);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferStack[--framebufferStack.length - 1] || null);
            }
          }, handleContextLoss = function() {
            extensions = {};
            programs = {};
            textures = {};
            textureUnit = -1;
            framebufferStack.length = 0;
          };
          var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
          var extensions = {};
          var programs = {};
          var textures = {};
          var textureUnit = -1;
          var framebufferStack = [];
          gl.canvas.addEventListener("webglcontextlost", function(e) {
            handleContextLoss();
            e.preventDefault();
          }, false);
          cache.set(gl, wrapper = {
            gl,
            isWebGL2,
            getExtension,
            withProgram,
            withTexture,
            withTextureFramebuffer,
            handleContextLoss
          });
        }
        callback(wrapper);
      }
      function renderImageData(glOrCanvas, imageData, x, y, width, height, channels, framebuffer) {
        if (channels === void 0) channels = 15;
        if (framebuffer === void 0) framebuffer = null;
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var withProgram = ref.withProgram;
          var withTexture = ref.withTexture;
          withTexture("copy", function(tex, texUnit) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
            withProgram("copy", viewportQuadVertex, copyTexFragment, function(ref2) {
              var setUniform = ref2.setUniform;
              var setAttribute = ref2.setAttribute;
              setAttribute("aUV", 2, gl.STATIC_DRAW, 0, new Float32Array([0, 0, 2, 0, 0, 2]));
              setUniform("1i", "image", texUnit);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer || null);
              gl.disable(gl.BLEND);
              gl.colorMask(channels & 8, channels & 4, channels & 2, channels & 1);
              gl.viewport(x, y, width, height);
              gl.scissor(x, y, width, height);
              gl.drawArrays(gl.TRIANGLES, 0, 3);
            });
          });
        });
      }
      function resizeWebGLCanvasWithoutClearing2(canvas, newWidth, newHeight) {
        var width = canvas.width;
        var height = canvas.height;
        withWebGLContext(canvas, function(ref) {
          var gl = ref.gl;
          var data = new Uint8Array(width * height * 4);
          gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
          canvas.width = newWidth;
          canvas.height = newHeight;
          renderImageData(gl, data, 0, 0, width, height);
        });
      }
      var webglUtils = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        withWebGLContext,
        renderImageData,
        resizeWebGLCanvasWithoutClearing: resizeWebGLCanvasWithoutClearing2
      });
      function generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
        if (sdfExponent === void 0) sdfExponent = 1;
        var textureData = new Uint8Array(sdfWidth * sdfHeight);
        var viewBoxWidth = viewBox[2] - viewBox[0];
        var viewBoxHeight = viewBox[3] - viewBox[1];
        var segments = [];
        pathToLineSegments(path, function(x1, y1, x2, y2) {
          segments.push({
            x1,
            y1,
            x2,
            y2,
            minX: Math.min(x1, x2),
            minY: Math.min(y1, y2),
            maxX: Math.max(x1, x2),
            maxY: Math.max(y1, y2)
          });
        });
        segments.sort(function(a, b) {
          return a.maxX - b.maxX;
        });
        for (var sdfX = 0; sdfX < sdfWidth; sdfX++) {
          for (var sdfY = 0; sdfY < sdfHeight; sdfY++) {
            var signedDist = findNearestSignedDistance(
              viewBox[0] + viewBoxWidth * (sdfX + 0.5) / sdfWidth,
              viewBox[1] + viewBoxHeight * (sdfY + 0.5) / sdfHeight
            );
            var alpha = Math.pow(1 - Math.abs(signedDist) / maxDistance, sdfExponent) / 2;
            if (signedDist < 0) {
              alpha = 1 - alpha;
            }
            alpha = Math.max(0, Math.min(255, Math.round(alpha * 255)));
            textureData[sdfY * sdfWidth + sdfX] = alpha;
          }
        }
        return textureData;
        function findNearestSignedDistance(x, y) {
          var closestDistSq = Infinity;
          var closestDist = Infinity;
          for (var i = segments.length; i--; ) {
            var seg = segments[i];
            if (seg.maxX + closestDist <= x) {
              break;
            }
            if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {
              var distSq = absSquareDistanceToLineSegment(x, y, seg.x1, seg.y1, seg.x2, seg.y2);
              if (distSq < closestDistSq) {
                closestDistSq = distSq;
                closestDist = Math.sqrt(closestDistSq);
              }
            }
          }
          if (isPointInPoly(x, y)) {
            closestDist = -closestDist;
          }
          return closestDist;
        }
        function isPointInPoly(x, y) {
          var winding = 0;
          for (var i = segments.length; i--; ) {
            var seg = segments[i];
            if (seg.maxX <= x) {
              break;
            }
            var intersects = seg.y1 > y !== seg.y2 > y && x < (seg.x2 - seg.x1) * (y - seg.y1) / (seg.y2 - seg.y1) + seg.x1;
            if (intersects) {
              winding += seg.y1 < seg.y2 ? 1 : -1;
            }
          }
          return winding !== 0;
        }
      }
      function generateIntoCanvas$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (sdfExponent === void 0) sdfExponent = 1;
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        if (channel === void 0) channel = 0;
        generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
      }
      function generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
        if (sdfExponent === void 0) sdfExponent = 1;
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        if (channel === void 0) channel = 0;
        var data = generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent);
        var rgbaData = new Uint8Array(data.length * 4);
        for (var i = 0; i < data.length; i++) {
          rgbaData[i * 4 + channel] = data[i];
        }
        renderImageData(glOrCanvas, rgbaData, x, y, sdfWidth, sdfHeight, 1 << 3 - channel, framebuffer);
      }
      function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {
        var ldx = lineX1 - lineX0;
        var ldy = lineY1 - lineY0;
        var lengthSq = ldx * ldx + ldy * ldy;
        var t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;
        var dx = x - (lineX0 + t * ldx);
        var dy = y - (lineY0 + t * ldy);
        return dx * dx + dy * dy;
      }
      var javascript = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        generate: generate$2,
        generateIntoCanvas: generateIntoCanvas$2,
        generateIntoFramebuffer: generateIntoFramebuffer$1
      });
      var mainVertex = "precision highp float;uniform vec4 uGlyphBounds;attribute vec2 aUV;attribute vec4 aLineSegment;varying vec4 vLineSegment;varying vec2 vGlyphXY;void main(){vLineSegment=aLineSegment;vGlyphXY=mix(uGlyphBounds.xy,uGlyphBounds.zw,aUV);gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
      var mainFragment = "precision highp float;uniform vec4 uGlyphBounds;uniform float uMaxDistance;uniform float uExponent;varying vec4 vLineSegment;varying vec2 vGlyphXY;float absDistToSegment(vec2 point,vec2 lineA,vec2 lineB){vec2 lineDir=lineB-lineA;float lenSq=dot(lineDir,lineDir);float t=lenSq==0.0 ? 0.0 : clamp(dot(point-lineA,lineDir)/lenSq,0.0,1.0);vec2 linePt=lineA+t*lineDir;return distance(point,linePt);}void main(){vec4 seg=vLineSegment;vec2 p=vGlyphXY;float dist=absDistToSegment(p,seg.xy,seg.zw);float val=pow(1.0-clamp(dist/uMaxDistance,0.0,1.0),uExponent)*0.5;bool crossing=(seg.y>p.y!=seg.w>p.y)&&(p.x<(seg.z-seg.x)*(p.y-seg.y)/(seg.w-seg.y)+seg.x);bool crossingUp=crossing&&vLineSegment.y<vLineSegment.w;gl_FragColor=vec4(crossingUp ? 1.0/255.0 : 0.0,crossing&&!crossingUp ? 1.0/255.0 : 0.0,0.0,val);}";
      var postFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){vec4 color=texture2D(tex,vUV);bool inside=color.r!=color.g;float val=inside ? 1.0-color.a : color.a;gl_FragColor=vec4(val);}";
      var viewportUVs = new Float32Array([0, 0, 2, 0, 0, 2]);
      var implicitContext = null;
      var isTestingSupport = false;
      var NULL_OBJECT = {};
      var supportByCanvas = /* @__PURE__ */ new WeakMap();
      function validateSupport(glOrCanvas) {
        if (!isTestingSupport && !isSupported(glOrCanvas)) {
          throw new Error("WebGL generation not supported");
        }
      }
      function generate$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas) {
        if (sdfExponent === void 0) sdfExponent = 1;
        if (glOrCanvas === void 0) glOrCanvas = null;
        if (!glOrCanvas) {
          glOrCanvas = implicitContext;
          if (!glOrCanvas) {
            var canvas = typeof OffscreenCanvas === "function" ? new OffscreenCanvas(1, 1) : typeof document !== "undefined" ? document.createElement("canvas") : null;
            if (!canvas) {
              throw new Error("OffscreenCanvas or DOM canvas not supported");
            }
            glOrCanvas = implicitContext = canvas.getContext("webgl", { depth: false });
          }
        }
        validateSupport(glOrCanvas);
        var rgbaData = new Uint8Array(sdfWidth * sdfHeight * 4);
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var withTexture = ref.withTexture;
          var withTextureFramebuffer = ref.withTextureFramebuffer;
          withTexture("readable", function(texture, textureUnit) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sdfWidth, sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            withTextureFramebuffer(texture, textureUnit, function(framebuffer) {
              generateIntoFramebuffer(
                sdfWidth,
                sdfHeight,
                path,
                viewBox,
                maxDistance,
                sdfExponent,
                gl,
                framebuffer,
                0,
                0,
                0
                // red channel
              );
              gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, rgbaData);
            });
          });
        });
        var data = new Uint8Array(sdfWidth * sdfHeight);
        for (var i = 0, j = 0; i < rgbaData.length; i += 4) {
          data[j++] = rgbaData[i];
        }
        return data;
      }
      function generateIntoCanvas$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (sdfExponent === void 0) sdfExponent = 1;
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        if (channel === void 0) channel = 0;
        generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
      }
      function generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
        if (sdfExponent === void 0) sdfExponent = 1;
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        if (channel === void 0) channel = 0;
        validateSupport(glOrCanvas);
        var lineSegmentCoords = [];
        pathToLineSegments(path, function(x1, y1, x2, y2) {
          lineSegmentCoords.push(x1, y1, x2, y2);
        });
        lineSegmentCoords = new Float32Array(lineSegmentCoords);
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var isWebGL2 = ref.isWebGL2;
          var getExtension = ref.getExtension;
          var withProgram = ref.withProgram;
          var withTexture = ref.withTexture;
          var withTextureFramebuffer = ref.withTextureFramebuffer;
          var handleContextLoss = ref.handleContextLoss;
          withTexture("rawDistances", function(intermediateTexture, intermediateTextureUnit) {
            if (sdfWidth !== intermediateTexture._lastWidth || sdfHeight !== intermediateTexture._lastHeight) {
              gl.texImage2D(
                gl.TEXTURE_2D,
                0,
                gl.RGBA,
                intermediateTexture._lastWidth = sdfWidth,
                intermediateTexture._lastHeight = sdfHeight,
                0,
                gl.RGBA,
                gl.UNSIGNED_BYTE,
                null
              );
            }
            withProgram("main", mainVertex, mainFragment, function(ref2) {
              var setAttribute = ref2.setAttribute;
              var setUniform = ref2.setUniform;
              var instancingExtension = !isWebGL2 && getExtension("ANGLE_instanced_arrays");
              var blendMinMaxExtension = !isWebGL2 && getExtension("EXT_blend_minmax");
              setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
              setAttribute("aLineSegment", 4, gl.DYNAMIC_DRAW, 1, lineSegmentCoords);
              setUniform.apply(void 0, ["4f", "uGlyphBounds"].concat(viewBox));
              setUniform("1f", "uMaxDistance", maxDistance);
              setUniform("1f", "uExponent", sdfExponent);
              withTextureFramebuffer(intermediateTexture, intermediateTextureUnit, function(framebuffer2) {
                gl.enable(gl.BLEND);
                gl.colorMask(true, true, true, true);
                gl.viewport(0, 0, sdfWidth, sdfHeight);
                gl.scissor(0, 0, sdfWidth, sdfHeight);
                gl.blendFunc(gl.ONE, gl.ONE);
                gl.blendEquationSeparate(gl.FUNC_ADD, isWebGL2 ? gl.MAX : blendMinMaxExtension.MAX_EXT);
                gl.clear(gl.COLOR_BUFFER_BIT);
                if (isWebGL2) {
                  gl.drawArraysInstanced(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
                } else {
                  instancingExtension.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
                }
              });
            });
            withProgram("post", viewportQuadVertex, postFragment, function(program) {
              program.setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
              program.setUniform("1i", "tex", intermediateTextureUnit);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
              gl.disable(gl.BLEND);
              gl.colorMask(channel === 0, channel === 1, channel === 2, channel === 3);
              gl.viewport(x, y, sdfWidth, sdfHeight);
              gl.scissor(x, y, sdfWidth, sdfHeight);
              gl.drawArrays(gl.TRIANGLES, 0, 3);
            });
          });
          if (gl.isContextLost()) {
            handleContextLoss();
            throw new Error("webgl context lost");
          }
        });
      }
      function isSupported(glOrCanvas) {
        var key = !glOrCanvas || glOrCanvas === implicitContext ? NULL_OBJECT : glOrCanvas.canvas || glOrCanvas;
        var supported = supportByCanvas.get(key);
        if (supported === void 0) {
          isTestingSupport = true;
          var failReason = null;
          try {
            var expectedResult = [
              97,
              106,
              97,
              61,
              99,
              137,
              118,
              80,
              80,
              118,
              137,
              99,
              61,
              97,
              106,
              97
            ];
            var testResult = generate$1(
              4,
              4,
              "M8,8L16,8L24,24L16,24Z",
              [0, 0, 32, 32],
              24,
              1,
              glOrCanvas
            );
            supported = testResult && expectedResult.length === testResult.length && testResult.every(function(val, i) {
              return val === expectedResult[i];
            });
            if (!supported) {
              failReason = "bad trial run results";
              console.info(expectedResult, testResult);
            }
          } catch (err) {
            supported = false;
            failReason = err.message;
          }
          if (failReason) {
            console.warn("WebGL SDF generation not supported:", failReason);
          }
          isTestingSupport = false;
          supportByCanvas.set(key, supported);
        }
        return supported;
      }
      var webgl = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        generate: generate$1,
        generateIntoCanvas: generateIntoCanvas$1,
        generateIntoFramebuffer,
        isSupported
      });
      function generate(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
        if (maxDistance === void 0) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
        if (sdfExponent === void 0) sdfExponent = 1;
        try {
          return generate$1.apply(webgl, arguments);
        } catch (e) {
          console.info("WebGL SDF generation failed, falling back to JS", e);
          return generate$2.apply(javascript, arguments);
        }
      }
      function generateIntoCanvas(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (maxDistance === void 0) maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
        if (sdfExponent === void 0) sdfExponent = 1;
        if (x === void 0) x = 0;
        if (y === void 0) y = 0;
        if (channel === void 0) channel = 0;
        try {
          return generateIntoCanvas$1.apply(webgl, arguments);
        } catch (e) {
          console.info("WebGL SDF generation failed, falling back to JS", e);
          return generateIntoCanvas$2.apply(javascript, arguments);
        }
      }
      exports2.forEachPathCommand = forEachPathCommand;
      exports2.generate = generate;
      exports2.generateIntoCanvas = generateIntoCanvas;
      exports2.javascript = javascript;
      exports2.pathToLineSegments = pathToLineSegments;
      exports2.webgl = webgl;
      exports2.webglUtils = webglUtils;
      Object.defineProperty(exports2, "__esModule", { value: true });
      return exports2;
    }({});
    return exports;
  }

  // node_modules/bidi-js/dist/bidi.mjs
  function bidiFactory() {
    var bidi = function(exports) {
      var DATA = {
        "R": "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
        "EN": "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
        "ES": "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
        "ET": "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
        "AN": "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
        "CS": "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
        "B": "a,3,f+2,2v,690",
        "S": "9,2,k",
        "WS": "c,k,4f4,1vk+a,u,1j,335",
        "ON": "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
        "BN": "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
        "NSM": "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
        "AL": "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
        "LRO": "6ct",
        "RLO": "6cu",
        "LRE": "6cq",
        "RLE": "6cr",
        "PDF": "6cs",
        "LRI": "6ee",
        "RLI": "6ef",
        "FSI": "6eg",
        "PDI": "6eh"
      };
      var TYPES = {};
      var TYPES_TO_NAMES = {};
      TYPES.L = 1;
      TYPES_TO_NAMES[1] = "L";
      Object.keys(DATA).forEach(function(type, i) {
        TYPES[type] = 1 << i + 1;
        TYPES_TO_NAMES[TYPES[type]] = type;
      });
      Object.freeze(TYPES);
      var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;
      var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;
      var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;
      var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;
      var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;
      var map = null;
      function parseData() {
        if (!map) {
          map = /* @__PURE__ */ new Map();
          var loop = function(type2) {
            if (DATA.hasOwnProperty(type2)) {
              var lastCode = 0;
              DATA[type2].split(",").forEach(function(range) {
                var ref = range.split("+");
                var skip = ref[0];
                var step = ref[1];
                skip = parseInt(skip, 36);
                step = step ? parseInt(step, 36) : 0;
                map.set(lastCode += skip, TYPES[type2]);
                for (var i = 0; i < step; i++) {
                  map.set(++lastCode, TYPES[type2]);
                }
              });
            }
          };
          for (var type in DATA) loop(type);
        }
      }
      function getBidiCharType(char) {
        parseData();
        return map.get(char.codePointAt(0)) || TYPES.L;
      }
      function getBidiCharTypeName(char) {
        return TYPES_TO_NAMES[getBidiCharType(char)];
      }
      var data$1 = {
        "pairs": "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
        "canonical": "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye"
      };
      function parseCharacterMap(encodedString, includeReverse) {
        var radix = 36;
        var lastCode = 0;
        var map2 = /* @__PURE__ */ new Map();
        var reverseMap = includeReverse && /* @__PURE__ */ new Map();
        var prevPair;
        encodedString.split(",").forEach(function visit(entry) {
          if (entry.indexOf("+") !== -1) {
            for (var i = +entry; i--; ) {
              visit(prevPair);
            }
          } else {
            prevPair = entry;
            var ref = entry.split(">");
            var a = ref[0];
            var b = ref[1];
            a = String.fromCodePoint(lastCode += parseInt(a, radix));
            b = String.fromCodePoint(lastCode += parseInt(b, radix));
            map2.set(a, b);
            includeReverse && reverseMap.set(b, a);
          }
        });
        return { map: map2, reverseMap };
      }
      var openToClose, closeToOpen, canonical;
      function parse$1() {
        if (!openToClose) {
          var ref = parseCharacterMap(data$1.pairs, true);
          var map2 = ref.map;
          var reverseMap = ref.reverseMap;
          openToClose = map2;
          closeToOpen = reverseMap;
          canonical = parseCharacterMap(data$1.canonical, false).map;
        }
      }
      function openingToClosingBracket(char) {
        parse$1();
        return openToClose.get(char) || null;
      }
      function closingToOpeningBracket(char) {
        parse$1();
        return closeToOpen.get(char) || null;
      }
      function getCanonicalBracket(char) {
        parse$1();
        return canonical.get(char) || null;
      }
      var TYPE_L = TYPES.L;
      var TYPE_R = TYPES.R;
      var TYPE_EN = TYPES.EN;
      var TYPE_ES = TYPES.ES;
      var TYPE_ET = TYPES.ET;
      var TYPE_AN = TYPES.AN;
      var TYPE_CS = TYPES.CS;
      var TYPE_B = TYPES.B;
      var TYPE_S = TYPES.S;
      var TYPE_ON = TYPES.ON;
      var TYPE_BN = TYPES.BN;
      var TYPE_NSM = TYPES.NSM;
      var TYPE_AL = TYPES.AL;
      var TYPE_LRO = TYPES.LRO;
      var TYPE_RLO = TYPES.RLO;
      var TYPE_LRE = TYPES.LRE;
      var TYPE_RLE = TYPES.RLE;
      var TYPE_PDF = TYPES.PDF;
      var TYPE_LRI = TYPES.LRI;
      var TYPE_RLI = TYPES.RLI;
      var TYPE_FSI = TYPES.FSI;
      var TYPE_PDI = TYPES.PDI;
      function getEmbeddingLevels(string, baseDirection) {
        var MAX_DEPTH = 125;
        var charTypes = new Uint32Array(string.length);
        for (var i = 0; i < string.length; i++) {
          charTypes[i] = getBidiCharType(string[i]);
        }
        var charTypeCounts = /* @__PURE__ */ new Map();
        function changeCharType(i2, type2) {
          var oldType = charTypes[i2];
          charTypes[i2] = type2;
          charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);
          if (oldType & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);
          }
          charTypeCounts.set(type2, (charTypeCounts.get(type2) || 0) + 1);
          if (type2 & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
          }
        }
        var embedLevels = new Uint8Array(string.length);
        var isolationPairs = /* @__PURE__ */ new Map();
        var paragraphs = [];
        var paragraph = null;
        for (var i$1 = 0; i$1 < string.length; i$1++) {
          if (!paragraph) {
            paragraphs.push(paragraph = {
              start: i$1,
              end: string.length - 1,
              // 3.3.1 P2-P3: Determine the paragraph level
              level: baseDirection === "rtl" ? 1 : baseDirection === "ltr" ? 0 : determineAutoEmbedLevel(i$1, false)
            });
          }
          if (charTypes[i$1] & TYPE_B) {
            paragraph.end = i$1;
            paragraph = null;
          }
        }
        var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;
        var nextEven = function(n) {
          return n + (n & 1 ? 1 : 2);
        };
        var nextOdd = function(n) {
          return n + (n & 1 ? 2 : 1);
        };
        for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {
          paragraph = paragraphs[paraIdx];
          var statusStack = [{
            _level: paragraph.level,
            _override: 0,
            //0=neutral, 1=L, 2=R
            _isolate: 0
            //bool
          }];
          var stackTop = void 0;
          var overflowIsolateCount = 0;
          var overflowEmbeddingCount = 0;
          var validIsolateCount = 0;
          charTypeCounts.clear();
          for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {
            var charType = charTypes[i$2];
            stackTop = statusStack[statusStack.length - 1];
            charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);
            if (charType & NEUTRAL_ISOLATE_TYPES) {
              charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
            }
            if (charType & FORMATTING_TYPES) {
              if (charType & (TYPE_RLE | TYPE_LRE)) {
                embedLevels[i$2] = stackTop._level;
                var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);
                if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                  statusStack.push({
                    _level: level,
                    _override: 0,
                    _isolate: 0
                  });
                } else if (!overflowIsolateCount) {
                  overflowEmbeddingCount++;
                }
              } else if (charType & (TYPE_RLO | TYPE_LRO)) {
                embedLevels[i$2] = stackTop._level;
                var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);
                if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                  statusStack.push({
                    _level: level$1,
                    _override: charType & TYPE_RLO ? TYPE_R : TYPE_L,
                    _isolate: 0
                  });
                } else if (!overflowIsolateCount) {
                  overflowEmbeddingCount++;
                }
              } else if (charType & ISOLATE_INIT_TYPES) {
                if (charType & TYPE_FSI) {
                  charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;
                }
                embedLevels[i$2] = stackTop._level;
                if (stackTop._override) {
                  changeCharType(i$2, stackTop._override);
                }
                var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);
                if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {
                  validIsolateCount++;
                  statusStack.push({
                    _level: level$2,
                    _override: 0,
                    _isolate: 1,
                    _isolInitIndex: i$2
                  });
                } else {
                  overflowIsolateCount++;
                }
              } else if (charType & TYPE_PDI) {
                if (overflowIsolateCount > 0) {
                  overflowIsolateCount--;
                } else if (validIsolateCount > 0) {
                  overflowEmbeddingCount = 0;
                  while (!statusStack[statusStack.length - 1]._isolate) {
                    statusStack.pop();
                  }
                  var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;
                  if (isolInitIndex != null) {
                    isolationPairs.set(isolInitIndex, i$2);
                    isolationPairs.set(i$2, isolInitIndex);
                  }
                  statusStack.pop();
                  validIsolateCount--;
                }
                stackTop = statusStack[statusStack.length - 1];
                embedLevels[i$2] = stackTop._level;
                if (stackTop._override) {
                  changeCharType(i$2, stackTop._override);
                }
              } else if (charType & TYPE_PDF) {
                if (overflowIsolateCount === 0) {
                  if (overflowEmbeddingCount > 0) {
                    overflowEmbeddingCount--;
                  } else if (!stackTop._isolate && statusStack.length > 1) {
                    statusStack.pop();
                    stackTop = statusStack[statusStack.length - 1];
                  }
                }
                embedLevels[i$2] = stackTop._level;
              } else if (charType & TYPE_B) {
                embedLevels[i$2] = paragraph.level;
              }
            } else {
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override && charType !== TYPE_BN) {
                changeCharType(i$2, stackTop._override);
              }
            }
          }
          var levelRuns = [];
          var currentRun = null;
          for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {
            var charType$1 = charTypes[i$3];
            if (!(charType$1 & BN_LIKE_TYPES)) {
              var lvl = embedLevels[i$3];
              var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;
              var isPDI = charType$1 === TYPE_PDI;
              if (currentRun && lvl === currentRun._level) {
                currentRun._end = i$3;
                currentRun._endsWithIsolInit = isIsolInit;
              } else {
                levelRuns.push(currentRun = {
                  _start: i$3,
                  _end: i$3,
                  _level: lvl,
                  _startsWithPDI: isPDI,
                  _endsWithIsolInit: isIsolInit
                });
              }
            }
          }
          var isolatingRunSeqs = [];
          for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {
            var run = levelRuns[runIdx];
            if (!run._startsWithPDI || run._startsWithPDI && !isolationPairs.has(run._start)) {
              var seqRuns = [currentRun = run];
              for (var pdiIndex = void 0; currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null; ) {
                for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {
                  if (levelRuns[i$4]._start === pdiIndex) {
                    seqRuns.push(currentRun = levelRuns[i$4]);
                    break;
                  }
                }
              }
              var seqIndices = [];
              for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {
                var run$1 = seqRuns[i$5];
                for (var j = run$1._start; j <= run$1._end; j++) {
                  seqIndices.push(j);
                }
              }
              var firstLevel = embedLevels[seqIndices[0]];
              var prevLevel = paragraph.level;
              for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {
                if (!(charTypes[i$6] & BN_LIKE_TYPES)) {
                  prevLevel = embedLevels[i$6];
                  break;
                }
              }
              var lastIndex = seqIndices[seqIndices.length - 1];
              var lastLevel = embedLevels[lastIndex];
              var nextLevel = paragraph.level;
              if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {
                for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {
                  if (!(charTypes[i$7] & BN_LIKE_TYPES)) {
                    nextLevel = embedLevels[i$7];
                    break;
                  }
                }
              }
              isolatingRunSeqs.push({
                _seqIndices: seqIndices,
                _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,
                _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L
              });
            }
          }
          for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {
            var ref = isolatingRunSeqs[seqIdx];
            var seqIndices$1 = ref._seqIndices;
            var sosType = ref._sosType;
            var eosType = ref._eosType;
            var embedDirection = embedLevels[seqIndices$1[0]] & 1 ? TYPE_R : TYPE_L;
            if (charTypeCounts.get(TYPE_NSM)) {
              for (var si = 0; si < seqIndices$1.length; si++) {
                var i$8 = seqIndices$1[si];
                if (charTypes[i$8] & TYPE_NSM) {
                  var prevType = sosType;
                  for (var sj = si - 1; sj >= 0; sj--) {
                    if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) {
                      prevType = charTypes[seqIndices$1[sj]];
                      break;
                    }
                  }
                  changeCharType(i$8, prevType & (ISOLATE_INIT_TYPES | TYPE_PDI) ? TYPE_ON : prevType);
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {
                var i$9 = seqIndices$1[si$1];
                if (charTypes[i$9] & TYPE_EN) {
                  for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {
                    var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];
                    if (prevCharType & STRONG_TYPES) {
                      if (prevCharType === TYPE_AL) {
                        changeCharType(i$9, TYPE_AN);
                      }
                      break;
                    }
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_AL)) {
              for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {
                var i$10 = seqIndices$1[si$2];
                if (charTypes[i$10] & TYPE_AL) {
                  changeCharType(i$10, TYPE_R);
                }
              }
            }
            if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
              for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {
                var i$11 = seqIndices$1[si$3];
                if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {
                  var prevType$1 = 0, nextType = 0;
                  for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {
                    prevType$1 = charTypes[seqIndices$1[sj$2]];
                    if (!(prevType$1 & BN_LIKE_TYPES)) {
                      break;
                    }
                  }
                  for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {
                    nextType = charTypes[seqIndices$1[sj$3]];
                    if (!(nextType & BN_LIKE_TYPES)) {
                      break;
                    }
                  }
                  if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : prevType$1 & (TYPE_EN | TYPE_AN))) {
                    changeCharType(i$11, prevType$1);
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {
                var i$12 = seqIndices$1[si$4];
                if (charTypes[i$12] & TYPE_EN) {
                  for (var sj$4 = si$4 - 1; sj$4 >= 0 && charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES); sj$4--) {
                    changeCharType(seqIndices$1[sj$4], TYPE_EN);
                  }
                  for (si$4++; si$4 < seqIndices$1.length && charTypes[seqIndices$1[si$4]] & (TYPE_ET | BN_LIKE_TYPES | TYPE_EN); si$4++) {
                    if (charTypes[seqIndices$1[si$4]] !== TYPE_EN) {
                      changeCharType(seqIndices$1[si$4], TYPE_EN);
                    }
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
              for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {
                var i$13 = seqIndices$1[si$5];
                if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {
                  changeCharType(i$13, TYPE_ON);
                  for (var sj$5 = si$5 - 1; sj$5 >= 0 && charTypes[seqIndices$1[sj$5]] & BN_LIKE_TYPES; sj$5--) {
                    changeCharType(seqIndices$1[sj$5], TYPE_ON);
                  }
                  for (var sj$6 = si$5 + 1; sj$6 < seqIndices$1.length && charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES; sj$6++) {
                    changeCharType(seqIndices$1[sj$6], TYPE_ON);
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {
                var i$14 = seqIndices$1[si$6];
                var type = charTypes[i$14];
                if (type & TYPE_EN) {
                  if (prevStrongType === TYPE_L) {
                    changeCharType(i$14, TYPE_L);
                  }
                } else if (type & STRONG_TYPES) {
                  prevStrongType = type;
                }
              }
            }
            if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {
              var R_TYPES_FOR_N_STEPS = TYPE_R | TYPE_EN | TYPE_AN;
              var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;
              var bracketPairs = [];
              {
                var openerStack = [];
                for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {
                  if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {
                    var char = string[seqIndices$1[si$7]];
                    var oppositeBracket = void 0;
                    if (openingToClosingBracket(char) !== null) {
                      if (openerStack.length < 63) {
                        openerStack.push({ char, seqIndex: si$7 });
                      } else {
                        break;
                      }
                    } else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {
                      for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {
                        var stackChar = openerStack[stackIdx].char;
                        if (stackChar === oppositeBracket || stackChar === closingToOpeningBracket(getCanonicalBracket(char)) || openingToClosingBracket(getCanonicalBracket(stackChar)) === char) {
                          bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);
                          openerStack.length = stackIdx;
                          break;
                        }
                      }
                    }
                  }
                }
                bracketPairs.sort(function(a, b) {
                  return a[0] - b[0];
                });
              }
              for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {
                var ref$1 = bracketPairs[pairIdx];
                var openSeqIdx = ref$1[0];
                var closeSeqIdx = ref$1[1];
                var foundStrongType = false;
                var useStrongType = 0;
                for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {
                  var i$15 = seqIndices$1[si$8];
                  if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {
                    foundStrongType = true;
                    var lr = charTypes[i$15] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    if (lr === embedDirection) {
                      useStrongType = lr;
                      break;
                    }
                  }
                }
                if (foundStrongType && !useStrongType) {
                  useStrongType = sosType;
                  for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {
                    var i$16 = seqIndices$1[si$9];
                    if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {
                      var lr$1 = charTypes[i$16] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      if (lr$1 !== embedDirection) {
                        useStrongType = lr$1;
                      } else {
                        useStrongType = embedDirection;
                      }
                      break;
                    }
                  }
                }
                if (useStrongType) {
                  charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;
                  if (useStrongType !== embedDirection) {
                    for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {
                      if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {
                        if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {
                          charTypes[seqIndices$1[si$10]] = useStrongType;
                        }
                        break;
                      }
                    }
                  }
                  if (useStrongType !== embedDirection) {
                    for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {
                      if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {
                        if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {
                          charTypes[seqIndices$1[si$11]] = useStrongType;
                        }
                        break;
                      }
                    }
                  }
                }
              }
              for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {
                if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {
                  var niRunStart = si$12, niRunEnd = si$12;
                  var prevType$2 = sosType;
                  for (var si2 = si$12 - 1; si2 >= 0; si2--) {
                    if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {
                      niRunStart = si2;
                    } else {
                      prevType$2 = charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      break;
                    }
                  }
                  var nextType$1 = eosType;
                  for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {
                    if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {
                      niRunEnd = si2$1;
                    } else {
                      nextType$1 = charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      break;
                    }
                  }
                  for (var sj$7 = niRunStart; sj$7 <= niRunEnd; sj$7++) {
                    charTypes[seqIndices$1[sj$7]] = prevType$2 === nextType$1 ? prevType$2 : embedDirection;
                  }
                  si$12 = niRunEnd;
                }
              }
            }
          }
          for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {
            var level$3 = embedLevels[i$17];
            var type$1 = charTypes[i$17];
            if (level$3 & 1) {
              if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {
                embedLevels[i$17]++;
              }
            } else {
              if (type$1 & TYPE_R) {
                embedLevels[i$17]++;
              } else if (type$1 & (TYPE_AN | TYPE_EN)) {
                embedLevels[i$17] += 2;
              }
            }
            if (type$1 & BN_LIKE_TYPES) {
              embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];
            }
            if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {
              for (var j$1 = i$17; j$1 >= 0 && getBidiCharType(string[j$1]) & TRAILING_TYPES; j$1--) {
                embedLevels[j$1] = paragraph.level;
              }
            }
          }
        }
        return {
          levels: embedLevels,
          paragraphs
        };
        function determineAutoEmbedLevel(start, isFSI) {
          for (var i2 = start; i2 < string.length; i2++) {
            var charType2 = charTypes[i2];
            if (charType2 & (TYPE_R | TYPE_AL)) {
              return 1;
            }
            if (charType2 & (TYPE_B | TYPE_L) || isFSI && charType2 === TYPE_PDI) {
              return 0;
            }
            if (charType2 & ISOLATE_INIT_TYPES) {
              var pdi = indexOfMatchingPDI(i2);
              i2 = pdi === -1 ? string.length : pdi;
            }
          }
          return 0;
        }
        function indexOfMatchingPDI(isolateStart) {
          var isolationLevel = 1;
          for (var i2 = isolateStart + 1; i2 < string.length; i2++) {
            var charType2 = charTypes[i2];
            if (charType2 & TYPE_B) {
              break;
            }
            if (charType2 & TYPE_PDI) {
              if (--isolationLevel === 0) {
                return i2;
              }
            } else if (charType2 & ISOLATE_INIT_TYPES) {
              isolationLevel++;
            }
          }
          return -1;
        }
      }
      var data = "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1";
      var mirrorMap;
      function parse() {
        if (!mirrorMap) {
          var ref = parseCharacterMap(data, true);
          var map2 = ref.map;
          var reverseMap = ref.reverseMap;
          reverseMap.forEach(function(value2, key) {
            map2.set(key, value2);
          });
          mirrorMap = map2;
        }
      }
      function getMirroredCharacter(char) {
        parse();
        return mirrorMap.get(char) || null;
      }
      function getMirroredCharactersMap(string, embeddingLevels, start, end) {
        var strLen = string.length;
        start = Math.max(0, start == null ? 0 : +start);
        end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
        var map2 = /* @__PURE__ */ new Map();
        for (var i = start; i <= end; i++) {
          if (embeddingLevels[i] & 1) {
            var mirror = getMirroredCharacter(string[i]);
            if (mirror !== null) {
              map2.set(i, mirror);
            }
          }
        }
        return map2;
      }
      function getReorderSegments(string, embeddingLevelsResult, start, end) {
        var strLen = string.length;
        start = Math.max(0, start == null ? 0 : +start);
        end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
        var segments = [];
        embeddingLevelsResult.paragraphs.forEach(function(paragraph) {
          var lineStart = Math.max(start, paragraph.start);
          var lineEnd = Math.min(end, paragraph.end);
          if (lineStart < lineEnd) {
            var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);
            for (var i = lineEnd; i >= lineStart && getBidiCharType(string[i]) & TRAILING_TYPES; i--) {
              lineLevels[i] = paragraph.level;
            }
            var maxLevel = paragraph.level;
            var minOddLevel = Infinity;
            for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {
              var level = lineLevels[i$1];
              if (level > maxLevel) {
                maxLevel = level;
              }
              if (level < minOddLevel) {
                minOddLevel = level | 1;
              }
            }
            for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {
              for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {
                if (lineLevels[i$2] >= lvl) {
                  var segStart = i$2;
                  while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {
                    i$2++;
                  }
                  if (i$2 > segStart) {
                    segments.push([segStart + lineStart, i$2 + lineStart]);
                  }
                }
              }
            }
          }
        });
        return segments;
      }
      function getReorderedString(string, embedLevelsResult, start, end) {
        var indices = getReorderedIndices(string, embedLevelsResult, start, end);
        var chars = [].concat(string);
        indices.forEach(function(charIndex, i) {
          chars[i] = (embedLevelsResult.levels[charIndex] & 1 ? getMirroredCharacter(string[charIndex]) : null) || string[charIndex];
        });
        return chars.join("");
      }
      function getReorderedIndices(string, embedLevelsResult, start, end) {
        var segments = getReorderSegments(string, embedLevelsResult, start, end);
        var indices = [];
        for (var i = 0; i < string.length; i++) {
          indices[i] = i;
        }
        segments.forEach(function(ref) {
          var start2 = ref[0];
          var end2 = ref[1];
          var slice = indices.slice(start2, end2 + 1);
          for (var i2 = slice.length; i2--; ) {
            indices[end2 - i2] = slice[i2];
          }
        });
        return indices;
      }
      exports.closingToOpeningBracket = closingToOpeningBracket;
      exports.getBidiCharType = getBidiCharType;
      exports.getBidiCharTypeName = getBidiCharTypeName;
      exports.getCanonicalBracket = getCanonicalBracket;
      exports.getEmbeddingLevels = getEmbeddingLevels;
      exports.getMirroredCharacter = getMirroredCharacter;
      exports.getMirroredCharactersMap = getMirroredCharactersMap;
      exports.getReorderSegments = getReorderSegments;
      exports.getReorderedIndices = getReorderedIndices;
      exports.getReorderedString = getReorderedString;
      exports.openingToClosingBracket = openingToClosingBracket;
      Object.defineProperty(exports, "__esModule", { value: true });
      return exports;
    }({});
    return bidi;
  }
  var bidi_default = bidiFactory;

  // node_modules/troika-three-utils/dist/troika-three-utils.esm.js
  var voidMainRegExp = /\bvoid\s+main\s*\(\s*\)\s*{/g;
  function expandShaderIncludes(source) {
    const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
    function replace(match, include) {
      let chunk = ShaderChunk[include];
      return chunk ? expandShaderIncludes(chunk) : match;
    }
    return source.replace(pattern, replace);
  }
  var _lut2 = [];
  for (let i = 0; i < 256; i++) {
    _lut2[i] = (i < 16 ? "0" : "") + i.toString(16);
  }
  function generateUUID2() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut2[d0 & 255] + _lut2[d0 >> 8 & 255] + _lut2[d0 >> 16 & 255] + _lut2[d0 >> 24 & 255] + "-" + _lut2[d1 & 255] + _lut2[d1 >> 8 & 255] + "-" + _lut2[d1 >> 16 & 15 | 64] + _lut2[d1 >> 24 & 255] + "-" + _lut2[d2 & 63 | 128] + _lut2[d2 >> 8 & 255] + "-" + _lut2[d2 >> 16 & 255] + _lut2[d2 >> 24 & 255] + _lut2[d3 & 255] + _lut2[d3 >> 8 & 255] + _lut2[d3 >> 16 & 255] + _lut2[d3 >> 24 & 255];
    return uuid.toUpperCase();
  }
  var assign = Object.assign || function() {
    let target = arguments[0];
    for (let i = 1, len = arguments.length; i < len; i++) {
      let source = arguments[i];
      if (source) {
        for (let prop in source) {
          if (Object.prototype.hasOwnProperty.call(source, prop)) {
            target[prop] = source[prop];
          }
        }
      }
    }
    return target;
  };
  var epoch = Date.now();
  var CONSTRUCTOR_CACHE = /* @__PURE__ */ new WeakMap();
  var SHADER_UPGRADE_CACHE = /* @__PURE__ */ new Map();
  var materialInstanceId = 1e10;
  function createDerivedMaterial(baseMaterial, options) {
    const optionsKey = getKeyForOptions(options);
    let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);
    if (!ctorsByDerivation) {
      CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = /* @__PURE__ */ Object.create(null));
    }
    if (ctorsByDerivation[optionsKey]) {
      return new ctorsByDerivation[optionsKey]();
    }
    const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;
    const onBeforeCompile = function(shaderInfo, renderer) {
      baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);
      const cacheKey = this.customProgramCacheKey() + "|" + shaderInfo.vertexShader + "|" + shaderInfo.fragmentShader;
      let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];
      if (!upgradedShaders) {
        const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);
        upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;
      }
      shaderInfo.vertexShader = upgradedShaders.vertexShader;
      shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
      assign(shaderInfo.uniforms, this.uniforms);
      if (options.timeUniform) {
        shaderInfo.uniforms[options.timeUniform] = {
          get value() {
            return Date.now() - epoch;
          }
        };
      }
      if (this[privateBeforeCompileProp]) {
        this[privateBeforeCompileProp](shaderInfo);
      }
    };
    const DerivedMaterial = function DerivedMaterial2() {
      return derive(options.chained ? baseMaterial : baseMaterial.clone());
    };
    const derive = function(base) {
      const derived = Object.create(base, descriptor);
      Object.defineProperty(derived, "baseMaterial", { value: baseMaterial });
      Object.defineProperty(derived, "id", { value: materialInstanceId++ });
      derived.uuid = generateUUID2();
      derived.uniforms = assign({}, base.uniforms, options.uniforms);
      derived.defines = assign({}, base.defines, options.defines);
      derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = "";
      derived.extensions = assign({}, base.extensions, options.extensions);
      derived._listeners = void 0;
      return derived;
    };
    const descriptor = {
      constructor: { value: DerivedMaterial },
      isDerivedMaterial: { value: true },
      type: {
        get: () => baseMaterial.type,
        set: (value2) => {
          baseMaterial.type = value2;
        }
      },
      isDerivedFrom: {
        writable: true,
        configurable: true,
        value: function(testMaterial) {
          const base = this.baseMaterial;
          return testMaterial === base || base.isDerivedMaterial && base.isDerivedFrom(testMaterial) || false;
        }
      },
      customProgramCacheKey: {
        writable: true,
        configurable: true,
        value: function() {
          return baseMaterial.customProgramCacheKey() + "|" + optionsKey;
        }
      },
      onBeforeCompile: {
        get() {
          return onBeforeCompile;
        },
        set(fn) {
          this[privateBeforeCompileProp] = fn;
        }
      },
      copy: {
        writable: true,
        configurable: true,
        value: function(source) {
          baseMaterial.copy.call(this, source);
          if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
            assign(this.extensions, source.extensions);
            assign(this.defines, source.defines);
            assign(this.uniforms, UniformsUtils.clone(source.uniforms));
          }
          return this;
        }
      },
      clone: {
        writable: true,
        configurable: true,
        value: function() {
          const newBase = new baseMaterial.constructor();
          return derive(newBase).copy(this);
        }
      },
      /**
       * Utility to get a MeshDepthMaterial that will honor this derived material's vertex
       * transformations and discarded fragments.
       */
      getDepthMaterial: {
        writable: true,
        configurable: true,
        value: function() {
          let depthMaterial = this._depthMaterial;
          if (!depthMaterial) {
            depthMaterial = this._depthMaterial = createDerivedMaterial(
              baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),
              options
            );
            depthMaterial.defines.IS_DEPTH_MATERIAL = "";
            depthMaterial.uniforms = this.uniforms;
          }
          return depthMaterial;
        }
      },
      /**
       * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex
       * transformations and discarded fragments.
       */
      getDistanceMaterial: {
        writable: true,
        configurable: true,
        value: function() {
          let distanceMaterial = this._distanceMaterial;
          if (!distanceMaterial) {
            distanceMaterial = this._distanceMaterial = createDerivedMaterial(
              baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(),
              options
            );
            distanceMaterial.defines.IS_DISTANCE_MATERIAL = "";
            distanceMaterial.uniforms = this.uniforms;
          }
          return distanceMaterial;
        }
      },
      dispose: {
        writable: true,
        configurable: true,
        value() {
          const { _depthMaterial, _distanceMaterial } = this;
          if (_depthMaterial) _depthMaterial.dispose();
          if (_distanceMaterial) _distanceMaterial.dispose();
          baseMaterial.dispose.call(this);
        }
      }
    };
    ctorsByDerivation[optionsKey] = DerivedMaterial;
    return new DerivedMaterial();
  }
  function upgradeShaders(material, { vertexShader, fragmentShader }, options, key) {
    let {
      vertexDefs,
      vertexMainIntro,
      vertexMainOutro,
      vertexTransform,
      fragmentDefs,
      fragmentMainIntro,
      fragmentMainOutro,
      fragmentColorTransform,
      customRewriter,
      timeUniform
    } = options;
    vertexDefs = vertexDefs || "";
    vertexMainIntro = vertexMainIntro || "";
    vertexMainOutro = vertexMainOutro || "";
    fragmentDefs = fragmentDefs || "";
    fragmentMainIntro = fragmentMainIntro || "";
    fragmentMainOutro = fragmentMainOutro || "";
    if (vertexTransform || customRewriter) {
      vertexShader = expandShaderIncludes(vertexShader);
    }
    if (fragmentColorTransform || customRewriter) {
      fragmentShader = fragmentShader.replace(
        /^[ \t]*#include <((?:tonemapping|encodings|colorspace|fog|premultiplied_alpha|dithering)_fragment)>/gm,
        "\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n"
      );
      fragmentShader = expandShaderIncludes(fragmentShader);
    }
    if (customRewriter) {
      let res = customRewriter({ vertexShader, fragmentShader });
      vertexShader = res.vertexShader;
      fragmentShader = res.fragmentShader;
    }
    if (fragmentColorTransform) {
      let postChunks = [];
      fragmentShader = fragmentShader.replace(
        /^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm,
        // [^]+? = non-greedy match of any chars including newlines
        (match) => {
          postChunks.push(match);
          return "";
        }
      );
      fragmentMainOutro = `${fragmentColorTransform}
${postChunks.join("\n")}
${fragmentMainOutro}`;
    }
    if (timeUniform) {
      const code = `
uniform float ${timeUniform};
`;
      vertexDefs = code + vertexDefs;
      fragmentDefs = code + fragmentDefs;
    }
    if (vertexTransform) {
      vertexShader = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader}
`;
      vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
      vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
      vertexShader = vertexShader.replace(/\b(position|normal|uv)\b/g, (match, match1, index, fullStr) => {
        return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`;
      });
      if (!(material.map && material.map.channel > 0)) {
        vertexShader = vertexShader.replace(/\bMAP_UV\b/g, `troika_uv_${key}`);
      }
    }
    vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);
    fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);
    return {
      vertexShader,
      fragmentShader
    };
  }
  function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {
    if (intro || outro || defs) {
      shaderCode = shaderCode.replace(
        voidMainRegExp,
        `
${defs}
void troikaOrigMain${id}() {`
      );
      shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
    }
    return shaderCode;
  }
  function optionsJsonReplacer(key, value2) {
    return key === "uniforms" ? void 0 : typeof value2 === "function" ? value2.toString() : value2;
  }
  var _idCtr = 0;
  var optionsHashesToIds = /* @__PURE__ */ new Map();
  function getKeyForOptions(options) {
    const optionsHash = JSON.stringify(options, optionsJsonReplacer);
    let id = optionsHashesToIds.get(optionsHash);
    if (id == null) {
      optionsHashesToIds.set(optionsHash, id = ++_idCtr);
    }
    return id;
  }

  // node_modules/troika-three-text/dist/troika-three-text.esm.js
  function typrFactory() {
    return "undefined" == typeof window && (self.window = self), function(r) {
      var e = { parse: function(r2) {
        var t2 = e._bin, a2 = new Uint8Array(r2);
        if ("ttcf" == t2.readASCII(a2, 0, 4)) {
          var n = 4;
          t2.readUshort(a2, n), n += 2, t2.readUshort(a2, n), n += 2;
          var o = t2.readUint(a2, n);
          n += 4;
          for (var s = [], i = 0; i < o; i++) {
            var h = t2.readUint(a2, n);
            n += 4, s.push(e._readFont(a2, h));
          }
          return s;
        }
        return [e._readFont(a2, 0)];
      }, _readFont: function(r2, t2) {
        var a2 = e._bin, n = t2;
        a2.readFixed(r2, t2), t2 += 4;
        var o = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2;
        for (var s = ["cmap", "head", "hhea", "maxp", "hmtx", "name", "OS/2", "post", "loca", "glyf", "kern", "CFF ", "GDEF", "GPOS", "GSUB", "SVG "], i = { _data: r2, _offset: n }, h = {}, d = 0; d < o; d++) {
          var f = a2.readASCII(r2, t2, 4);
          t2 += 4, a2.readUint(r2, t2), t2 += 4;
          var u = a2.readUint(r2, t2);
          t2 += 4;
          var l = a2.readUint(r2, t2);
          t2 += 4, h[f] = { offset: u, length: l };
        }
        for (d = 0; d < s.length; d++) {
          var v = s[d];
          h[v] && (i[v.trim()] = e[v.trim()].parse(r2, h[v].offset, h[v].length, i));
        }
        return i;
      }, _tabOffset: function(r2, t2, a2) {
        for (var n = e._bin, o = n.readUshort(r2, a2 + 4), s = a2 + 12, i = 0; i < o; i++) {
          var h = n.readASCII(r2, s, 4);
          s += 4, n.readUint(r2, s), s += 4;
          var d = n.readUint(r2, s);
          if (s += 4, n.readUint(r2, s), s += 4, h == t2) return d;
        }
        return 0;
      } };
      e._bin = { readFixed: function(r2, e2) {
        return (r2[e2] << 8 | r2[e2 + 1]) + (r2[e2 + 2] << 8 | r2[e2 + 3]) / 65540;
      }, readF2dot14: function(r2, t2) {
        return e._bin.readShort(r2, t2) / 16384;
      }, readInt: function(r2, t2) {
        return e._bin._view(r2).getInt32(t2);
      }, readInt8: function(r2, t2) {
        return e._bin._view(r2).getInt8(t2);
      }, readShort: function(r2, t2) {
        return e._bin._view(r2).getInt16(t2);
      }, readUshort: function(r2, t2) {
        return e._bin._view(r2).getUint16(t2);
      }, readUshorts: function(r2, t2, a2) {
        for (var n = [], o = 0; o < a2; o++) n.push(e._bin.readUshort(r2, t2 + 2 * o));
        return n;
      }, readUint: function(r2, t2) {
        return e._bin._view(r2).getUint32(t2);
      }, readUint64: function(r2, t2) {
        return 4294967296 * e._bin.readUint(r2, t2) + e._bin.readUint(r2, t2 + 4);
      }, readASCII: function(r2, e2, t2) {
        for (var a2 = "", n = 0; n < t2; n++) a2 += String.fromCharCode(r2[e2 + n]);
        return a2;
      }, readUnicode: function(r2, e2, t2) {
        for (var a2 = "", n = 0; n < t2; n++) {
          var o = r2[e2++] << 8 | r2[e2++];
          a2 += String.fromCharCode(o);
        }
        return a2;
      }, _tdec: "undefined" != typeof window && window.TextDecoder ? new window.TextDecoder() : null, readUTF8: function(r2, t2, a2) {
        var n = e._bin._tdec;
        return n && 0 == t2 && a2 == r2.length ? n.decode(r2) : e._bin.readASCII(r2, t2, a2);
      }, readBytes: function(r2, e2, t2) {
        for (var a2 = [], n = 0; n < t2; n++) a2.push(r2[e2 + n]);
        return a2;
      }, readASCIIArray: function(r2, e2, t2) {
        for (var a2 = [], n = 0; n < t2; n++) a2.push(String.fromCharCode(r2[e2 + n]));
        return a2;
      }, _view: function(r2) {
        return r2._dataView || (r2._dataView = r2.buffer ? new DataView(r2.buffer, r2.byteOffset, r2.byteLength) : new DataView(new Uint8Array(r2).buffer));
      } }, e._lctf = {}, e._lctf.parse = function(r2, t2, a2, n, o) {
        var s = e._bin, i = {}, h = t2;
        s.readFixed(r2, t2), t2 += 4;
        var d = s.readUshort(r2, t2);
        t2 += 2;
        var f = s.readUshort(r2, t2);
        t2 += 2;
        var u = s.readUshort(r2, t2);
        return t2 += 2, i.scriptList = e._lctf.readScriptList(r2, h + d), i.featureList = e._lctf.readFeatureList(r2, h + f), i.lookupList = e._lctf.readLookupList(r2, h + u, o), i;
      }, e._lctf.readLookupList = function(r2, t2, a2) {
        var n = e._bin, o = t2, s = [], i = n.readUshort(r2, t2);
        t2 += 2;
        for (var h = 0; h < i; h++) {
          var d = n.readUshort(r2, t2);
          t2 += 2;
          var f = e._lctf.readLookupTable(r2, o + d, a2);
          s.push(f);
        }
        return s;
      }, e._lctf.readLookupTable = function(r2, t2, a2) {
        var n = e._bin, o = t2, s = { tabs: [] };
        s.ltype = n.readUshort(r2, t2), t2 += 2, s.flag = n.readUshort(r2, t2), t2 += 2;
        var i = n.readUshort(r2, t2);
        t2 += 2;
        for (var h = s.ltype, d = 0; d < i; d++) {
          var f = n.readUshort(r2, t2);
          t2 += 2;
          var u = a2(r2, h, o + f, s);
          s.tabs.push(u);
        }
        return s;
      }, e._lctf.numOfOnes = function(r2) {
        for (var e2 = 0, t2 = 0; t2 < 32; t2++) 0 != (r2 >>> t2 & 1) && e2++;
        return e2;
      }, e._lctf.readClassDef = function(r2, t2) {
        var a2 = e._bin, n = [], o = a2.readUshort(r2, t2);
        if (t2 += 2, 1 == o) {
          var s = a2.readUshort(r2, t2);
          t2 += 2;
          var i = a2.readUshort(r2, t2);
          t2 += 2;
          for (var h = 0; h < i; h++) n.push(s + h), n.push(s + h), n.push(a2.readUshort(r2, t2)), t2 += 2;
        }
        if (2 == o) {
          var d = a2.readUshort(r2, t2);
          t2 += 2;
          for (h = 0; h < d; h++) n.push(a2.readUshort(r2, t2)), t2 += 2, n.push(a2.readUshort(r2, t2)), t2 += 2, n.push(a2.readUshort(r2, t2)), t2 += 2;
        }
        return n;
      }, e._lctf.getInterval = function(r2, e2) {
        for (var t2 = 0; t2 < r2.length; t2 += 3) {
          var a2 = r2[t2], n = r2[t2 + 1];
          if (r2[t2 + 2], a2 <= e2 && e2 <= n) return t2;
        }
        return -1;
      }, e._lctf.readCoverage = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.fmt = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        return t2 += 2, 1 == n.fmt && (n.tab = a2.readUshorts(r2, t2, o)), 2 == n.fmt && (n.tab = a2.readUshorts(r2, t2, 3 * o)), n;
      }, e._lctf.coverageIndex = function(r2, t2) {
        var a2 = r2.tab;
        if (1 == r2.fmt) return a2.indexOf(t2);
        if (2 == r2.fmt) {
          var n = e._lctf.getInterval(a2, t2);
          if (-1 != n) return a2[n + 2] + (t2 - a2[n]);
        }
        return -1;
      }, e._lctf.readFeatureList = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var d = a2.readUshort(r2, t2);
          t2 += 2;
          var f = e._lctf.readFeatureTable(r2, n + d);
          f.tag = h.trim(), o.push(f);
        }
        return o;
      }, e._lctf.readFeatureTable = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2, s > 0 && (o.featureParams = n + s);
        var i = a2.readUshort(r2, t2);
        t2 += 2, o.tab = [];
        for (var h = 0; h < i; h++) o.tab.push(a2.readUshort(r2, t2 + 2 * h));
        return o;
      }, e._lctf.readScriptList = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var d = a2.readUshort(r2, t2);
          t2 += 2, o[h.trim()] = e._lctf.readScriptTable(r2, n + d);
        }
        return o;
      }, e._lctf.readScriptTable = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2, s > 0 && (o.default = e._lctf.readLangSysTable(r2, n + s));
        var i = a2.readUshort(r2, t2);
        t2 += 2;
        for (var h = 0; h < i; h++) {
          var d = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var f = a2.readUshort(r2, t2);
          t2 += 2, o[d.trim()] = e._lctf.readLangSysTable(r2, n + f);
        }
        return o;
      }, e._lctf.readLangSysTable = function(r2, t2) {
        var a2 = e._bin, n = {};
        a2.readUshort(r2, t2), t2 += 2, n.reqFeature = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        return t2 += 2, n.features = a2.readUshorts(r2, t2, o), n;
      }, e.CFF = {}, e.CFF.parse = function(r2, t2, a2) {
        var n = e._bin;
        (r2 = new Uint8Array(r2.buffer, t2, a2))[t2 = 0], r2[++t2], r2[++t2], r2[++t2], t2++;
        var o = [];
        t2 = e.CFF.readIndex(r2, t2, o);
        for (var s = [], i = 0; i < o.length - 1; i++) s.push(n.readASCII(r2, t2 + o[i], o[i + 1] - o[i]));
        t2 += o[o.length - 1];
        var h = [];
        t2 = e.CFF.readIndex(r2, t2, h);
        var d = [];
        for (i = 0; i < h.length - 1; i++) d.push(e.CFF.readDict(r2, t2 + h[i], t2 + h[i + 1]));
        t2 += h[h.length - 1];
        var f = d[0], u = [];
        t2 = e.CFF.readIndex(r2, t2, u);
        var l = [];
        for (i = 0; i < u.length - 1; i++) l.push(n.readASCII(r2, t2 + u[i], u[i + 1] - u[i]));
        if (t2 += u[u.length - 1], e.CFF.readSubrs(r2, t2, f), f.CharStrings) {
          t2 = f.CharStrings;
          u = [];
          t2 = e.CFF.readIndex(r2, t2, u);
          var v = [];
          for (i = 0; i < u.length - 1; i++) v.push(n.readBytes(r2, t2 + u[i], u[i + 1] - u[i]));
          f.CharStrings = v;
        }
        if (f.ROS) {
          t2 = f.FDArray;
          var c = [];
          t2 = e.CFF.readIndex(r2, t2, c), f.FDArray = [];
          for (i = 0; i < c.length - 1; i++) {
            var p = e.CFF.readDict(r2, t2 + c[i], t2 + c[i + 1]);
            e.CFF._readFDict(r2, p, l), f.FDArray.push(p);
          }
          t2 += c[c.length - 1], t2 = f.FDSelect, f.FDSelect = [];
          var U = r2[t2];
          if (t2++, 3 != U) throw U;
          var g = n.readUshort(r2, t2);
          t2 += 2;
          for (i = 0; i < g + 1; i++) f.FDSelect.push(n.readUshort(r2, t2), r2[t2 + 2]), t2 += 3;
        }
        return f.Encoding && (f.Encoding = e.CFF.readEncoding(r2, f.Encoding, f.CharStrings.length)), f.charset && (f.charset = e.CFF.readCharset(r2, f.charset, f.CharStrings.length)), e.CFF._readFDict(r2, f, l), f;
      }, e.CFF._readFDict = function(r2, t2, a2) {
        var n;
        for (var o in t2.Private && (n = t2.Private[1], t2.Private = e.CFF.readDict(r2, n, n + t2.Private[0]), t2.Private.Subrs && e.CFF.readSubrs(r2, n + t2.Private.Subrs, t2.Private)), t2) -1 != ["FamilyName", "FontName", "FullName", "Notice", "version", "Copyright"].indexOf(o) && (t2[o] = a2[t2[o] - 426 + 35]);
      }, e.CFF.readSubrs = function(r2, t2, a2) {
        var n = e._bin, o = [];
        t2 = e.CFF.readIndex(r2, t2, o);
        var s, i = o.length;
        s = i < 1240 ? 107 : i < 33900 ? 1131 : 32768, a2.Bias = s, a2.Subrs = [];
        for (var h = 0; h < o.length - 1; h++) a2.Subrs.push(n.readBytes(r2, t2 + o[h], o[h + 1] - o[h]));
      }, e.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0], e.CFF.glyphByUnicode = function(r2, e2) {
        for (var t2 = 0; t2 < r2.charset.length; t2++) if (r2.charset[t2] == e2) return t2;
        return -1;
      }, e.CFF.glyphBySE = function(r2, t2) {
        return t2 < 0 || t2 > 255 ? -1 : e.CFF.glyphByUnicode(r2, e.CFF.tableSE[t2]);
      }, e.CFF.readEncoding = function(r2, t2, a2) {
        e._bin;
        var n = [".notdef"], o = r2[t2];
        if (t2++, 0 != o) throw "error: unknown encoding format: " + o;
        var s = r2[t2];
        t2++;
        for (var i = 0; i < s; i++) n.push(r2[t2 + i]);
        return n;
      }, e.CFF.readCharset = function(r2, t2, a2) {
        var n = e._bin, o = [".notdef"], s = r2[t2];
        if (t2++, 0 == s) for (var i = 0; i < a2; i++) {
          var h = n.readUshort(r2, t2);
          t2 += 2, o.push(h);
        }
        else {
          if (1 != s && 2 != s) throw "error: format: " + s;
          for (; o.length < a2; ) {
            h = n.readUshort(r2, t2);
            t2 += 2;
            var d = 0;
            1 == s ? (d = r2[t2], t2++) : (d = n.readUshort(r2, t2), t2 += 2);
            for (i = 0; i <= d; i++) o.push(h), h++;
          }
        }
        return o;
      }, e.CFF.readIndex = function(r2, t2, a2) {
        var n = e._bin, o = n.readUshort(r2, t2) + 1, s = r2[t2 += 2];
        if (t2++, 1 == s) for (var i = 0; i < o; i++) a2.push(r2[t2 + i]);
        else if (2 == s) for (i = 0; i < o; i++) a2.push(n.readUshort(r2, t2 + 2 * i));
        else if (3 == s) for (i = 0; i < o; i++) a2.push(16777215 & n.readUint(r2, t2 + 3 * i - 1));
        else if (1 != o) throw "unsupported offset size: " + s + ", count: " + o;
        return (t2 += o * s) - 1;
      }, e.CFF.getCharString = function(r2, t2, a2) {
        var n = e._bin, o = r2[t2], s = r2[t2 + 1];
        r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
        var i = 1, h = null, d = null;
        o <= 20 && (h = o, i = 1), 12 == o && (h = 100 * o + s, i = 2), 21 <= o && o <= 27 && (h = o, i = 1), 28 == o && (d = n.readShort(r2, t2 + 1), i = 3), 29 <= o && o <= 31 && (h = o, i = 1), 32 <= o && o <= 246 && (d = o - 139, i = 1), 247 <= o && o <= 250 && (d = 256 * (o - 247) + s + 108, i = 2), 251 <= o && o <= 254 && (d = 256 * -(o - 251) - s - 108, i = 2), 255 == o && (d = n.readInt(r2, t2 + 1) / 65535, i = 5), a2.val = null != d ? d : "o" + h, a2.size = i;
      }, e.CFF.readCharString = function(r2, t2, a2) {
        for (var n = t2 + a2, o = e._bin, s = []; t2 < n; ) {
          var i = r2[t2], h = r2[t2 + 1];
          r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
          var d = 1, f = null, u = null;
          i <= 20 && (f = i, d = 1), 12 == i && (f = 100 * i + h, d = 2), 19 != i && 20 != i || (f = i, d = 2), 21 <= i && i <= 27 && (f = i, d = 1), 28 == i && (u = o.readShort(r2, t2 + 1), d = 3), 29 <= i && i <= 31 && (f = i, d = 1), 32 <= i && i <= 246 && (u = i - 139, d = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, d = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, d = 2), 255 == i && (u = o.readInt(r2, t2 + 1) / 65535, d = 5), s.push(null != u ? u : "o" + f), t2 += d;
        }
        return s;
      }, e.CFF.readDict = function(r2, t2, a2) {
        for (var n = e._bin, o = {}, s = []; t2 < a2; ) {
          var i = r2[t2], h = r2[t2 + 1];
          r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
          var d = 1, f = null, u = null;
          if (28 == i && (u = n.readShort(r2, t2 + 1), d = 3), 29 == i && (u = n.readInt(r2, t2 + 1), d = 5), 32 <= i && i <= 246 && (u = i - 139, d = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, d = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, d = 2), 255 == i) throw u = n.readInt(r2, t2 + 1) / 65535, d = 5, "unknown number";
          if (30 == i) {
            var l = [];
            for (d = 1; ; ) {
              var v = r2[t2 + d];
              d++;
              var c = v >> 4, p = 15 & v;
              if (15 != c && l.push(c), 15 != p && l.push(p), 15 == p) break;
            }
            for (var U = "", g = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"], S = 0; S < l.length; S++) U += g[l[S]];
            u = parseFloat(U);
          }
          if (i <= 21) {
            if (f = ["version", "Notice", "FullName", "FamilyName", "Weight", "FontBBox", "BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StdHW", "StdVW", "escape", "UniqueID", "XUID", "charset", "Encoding", "CharStrings", "Private", "Subrs", "defaultWidthX", "nominalWidthX"][i], d = 1, 12 == i) f = ["Copyright", "isFixedPitch", "ItalicAngle", "UnderlinePosition", "UnderlineThickness", "PaintType", "CharstringType", "FontMatrix", "StrokeWidth", "BlueScale", "BlueShift", "BlueFuzz", "StemSnapH", "StemSnapV", "ForceBold", 0, 0, "LanguageGroup", "ExpansionFactor", "initialRandomSeed", "SyntheticBase", "PostScript", "BaseFontName", "BaseFontBlend", 0, 0, 0, 0, 0, 0, "ROS", "CIDFontVersion", "CIDFontRevision", "CIDFontType", "CIDCount", "UIDBase", "FDArray", "FDSelect", "FontName"][h], d = 2;
          }
          null != f ? (o[f] = 1 == s.length ? s[0] : s, s = []) : s.push(u), t2 += d;
        }
        return o;
      }, e.cmap = {}, e.cmap.parse = function(r2, t2, a2) {
        r2 = new Uint8Array(r2.buffer, t2, a2), t2 = 0;
        var n = e._bin, o = {};
        n.readUshort(r2, t2), t2 += 2;
        var s = n.readUshort(r2, t2);
        t2 += 2;
        var i = [];
        o.tables = [];
        for (var h = 0; h < s; h++) {
          var d = n.readUshort(r2, t2);
          t2 += 2;
          var f = n.readUshort(r2, t2);
          t2 += 2;
          var u = n.readUint(r2, t2);
          t2 += 4;
          var l = "p" + d + "e" + f, v = i.indexOf(u);
          if (-1 == v) {
            var c;
            v = o.tables.length, i.push(u);
            var p = n.readUshort(r2, u);
            0 == p ? c = e.cmap.parse0(r2, u) : 4 == p ? c = e.cmap.parse4(r2, u) : 6 == p ? c = e.cmap.parse6(r2, u) : 12 == p ? c = e.cmap.parse12(r2, u) : console.debug("unknown format: " + p, d, f, u), o.tables.push(c);
          }
          if (null != o[l]) throw "multiple tables for one platform+encoding";
          o[l] = v;
        }
        return o;
      }, e.cmap.parse0 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2, n.map = [];
        for (var s = 0; s < o - 6; s++) n.map.push(r2[t2 + s]);
        return n;
      }, e.cmap.parse4 = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {};
        o.format = a2.readUshort(r2, t2), t2 += 2;
        var s = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2;
        var i = a2.readUshort(r2, t2);
        t2 += 2;
        var h = i / 2;
        o.searchRange = a2.readUshort(r2, t2), t2 += 2, o.entrySelector = a2.readUshort(r2, t2), t2 += 2, o.rangeShift = a2.readUshort(r2, t2), t2 += 2, o.endCount = a2.readUshorts(r2, t2, h), t2 += 2 * h, t2 += 2, o.startCount = a2.readUshorts(r2, t2, h), t2 += 2 * h, o.idDelta = [];
        for (var d = 0; d < h; d++) o.idDelta.push(a2.readShort(r2, t2)), t2 += 2;
        for (o.idRangeOffset = a2.readUshorts(r2, t2, h), t2 += 2 * h, o.glyphIdArray = []; t2 < n + s; ) o.glyphIdArray.push(a2.readUshort(r2, t2)), t2 += 2;
        return o;
      }, e.cmap.parse6 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, n.firstCode = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2, n.glyphIdArray = [];
        for (var s = 0; s < o; s++) n.glyphIdArray.push(a2.readUshort(r2, t2)), t2 += 2;
        return n;
      }, e.cmap.parse12 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2, t2 += 2, a2.readUint(r2, t2), t2 += 4, a2.readUint(r2, t2), t2 += 4;
        var o = a2.readUint(r2, t2);
        t2 += 4, n.groups = [];
        for (var s = 0; s < o; s++) {
          var i = t2 + 12 * s, h = a2.readUint(r2, i + 0), d = a2.readUint(r2, i + 4), f = a2.readUint(r2, i + 8);
          n.groups.push([h, d, f]);
        }
        return n;
      }, e.glyf = {}, e.glyf.parse = function(r2, e2, t2, a2) {
        for (var n = [], o = 0; o < a2.maxp.numGlyphs; o++) n.push(null);
        return n;
      }, e.glyf._parseGlyf = function(r2, t2) {
        var a2 = e._bin, n = r2._data, o = e._tabOffset(n, "glyf", r2._offset) + r2.loca[t2];
        if (r2.loca[t2] == r2.loca[t2 + 1]) return null;
        var s = {};
        if (s.noc = a2.readShort(n, o), o += 2, s.xMin = a2.readShort(n, o), o += 2, s.yMin = a2.readShort(n, o), o += 2, s.xMax = a2.readShort(n, o), o += 2, s.yMax = a2.readShort(n, o), o += 2, s.xMin >= s.xMax || s.yMin >= s.yMax) return null;
        if (s.noc > 0) {
          s.endPts = [];
          for (var i = 0; i < s.noc; i++) s.endPts.push(a2.readUshort(n, o)), o += 2;
          var h = a2.readUshort(n, o);
          if (o += 2, n.length - o < h) return null;
          s.instructions = a2.readBytes(n, o, h), o += h;
          var d = s.endPts[s.noc - 1] + 1;
          s.flags = [];
          for (i = 0; i < d; i++) {
            var f = n[o];
            if (o++, s.flags.push(f), 0 != (8 & f)) {
              var u = n[o];
              o++;
              for (var l = 0; l < u; l++) s.flags.push(f), i++;
            }
          }
          s.xs = [];
          for (i = 0; i < d; i++) {
            var v = 0 != (2 & s.flags[i]), c = 0 != (16 & s.flags[i]);
            v ? (s.xs.push(c ? n[o] : -n[o]), o++) : c ? s.xs.push(0) : (s.xs.push(a2.readShort(n, o)), o += 2);
          }
          s.ys = [];
          for (i = 0; i < d; i++) {
            v = 0 != (4 & s.flags[i]), c = 0 != (32 & s.flags[i]);
            v ? (s.ys.push(c ? n[o] : -n[o]), o++) : c ? s.ys.push(0) : (s.ys.push(a2.readShort(n, o)), o += 2);
          }
          var p = 0, U = 0;
          for (i = 0; i < d; i++) p += s.xs[i], U += s.ys[i], s.xs[i] = p, s.ys[i] = U;
        } else {
          var g;
          s.parts = [];
          do {
            g = a2.readUshort(n, o), o += 2;
            var S = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 };
            if (s.parts.push(S), S.glyphIndex = a2.readUshort(n, o), o += 2, 1 & g) {
              var m = a2.readShort(n, o);
              o += 2;
              var b = a2.readShort(n, o);
              o += 2;
            } else {
              m = a2.readInt8(n, o);
              o++;
              b = a2.readInt8(n, o);
              o++;
            }
            2 & g ? (S.m.tx = m, S.m.ty = b) : (S.p1 = m, S.p2 = b), 8 & g ? (S.m.a = S.m.d = a2.readF2dot14(n, o), o += 2) : 64 & g ? (S.m.a = a2.readF2dot14(n, o), o += 2, S.m.d = a2.readF2dot14(n, o), o += 2) : 128 & g && (S.m.a = a2.readF2dot14(n, o), o += 2, S.m.b = a2.readF2dot14(n, o), o += 2, S.m.c = a2.readF2dot14(n, o), o += 2, S.m.d = a2.readF2dot14(n, o), o += 2);
          } while (32 & g);
          if (256 & g) {
            var y = a2.readUshort(n, o);
            o += 2, s.instr = [];
            for (i = 0; i < y; i++) s.instr.push(n[o]), o++;
          }
        }
        return s;
      }, e.GDEF = {}, e.GDEF.parse = function(r2, t2, a2, n) {
        var o = t2;
        t2 += 4;
        var s = e._bin.readUshort(r2, t2);
        return { glyphClassDef: 0 === s ? null : e._lctf.readClassDef(r2, o + s) };
      }, e.GPOS = {}, e.GPOS.parse = function(r2, t2, a2, n) {
        return e._lctf.parse(r2, t2, a2, n, e.GPOS.subt);
      }, e.GPOS.subt = function(r2, t2, a2, n) {
        var o = e._bin, s = a2, i = {};
        if (i.fmt = o.readUshort(r2, a2), a2 += 2, 1 == t2 || 2 == t2 || 3 == t2 || 7 == t2 || 8 == t2 && i.fmt <= 2) {
          var h = o.readUshort(r2, a2);
          a2 += 2, i.coverage = e._lctf.readCoverage(r2, h + s);
        }
        if (1 == t2 && 1 == i.fmt) {
          var d = o.readUshort(r2, a2);
          a2 += 2, 0 != d && (i.pos = e.GPOS.readValueRecord(r2, a2, d));
        } else if (2 == t2 && i.fmt >= 1 && i.fmt <= 2) {
          d = o.readUshort(r2, a2);
          a2 += 2;
          var f = o.readUshort(r2, a2);
          a2 += 2;
          var u = e._lctf.numOfOnes(d), l = e._lctf.numOfOnes(f);
          if (1 == i.fmt) {
            i.pairsets = [];
            var v = o.readUshort(r2, a2);
            a2 += 2;
            for (var c = 0; c < v; c++) {
              var p = s + o.readUshort(r2, a2);
              a2 += 2;
              var U = o.readUshort(r2, p);
              p += 2;
              for (var g = [], S = 0; S < U; S++) {
                var m = o.readUshort(r2, p);
                p += 2, 0 != d && (P = e.GPOS.readValueRecord(r2, p, d), p += 2 * u), 0 != f && (x = e.GPOS.readValueRecord(r2, p, f), p += 2 * l), g.push({ gid2: m, val1: P, val2: x });
              }
              i.pairsets.push(g);
            }
          }
          if (2 == i.fmt) {
            var b = o.readUshort(r2, a2);
            a2 += 2;
            var y = o.readUshort(r2, a2);
            a2 += 2;
            var F = o.readUshort(r2, a2);
            a2 += 2;
            var C = o.readUshort(r2, a2);
            a2 += 2, i.classDef1 = e._lctf.readClassDef(r2, s + b), i.classDef2 = e._lctf.readClassDef(r2, s + y), i.matrix = [];
            for (c = 0; c < F; c++) {
              var _ = [];
              for (S = 0; S < C; S++) {
                var P = null, x = null;
                0 != d && (P = e.GPOS.readValueRecord(r2, a2, d), a2 += 2 * u), 0 != f && (x = e.GPOS.readValueRecord(r2, a2, f), a2 += 2 * l), _.push({ val1: P, val2: x });
              }
              i.matrix.push(_);
            }
          }
        } else if (4 == t2 && 1 == i.fmt) i.markCoverage = e._lctf.readCoverage(r2, o.readUshort(r2, a2) + s), i.baseCoverage = e._lctf.readCoverage(r2, o.readUshort(r2, a2 + 2) + s), i.markClassCount = o.readUshort(r2, a2 + 4), i.markArray = e.GPOS.readMarkArray(r2, o.readUshort(r2, a2 + 6) + s), i.baseArray = e.GPOS.readBaseArray(r2, o.readUshort(r2, a2 + 8) + s, i.markClassCount);
        else if (6 == t2 && 1 == i.fmt) i.mark1Coverage = e._lctf.readCoverage(r2, o.readUshort(r2, a2) + s), i.mark2Coverage = e._lctf.readCoverage(r2, o.readUshort(r2, a2 + 2) + s), i.markClassCount = o.readUshort(r2, a2 + 4), i.mark1Array = e.GPOS.readMarkArray(r2, o.readUshort(r2, a2 + 6) + s), i.mark2Array = e.GPOS.readBaseArray(r2, o.readUshort(r2, a2 + 8) + s, i.markClassCount);
        else {
          if (9 == t2 && 1 == i.fmt) {
            var I = o.readUshort(r2, a2);
            a2 += 2;
            var w = o.readUint(r2, a2);
            if (a2 += 4, 9 == n.ltype) n.ltype = I;
            else if (n.ltype != I) throw "invalid extension substitution";
            return e.GPOS.subt(r2, n.ltype, s + w);
          }
          console.debug("unsupported GPOS table LookupType", t2, "format", i.fmt);
        }
        return i;
      }, e.GPOS.readValueRecord = function(r2, t2, a2) {
        var n = e._bin, o = [];
        return o.push(1 & a2 ? n.readShort(r2, t2) : 0), t2 += 1 & a2 ? 2 : 0, o.push(2 & a2 ? n.readShort(r2, t2) : 0), t2 += 2 & a2 ? 2 : 0, o.push(4 & a2 ? n.readShort(r2, t2) : 0), t2 += 4 & a2 ? 2 : 0, o.push(8 & a2 ? n.readShort(r2, t2) : 0), t2 += 8 & a2 ? 2 : 0, o;
      }, e.GPOS.readBaseArray = function(r2, t2, a2) {
        var n = e._bin, o = [], s = t2, i = n.readUshort(r2, t2);
        t2 += 2;
        for (var h = 0; h < i; h++) {
          for (var d = [], f = 0; f < a2; f++) d.push(e.GPOS.readAnchorRecord(r2, s + n.readUshort(r2, t2))), t2 += 2;
          o.push(d);
        }
        return o;
      }, e.GPOS.readMarkArray = function(r2, t2) {
        var a2 = e._bin, n = [], o = t2, s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = e.GPOS.readAnchorRecord(r2, a2.readUshort(r2, t2 + 2) + o);
          h.markClass = a2.readUshort(r2, t2), n.push(h), t2 += 4;
        }
        return n;
      }, e.GPOS.readAnchorRecord = function(r2, t2) {
        var a2 = e._bin, n = {};
        return n.fmt = a2.readUshort(r2, t2), n.x = a2.readShort(r2, t2 + 2), n.y = a2.readShort(r2, t2 + 4), n;
      }, e.GSUB = {}, e.GSUB.parse = function(r2, t2, a2, n) {
        return e._lctf.parse(r2, t2, a2, n, e.GSUB.subt);
      }, e.GSUB.subt = function(r2, t2, a2, n) {
        var o = e._bin, s = a2, i = {};
        if (i.fmt = o.readUshort(r2, a2), a2 += 2, 1 != t2 && 2 != t2 && 4 != t2 && 5 != t2 && 6 != t2) return null;
        if (1 == t2 || 2 == t2 || 4 == t2 || 5 == t2 && i.fmt <= 2 || 6 == t2 && i.fmt <= 2) {
          var h = o.readUshort(r2, a2);
          a2 += 2, i.coverage = e._lctf.readCoverage(r2, s + h);
        }
        if (1 == t2 && i.fmt >= 1 && i.fmt <= 2) {
          if (1 == i.fmt) i.delta = o.readShort(r2, a2), a2 += 2;
          else if (2 == i.fmt) {
            var d = o.readUshort(r2, a2);
            a2 += 2, i.newg = o.readUshorts(r2, a2, d), a2 += 2 * i.newg.length;
          }
        } else if (2 == t2 && 1 == i.fmt) {
          d = o.readUshort(r2, a2);
          a2 += 2, i.seqs = [];
          for (var f = 0; f < d; f++) {
            var u = o.readUshort(r2, a2) + s;
            a2 += 2;
            var l = o.readUshort(r2, u);
            i.seqs.push(o.readUshorts(r2, u + 2, l));
          }
        } else if (4 == t2) {
          i.vals = [];
          d = o.readUshort(r2, a2);
          a2 += 2;
          for (f = 0; f < d; f++) {
            var v = o.readUshort(r2, a2);
            a2 += 2, i.vals.push(e.GSUB.readLigatureSet(r2, s + v));
          }
        } else if (5 == t2 && 2 == i.fmt) {
          if (2 == i.fmt) {
            var c = o.readUshort(r2, a2);
            a2 += 2, i.cDef = e._lctf.readClassDef(r2, s + c), i.scset = [];
            var p = o.readUshort(r2, a2);
            a2 += 2;
            for (f = 0; f < p; f++) {
              var U = o.readUshort(r2, a2);
              a2 += 2, i.scset.push(0 == U ? null : e.GSUB.readSubClassSet(r2, s + U));
            }
          }
        } else if (6 == t2 && 3 == i.fmt) {
          if (3 == i.fmt) {
            for (f = 0; f < 3; f++) {
              d = o.readUshort(r2, a2);
              a2 += 2;
              for (var g = [], S = 0; S < d; S++) g.push(e._lctf.readCoverage(r2, s + o.readUshort(r2, a2 + 2 * S)));
              a2 += 2 * d, 0 == f && (i.backCvg = g), 1 == f && (i.inptCvg = g), 2 == f && (i.ahedCvg = g);
            }
            d = o.readUshort(r2, a2);
            a2 += 2, i.lookupRec = e.GSUB.readSubstLookupRecords(r2, a2, d);
          }
        } else {
          if (7 == t2 && 1 == i.fmt) {
            var m = o.readUshort(r2, a2);
            a2 += 2;
            var b = o.readUint(r2, a2);
            if (a2 += 4, 9 == n.ltype) n.ltype = m;
            else if (n.ltype != m) throw "invalid extension substitution";
            return e.GSUB.subt(r2, n.ltype, s + b);
          }
          console.debug("unsupported GSUB table LookupType", t2, "format", i.fmt);
        }
        return i;
      }, e.GSUB.readSubClassSet = function(r2, t2) {
        var a2 = e._bin.readUshort, n = t2, o = [], s = a2(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2(r2, t2);
          t2 += 2, o.push(e.GSUB.readSubClassRule(r2, n + h));
        }
        return o;
      }, e.GSUB.readSubClassRule = function(r2, t2) {
        var a2 = e._bin.readUshort, n = {}, o = a2(r2, t2), s = a2(r2, t2 += 2);
        t2 += 2, n.input = [];
        for (var i = 0; i < o - 1; i++) n.input.push(a2(r2, t2)), t2 += 2;
        return n.substLookupRecords = e.GSUB.readSubstLookupRecords(r2, t2, s), n;
      }, e.GSUB.readSubstLookupRecords = function(r2, t2, a2) {
        for (var n = e._bin.readUshort, o = [], s = 0; s < a2; s++) o.push(n(r2, t2), n(r2, t2 + 2)), t2 += 4;
        return o;
      }, e.GSUB.readChainSubClassSet = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readUshort(r2, t2);
          t2 += 2, o.push(e.GSUB.readChainSubClassRule(r2, n + h));
        }
        return o;
      }, e.GSUB.readChainSubClassRule = function(r2, t2) {
        for (var a2 = e._bin, n = {}, o = ["backtrack", "input", "lookahead"], s = 0; s < o.length; s++) {
          var i = a2.readUshort(r2, t2);
          t2 += 2, 1 == s && i--, n[o[s]] = a2.readUshorts(r2, t2, i), t2 += 2 * n[o[s]].length;
        }
        i = a2.readUshort(r2, t2);
        return t2 += 2, n.subst = a2.readUshorts(r2, t2, 2 * i), t2 += 2 * n.subst.length, n;
      }, e.GSUB.readLigatureSet = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readUshort(r2, t2);
          t2 += 2, o.push(e.GSUB.readLigature(r2, n + h));
        }
        return o;
      }, e.GSUB.readLigature = function(r2, t2) {
        var a2 = e._bin, n = { chain: [] };
        n.nglyph = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2;
        for (var s = 0; s < o - 1; s++) n.chain.push(a2.readUshort(r2, t2)), t2 += 2;
        return n;
      }, e.head = {}, e.head.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return n.readFixed(r2, t2), t2 += 4, o.fontRevision = n.readFixed(r2, t2), t2 += 4, n.readUint(r2, t2), t2 += 4, n.readUint(r2, t2), t2 += 4, o.flags = n.readUshort(r2, t2), t2 += 2, o.unitsPerEm = n.readUshort(r2, t2), t2 += 2, o.created = n.readUint64(r2, t2), t2 += 8, o.modified = n.readUint64(r2, t2), t2 += 8, o.xMin = n.readShort(r2, t2), t2 += 2, o.yMin = n.readShort(r2, t2), t2 += 2, o.xMax = n.readShort(r2, t2), t2 += 2, o.yMax = n.readShort(r2, t2), t2 += 2, o.macStyle = n.readUshort(r2, t2), t2 += 2, o.lowestRecPPEM = n.readUshort(r2, t2), t2 += 2, o.fontDirectionHint = n.readShort(r2, t2), t2 += 2, o.indexToLocFormat = n.readShort(r2, t2), t2 += 2, o.glyphDataFormat = n.readShort(r2, t2), t2 += 2, o;
      }, e.hhea = {}, e.hhea.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return n.readFixed(r2, t2), t2 += 4, o.ascender = n.readShort(r2, t2), t2 += 2, o.descender = n.readShort(r2, t2), t2 += 2, o.lineGap = n.readShort(r2, t2), t2 += 2, o.advanceWidthMax = n.readUshort(r2, t2), t2 += 2, o.minLeftSideBearing = n.readShort(r2, t2), t2 += 2, o.minRightSideBearing = n.readShort(r2, t2), t2 += 2, o.xMaxExtent = n.readShort(r2, t2), t2 += 2, o.caretSlopeRise = n.readShort(r2, t2), t2 += 2, o.caretSlopeRun = n.readShort(r2, t2), t2 += 2, o.caretOffset = n.readShort(r2, t2), t2 += 2, t2 += 8, o.metricDataFormat = n.readShort(r2, t2), t2 += 2, o.numberOfHMetrics = n.readUshort(r2, t2), t2 += 2, o;
      }, e.hmtx = {}, e.hmtx.parse = function(r2, t2, a2, n) {
        for (var o = e._bin, s = { aWidth: [], lsBearing: [] }, i = 0, h = 0, d = 0; d < n.maxp.numGlyphs; d++) d < n.hhea.numberOfHMetrics && (i = o.readUshort(r2, t2), t2 += 2, h = o.readShort(r2, t2), t2 += 2), s.aWidth.push(i), s.lsBearing.push(h);
        return s;
      }, e.kern = {}, e.kern.parse = function(r2, t2, a2, n) {
        var o = e._bin, s = o.readUshort(r2, t2);
        if (t2 += 2, 1 == s) return e.kern.parseV1(r2, t2 - 2, a2, n);
        var i = o.readUshort(r2, t2);
        t2 += 2;
        for (var h = { glyph1: [], rval: [] }, d = 0; d < i; d++) {
          t2 += 2;
          a2 = o.readUshort(r2, t2);
          t2 += 2;
          var f = o.readUshort(r2, t2);
          t2 += 2;
          var u = f >>> 8;
          if (0 != (u &= 15)) throw "unknown kern table format: " + u;
          t2 = e.kern.readFormat0(r2, t2, h);
        }
        return h;
      }, e.kern.parseV1 = function(r2, t2, a2, n) {
        var o = e._bin;
        o.readFixed(r2, t2), t2 += 4;
        var s = o.readUint(r2, t2);
        t2 += 4;
        for (var i = { glyph1: [], rval: [] }, h = 0; h < s; h++) {
          o.readUint(r2, t2), t2 += 4;
          var d = o.readUshort(r2, t2);
          t2 += 2, o.readUshort(r2, t2), t2 += 2;
          var f = d >>> 8;
          if (0 != (f &= 15)) throw "unknown kern table format: " + f;
          t2 = e.kern.readFormat0(r2, t2, i);
        }
        return i;
      }, e.kern.readFormat0 = function(r2, t2, a2) {
        var n = e._bin, o = -1, s = n.readUshort(r2, t2);
        t2 += 2, n.readUshort(r2, t2), t2 += 2, n.readUshort(r2, t2), t2 += 2, n.readUshort(r2, t2), t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = n.readUshort(r2, t2);
          t2 += 2;
          var d = n.readUshort(r2, t2);
          t2 += 2;
          var f = n.readShort(r2, t2);
          t2 += 2, h != o && (a2.glyph1.push(h), a2.rval.push({ glyph2: [], vals: [] }));
          var u = a2.rval[a2.rval.length - 1];
          u.glyph2.push(d), u.vals.push(f), o = h;
        }
        return t2;
      }, e.loca = {}, e.loca.parse = function(r2, t2, a2, n) {
        var o = e._bin, s = [], i = n.head.indexToLocFormat, h = n.maxp.numGlyphs + 1;
        if (0 == i) for (var d = 0; d < h; d++) s.push(o.readUshort(r2, t2 + (d << 1)) << 1);
        if (1 == i) for (d = 0; d < h; d++) s.push(o.readUint(r2, t2 + (d << 2)));
        return s;
      }, e.maxp = {}, e.maxp.parse = function(r2, t2, a2) {
        var n = e._bin, o = {}, s = n.readUint(r2, t2);
        return t2 += 4, o.numGlyphs = n.readUshort(r2, t2), t2 += 2, 65536 == s && (o.maxPoints = n.readUshort(r2, t2), t2 += 2, o.maxContours = n.readUshort(r2, t2), t2 += 2, o.maxCompositePoints = n.readUshort(r2, t2), t2 += 2, o.maxCompositeContours = n.readUshort(r2, t2), t2 += 2, o.maxZones = n.readUshort(r2, t2), t2 += 2, o.maxTwilightPoints = n.readUshort(r2, t2), t2 += 2, o.maxStorage = n.readUshort(r2, t2), t2 += 2, o.maxFunctionDefs = n.readUshort(r2, t2), t2 += 2, o.maxInstructionDefs = n.readUshort(r2, t2), t2 += 2, o.maxStackElements = n.readUshort(r2, t2), t2 += 2, o.maxSizeOfInstructions = n.readUshort(r2, t2), t2 += 2, o.maxComponentElements = n.readUshort(r2, t2), t2 += 2, o.maxComponentDepth = n.readUshort(r2, t2), t2 += 2), o;
      }, e.name = {}, e.name.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        n.readUshort(r2, t2), t2 += 2;
        var s = n.readUshort(r2, t2);
        t2 += 2, n.readUshort(r2, t2);
        for (var i, h = ["copyright", "fontFamily", "fontSubfamily", "ID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "urlVendor", "urlDesigner", "licence", "licenceURL", "---", "typoFamilyName", "typoSubfamilyName", "compatibleFull", "sampleText", "postScriptCID", "wwsFamilyName", "wwsSubfamilyName", "lightPalette", "darkPalette"], d = t2 += 2, f = 0; f < s; f++) {
          var u = n.readUshort(r2, t2);
          t2 += 2;
          var l = n.readUshort(r2, t2);
          t2 += 2;
          var v = n.readUshort(r2, t2);
          t2 += 2;
          var c = n.readUshort(r2, t2);
          t2 += 2;
          var p = n.readUshort(r2, t2);
          t2 += 2;
          var U = n.readUshort(r2, t2);
          t2 += 2;
          var g, S = h[c], m = d + 12 * s + U;
          if (0 == u) g = n.readUnicode(r2, m, p / 2);
          else if (3 == u && 0 == l) g = n.readUnicode(r2, m, p / 2);
          else if (0 == l) g = n.readASCII(r2, m, p);
          else if (1 == l) g = n.readUnicode(r2, m, p / 2);
          else if (3 == l) g = n.readUnicode(r2, m, p / 2);
          else {
            if (1 != u) throw "unknown encoding " + l + ", platformID: " + u;
            g = n.readASCII(r2, m, p), console.debug("reading unknown MAC encoding " + l + " as ASCII");
          }
          var b = "p" + u + "," + v.toString(16);
          null == o[b] && (o[b] = {}), o[b][void 0 !== S ? S : c] = g, o[b]._lang = v;
        }
        for (var y in o) if (null != o[y].postScriptName && 1033 == o[y]._lang) return o[y];
        for (var y in o) if (null != o[y].postScriptName && 0 == o[y]._lang) return o[y];
        for (var y in o) if (null != o[y].postScriptName && 3084 == o[y]._lang) return o[y];
        for (var y in o) if (null != o[y].postScriptName) return o[y];
        for (var y in o) {
          i = y;
          break;
        }
        return console.debug("returning name table with languageID " + o[i]._lang), o[i];
      }, e["OS/2"] = {}, e["OS/2"].parse = function(r2, t2, a2) {
        var n = e._bin.readUshort(r2, t2);
        t2 += 2;
        var o = {};
        if (0 == n) e["OS/2"].version0(r2, t2, o);
        else if (1 == n) e["OS/2"].version1(r2, t2, o);
        else if (2 == n || 3 == n || 4 == n) e["OS/2"].version2(r2, t2, o);
        else {
          if (5 != n) throw "unknown OS/2 table version: " + n;
          e["OS/2"].version5(r2, t2, o);
        }
        return o;
      }, e["OS/2"].version0 = function(r2, t2, a2) {
        var n = e._bin;
        return a2.xAvgCharWidth = n.readShort(r2, t2), t2 += 2, a2.usWeightClass = n.readUshort(r2, t2), t2 += 2, a2.usWidthClass = n.readUshort(r2, t2), t2 += 2, a2.fsType = n.readUshort(r2, t2), t2 += 2, a2.ySubscriptXSize = n.readShort(r2, t2), t2 += 2, a2.ySubscriptYSize = n.readShort(r2, t2), t2 += 2, a2.ySubscriptXOffset = n.readShort(r2, t2), t2 += 2, a2.ySubscriptYOffset = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptXSize = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptYSize = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptXOffset = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptYOffset = n.readShort(r2, t2), t2 += 2, a2.yStrikeoutSize = n.readShort(r2, t2), t2 += 2, a2.yStrikeoutPosition = n.readShort(r2, t2), t2 += 2, a2.sFamilyClass = n.readShort(r2, t2), t2 += 2, a2.panose = n.readBytes(r2, t2, 10), t2 += 10, a2.ulUnicodeRange1 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange2 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange3 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange4 = n.readUint(r2, t2), t2 += 4, a2.achVendID = [n.readInt8(r2, t2), n.readInt8(r2, t2 + 1), n.readInt8(r2, t2 + 2), n.readInt8(r2, t2 + 3)], t2 += 4, a2.fsSelection = n.readUshort(r2, t2), t2 += 2, a2.usFirstCharIndex = n.readUshort(r2, t2), t2 += 2, a2.usLastCharIndex = n.readUshort(r2, t2), t2 += 2, a2.sTypoAscender = n.readShort(r2, t2), t2 += 2, a2.sTypoDescender = n.readShort(r2, t2), t2 += 2, a2.sTypoLineGap = n.readShort(r2, t2), t2 += 2, a2.usWinAscent = n.readUshort(r2, t2), t2 += 2, a2.usWinDescent = n.readUshort(r2, t2), t2 += 2;
      }, e["OS/2"].version1 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version0(r2, t2, a2), a2.ulCodePageRange1 = n.readUint(r2, t2), t2 += 4, a2.ulCodePageRange2 = n.readUint(r2, t2), t2 += 4;
      }, e["OS/2"].version2 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version1(r2, t2, a2), a2.sxHeight = n.readShort(r2, t2), t2 += 2, a2.sCapHeight = n.readShort(r2, t2), t2 += 2, a2.usDefault = n.readUshort(r2, t2), t2 += 2, a2.usBreak = n.readUshort(r2, t2), t2 += 2, a2.usMaxContext = n.readUshort(r2, t2), t2 += 2;
      }, e["OS/2"].version5 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version2(r2, t2, a2), a2.usLowerOpticalPointSize = n.readUshort(r2, t2), t2 += 2, a2.usUpperOpticalPointSize = n.readUshort(r2, t2), t2 += 2;
      }, e.post = {}, e.post.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return o.version = n.readFixed(r2, t2), t2 += 4, o.italicAngle = n.readFixed(r2, t2), t2 += 4, o.underlinePosition = n.readShort(r2, t2), t2 += 2, o.underlineThickness = n.readShort(r2, t2), t2 += 2, o;
      }, null == e && (e = {}), null == e.U && (e.U = {}), e.U.codeToGlyph = function(r2, e2) {
        var t2 = r2.cmap, a2 = -1;
        if (null != t2.p0e4 ? a2 = t2.p0e4 : null != t2.p3e1 ? a2 = t2.p3e1 : null != t2.p1e0 ? a2 = t2.p1e0 : null != t2.p0e3 && (a2 = t2.p0e3), -1 == a2) throw "no familiar platform and encoding!";
        var n = t2.tables[a2];
        if (0 == n.format) return e2 >= n.map.length ? 0 : n.map[e2];
        if (4 == n.format) {
          for (var o = -1, s = 0; s < n.endCount.length; s++) if (e2 <= n.endCount[s]) {
            o = s;
            break;
          }
          if (-1 == o) return 0;
          if (n.startCount[o] > e2) return 0;
          return 65535 & (0 != n.idRangeOffset[o] ? n.glyphIdArray[e2 - n.startCount[o] + (n.idRangeOffset[o] >> 1) - (n.idRangeOffset.length - o)] : e2 + n.idDelta[o]);
        }
        if (12 == n.format) {
          if (e2 > n.groups[n.groups.length - 1][1]) return 0;
          for (s = 0; s < n.groups.length; s++) {
            var i = n.groups[s];
            if (i[0] <= e2 && e2 <= i[1]) return i[2] + (e2 - i[0]);
          }
          return 0;
        }
        throw "unknown cmap table format " + n.format;
      }, e.U.glyphToPath = function(r2, t2) {
        var a2 = { cmds: [], crds: [] };
        if (r2.SVG && r2.SVG.entries[t2]) {
          var n = r2.SVG.entries[t2];
          return null == n ? a2 : ("string" == typeof n && (n = e.SVG.toPath(n), r2.SVG.entries[t2] = n), n);
        }
        if (r2.CFF) {
          var o = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: false, width: r2.CFF.Private ? r2.CFF.Private.defaultWidthX : 0, open: false }, s = r2.CFF, i = r2.CFF.Private;
          if (s.ROS) {
            for (var h = 0; s.FDSelect[h + 2] <= t2; ) h += 2;
            i = s.FDArray[s.FDSelect[h + 1]].Private;
          }
          e.U._drawCFF(r2.CFF.CharStrings[t2], o, s, i, a2);
        } else r2.glyf && e.U._drawGlyf(t2, r2, a2);
        return a2;
      }, e.U._drawGlyf = function(r2, t2, a2) {
        var n = t2.glyf[r2];
        null == n && (n = t2.glyf[r2] = e.glyf._parseGlyf(t2, r2)), null != n && (n.noc > -1 ? e.U._simpleGlyph(n, a2) : e.U._compoGlyph(n, t2, a2));
      }, e.U._simpleGlyph = function(r2, t2) {
        for (var a2 = 0; a2 < r2.noc; a2++) {
          for (var n = 0 == a2 ? 0 : r2.endPts[a2 - 1] + 1, o = r2.endPts[a2], s = n; s <= o; s++) {
            var i = s == n ? o : s - 1, h = s == o ? n : s + 1, d = 1 & r2.flags[s], f = 1 & r2.flags[i], u = 1 & r2.flags[h], l = r2.xs[s], v = r2.ys[s];
            if (s == n) if (d) {
              if (!f) {
                e.U.P.moveTo(t2, l, v);
                continue;
              }
              e.U.P.moveTo(t2, r2.xs[i], r2.ys[i]);
            } else f ? e.U.P.moveTo(t2, r2.xs[i], r2.ys[i]) : e.U.P.moveTo(t2, (r2.xs[i] + l) / 2, (r2.ys[i] + v) / 2);
            d ? f && e.U.P.lineTo(t2, l, v) : u ? e.U.P.qcurveTo(t2, l, v, r2.xs[h], r2.ys[h]) : e.U.P.qcurveTo(t2, l, v, (l + r2.xs[h]) / 2, (v + r2.ys[h]) / 2);
          }
          e.U.P.closePath(t2);
        }
      }, e.U._compoGlyph = function(r2, t2, a2) {
        for (var n = 0; n < r2.parts.length; n++) {
          var o = { cmds: [], crds: [] }, s = r2.parts[n];
          e.U._drawGlyf(s.glyphIndex, t2, o);
          for (var i = s.m, h = 0; h < o.crds.length; h += 2) {
            var d = o.crds[h], f = o.crds[h + 1];
            a2.crds.push(d * i.a + f * i.b + i.tx), a2.crds.push(d * i.c + f * i.d + i.ty);
          }
          for (h = 0; h < o.cmds.length; h++) a2.cmds.push(o.cmds[h]);
        }
      }, e.U._getGlyphClass = function(r2, t2) {
        var a2 = e._lctf.getInterval(t2, r2);
        return -1 == a2 ? 0 : t2[a2 + 2];
      }, e.U._applySubs = function(r2, t2, a2, n) {
        for (var o = r2.length - t2 - 1, s = 0; s < a2.tabs.length; s++) if (null != a2.tabs[s]) {
          var i, h = a2.tabs[s];
          if (!h.coverage || -1 != (i = e._lctf.coverageIndex(h.coverage, r2[t2]))) {
            if (1 == a2.ltype) r2[t2], 1 == h.fmt ? r2[t2] = r2[t2] + h.delta : r2[t2] = h.newg[i];
            else if (4 == a2.ltype) for (var d = h.vals[i], f = 0; f < d.length; f++) {
              var u = d[f], l = u.chain.length;
              if (!(l > o)) {
                for (var v = true, c = 0, p = 0; p < l; p++) {
                  for (; -1 == r2[t2 + c + (1 + p)]; ) c++;
                  u.chain[p] != r2[t2 + c + (1 + p)] && (v = false);
                }
                if (v) {
                  r2[t2] = u.nglyph;
                  for (p = 0; p < l + c; p++) r2[t2 + p + 1] = -1;
                  break;
                }
              }
            }
            else if (5 == a2.ltype && 2 == h.fmt) for (var U = e._lctf.getInterval(h.cDef, r2[t2]), g = h.cDef[U + 2], S = h.scset[g], m = 0; m < S.length; m++) {
              var b = S[m], y = b.input;
              if (!(y.length > o)) {
                for (v = true, p = 0; p < y.length; p++) {
                  var F = e._lctf.getInterval(h.cDef, r2[t2 + 1 + p]);
                  if (-1 == U && h.cDef[F + 2] != y[p]) {
                    v = false;
                    break;
                  }
                }
                if (v) {
                  var C = b.substLookupRecords;
                  for (f = 0; f < C.length; f += 2) C[f], C[f + 1];
                }
              }
            }
            else if (6 == a2.ltype && 3 == h.fmt) {
              if (!e.U._glsCovered(r2, h.backCvg, t2 - h.backCvg.length)) continue;
              if (!e.U._glsCovered(r2, h.inptCvg, t2)) continue;
              if (!e.U._glsCovered(r2, h.ahedCvg, t2 + h.inptCvg.length)) continue;
              var _ = h.lookupRec;
              for (m = 0; m < _.length; m += 2) {
                U = _[m];
                var P = n[_[m + 1]];
                e.U._applySubs(r2, t2 + U, P, n);
              }
            }
          }
        }
      }, e.U._glsCovered = function(r2, t2, a2) {
        for (var n = 0; n < t2.length; n++) {
          if (-1 == e._lctf.coverageIndex(t2[n], r2[a2 + n])) return false;
        }
        return true;
      }, e.U.glyphsToPath = function(r2, t2, a2) {
        for (var n = { cmds: [], crds: [] }, o = 0, s = 0; s < t2.length; s++) {
          var i = t2[s];
          if (-1 != i) {
            for (var h = s < t2.length - 1 && -1 != t2[s + 1] ? t2[s + 1] : 0, d = e.U.glyphToPath(r2, i), f = 0; f < d.crds.length; f += 2) n.crds.push(d.crds[f] + o), n.crds.push(d.crds[f + 1]);
            a2 && n.cmds.push(a2);
            for (f = 0; f < d.cmds.length; f++) n.cmds.push(d.cmds[f]);
            a2 && n.cmds.push("X"), o += r2.hmtx.aWidth[i], s < t2.length - 1 && (o += e.U.getPairAdjustment(r2, i, h));
          }
        }
        return n;
      }, e.U.P = {}, e.U.P.moveTo = function(r2, e2, t2) {
        r2.cmds.push("M"), r2.crds.push(e2, t2);
      }, e.U.P.lineTo = function(r2, e2, t2) {
        r2.cmds.push("L"), r2.crds.push(e2, t2);
      }, e.U.P.curveTo = function(r2, e2, t2, a2, n, o, s) {
        r2.cmds.push("C"), r2.crds.push(e2, t2, a2, n, o, s);
      }, e.U.P.qcurveTo = function(r2, e2, t2, a2, n) {
        r2.cmds.push("Q"), r2.crds.push(e2, t2, a2, n);
      }, e.U.P.closePath = function(r2) {
        r2.cmds.push("Z");
      }, e.U._drawCFF = function(r2, t2, a2, n, o) {
        for (var s = t2.stack, i = t2.nStems, h = t2.haveWidth, d = t2.width, f = t2.open, u = 0, l = t2.x, v = t2.y, c = 0, p = 0, U = 0, g = 0, S = 0, m = 0, b = 0, y = 0, F = 0, C = 0, _ = { val: 0, size: 0 }; u < r2.length; ) {
          e.CFF.getCharString(r2, u, _);
          var P = _.val;
          if (u += _.size, "o1" == P || "o18" == P) s.length % 2 != 0 && !h && (d = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true;
          else if ("o3" == P || "o23" == P) {
            s.length % 2 != 0 && !h && (d = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true;
          } else if ("o4" == P) s.length > 1 && !h && (d = s.shift() + n.nominalWidthX, h = true), f && e.U.P.closePath(o), v += s.pop(), e.U.P.moveTo(o, l, v), f = true;
          else if ("o5" == P) for (; s.length > 0; ) l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);
          else if ("o6" == P || "o7" == P) for (var x = s.length, I = "o6" == P, w = 0; w < x; w++) {
            var k = s.shift();
            I ? l += k : v += k, I = !I, e.U.P.lineTo(o, l, v);
          }
          else if ("o8" == P || "o24" == P) {
            x = s.length;
            for (var G = 0; G + 6 <= x; ) c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v), G += 6;
            "o24" == P && (l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v));
          } else {
            if ("o11" == P) break;
            if ("o1234" == P || "o1235" == P || "o1236" == P || "o1237" == P) "o1234" == P && (p = v, U = (c = l + s.shift()) + s.shift(), C = g = p + s.shift(), m = g, y = v, l = (b = (S = (F = U + s.shift()) + s.shift()) + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, C), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1235" == P && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), C = g + s.shift(), S = F + s.shift(), m = C + s.shift(), b = S + s.shift(), y = m + s.shift(), l = b + s.shift(), v = y + s.shift(), s.shift(), e.U.P.curveTo(o, c, p, U, g, F, C), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1236" == P && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), C = g = p + s.shift(), m = g, b = (S = (F = U + s.shift()) + s.shift()) + s.shift(), y = m + s.shift(), l = b + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, C), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1237" == P && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), C = g + s.shift(), S = F + s.shift(), m = C + s.shift(), b = S + s.shift(), y = m + s.shift(), Math.abs(b - l) > Math.abs(y - v) ? l = b + s.shift() : v = y + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, C), e.U.P.curveTo(o, S, m, b, y, l, v));
            else if ("o14" == P) {
              if (s.length > 0 && !h && (d = s.shift() + a2.nominalWidthX, h = true), 4 == s.length) {
                var O = s.shift(), T = s.shift(), D = s.shift(), B = s.shift(), A = e.CFF.glyphBySE(a2, D), R = e.CFF.glyphBySE(a2, B);
                e.U._drawCFF(a2.CharStrings[A], t2, a2, n, o), t2.x = O, t2.y = T, e.U._drawCFF(a2.CharStrings[R], t2, a2, n, o);
              }
              f && (e.U.P.closePath(o), f = false);
            } else if ("o19" == P || "o20" == P) {
              s.length % 2 != 0 && !h && (d = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true, u += i + 7 >> 3;
            } else if ("o21" == P) s.length > 2 && !h && (d = s.shift() + n.nominalWidthX, h = true), v += s.pop(), l += s.pop(), f && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), f = true;
            else if ("o22" == P) s.length > 1 && !h && (d = s.shift() + n.nominalWidthX, h = true), l += s.pop(), f && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), f = true;
            else if ("o25" == P) {
              for (; s.length > 6; ) l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);
              c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);
            } else if ("o26" == P) for (s.length % 2 && (l += s.shift()); s.length > 0; ) c = l, p = v + s.shift(), l = U = c + s.shift(), v = (g = p + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);
            else if ("o27" == P) for (s.length % 2 && (v += s.shift()); s.length > 0; ) p = v, U = (c = l + s.shift()) + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g, e.U.P.curveTo(o, c, p, U, g, l, v);
            else if ("o10" == P || "o29" == P) {
              var L = "o10" == P ? n : a2;
              if (0 == s.length) console.debug("error: empty stack");
              else {
                var W = s.pop(), M = L.Subrs[W + L.Bias];
                t2.x = l, t2.y = v, t2.nStems = i, t2.haveWidth = h, t2.width = d, t2.open = f, e.U._drawCFF(M, t2, a2, n, o), l = t2.x, v = t2.y, i = t2.nStems, h = t2.haveWidth, d = t2.width, f = t2.open;
              }
            } else if ("o30" == P || "o31" == P) {
              var V = s.length, E = (G = 0, "o31" == P);
              for (G += V - (x = -3 & V); G < x; ) E ? (p = v, U = (c = l + s.shift()) + s.shift(), v = (g = p + s.shift()) + s.shift(), x - G == 5 ? (l = U + s.shift(), G++) : l = U, E = false) : (c = l, p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), x - G == 5 ? (v = g + s.shift(), G++) : v = g, E = true), e.U.P.curveTo(o, c, p, U, g, l, v), G += 4;
            } else {
              if ("o" == (P + "").charAt(0)) throw console.debug("Unknown operation: " + P, r2), P;
              s.push(P);
            }
          }
        }
        t2.x = l, t2.y = v, t2.nStems = i, t2.haveWidth = h, t2.width = d, t2.open = f;
      };
      var t = e, a = { Typr: t };
      return r.Typr = t, r.default = a, Object.defineProperty(r, "__esModule", { value: true }), r;
    }({}).Typr;
  }
  function woff2otfFactory() {
    return function(r) {
      var e = Uint8Array, n = Uint16Array, t = Uint32Array, a = new e([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]), i = new e([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]), o = new e([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), f = function(r2, e2) {
        for (var a2 = new n(31), i2 = 0; i2 < 31; ++i2) a2[i2] = e2 += 1 << r2[i2 - 1];
        var o2 = new t(a2[30]);
        for (i2 = 1; i2 < 30; ++i2) for (var f2 = a2[i2]; f2 < a2[i2 + 1]; ++f2) o2[f2] = f2 - a2[i2] << 5 | i2;
        return [a2, o2];
      }, u = f(a, 2), v = u[0], s = u[1];
      v[28] = 258, s[258] = 28;
      for (var l = f(i, 0)[0], c = new n(32768), g = 0; g < 32768; ++g) {
        var h = (43690 & g) >>> 1 | (21845 & g) << 1;
        h = (61680 & (h = (52428 & h) >>> 2 | (13107 & h) << 2)) >>> 4 | (3855 & h) << 4, c[g] = ((65280 & h) >>> 8 | (255 & h) << 8) >>> 1;
      }
      var w = function(r2, e2, t2) {
        for (var a2 = r2.length, i2 = 0, o2 = new n(e2); i2 < a2; ++i2) ++o2[r2[i2] - 1];
        var f2, u2 = new n(e2);
        for (i2 = 0; i2 < e2; ++i2) u2[i2] = u2[i2 - 1] + o2[i2 - 1] << 1;
        if (t2) {
          f2 = new n(1 << e2);
          var v2 = 15 - e2;
          for (i2 = 0; i2 < a2; ++i2) if (r2[i2]) for (var s2 = i2 << 4 | r2[i2], l2 = e2 - r2[i2], g2 = u2[r2[i2] - 1]++ << l2, h2 = g2 | (1 << l2) - 1; g2 <= h2; ++g2) f2[c[g2] >>> v2] = s2;
        } else for (f2 = new n(a2), i2 = 0; i2 < a2; ++i2) r2[i2] && (f2[i2] = c[u2[r2[i2] - 1]++] >>> 15 - r2[i2]);
        return f2;
      }, d = new e(288);
      for (g = 0; g < 144; ++g) d[g] = 8;
      for (g = 144; g < 256; ++g) d[g] = 9;
      for (g = 256; g < 280; ++g) d[g] = 7;
      for (g = 280; g < 288; ++g) d[g] = 8;
      var m = new e(32);
      for (g = 0; g < 32; ++g) m[g] = 5;
      var b = w(d, 9, 1), p = w(m, 5, 1), y = function(r2) {
        for (var e2 = r2[0], n2 = 1; n2 < r2.length; ++n2) r2[n2] > e2 && (e2 = r2[n2]);
        return e2;
      }, L = function(r2, e2, n2) {
        var t2 = e2 / 8 | 0;
        return (r2[t2] | r2[t2 + 1] << 8) >> (7 & e2) & n2;
      }, U = function(r2, e2) {
        var n2 = e2 / 8 | 0;
        return (r2[n2] | r2[n2 + 1] << 8 | r2[n2 + 2] << 16) >> (7 & e2);
      }, k = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"], T = function(r2, e2, n2) {
        var t2 = new Error(e2 || k[r2]);
        if (t2.code = r2, Error.captureStackTrace && Error.captureStackTrace(t2, T), !n2) throw t2;
        return t2;
      }, O = function(r2, f2, u2) {
        var s2 = r2.length;
        if (!s2 || u2 && !u2.l && s2 < 5) return f2 || new e(0);
        var c2 = !f2 || u2, g2 = !u2 || u2.i;
        u2 || (u2 = {}), f2 || (f2 = new e(3 * s2));
        var h2, d2 = function(r3) {
          var n2 = f2.length;
          if (r3 > n2) {
            var t2 = new e(Math.max(2 * n2, r3));
            t2.set(f2), f2 = t2;
          }
        }, m2 = u2.f || 0, k2 = u2.p || 0, O2 = u2.b || 0, A2 = u2.l, x2 = u2.d, E = u2.m, D = u2.n, M = 8 * s2;
        do {
          if (!A2) {
            u2.f = m2 = L(r2, k2, 1);
            var S = L(r2, k2 + 1, 3);
            if (k2 += 3, !S) {
              var V = r2[(I = ((h2 = k2) / 8 | 0) + (7 & h2 && 1) + 4) - 4] | r2[I - 3] << 8, _ = I + V;
              if (_ > s2) {
                g2 && T(0);
                break;
              }
              c2 && d2(O2 + V), f2.set(r2.subarray(I, _), O2), u2.b = O2 += V, u2.p = k2 = 8 * _;
              continue;
            }
            if (1 == S) A2 = b, x2 = p, E = 9, D = 5;
            else if (2 == S) {
              var j = L(r2, k2, 31) + 257, z = L(r2, k2 + 10, 15) + 4, C = j + L(r2, k2 + 5, 31) + 1;
              k2 += 14;
              for (var F = new e(C), P = new e(19), q = 0; q < z; ++q) P[o[q]] = L(r2, k2 + 3 * q, 7);
              k2 += 3 * z;
              var B = y(P), G = (1 << B) - 1, H = w(P, B, 1);
              for (q = 0; q < C; ) {
                var I, J = H[L(r2, k2, G)];
                if (k2 += 15 & J, (I = J >>> 4) < 16) F[q++] = I;
                else {
                  var K = 0, N = 0;
                  for (16 == I ? (N = 3 + L(r2, k2, 3), k2 += 2, K = F[q - 1]) : 17 == I ? (N = 3 + L(r2, k2, 7), k2 += 3) : 18 == I && (N = 11 + L(r2, k2, 127), k2 += 7); N--; ) F[q++] = K;
                }
              }
              var Q = F.subarray(0, j), R = F.subarray(j);
              E = y(Q), D = y(R), A2 = w(Q, E, 1), x2 = w(R, D, 1);
            } else T(1);
            if (k2 > M) {
              g2 && T(0);
              break;
            }
          }
          c2 && d2(O2 + 131072);
          for (var W = (1 << E) - 1, X = (1 << D) - 1, Y = k2; ; Y = k2) {
            var Z = (K = A2[U(r2, k2) & W]) >>> 4;
            if ((k2 += 15 & K) > M) {
              g2 && T(0);
              break;
            }
            if (K || T(2), Z < 256) f2[O2++] = Z;
            else {
              if (256 == Z) {
                Y = k2, A2 = null;
                break;
              }
              var $ = Z - 254;
              if (Z > 264) {
                var rr = a[q = Z - 257];
                $ = L(r2, k2, (1 << rr) - 1) + v[q], k2 += rr;
              }
              var er = x2[U(r2, k2) & X], nr = er >>> 4;
              er || T(3), k2 += 15 & er;
              R = l[nr];
              if (nr > 3) {
                rr = i[nr];
                R += U(r2, k2) & (1 << rr) - 1, k2 += rr;
              }
              if (k2 > M) {
                g2 && T(0);
                break;
              }
              c2 && d2(O2 + 131072);
              for (var tr = O2 + $; O2 < tr; O2 += 4) f2[O2] = f2[O2 - R], f2[O2 + 1] = f2[O2 + 1 - R], f2[O2 + 2] = f2[O2 + 2 - R], f2[O2 + 3] = f2[O2 + 3 - R];
              O2 = tr;
            }
          }
          u2.l = A2, u2.p = Y, u2.b = O2, A2 && (m2 = 1, u2.m = E, u2.d = x2, u2.n = D);
        } while (!m2);
        return O2 == f2.length ? f2 : function(r3, a2, i2) {
          (null == a2 || a2 < 0) && (a2 = 0), (null == i2 || i2 > r3.length) && (i2 = r3.length);
          var o2 = new (r3 instanceof n ? n : r3 instanceof t ? t : e)(i2 - a2);
          return o2.set(r3.subarray(a2, i2)), o2;
        }(f2, 0, O2);
      }, A = new e(0);
      var x = "undefined" != typeof TextDecoder && new TextDecoder();
      try {
        x.decode(A, { stream: true }), 1;
      } catch (r2) {
      }
      return r.convert_streams = function(r2) {
        var e2 = new DataView(r2), n2 = 0;
        function t2() {
          var r3 = e2.getUint16(n2);
          return n2 += 2, r3;
        }
        function a2() {
          var r3 = e2.getUint32(n2);
          return n2 += 4, r3;
        }
        function i2(r3) {
          m2.setUint16(b2, r3), b2 += 2;
        }
        function o2(r3) {
          m2.setUint32(b2, r3), b2 += 4;
        }
        for (var f2 = { signature: a2(), flavor: a2(), length: a2(), numTables: t2(), reserved: t2(), totalSfntSize: a2(), majorVersion: t2(), minorVersion: t2(), metaOffset: a2(), metaLength: a2(), metaOrigLength: a2(), privOffset: a2(), privLength: a2() }, u2 = 0; Math.pow(2, u2) <= f2.numTables; ) u2++;
        u2--;
        for (var v2 = 16 * Math.pow(2, u2), s2 = 16 * f2.numTables - v2, l2 = 12, c2 = [], g2 = 0; g2 < f2.numTables; g2++) c2.push({ tag: a2(), offset: a2(), compLength: a2(), origLength: a2(), origChecksum: a2() }), l2 += 16;
        var h2, w2 = new Uint8Array(12 + 16 * c2.length + c2.reduce(function(r3, e3) {
          return r3 + e3.origLength + 4;
        }, 0)), d2 = w2.buffer, m2 = new DataView(d2), b2 = 0;
        return o2(f2.flavor), i2(f2.numTables), i2(v2), i2(u2), i2(s2), c2.forEach(function(r3) {
          o2(r3.tag), o2(r3.origChecksum), o2(l2), o2(r3.origLength), r3.outOffset = l2, (l2 += r3.origLength) % 4 != 0 && (l2 += 4 - l2 % 4);
        }), c2.forEach(function(e3) {
          var n3, t3 = r2.slice(e3.offset, e3.offset + e3.compLength);
          if (e3.compLength != e3.origLength) {
            var a3 = new Uint8Array(e3.origLength);
            n3 = new Uint8Array(t3, 2), O(n3, a3);
          } else a3 = new Uint8Array(t3);
          w2.set(a3, e3.outOffset);
          var i3 = 0;
          (l2 = e3.outOffset + e3.origLength) % 4 != 0 && (i3 = 4 - l2 % 4), w2.set(new Uint8Array(i3).buffer, e3.outOffset + e3.origLength), h2 = l2 + i3;
        }), d2.slice(0, h2);
      }, Object.defineProperty(r, "__esModule", { value: true }), r;
    }({}).convert_streams;
  }
  function parserFactory(Typr, woff2otf) {
    const cmdArgLengths = {
      M: 2,
      L: 2,
      Q: 4,
      C: 6,
      Z: 0
    };
    const joiningTypeRawData = { "C": "18g,ca,368,1kz", "D": "17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v", "R": "17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6", "L": "x9u,jff,a,fd,jv", "T": "4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n" };
    const JT_LEFT = 1, JT_RIGHT = 2, JT_DUAL = 4, JT_TRANSPARENT = 8, JT_JOIN_CAUSING = 16, JT_NON_JOINING = 32;
    let joiningTypeMap;
    function getCharJoiningType(ch) {
      if (!joiningTypeMap) {
        const m = {
          R: JT_RIGHT,
          L: JT_LEFT,
          D: JT_DUAL,
          C: JT_JOIN_CAUSING,
          U: JT_NON_JOINING,
          T: JT_TRANSPARENT
        };
        joiningTypeMap = /* @__PURE__ */ new Map();
        for (let type in joiningTypeRawData) {
          let lastCode = 0;
          joiningTypeRawData[type].split(",").forEach((range) => {
            let [skip, step] = range.split("+");
            skip = parseInt(skip, 36);
            step = step ? parseInt(step, 36) : 0;
            joiningTypeMap.set(lastCode += skip, m[type]);
            for (let i = step; i--; ) {
              joiningTypeMap.set(++lastCode, m[type]);
            }
          });
        }
      }
      return joiningTypeMap.get(ch) || JT_NON_JOINING;
    }
    const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;
    const formsToFeatures = [null, "isol", "init", "fina", "medi"];
    function detectJoiningForms(str) {
      const joiningForms = new Uint8Array(str.length);
      let prevJoiningType = JT_NON_JOINING;
      let prevForm = ISOL;
      let prevIndex = -1;
      for (let i = 0; i < str.length; i++) {
        const code = str.codePointAt(i);
        let joiningType = getCharJoiningType(code) | 0;
        let form = ISOL;
        if (joiningType & JT_TRANSPARENT) {
          continue;
        }
        if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {
          if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {
            form = FINA;
            if (prevForm === ISOL || prevForm === FINA) {
              joiningForms[prevIndex]++;
            }
          } else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {
            if (prevForm === INIT || prevForm === MEDI) {
              joiningForms[prevIndex]--;
            }
          }
        } else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {
          if (prevForm === INIT || prevForm === MEDI) {
            joiningForms[prevIndex]--;
          }
        }
        prevForm = joiningForms[i] = form;
        prevJoiningType = joiningType;
        prevIndex = i;
        if (code > 65535) i++;
      }
      return joiningForms;
    }
    function stringToGlyphs(font, str) {
      const glyphIds = [];
      for (let i = 0; i < str.length; i++) {
        const cc = str.codePointAt(i);
        if (cc > 65535) i++;
        glyphIds.push(Typr.U.codeToGlyph(font, cc));
      }
      const gsub = font["GSUB"];
      if (gsub) {
        const { lookupList, featureList } = gsub;
        let joiningForms;
        const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws|ccmp)$/;
        const usedLookups = [];
        featureList.forEach((feature) => {
          if (supportedFeatures.test(feature.tag)) {
            for (let ti = 0; ti < feature.tab.length; ti++) {
              if (usedLookups[feature.tab[ti]]) continue;
              usedLookups[feature.tab[ti]] = true;
              const tab = lookupList[feature.tab[ti]];
              const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);
              if (isJoiningFeature && !joiningForms) {
                joiningForms = detectJoiningForms(str);
              }
              for (let ci = 0; ci < glyphIds.length; ci++) {
                if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {
                  Typr.U._applySubs(glyphIds, ci, tab, lookupList);
                }
              }
            }
          }
        });
      }
      return glyphIds;
    }
    function calcGlyphPositions(font, glyphIds) {
      const positions = new Int16Array(glyphIds.length * 3);
      let glyphIndex = 0;
      for (; glyphIndex < glyphIds.length; glyphIndex++) {
        const glyphId = glyphIds[glyphIndex];
        if (glyphId === -1) continue;
        positions[glyphIndex * 3 + 2] = font.hmtx.aWidth[glyphId];
        const gpos = font.GPOS;
        if (gpos) {
          const llist = gpos.lookupList;
          for (let i = 0; i < llist.length; i++) {
            const lookup = llist[i];
            for (let j = 0; j < lookup.tabs.length; j++) {
              const tab = lookup.tabs[j];
              if (lookup.ltype === 1) {
                const ind = Typr._lctf.coverageIndex(tab.coverage, glyphId);
                if (ind !== -1 && tab.pos) {
                  applyValueRecord(tab.pos, glyphIndex);
                  break;
                }
              } else if (lookup.ltype === 2) {
                let adj = null;
                let prevGlyphIndex = getPrevGlyphIndex();
                if (prevGlyphIndex !== -1) {
                  const coverageIndex = Typr._lctf.coverageIndex(tab.coverage, glyphIds[prevGlyphIndex]);
                  if (coverageIndex !== -1) {
                    if (tab.fmt === 1) {
                      const right = tab.pairsets[coverageIndex];
                      for (let k = 0; k < right.length; k++) {
                        if (right[k].gid2 === glyphId) adj = right[k];
                      }
                    } else if (tab.fmt === 2) {
                      const c1 = Typr.U._getGlyphClass(glyphIds[prevGlyphIndex], tab.classDef1);
                      const c2 = Typr.U._getGlyphClass(glyphId, tab.classDef2);
                      adj = tab.matrix[c1][c2];
                    }
                    if (adj) {
                      if (adj.val1) applyValueRecord(adj.val1, prevGlyphIndex);
                      if (adj.val2) applyValueRecord(adj.val2, glyphIndex);
                      break;
                    }
                  }
                }
              } else if (lookup.ltype === 4) {
                const markArrIndex = Typr._lctf.coverageIndex(tab.markCoverage, glyphId);
                if (markArrIndex !== -1) {
                  const baseGlyphIndex = getPrevGlyphIndex(isBaseGlyph);
                  const baseArrIndex = baseGlyphIndex === -1 ? -1 : Typr._lctf.coverageIndex(tab.baseCoverage, glyphIds[baseGlyphIndex]);
                  if (baseArrIndex !== -1) {
                    const markRecord = tab.markArray[markArrIndex];
                    const baseAnchor = tab.baseArray[baseArrIndex][markRecord.markClass];
                    positions[glyphIndex * 3] = baseAnchor.x - markRecord.x + positions[baseGlyphIndex * 3] - positions[baseGlyphIndex * 3 + 2];
                    positions[glyphIndex * 3 + 1] = baseAnchor.y - markRecord.y + positions[baseGlyphIndex * 3 + 1];
                    break;
                  }
                }
              } else if (lookup.ltype === 6) {
                const mark1ArrIndex = Typr._lctf.coverageIndex(tab.mark1Coverage, glyphId);
                if (mark1ArrIndex !== -1) {
                  const prevGlyphIndex = getPrevGlyphIndex();
                  if (prevGlyphIndex !== -1) {
                    const prevGlyphId = glyphIds[prevGlyphIndex];
                    if (getGlyphClass(font, prevGlyphId) === 3) {
                      const mark2ArrIndex = Typr._lctf.coverageIndex(tab.mark2Coverage, prevGlyphId);
                      if (mark2ArrIndex !== -1) {
                        const mark1Record = tab.mark1Array[mark1ArrIndex];
                        const mark2Anchor = tab.mark2Array[mark2ArrIndex][mark1Record.markClass];
                        positions[glyphIndex * 3] = mark2Anchor.x - mark1Record.x + positions[prevGlyphIndex * 3] - positions[prevGlyphIndex * 3 + 2];
                        positions[glyphIndex * 3 + 1] = mark2Anchor.y - mark1Record.y + positions[prevGlyphIndex * 3 + 1];
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        } else if (font.kern && !font.cff) {
          const prevGlyphIndex = getPrevGlyphIndex();
          if (prevGlyphIndex !== -1) {
            const ind1 = font.kern.glyph1.indexOf(glyphIds[prevGlyphIndex]);
            if (ind1 !== -1) {
              const ind2 = font.kern.rval[ind1].glyph2.indexOf(glyphId);
              if (ind2 !== -1) {
                positions[prevGlyphIndex * 3 + 2] += font.kern.rval[ind1].vals[ind2];
              }
            }
          }
        }
      }
      return positions;
      function getPrevGlyphIndex(filter) {
        for (let i = glyphIndex - 1; i >= 0; i--) {
          if (glyphIds[i] !== -1 && (!filter || filter(glyphIds[i]))) {
            return i;
          }
        }
        return -1;
      }
      function isBaseGlyph(glyphId) {
        return getGlyphClass(font, glyphId) === 1;
      }
      function applyValueRecord(source, gi) {
        for (let i = 0; i < 3; i++) {
          positions[gi * 3 + i] += source[i] || 0;
        }
      }
    }
    function getGlyphClass(font, glyphId) {
      const classDef = font.GDEF && font.GDEF.glyphClassDef;
      return classDef ? Typr.U._getGlyphClass(glyphId, classDef) : 0;
    }
    function firstNum(...args) {
      for (let i = 0; i < args.length; i++) {
        if (typeof args[i] === "number") {
          return args[i];
        }
      }
    }
    function wrapFontObj(typrFont) {
      const glyphMap = /* @__PURE__ */ Object.create(null);
      const os2 = typrFont["OS/2"];
      const hhea = typrFont.hhea;
      const unitsPerEm = typrFont.head.unitsPerEm;
      const ascender = firstNum(os2 && os2.sTypoAscender, hhea && hhea.ascender, unitsPerEm);
      const fontObj = {
        unitsPerEm,
        ascender,
        descender: firstNum(os2 && os2.sTypoDescender, hhea && hhea.descender, 0),
        capHeight: firstNum(os2 && os2.sCapHeight, ascender),
        xHeight: firstNum(os2 && os2.sxHeight, ascender),
        lineGap: firstNum(os2 && os2.sTypoLineGap, hhea && hhea.lineGap),
        supportsCodePoint(code) {
          return Typr.U.codeToGlyph(typrFont, code) > 0;
        },
        forEachGlyph(text, fontSize, letterSpacing, callback) {
          let penX = 0;
          const fontScale = 1 / fontObj.unitsPerEm * fontSize;
          const glyphIds = stringToGlyphs(typrFont, text);
          let charIndex = 0;
          const positions = calcGlyphPositions(typrFont, glyphIds);
          glyphIds.forEach((glyphId, i) => {
            if (glyphId !== -1) {
              let glyphObj = glyphMap[glyphId];
              if (!glyphObj) {
                const { cmds, crds } = Typr.U.glyphToPath(typrFont, glyphId);
                let path = "";
                let crdsIdx = 0;
                for (let i2 = 0, len = cmds.length; i2 < len; i2++) {
                  const numArgs = cmdArgLengths[cmds[i2]];
                  path += cmds[i2];
                  for (let j = 1; j <= numArgs; j++) {
                    path += (j > 1 ? "," : "") + crds[crdsIdx++];
                  }
                }
                let xMin, yMin, xMax, yMax;
                if (crds.length) {
                  xMin = yMin = Infinity;
                  xMax = yMax = -Infinity;
                  for (let i2 = 0, len = crds.length; i2 < len; i2 += 2) {
                    let x = crds[i2];
                    let y = crds[i2 + 1];
                    if (x < xMin) xMin = x;
                    if (y < yMin) yMin = y;
                    if (x > xMax) xMax = x;
                    if (y > yMax) yMax = y;
                  }
                } else {
                  xMin = xMax = yMin = yMax = 0;
                }
                glyphObj = glyphMap[glyphId] = {
                  index: glyphId,
                  advanceWidth: typrFont.hmtx.aWidth[glyphId],
                  xMin,
                  yMin,
                  xMax,
                  yMax,
                  path
                };
              }
              callback.call(
                null,
                glyphObj,
                penX + positions[i * 3] * fontScale,
                positions[i * 3 + 1] * fontScale,
                charIndex
              );
              penX += positions[i * 3 + 2] * fontScale;
              if (letterSpacing) {
                penX += letterSpacing * fontSize;
              }
            }
            charIndex += text.codePointAt(charIndex) > 65535 ? 2 : 1;
          });
          return penX;
        }
      };
      return fontObj;
    }
    return function parse(buffer) {
      const peek = new Uint8Array(buffer, 0, 4);
      const tag = Typr._bin.readASCII(peek, 0, 4);
      if (tag === "wOFF") {
        buffer = woff2otf(buffer);
      } else if (tag === "wOF2") {
        throw new Error("woff2 fonts not supported");
      }
      return wrapFontObj(Typr.parse(buffer)[0]);
    };
  }
  var workerModule = /* @__PURE__ */ defineWorkerModule({
    name: "Typr Font Parser",
    dependencies: [typrFactory, woff2otfFactory, parserFactory],
    init(typrFactory2, woff2otfFactory2, parserFactory2) {
      const Typr = typrFactory2();
      const woff2otf = woff2otfFactory2();
      return parserFactory2(Typr, woff2otf);
    }
  });
  function unicodeFontResolverClientFactory() {
    return function(t) {
      var n = function() {
        this.buckets = /* @__PURE__ */ new Map();
      };
      n.prototype.add = function(t2) {
        var n2 = t2 >> 5;
        this.buckets.set(n2, (this.buckets.get(n2) || 0) | 1 << (31 & t2));
      }, n.prototype.has = function(t2) {
        var n2 = this.buckets.get(t2 >> 5);
        return void 0 !== n2 && 0 != (n2 & 1 << (31 & t2));
      }, n.prototype.serialize = function() {
        var t2 = [];
        return this.buckets.forEach(function(n2, r2) {
          t2.push((+r2).toString(36) + ":" + n2.toString(36));
        }), t2.join(",");
      }, n.prototype.deserialize = function(t2) {
        var n2 = this;
        this.buckets.clear(), t2.split(",").forEach(function(t3) {
          var r2 = t3.split(":");
          n2.buckets.set(parseInt(r2[0], 36), parseInt(r2[1], 36));
        });
      };
      var r = Math.pow(2, 8), e = r - 1, o = ~e;
      function a(t2) {
        var n2 = function(t3) {
          return t3 & o;
        }(t2).toString(16), e2 = function(t3) {
          return (t3 & o) + r - 1;
        }(t2).toString(16);
        return "codepoint-index/plane" + (t2 >> 16) + "/" + n2 + "-" + e2 + ".json";
      }
      function i(t2, n2) {
        var r2 = t2 & e, o2 = n2.codePointAt(r2 / 6 | 0);
        return 0 != ((o2 = (o2 || 48) - 48) & 1 << r2 % 6);
      }
      function u(t2, n2) {
        var r2;
        (r2 = t2, r2.replace(/U\+/gi, "").replace(/^,+|,+$/g, "").split(/,+/).map(function(t3) {
          return t3.split("-").map(function(t4) {
            return parseInt(t4.trim(), 16);
          });
        })).forEach(function(t3) {
          var r3 = t3[0], e2 = t3[1];
          void 0 === e2 && (e2 = r3), n2(r3, e2);
        });
      }
      function c(t2, n2) {
        u(t2, function(t3, r2) {
          for (var e2 = t3; e2 <= r2; e2++) n2(e2);
        });
      }
      var s = {}, f = {}, l = /* @__PURE__ */ new WeakMap(), v = "https://cdn.jsdelivr.net/gh/lojjic/unicode-font-resolver@v1.0.1/packages/data";
      function d(t2) {
        var r2 = l.get(t2);
        return r2 || (r2 = new n(), c(t2.ranges, function(t3) {
          return r2.add(t3);
        }), l.set(t2, r2)), r2;
      }
      var h, p = /* @__PURE__ */ new Map();
      function g(t2, n2, r2) {
        return t2[n2] ? n2 : t2[r2] ? r2 : function(t3) {
          for (var n3 in t3) return n3;
        }(t2);
      }
      function w(t2, n2) {
        var r2 = n2;
        if (!t2.includes(r2)) {
          r2 = 1 / 0;
          for (var e2 = 0; e2 < t2.length; e2++) Math.abs(t2[e2] - n2) < Math.abs(r2 - n2) && (r2 = t2[e2]);
        }
        return r2;
      }
      function k(t2) {
        return h || (h = /* @__PURE__ */ new Set(), c("9-D,20,85,A0,1680,2000-200A,2028-202F,205F,3000", function(t3) {
          h.add(t3);
        })), h.has(t2);
      }
      return t.CodePointSet = n, t.clearCache = function() {
        s = {}, f = {};
      }, t.getFontsForString = function(t2, n2) {
        void 0 === n2 && (n2 = {});
        var r2, e2 = n2.lang;
        void 0 === e2 && (e2 = /\p{Script=Hangul}/u.test(r2 = t2) ? "ko" : /\p{Script=Hiragana}|\p{Script=Katakana}/u.test(r2) ? "ja" : "en");
        var o2 = n2.category;
        void 0 === o2 && (o2 = "sans-serif");
        var u2 = n2.style;
        void 0 === u2 && (u2 = "normal");
        var c2 = n2.weight;
        void 0 === c2 && (c2 = 400);
        var l2 = (n2.dataUrl || v).replace(/\/$/g, ""), h2 = /* @__PURE__ */ new Map(), y = new Uint8Array(t2.length), b = {}, m = {}, A = new Array(t2.length), S = /* @__PURE__ */ new Map(), j = false;
        function M(t3) {
          var n3 = p.get(t3);
          return n3 || (n3 = fetch(l2 + "/" + t3).then(function(t4) {
            if (!t4.ok) throw new Error(t4.statusText);
            return t4.json().then(function(t5) {
              if (!Array.isArray(t5) || 1 !== t5[0]) throw new Error("Incorrect schema version; need 1, got " + t5[0]);
              return t5[1];
            });
          }).catch(function(n4) {
            if (l2 !== v) return j || (console.error('unicode-font-resolver: Failed loading from dataUrl "' + l2 + '", trying default CDN. ' + n4.message), j = true), l2 = v, p.delete(t3), M(t3);
            throw n4;
          }), p.set(t3, n3)), n3;
        }
        for (var P = function(n3) {
          var r3 = t2.codePointAt(n3), e3 = a(r3);
          A[n3] = e3, s[e3] || S.has(e3) || S.set(e3, M(e3).then(function(t3) {
            s[e3] = t3;
          })), r3 > 65535 && (n3++, E = n3);
        }, E = 0; E < t2.length; E++) P(E);
        return Promise.all(S.values()).then(function() {
          S.clear();
          for (var n3 = function(n4) {
            var o3 = t2.codePointAt(n4), a2 = null, u3 = s[A[n4]], c3 = void 0;
            for (var l3 in u3) {
              var v2 = m[l3];
              if (void 0 === v2 && (v2 = m[l3] = new RegExp(l3).test(e2 || "en")), v2) {
                for (var d2 in c3 = l3, u3[l3]) if (i(o3, u3[l3][d2])) {
                  a2 = d2;
                  break;
                }
                break;
              }
            }
            if (!a2) {
              t: for (var h3 in u3) if (h3 !== c3) {
                for (var p2 in u3[h3]) if (i(o3, u3[h3][p2])) {
                  a2 = p2;
                  break t;
                }
              }
            }
            a2 || (console.debug("No font coverage for U+" + o3.toString(16)), a2 = "latin"), A[n4] = a2, f[a2] || S.has(a2) || S.set(a2, M("font-meta/" + a2 + ".json").then(function(t3) {
              f[a2] = t3;
            })), o3 > 65535 && (n4++, r3 = n4);
          }, r3 = 0; r3 < t2.length; r3++) n3(r3);
          return Promise.all(S.values());
        }).then(function() {
          for (var n3, r3 = null, e3 = 0; e3 < t2.length; e3++) {
            var a2 = t2.codePointAt(e3);
            if (r3 && (k(a2) || d(r3).has(a2))) y[e3] = y[e3 - 1];
            else {
              r3 = f[A[e3]];
              var i2 = b[r3.id];
              if (!i2) {
                var s2 = r3.typeforms, v2 = g(s2, o2, "sans-serif"), p2 = g(s2[v2], u2, "normal"), m2 = w(null === (n3 = s2[v2]) || void 0 === n3 ? void 0 : n3[p2], c2);
                i2 = b[r3.id] = l2 + "/font-files/" + r3.id + "/" + v2 + "." + p2 + "." + m2 + ".woff";
              }
              var S2 = h2.get(i2);
              null == S2 && (S2 = h2.size, h2.set(i2, S2)), y[e3] = S2;
            }
            a2 > 65535 && (e3++, y[e3] = y[e3 - 1]);
          }
          return { fontUrls: Array.from(h2.keys()), chars: y };
        });
      }, Object.defineProperty(t, "__esModule", { value: true }), t;
    }({});
  }
  function createFontResolver(fontParser, unicodeFontResolverClient) {
    const parsedFonts = /* @__PURE__ */ Object.create(null);
    const loadingFonts = /* @__PURE__ */ Object.create(null);
    function doLoadFont(url, callback) {
      const onError = (err) => {
        console.error(`Failure loading font ${url}`, err);
      };
      try {
        const request = new XMLHttpRequest();
        request.open("get", url, true);
        request.responseType = "arraybuffer";
        request.onload = function() {
          if (request.status >= 400) {
            onError(new Error(request.statusText));
          } else if (request.status > 0) {
            try {
              const fontObj = fontParser(request.response);
              fontObj.src = url;
              callback(fontObj);
            } catch (e) {
              onError(e);
            }
          }
        };
        request.onerror = onError;
        request.send();
      } catch (err) {
        onError(err);
      }
    }
    function loadFont(fontUrl, callback) {
      let font = parsedFonts[fontUrl];
      if (font) {
        callback(font);
      } else if (loadingFonts[fontUrl]) {
        loadingFonts[fontUrl].push(callback);
      } else {
        loadingFonts[fontUrl] = [callback];
        doLoadFont(fontUrl, (fontObj) => {
          fontObj.src = fontUrl;
          parsedFonts[fontUrl] = fontObj;
          loadingFonts[fontUrl].forEach((cb) => cb(fontObj));
          delete loadingFonts[fontUrl];
        });
      }
    }
    return function(text, callback, {
      lang,
      fonts: userFonts = [],
      style = "normal",
      weight = "normal",
      unicodeFontsURL
    } = {}) {
      const charResolutions = new Uint8Array(text.length);
      const fontResolutions = [];
      if (!text.length) {
        allDone();
      }
      const fontIndices = /* @__PURE__ */ new Map();
      const fallbackRanges = [];
      if (style !== "italic") style = "normal";
      if (typeof weight !== "number") {
        weight = weight === "bold" ? 700 : 400;
      }
      if (userFonts && !Array.isArray(userFonts)) {
        userFonts = [userFonts];
      }
      userFonts = userFonts.slice().filter((def) => !def.lang || def.lang.test(lang)).reverse();
      if (userFonts.length) {
        const UNKNOWN = 0;
        const RESOLVED = 1;
        const NEEDS_FALLBACK = 2;
        let prevCharResult = UNKNOWN;
        (function resolveUserFonts(startIndex = 0) {
          for (let i = startIndex, iLen = text.length; i < iLen; i++) {
            const codePoint = text.codePointAt(i);
            if (prevCharResult === RESOLVED && fontResolutions[charResolutions[i - 1]].supportsCodePoint(codePoint) || i > 0 && /\s/.test(text[i])) {
              charResolutions[i] = charResolutions[i - 1];
              if (prevCharResult === NEEDS_FALLBACK) {
                fallbackRanges[fallbackRanges.length - 1][1] = i;
              }
            } else {
              for (let j = charResolutions[i], jLen = userFonts.length; j <= jLen; j++) {
                if (j === jLen) {
                  const range = prevCharResult === NEEDS_FALLBACK ? fallbackRanges[fallbackRanges.length - 1] : fallbackRanges[fallbackRanges.length] = [i, i];
                  range[1] = i;
                  prevCharResult = NEEDS_FALLBACK;
                } else {
                  charResolutions[i] = j;
                  const { src, unicodeRange } = userFonts[j];
                  if (!unicodeRange || isCodeInRanges(codePoint, unicodeRange)) {
                    const fontObj = parsedFonts[src];
                    if (!fontObj) {
                      loadFont(src, () => {
                        resolveUserFonts(i);
                      });
                      return;
                    }
                    if (fontObj.supportsCodePoint(codePoint)) {
                      let fontIndex = fontIndices.get(fontObj);
                      if (typeof fontIndex !== "number") {
                        fontIndex = fontResolutions.length;
                        fontResolutions.push(fontObj);
                        fontIndices.set(fontObj, fontIndex);
                      }
                      charResolutions[i] = fontIndex;
                      prevCharResult = RESOLVED;
                      break;
                    }
                  }
                }
              }
            }
            if (codePoint > 65535 && i + 1 < iLen) {
              charResolutions[i + 1] = charResolutions[i];
              i++;
              if (prevCharResult === NEEDS_FALLBACK) {
                fallbackRanges[fallbackRanges.length - 1][1] = i;
              }
            }
          }
          resolveFallbacks();
        })();
      } else {
        fallbackRanges.push([0, text.length - 1]);
        resolveFallbacks();
      }
      function resolveFallbacks() {
        if (fallbackRanges.length) {
          const fallbackString = fallbackRanges.map((range) => text.substring(range[0], range[1] + 1)).join("\n");
          unicodeFontResolverClient.getFontsForString(fallbackString, {
            lang: lang || void 0,
            style,
            weight,
            dataUrl: unicodeFontsURL
          }).then(({ fontUrls, chars }) => {
            const fontIndexOffset = fontResolutions.length;
            let charIdx = 0;
            fallbackRanges.forEach((range) => {
              for (let i = 0, endIdx = range[1] - range[0]; i <= endIdx; i++) {
                charResolutions[range[0] + i] = chars[charIdx++] + fontIndexOffset;
              }
              charIdx++;
            });
            let loadedCount = 0;
            fontUrls.forEach((url, i) => {
              loadFont(url, (fontObj) => {
                fontResolutions[i + fontIndexOffset] = fontObj;
                if (++loadedCount === fontUrls.length) {
                  allDone();
                }
              });
            });
          });
        } else {
          allDone();
        }
      }
      function allDone() {
        callback({
          chars: charResolutions,
          fonts: fontResolutions
        });
      }
      function isCodeInRanges(code, ranges) {
        for (let k = 0; k < ranges.length; k++) {
          const [start, end = start] = ranges[k];
          if (start <= code && code <= end) {
            return true;
          }
        }
        return false;
      }
    };
  }
  var fontResolverWorkerModule = /* @__PURE__ */ defineWorkerModule({
    name: "FontResolver",
    dependencies: [
      createFontResolver,
      workerModule,
      unicodeFontResolverClientFactory
    ],
    init(createFontResolver2, fontParser, unicodeFontResolverClientFactory2) {
      return createFontResolver2(fontParser, unicodeFontResolverClientFactory2());
    }
  });
  function createTypesetter(resolveFonts, bidi) {
    const INF = Infinity;
    const DEFAULT_IGNORABLE_CHARS = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;
    const lineBreakingWhiteSpace = `[^\\S\\u00A0]`;
    const BREAK_AFTER_CHARS = new RegExp(`${lineBreakingWhiteSpace}|[\\-\\u007C\\u00AD\\u2010\\u2012-\\u2014\\u2027\\u2056\\u2E17\\u2E40]`);
    function calculateFontRuns({ text, lang, fonts, style, weight, preResolvedFonts, unicodeFontsURL }, onDone) {
      const onResolved = ({ chars, fonts: parsedFonts }) => {
        let curRun, prevVal;
        const runs = [];
        for (let i = 0; i < chars.length; i++) {
          if (chars[i] !== prevVal) {
            prevVal = chars[i];
            runs.push(curRun = { start: i, end: i, fontObj: parsedFonts[chars[i]] });
          } else {
            curRun.end = i;
          }
        }
        onDone(runs);
      };
      if (preResolvedFonts) {
        onResolved(preResolvedFonts);
      } else {
        resolveFonts(
          text,
          onResolved,
          { lang, fonts, style, weight, unicodeFontsURL }
        );
      }
    }
    function typeset({
      text = "",
      font,
      lang,
      sdfGlyphSize = 64,
      fontSize = 400,
      fontWeight = 1,
      fontStyle = "normal",
      letterSpacing = 0,
      lineHeight = "normal",
      maxWidth = INF,
      direction,
      textAlign = "left",
      textIndent = 0,
      whiteSpace = "normal",
      overflowWrap = "normal",
      anchorX = 0,
      anchorY = 0,
      metricsOnly = false,
      unicodeFontsURL,
      preResolvedFonts = null,
      includeCaretPositions = false,
      chunkedBoundsSize = 8192,
      colorRanges = null
    }, callback) {
      const mainStart = now2();
      const timings = { fontLoad: 0, typesetting: 0 };
      if (text.indexOf("\r") > -1) {
        console.info("Typesetter: got text with \\r chars; normalizing to \\n");
        text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
      }
      fontSize = +fontSize;
      letterSpacing = +letterSpacing;
      maxWidth = +maxWidth;
      lineHeight = lineHeight || "normal";
      textIndent = +textIndent;
      calculateFontRuns({
        text,
        lang,
        style: fontStyle,
        weight: fontWeight,
        fonts: typeof font === "string" ? [{ src: font }] : font,
        unicodeFontsURL,
        preResolvedFonts
      }, (runs) => {
        timings.fontLoad = now2() - mainStart;
        const hasMaxWidth = isFinite(maxWidth);
        let glyphIds = null;
        let glyphFontIndices = null;
        let glyphPositions = null;
        let glyphData = null;
        let glyphColors = null;
        let caretPositions = null;
        let visibleBounds = null;
        let chunkedBounds = null;
        let maxLineWidth = 0;
        let renderableGlyphCount = 0;
        let canWrap = whiteSpace !== "nowrap";
        const metricsByFont = /* @__PURE__ */ new Map();
        const typesetStart = now2();
        let lineXOffset = textIndent;
        let prevRunEndX = 0;
        let currentLine = new TextLine();
        const lines = [currentLine];
        runs.forEach((run) => {
          const { fontObj } = run;
          const { ascender, descender, unitsPerEm, lineGap, capHeight, xHeight } = fontObj;
          let fontData2 = metricsByFont.get(fontObj);
          if (!fontData2) {
            const fontSizeMult2 = fontSize / unitsPerEm;
            const calcLineHeight = lineHeight === "normal" ? (ascender - descender + lineGap) * fontSizeMult2 : lineHeight * fontSize;
            const halfLeading = (calcLineHeight - (ascender - descender) * fontSizeMult2) / 2;
            const caretHeight = Math.min(calcLineHeight, (ascender - descender) * fontSizeMult2);
            const caretTop = (ascender + descender) / 2 * fontSizeMult2 + caretHeight / 2;
            fontData2 = {
              index: metricsByFont.size,
              src: fontObj.src,
              fontObj,
              fontSizeMult: fontSizeMult2,
              unitsPerEm,
              ascender: ascender * fontSizeMult2,
              descender: descender * fontSizeMult2,
              capHeight: capHeight * fontSizeMult2,
              xHeight: xHeight * fontSizeMult2,
              lineHeight: calcLineHeight,
              baseline: -halfLeading - ascender * fontSizeMult2,
              // baseline offset from top of line height
              // cap: -halfLeading - capHeight * fontSizeMult, // cap from top of line height
              // ex: -halfLeading - xHeight * fontSizeMult, // ex from top of line height
              caretTop,
              caretBottom: caretTop - caretHeight
            };
            metricsByFont.set(fontObj, fontData2);
          }
          const { fontSizeMult } = fontData2;
          const runText = text.slice(run.start, run.end + 1);
          let prevGlyphX, prevGlyphObj;
          fontObj.forEachGlyph(runText, fontSize, letterSpacing, (glyphObj, glyphX, glyphY, charIndex) => {
            glyphX += prevRunEndX;
            charIndex += run.start;
            prevGlyphX = glyphX;
            prevGlyphObj = glyphObj;
            const char = text.charAt(charIndex);
            const glyphWidth = glyphObj.advanceWidth * fontSizeMult;
            const curLineCount = currentLine.count;
            let nextLine;
            if (!("isEmpty" in glyphObj)) {
              glyphObj.isWhitespace = !!char && new RegExp(lineBreakingWhiteSpace).test(char);
              glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);
              glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);
            }
            if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
              renderableGlyphCount++;
            }
            if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {
              if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {
                nextLine = new TextLine();
                lineXOffset = -glyphX;
              } else {
                for (let i = curLineCount; i--; ) {
                  if (i === 0 && overflowWrap === "break-word") {
                    nextLine = new TextLine();
                    lineXOffset = -glyphX;
                    break;
                  } else if (currentLine.glyphAt(i).glyphObj.canBreakAfter) {
                    nextLine = currentLine.splitAt(i + 1);
                    const adjustX = nextLine.glyphAt(0).x;
                    lineXOffset -= adjustX;
                    for (let j = nextLine.count; j--; ) {
                      nextLine.glyphAt(j).x -= adjustX;
                    }
                    break;
                  }
                }
              }
              if (nextLine) {
                currentLine.isSoftWrapped = true;
                currentLine = nextLine;
                lines.push(currentLine);
                maxLineWidth = maxWidth;
              }
            }
            let fly = currentLine.glyphAt(currentLine.count);
            fly.glyphObj = glyphObj;
            fly.x = glyphX + lineXOffset;
            fly.y = glyphY;
            fly.width = glyphWidth;
            fly.charIndex = charIndex;
            fly.fontData = fontData2;
            if (char === "\n") {
              currentLine = new TextLine();
              lines.push(currentLine);
              lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;
            }
          });
          prevRunEndX = prevGlyphX + prevGlyphObj.advanceWidth * fontSizeMult + letterSpacing * fontSize;
        });
        let totalHeight = 0;
        lines.forEach((line) => {
          let isTrailingWhitespace = true;
          for (let i = line.count; i--; ) {
            const glyphInfo = line.glyphAt(i);
            if (isTrailingWhitespace && !glyphInfo.glyphObj.isWhitespace) {
              line.width = glyphInfo.x + glyphInfo.width;
              if (line.width > maxLineWidth) {
                maxLineWidth = line.width;
              }
              isTrailingWhitespace = false;
            }
            let { lineHeight: lineHeight2, capHeight, xHeight, baseline } = glyphInfo.fontData;
            if (lineHeight2 > line.lineHeight) line.lineHeight = lineHeight2;
            const baselineDiff = baseline - line.baseline;
            if (baselineDiff < 0) {
              line.baseline += baselineDiff;
              line.cap += baselineDiff;
              line.ex += baselineDiff;
            }
            line.cap = Math.max(line.cap, line.baseline + capHeight);
            line.ex = Math.max(line.ex, line.baseline + xHeight);
          }
          line.baseline -= totalHeight;
          line.cap -= totalHeight;
          line.ex -= totalHeight;
          totalHeight += line.lineHeight;
        });
        let anchorXOffset = 0;
        let anchorYOffset = 0;
        if (anchorX) {
          if (typeof anchorX === "number") {
            anchorXOffset = -anchorX;
          } else if (typeof anchorX === "string") {
            anchorXOffset = -maxLineWidth * (anchorX === "left" ? 0 : anchorX === "center" ? 0.5 : anchorX === "right" ? 1 : parsePercent(anchorX));
          }
        }
        if (anchorY) {
          if (typeof anchorY === "number") {
            anchorYOffset = -anchorY;
          } else if (typeof anchorY === "string") {
            anchorYOffset = anchorY === "top" ? 0 : anchorY === "top-baseline" ? -lines[0].baseline : anchorY === "top-cap" ? -lines[0].cap : anchorY === "top-ex" ? -lines[0].ex : anchorY === "middle" ? totalHeight / 2 : anchorY === "bottom" ? totalHeight : anchorY === "bottom-baseline" ? -lines[lines.length - 1].baseline : parsePercent(anchorY) * totalHeight;
          }
        }
        if (!metricsOnly) {
          const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);
          glyphIds = new Uint16Array(renderableGlyphCount);
          glyphFontIndices = new Uint8Array(renderableGlyphCount);
          glyphPositions = new Float32Array(renderableGlyphCount * 2);
          glyphData = {};
          visibleBounds = [INF, INF, -INF, -INF];
          chunkedBounds = [];
          if (includeCaretPositions) {
            caretPositions = new Float32Array(text.length * 4);
          }
          if (colorRanges) {
            glyphColors = new Uint8Array(renderableGlyphCount * 3);
          }
          let renderableGlyphIndex = 0;
          let prevCharIndex = -1;
          let colorCharIndex = -1;
          let chunk;
          let currentColor;
          lines.forEach((line, lineIndex) => {
            let { count: lineGlyphCount, width: lineWidth } = line;
            if (lineGlyphCount > 0) {
              let trailingWhitespaceCount = 0;
              for (let i = lineGlyphCount; i-- && line.glyphAt(i).glyphObj.isWhitespace; ) {
                trailingWhitespaceCount++;
              }
              let lineXOffset2 = 0;
              let justifyAdjust = 0;
              if (textAlign === "center") {
                lineXOffset2 = (maxLineWidth - lineWidth) / 2;
              } else if (textAlign === "right") {
                lineXOffset2 = maxLineWidth - lineWidth;
              } else if (textAlign === "justify" && line.isSoftWrapped) {
                let whitespaceCount = 0;
                for (let i = lineGlyphCount - trailingWhitespaceCount; i--; ) {
                  if (line.glyphAt(i).glyphObj.isWhitespace) {
                    whitespaceCount++;
                  }
                }
                justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;
              }
              if (justifyAdjust || lineXOffset2) {
                let justifyOffset = 0;
                for (let i = 0; i < lineGlyphCount; i++) {
                  let glyphInfo = line.glyphAt(i);
                  const glyphObj2 = glyphInfo.glyphObj;
                  glyphInfo.x += lineXOffset2 + justifyOffset;
                  if (justifyAdjust !== 0 && glyphObj2.isWhitespace && i < lineGlyphCount - trailingWhitespaceCount) {
                    justifyOffset += justifyAdjust;
                    glyphInfo.width += justifyAdjust;
                  }
                }
              }
              const flips = bidi.getReorderSegments(
                text,
                bidiLevelsResult,
                line.glyphAt(0).charIndex,
                line.glyphAt(line.count - 1).charIndex
              );
              for (let fi = 0; fi < flips.length; fi++) {
                const [start, end] = flips[fi];
                let left = Infinity, right = -Infinity;
                for (let i = 0; i < lineGlyphCount; i++) {
                  if (line.glyphAt(i).charIndex >= start) {
                    let startInLine = i, endInLine = i;
                    for (; endInLine < lineGlyphCount; endInLine++) {
                      let info = line.glyphAt(endInLine);
                      if (info.charIndex > end) {
                        break;
                      }
                      if (endInLine < lineGlyphCount - trailingWhitespaceCount) {
                        left = Math.min(left, info.x);
                        right = Math.max(right, info.x + info.width);
                      }
                    }
                    for (let j = startInLine; j < endInLine; j++) {
                      const glyphInfo = line.glyphAt(j);
                      glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);
                    }
                    break;
                  }
                }
              }
              let glyphObj;
              const setGlyphObj = (g) => glyphObj = g;
              for (let i = 0; i < lineGlyphCount; i++) {
                const glyphInfo = line.glyphAt(i);
                glyphObj = glyphInfo.glyphObj;
                const glyphId = glyphObj.index;
                const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1;
                if (rtl) {
                  const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);
                  if (mirrored) {
                    glyphInfo.fontData.fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);
                  }
                }
                if (includeCaretPositions) {
                  const { charIndex, fontData: fontData2 } = glyphInfo;
                  const caretLeft = glyphInfo.x + anchorXOffset;
                  const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;
                  caretPositions[charIndex * 4] = rtl ? caretRight : caretLeft;
                  caretPositions[charIndex * 4 + 1] = rtl ? caretLeft : caretRight;
                  caretPositions[charIndex * 4 + 2] = line.baseline + fontData2.caretBottom + anchorYOffset;
                  caretPositions[charIndex * 4 + 3] = line.baseline + fontData2.caretTop + anchorYOffset;
                  const ligCount = charIndex - prevCharIndex;
                  if (ligCount > 1) {
                    fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
                  }
                  prevCharIndex = charIndex;
                }
                if (colorRanges) {
                  const { charIndex } = glyphInfo;
                  while (charIndex > colorCharIndex) {
                    colorCharIndex++;
                    if (colorRanges.hasOwnProperty(colorCharIndex)) {
                      currentColor = colorRanges[colorCharIndex];
                    }
                  }
                }
                if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
                  const idx = renderableGlyphIndex++;
                  const { fontSizeMult, src: fontSrc, index: fontIndex } = glyphInfo.fontData;
                  const fontGlyphData = glyphData[fontSrc] || (glyphData[fontSrc] = {});
                  if (!fontGlyphData[glyphId]) {
                    fontGlyphData[glyphId] = {
                      path: glyphObj.path,
                      pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]
                    };
                  }
                  const glyphX = glyphInfo.x + anchorXOffset;
                  const glyphY = glyphInfo.y + line.baseline + anchorYOffset;
                  glyphPositions[idx * 2] = glyphX;
                  glyphPositions[idx * 2 + 1] = glyphY;
                  const visX0 = glyphX + glyphObj.xMin * fontSizeMult;
                  const visY0 = glyphY + glyphObj.yMin * fontSizeMult;
                  const visX1 = glyphX + glyphObj.xMax * fontSizeMult;
                  const visY1 = glyphY + glyphObj.yMax * fontSizeMult;
                  if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;
                  if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;
                  if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;
                  if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;
                  if (idx % chunkedBoundsSize === 0) {
                    chunk = { start: idx, end: idx, rect: [INF, INF, -INF, -INF] };
                    chunkedBounds.push(chunk);
                  }
                  chunk.end++;
                  const chunkRect = chunk.rect;
                  if (visX0 < chunkRect[0]) chunkRect[0] = visX0;
                  if (visY0 < chunkRect[1]) chunkRect[1] = visY0;
                  if (visX1 > chunkRect[2]) chunkRect[2] = visX1;
                  if (visY1 > chunkRect[3]) chunkRect[3] = visY1;
                  glyphIds[idx] = glyphId;
                  glyphFontIndices[idx] = fontIndex;
                  if (colorRanges) {
                    const start = idx * 3;
                    glyphColors[start] = currentColor >> 16 & 255;
                    glyphColors[start + 1] = currentColor >> 8 & 255;
                    glyphColors[start + 2] = currentColor & 255;
                  }
                }
              }
            }
          });
          if (caretPositions) {
            const ligCount = text.length - prevCharIndex;
            if (ligCount > 1) {
              fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
            }
          }
        }
        const fontData = [];
        metricsByFont.forEach(({ index, src, unitsPerEm, ascender, descender, lineHeight: lineHeight2, capHeight, xHeight }) => {
          fontData[index] = { src, unitsPerEm, ascender, descender, lineHeight: lineHeight2, capHeight, xHeight };
        });
        timings.typesetting = now2() - typesetStart;
        callback({
          glyphIds,
          //id for each glyph, specific to that glyph's font
          glyphFontIndices,
          //index into fontData for each glyph
          glyphPositions,
          //x,y of each glyph's origin in layout
          glyphData,
          //dict holding data about each glyph appearing in the text
          fontData,
          //data about each font used in the text
          caretPositions,
          //startX,endX,bottomY caret positions for each char
          // caretHeight, //height of cursor from bottom to top - todo per glyph?
          glyphColors,
          //color for each glyph, if color ranges supplied
          chunkedBounds,
          //total rects per (n=chunkedBoundsSize) consecutive glyphs
          fontSize,
          //calculated em height
          topBaseline: anchorYOffset + lines[0].baseline,
          //y coordinate of the top line's baseline
          blockBounds: [
            //bounds for the whole block of text, including vertical padding for lineHeight
            anchorXOffset,
            anchorYOffset - totalHeight,
            anchorXOffset + maxLineWidth,
            anchorYOffset
          ],
          visibleBounds,
          //total bounds of visible text paths, may be larger or smaller than blockBounds
          timings
        });
      });
    }
    function measure(args, callback) {
      typeset({ ...args, metricsOnly: true }, (result) => {
        const [x0, y0, x1, y1] = result.blockBounds;
        callback({
          width: x1 - x0,
          height: y1 - y0
        });
      });
    }
    function parsePercent(str) {
      let match = str.match(/^([\d.]+)%$/);
      let pct = match ? parseFloat(match[1]) : NaN;
      return isNaN(pct) ? 0 : pct / 100;
    }
    function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {
      const ligStartX = caretPositions[ligStartIndex * 4];
      const ligEndX = caretPositions[ligStartIndex * 4 + 1];
      const ligBottom = caretPositions[ligStartIndex * 4 + 2];
      const ligTop = caretPositions[ligStartIndex * 4 + 3];
      const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;
      for (let i = 0; i < ligCount; i++) {
        const startIndex = (ligStartIndex + i) * 4;
        caretPositions[startIndex] = ligStartX + guessedAdvanceX * i;
        caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i + 1);
        caretPositions[startIndex + 2] = ligBottom;
        caretPositions[startIndex + 3] = ligTop;
      }
    }
    function now2() {
      return (self.performance || Date).now();
    }
    function TextLine() {
      this.data = [];
    }
    const textLineProps = ["glyphObj", "x", "y", "width", "charIndex", "fontData"];
    TextLine.prototype = {
      width: 0,
      lineHeight: 0,
      baseline: 0,
      cap: 0,
      ex: 0,
      isSoftWrapped: false,
      get count() {
        return Math.ceil(this.data.length / textLineProps.length);
      },
      glyphAt(i) {
        let fly = TextLine.flyweight;
        fly.data = this.data;
        fly.index = i;
        return fly;
      },
      splitAt(i) {
        let newLine = new TextLine();
        newLine.data = this.data.splice(i * textLineProps.length);
        return newLine;
      }
    };
    TextLine.flyweight = textLineProps.reduce((obj, prop, i, all) => {
      Object.defineProperty(obj, prop, {
        get() {
          return this.data[this.index * textLineProps.length + i];
        },
        set(val) {
          this.data[this.index * textLineProps.length + i] = val;
        }
      });
      return obj;
    }, { data: null, index: 0 });
    return {
      typeset,
      measure
    };
  }
  var now = () => (self.performance || Date).now();
  var mainThreadGenerator = /* @__PURE__ */ SDFGenerator();
  var warned;
  function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {
    if (!useWebGL) {
      return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
    }
    return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(
      null,
      (err) => {
        if (!warned) {
          console.warn(`WebGL SDF generation failed, falling back to JS`, err);
          warned = true;
        }
        return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
      }
    );
  }
  var queue = [];
  var chunkTimeBudget = 5;
  var timer = 0;
  function nextChunk() {
    const start = now();
    while (queue.length && now() - start < chunkTimeBudget) {
      queue.shift()();
    }
    timer = queue.length ? setTimeout(nextChunk, 0) : 0;
  }
  var generateSDF_GL = (...args) => {
    return new Promise((resolve, reject) => {
      queue.push(() => {
        const start = now();
        try {
          mainThreadGenerator.webgl.generateIntoCanvas(...args);
          resolve({ timing: now() - start });
        } catch (err) {
          reject(err);
        }
      });
      if (!timer) {
        timer = setTimeout(nextChunk, 0);
      }
    });
  };
  var threadCount = 4;
  var idleTimeout = 2e3;
  var threads = {};
  var callNum = 0;
  function generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {
    const workerId = "TroikaTextSDFGenerator_JS_" + callNum++ % threadCount;
    let thread = threads[workerId];
    if (!thread) {
      thread = threads[workerId] = {
        workerModule: defineWorkerModule({
          name: workerId,
          workerId,
          dependencies: [
            SDFGenerator,
            now
          ],
          init(_createSDFGenerator, now2) {
            const generate = _createSDFGenerator().javascript.generate;
            return function(...args) {
              const start = now2();
              const textureData = generate(...args);
              return {
                textureData,
                timing: now2() - start
              };
            };
          },
          getTransferables(result) {
            return [result.textureData.buffer];
          }
        }),
        requests: 0,
        idleTimer: null
      };
    }
    thread.requests++;
    clearTimeout(thread.idleTimer);
    return thread.workerModule(width, height, path, viewBox, distance, exponent).then(({ textureData, timing }) => {
      const start = now();
      const imageData = new Uint8Array(textureData.length * 4);
      for (let i = 0; i < textureData.length; i++) {
        imageData[i * 4 + channel] = textureData[i];
      }
      mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << 3 - channel);
      timing += now() - start;
      if (--thread.requests === 0) {
        thread.idleTimer = setTimeout(() => {
          terminateWorker(workerId);
        }, idleTimeout);
      }
      return { timing };
    });
  }
  function warmUpSDFCanvas(canvas) {
    if (!canvas._warm) {
      mainThreadGenerator.webgl.isSupported(canvas);
      canvas._warm = true;
    }
  }
  var resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;
  var CONFIG = {
    defaultFontURL: null,
    unicodeFontsURL: null,
    sdfGlyphSize: 64,
    sdfMargin: 1 / 16,
    sdfExponent: 9,
    textureWidth: 2048,
    useWorker: true
  };
  var tempColor = /* @__PURE__ */ new Color();
  var hasRequested = false;
  function now$1() {
    return (self.performance || Date).now();
  }
  var atlases = /* @__PURE__ */ Object.create(null);
  function getTextRenderInfo(args, callback) {
    hasRequested = true;
    args = assign2({}, args);
    const totalStart = now$1();
    const { defaultFontURL } = CONFIG;
    const fonts = [];
    if (defaultFontURL) {
      fonts.push({ label: "default", src: toAbsoluteURL(defaultFontURL) });
    }
    if (args.font) {
      fonts.push({ label: "user", src: toAbsoluteURL(args.font) });
    }
    args.font = fonts;
    args.text = "" + args.text;
    args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;
    args.unicodeFontsURL = args.unicodeFontsURL || CONFIG.unicodeFontsURL;
    if (args.colorRanges != null) {
      let colors = {};
      for (let key in args.colorRanges) {
        if (args.colorRanges.hasOwnProperty(key)) {
          let val = args.colorRanges[key];
          if (typeof val !== "number") {
            val = tempColor.set(val).getHex();
          }
          colors[key] = val;
        }
      }
      args.colorRanges = colors;
    }
    Object.freeze(args);
    const { textureWidth, sdfExponent } = CONFIG;
    const { sdfGlyphSize } = args;
    const glyphsPerRow = textureWidth / sdfGlyphSize * 4;
    let atlas = atlases[sdfGlyphSize];
    if (!atlas) {
      const canvas = document.createElement("canvas");
      canvas.width = textureWidth;
      canvas.height = sdfGlyphSize * 256 / glyphsPerRow;
      atlas = atlases[sdfGlyphSize] = {
        glyphCount: 0,
        sdfGlyphSize,
        sdfCanvas: canvas,
        sdfTexture: new Texture(
          canvas,
          void 0,
          void 0,
          void 0,
          LinearFilter,
          LinearFilter
        ),
        contextLost: false,
        glyphsByFont: /* @__PURE__ */ new Map()
      };
      atlas.sdfTexture.generateMipmaps = false;
      initContextLossHandling(atlas);
    }
    const { sdfTexture, sdfCanvas } = atlas;
    const typeset = CONFIG.useWorker ? typesetInWorker : typesetOnMainThread;
    typeset(args).then((result) => {
      const { glyphIds, glyphFontIndices, fontData, glyphPositions, fontSize, timings } = result;
      const neededSDFs = [];
      const glyphBounds = new Float32Array(glyphIds.length * 4);
      let boundsIdx = 0;
      let positionsIdx = 0;
      const quadsStart = now$1();
      const fontGlyphMaps = fontData.map((font) => {
        let map = atlas.glyphsByFont.get(font.src);
        if (!map) {
          atlas.glyphsByFont.set(font.src, map = /* @__PURE__ */ new Map());
        }
        return map;
      });
      glyphIds.forEach((glyphId, i) => {
        const fontIndex = glyphFontIndices[i];
        const { src: fontSrc, unitsPerEm } = fontData[fontIndex];
        let glyphInfo = fontGlyphMaps[fontIndex].get(glyphId);
        if (!glyphInfo) {
          const { path, pathBounds } = result.glyphData[fontSrc][glyphId];
          const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1]) / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);
          const atlasIndex = atlas.glyphCount++;
          const sdfViewBox2 = [
            pathBounds[0] - fontUnitsMargin,
            pathBounds[1] - fontUnitsMargin,
            pathBounds[2] + fontUnitsMargin,
            pathBounds[3] + fontUnitsMargin
          ];
          fontGlyphMaps[fontIndex].set(glyphId, glyphInfo = { path, atlasIndex, sdfViewBox: sdfViewBox2 });
          neededSDFs.push(glyphInfo);
        }
        const { sdfViewBox } = glyphInfo;
        const posX = glyphPositions[positionsIdx++];
        const posY = glyphPositions[positionsIdx++];
        const fontSizeMult = fontSize / unitsPerEm;
        glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;
        glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;
        glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;
        glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;
        glyphIds[i] = glyphInfo.atlasIndex;
      });
      timings.quads = (timings.quads || 0) + (now$1() - quadsStart);
      const sdfStart = now$1();
      timings.sdf = {};
      const currentHeight = sdfCanvas.height;
      const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);
      const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));
      if (neededHeight > currentHeight) {
        console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);
        resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);
        sdfTexture.dispose();
      }
      Promise.all(neededSDFs.map(
        (glyphInfo) => generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({ timing }) => {
          timings.sdf[glyphInfo.atlasIndex] = timing;
        })
      )).then(() => {
        if (neededSDFs.length && !atlas.contextLost) {
          safariPre15Workaround(atlas);
          sdfTexture.needsUpdate = true;
        }
        timings.sdfTotal = now$1() - sdfStart;
        timings.total = now$1() - totalStart;
        callback(Object.freeze({
          parameters: args,
          sdfTexture,
          sdfGlyphSize,
          sdfExponent,
          glyphBounds,
          glyphAtlasIndices: glyphIds,
          glyphColors: result.glyphColors,
          caretPositions: result.caretPositions,
          chunkedBounds: result.chunkedBounds,
          ascender: result.ascender,
          descender: result.descender,
          lineHeight: result.lineHeight,
          capHeight: result.capHeight,
          xHeight: result.xHeight,
          topBaseline: result.topBaseline,
          blockBounds: result.blockBounds,
          visibleBounds: result.visibleBounds,
          timings: result.timings
        }));
      });
    });
    Promise.resolve().then(() => {
      if (!atlas.contextLost) {
        warmUpSDFCanvas(sdfCanvas);
      }
    });
  }
  function generateGlyphSDF({ path, atlasIndex, sdfViewBox }, { sdfGlyphSize, sdfCanvas, contextLost }, useGPU) {
    if (contextLost) {
      return Promise.resolve({ timing: -1 });
    }
    const { textureWidth, sdfExponent } = CONFIG;
    const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);
    const squareIndex = Math.floor(atlasIndex / 4);
    const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;
    const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;
    const channel = atlasIndex % 4;
    return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU);
  }
  function initContextLossHandling(atlas) {
    const canvas = atlas.sdfCanvas;
    canvas.addEventListener("webglcontextlost", (event) => {
      console.log("Context Lost", event);
      event.preventDefault();
      atlas.contextLost = true;
    });
    canvas.addEventListener("webglcontextrestored", (event) => {
      console.log("Context Restored", event);
      atlas.contextLost = false;
      const promises = [];
      atlas.glyphsByFont.forEach((glyphMap) => {
        glyphMap.forEach((glyph) => {
          promises.push(generateGlyphSDF(glyph, atlas, true));
        });
      });
      Promise.all(promises).then(() => {
        safariPre15Workaround(atlas);
        atlas.sdfTexture.needsUpdate = true;
      });
    });
  }
  function assign2(toObj, fromObj) {
    for (let key in fromObj) {
      if (fromObj.hasOwnProperty(key)) {
        toObj[key] = fromObj[key];
      }
    }
    return toObj;
  }
  var linkEl;
  function toAbsoluteURL(path) {
    if (!linkEl) {
      linkEl = typeof document === "undefined" ? {} : document.createElement("a");
    }
    linkEl.href = path;
    return linkEl.href;
  }
  function safariPre15Workaround(atlas) {
    if (typeof createImageBitmap !== "function") {
      console.info("Safari<15: applying SDF canvas workaround");
      const { sdfCanvas, sdfTexture } = atlas;
      const { width, height } = sdfCanvas;
      const gl = atlas.sdfCanvas.getContext("webgl");
      let pixels = sdfTexture.image.data;
      if (!pixels || pixels.length !== width * height * 4) {
        pixels = new Uint8Array(width * height * 4);
        sdfTexture.image = { width, height, data: pixels };
        sdfTexture.flipY = false;
        sdfTexture.isDataTexture = true;
      }
      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
    }
  }
  var typesetterWorkerModule = /* @__PURE__ */ defineWorkerModule({
    name: "Typesetter",
    dependencies: [
      createTypesetter,
      fontResolverWorkerModule,
      bidi_default
    ],
    init(createTypesetter2, fontResolver, bidiFactory2) {
      return createTypesetter2(fontResolver, bidiFactory2());
    }
  });
  var typesetInWorker = /* @__PURE__ */ defineWorkerModule({
    name: "Typesetter",
    dependencies: [
      typesetterWorkerModule
    ],
    init(typesetter) {
      return function(args) {
        return new Promise((resolve) => {
          typesetter.typeset(args, resolve);
        });
      };
    },
    getTransferables(result) {
      const transferables = [];
      for (let p in result) {
        if (result[p] && result[p].buffer) {
          transferables.push(result[p].buffer);
        }
      }
      return transferables;
    }
  });
  var typesetOnMainThread = typesetInWorker.onMainThread;
  var templateGeometries = {};
  function getTemplateGeometry(detail) {
    let geom = templateGeometries[detail];
    if (!geom) {
      geom = templateGeometries[detail] = new PlaneGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);
    }
    return geom;
  }
  var glyphBoundsAttrName = "aTroikaGlyphBounds";
  var glyphIndexAttrName = "aTroikaGlyphIndex";
  var glyphColorAttrName = "aTroikaGlyphColor";
  var GlyphsGeometry = class extends InstancedBufferGeometry {
    constructor() {
      super();
      this.detail = 1;
      this.curveRadius = 0;
      this.groups = [
        { start: 0, count: Infinity, materialIndex: 0 },
        { start: 0, count: Infinity, materialIndex: 1 }
      ];
      this.boundingSphere = new Sphere();
      this.boundingBox = new Box3();
    }
    computeBoundingSphere() {
    }
    computeBoundingBox() {
    }
    set detail(detail) {
      if (detail !== this._detail) {
        this._detail = detail;
        if (typeof detail !== "number" || detail < 1) {
          detail = 1;
        }
        let tpl = getTemplateGeometry(detail);
        ["position", "normal", "uv"].forEach((attr) => {
          this.attributes[attr] = tpl.attributes[attr].clone();
        });
        this.setIndex(tpl.getIndex().clone());
      }
    }
    get detail() {
      return this._detail;
    }
    set curveRadius(r) {
      if (r !== this._curveRadius) {
        this._curveRadius = r;
        this._updateBounds();
      }
    }
    get curveRadius() {
      return this._curveRadius;
    }
    /**
     * Update the geometry for a new set of glyphs.
     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs
     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1
     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within
     *        the SDF atlas texture.
     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs
     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N
     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be
     *        used with `applyClipRect` to choose an optimized `instanceCount`.
     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.
     */
    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {
      this.updateAttributeData(glyphBoundsAttrName, glyphBounds, 4);
      this.updateAttributeData(glyphIndexAttrName, glyphAtlasIndices, 1);
      this.updateAttributeData(glyphColorAttrName, glyphColors, 3);
      this._blockBounds = blockBounds;
      this._chunkedBounds = chunkedBounds;
      this.instanceCount = glyphAtlasIndices.length;
      this._updateBounds();
    }
    _updateBounds() {
      const bounds = this._blockBounds;
      if (bounds) {
        const { curveRadius, boundingBox: bbox } = this;
        if (curveRadius) {
          const { PI, floor, min, max, sin, cos } = Math;
          const halfPi = PI / 2;
          const twoPi = PI * 2;
          const absR = Math.abs(curveRadius);
          const leftAngle = bounds[0] / absR;
          const rightAngle = bounds[2] / absR;
          const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi) ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi) ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi) ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);
          bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);
          bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);
        } else {
          bbox.min.set(bounds[0], bounds[1], 0);
          bbox.max.set(bounds[2], bounds[3], 0);
        }
        bbox.getBoundingSphere(this.boundingSphere);
      }
    }
    /**
     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest
     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization
     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would
     * be clipped anyway.
     *
     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting
     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the
     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,
     * but at the expense of much larger attribute buffers (see classdoc above.)
     *
     * @param {Vector4} clipRect
     */
    applyClipRect(clipRect) {
      let count = this.getAttribute(glyphIndexAttrName).count;
      let chunks = this._chunkedBounds;
      if (chunks) {
        for (let i = chunks.length; i--; ) {
          count = chunks[i].end;
          let rect = chunks[i].rect;
          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {
            break;
          }
        }
      }
      this.instanceCount = count;
    }
    /**
     * Utility for updating instance attributes with automatic resizing
     */
    updateAttributeData(attrName, newArray, itemSize) {
      const attr = this.getAttribute(attrName);
      if (newArray) {
        if (attr && attr.array.length === newArray.length) {
          attr.array.set(newArray);
          attr.needsUpdate = true;
        } else {
          this.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));
          delete this._maxInstanceCount;
          this.dispose();
        }
      } else if (attr) {
        this.deleteAttribute(attrName);
      }
    }
  };
  var VERTEX_DEFS = `
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform vec4 uTroikaTotalBounds;
uniform vec4 uTroikaClipRect;
uniform mat3 uTroikaOrient;
uniform bool uTroikaUseGlyphColors;
uniform float uTroikaEdgeOffset;
uniform float uTroikaBlurRadius;
uniform vec2 uTroikaPositionOffset;
uniform float uTroikaCurveRadius;
attribute vec4 aTroikaGlyphBounds;
attribute float aTroikaGlyphIndex;
attribute vec3 aTroikaGlyphColor;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec3 vTroikaGlyphColor;
varying vec2 vTroikaGlyphDimensions;
`;
  var VERTEX_TRANSFORM = `
vec4 bounds = aTroikaGlyphBounds;
bounds.xz += uTroikaPositionOffset.x;
bounds.yw -= uTroikaPositionOffset.y;

vec4 outlineBounds = vec4(
  bounds.xy - uTroikaEdgeOffset - uTroikaBlurRadius,
  bounds.zw + uTroikaEdgeOffset + uTroikaBlurRadius
);
vec4 clippedBounds = vec4(
  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),
  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)
);

vec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);

position.xy = mix(bounds.xy, bounds.zw, clippedXY);

uv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);

float rad = uTroikaCurveRadius;
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);
  normal.xz = vec2(sin(angle), cos(angle));
}
  
position = uTroikaOrient * position;
normal = uTroikaOrient * normal;

vTroikaGlyphUV = clippedXY.xy;
vTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);

${""}
float txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;
vec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;
vec2 txStartUV = txUvPerSquare * vec2(
  mod(floor(aTroikaGlyphIndex / 4.0), txCols),
  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)
);
vTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);
vTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);
`;
  var FRAGMENT_DEFS = `
uniform sampler2D uTroikaSDFTexture;
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform float uTroikaSDFExponent;
uniform float uTroikaEdgeOffset;
uniform float uTroikaFillOpacity;
uniform float uTroikaBlurRadius;
uniform vec3 uTroikaStrokeColor;
uniform float uTroikaStrokeWidth;
uniform float uTroikaStrokeOpacity;
uniform bool uTroikaSDFDebug;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec2 vTroikaGlyphDimensions;

float troikaSdfValueToSignedDistance(float alpha) {
  // Inverse of exponential encoding in webgl-sdf-generator
  ${""}
  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);
  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;
  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);
  return signedDist;
}

float troikaGlyphUvToSdfValue(vec2 glyphUV) {
  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);
  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);
  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1
  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;
}

float troikaGlyphUvToDistance(vec2 uv) {
  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));
}

float troikaGetAADist() {
  ${""}
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;
  #else
  return vTroikaGlyphDimensions.x / 64.0;
  #endif
}

float troikaGetFragDistValue() {
  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);
  float distance = troikaGlyphUvToDistance(clampedGlyphUV);
 
  // Extrapolate distance when outside bounds:
  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : 
    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);

  ${""}

  return distance;
}

float troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {
  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)
  float alpha = step(-distanceOffset, -distance);
  #else

  float alpha = smoothstep(
    distanceOffset + aaDist,
    distanceOffset - aaDist,
    distance
  );
  #endif

  return alpha;
}
`;
  var FRAGMENT_TRANSFORM = `
float aaDist = troikaGetAADist();
float fragDistance = troikaGetFragDistValue();
float edgeAlpha = uTroikaSDFDebug ?
  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :
  troikaGetEdgeAlpha(fragDistance, uTroikaEdgeOffset, max(aaDist, uTroikaBlurRadius));

#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)
vec4 fillRGBA = gl_FragColor;
fillRGBA.a *= uTroikaFillOpacity;
vec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);
if (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;
gl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(
  -uTroikaStrokeWidth - aaDist,
  -uTroikaStrokeWidth + aaDist,
  fragDistance
));
gl_FragColor.a *= edgeAlpha;
#endif

if (edgeAlpha == 0.0) {
  discard;
}
`;
  function createTextDerivedMaterial(baseMaterial) {
    const textMaterial = createDerivedMaterial(baseMaterial, {
      chained: true,
      extensions: {
        derivatives: true
      },
      uniforms: {
        uTroikaSDFTexture: { value: null },
        uTroikaSDFTextureSize: { value: new Vector2() },
        uTroikaSDFGlyphSize: { value: 0 },
        uTroikaSDFExponent: { value: 0 },
        uTroikaTotalBounds: { value: new Vector4(0, 0, 0, 0) },
        uTroikaClipRect: { value: new Vector4(0, 0, 0, 0) },
        uTroikaEdgeOffset: { value: 0 },
        uTroikaFillOpacity: { value: 1 },
        uTroikaPositionOffset: { value: new Vector2() },
        uTroikaCurveRadius: { value: 0 },
        uTroikaBlurRadius: { value: 0 },
        uTroikaStrokeWidth: { value: 0 },
        uTroikaStrokeColor: { value: new Color() },
        uTroikaStrokeOpacity: { value: 1 },
        uTroikaOrient: { value: new Matrix3() },
        uTroikaUseGlyphColors: { value: true },
        uTroikaSDFDebug: { value: false }
      },
      vertexDefs: VERTEX_DEFS,
      vertexTransform: VERTEX_TRANSFORM,
      fragmentDefs: FRAGMENT_DEFS,
      fragmentColorTransform: FRAGMENT_TRANSFORM,
      customRewriter({ vertexShader, fragmentShader }) {
        let uDiffuseRE = /\buniform\s+vec3\s+diffuse\b/;
        if (uDiffuseRE.test(fragmentShader)) {
          fragmentShader = fragmentShader.replace(uDiffuseRE, "varying vec3 vTroikaGlyphColor").replace(/\bdiffuse\b/g, "vTroikaGlyphColor");
          if (!uDiffuseRE.test(vertexShader)) {
            vertexShader = vertexShader.replace(
              voidMainRegExp,
              "uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n"
            );
          }
        }
        return { vertexShader, fragmentShader };
      }
    });
    textMaterial.transparent = true;
    textMaterial.forceSinglePass = true;
    Object.defineProperties(textMaterial, {
      isTroikaTextMaterial: { value: true },
      // WebGLShadowMap reverses the side of the shadow material by default, which fails
      // for planes, so here we force the `shadowSide` to always match the main side.
      shadowSide: {
        get() {
          return this.side;
        },
        set() {
        }
      }
    });
    return textMaterial;
  }
  var defaultMaterial = /* @__PURE__ */ new MeshBasicMaterial({
    color: 16777215,
    side: DoubleSide,
    transparent: true
  });
  var defaultStrokeColor = 8421504;
  var tempMat4 = /* @__PURE__ */ new Matrix4();
  var tempVec3a = /* @__PURE__ */ new Vector3();
  var tempVec3b = /* @__PURE__ */ new Vector3();
  var tempArray = [];
  var origin = /* @__PURE__ */ new Vector3();
  var defaultOrient = "+x+y";
  function first(o) {
    return Array.isArray(o) ? o[0] : o;
  }
  var getFlatRaycastMesh = () => {
    const mesh = new Mesh(
      new PlaneGeometry(1, 1),
      defaultMaterial
    );
    getFlatRaycastMesh = () => mesh;
    return mesh;
  };
  var getCurvedRaycastMesh = () => {
    const mesh = new Mesh(
      new PlaneGeometry(1, 1, 32, 1),
      defaultMaterial
    );
    getCurvedRaycastMesh = () => mesh;
    return mesh;
  };
  var syncStartEvent = { type: "syncstart" };
  var syncCompleteEvent = { type: "synccomplete" };
  var SYNCABLE_PROPS = [
    "font",
    "fontSize",
    "fontStyle",
    "fontWeight",
    "lang",
    "letterSpacing",
    "lineHeight",
    "maxWidth",
    "overflowWrap",
    "text",
    "direction",
    "textAlign",
    "textIndent",
    "whiteSpace",
    "anchorX",
    "anchorY",
    "colorRanges",
    "sdfGlyphSize"
  ];
  var COPYABLE_PROPS = SYNCABLE_PROPS.concat(
    "material",
    "color",
    "depthOffset",
    "clipRect",
    "curveRadius",
    "orientation",
    "glyphGeometryDetail"
  );
  var Text = class extends Mesh {
    constructor() {
      const geometry = new GlyphsGeometry();
      super(geometry, null);
      this.text = "";
      this.anchorX = 0;
      this.anchorY = 0;
      this.curveRadius = 0;
      this.direction = "auto";
      this.font = null;
      this.unicodeFontsURL = null;
      this.fontSize = 0.1;
      this.fontWeight = "normal";
      this.fontStyle = "normal";
      this.lang = null;
      this.letterSpacing = 0;
      this.lineHeight = "normal";
      this.maxWidth = Infinity;
      this.overflowWrap = "normal";
      this.textAlign = "left";
      this.textIndent = 0;
      this.whiteSpace = "normal";
      this.material = null;
      this.color = null;
      this.colorRanges = null;
      this.outlineWidth = 0;
      this.outlineColor = 0;
      this.outlineOpacity = 1;
      this.outlineBlur = 0;
      this.outlineOffsetX = 0;
      this.outlineOffsetY = 0;
      this.strokeWidth = 0;
      this.strokeColor = defaultStrokeColor;
      this.strokeOpacity = 1;
      this.fillOpacity = 1;
      this.depthOffset = 0;
      this.clipRect = null;
      this.orientation = defaultOrient;
      this.glyphGeometryDetail = 1;
      this.sdfGlyphSize = null;
      this.gpuAccelerateSDF = true;
      this.debugSDF = false;
    }
    /**
     * Updates the text rendering according to the current text-related configuration properties.
     * This is an async process, so you can pass in a callback function to be executed when it
     * finishes.
     * @param {function} [callback]
     */
    sync(callback) {
      if (this._needsSync) {
        this._needsSync = false;
        if (this._isSyncing) {
          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);
        } else {
          this._isSyncing = true;
          this.dispatchEvent(syncStartEvent);
          getTextRenderInfo({
            text: this.text,
            font: this.font,
            lang: this.lang,
            fontSize: this.fontSize || 0.1,
            fontWeight: this.fontWeight || "normal",
            fontStyle: this.fontStyle || "normal",
            letterSpacing: this.letterSpacing || 0,
            lineHeight: this.lineHeight || "normal",
            maxWidth: this.maxWidth,
            direction: this.direction || "auto",
            textAlign: this.textAlign,
            textIndent: this.textIndent,
            whiteSpace: this.whiteSpace,
            overflowWrap: this.overflowWrap,
            anchorX: this.anchorX,
            anchorY: this.anchorY,
            colorRanges: this.colorRanges,
            includeCaretPositions: true,
            //TODO parameterize
            sdfGlyphSize: this.sdfGlyphSize,
            gpuAccelerateSDF: this.gpuAccelerateSDF,
            unicodeFontsURL: this.unicodeFontsURL
          }, (textRenderInfo) => {
            this._isSyncing = false;
            this._textRenderInfo = textRenderInfo;
            this.geometry.updateGlyphs(
              textRenderInfo.glyphBounds,
              textRenderInfo.glyphAtlasIndices,
              textRenderInfo.blockBounds,
              textRenderInfo.chunkedBounds,
              textRenderInfo.glyphColors
            );
            const queued = this._queuedSyncs;
            if (queued) {
              this._queuedSyncs = null;
              this._needsSync = true;
              this.sync(() => {
                queued.forEach((fn) => fn && fn());
              });
            }
            this.dispatchEvent(syncCompleteEvent);
            if (callback) {
              callback();
            }
          });
        }
      }
    }
    /**
     * Initiate a sync if needed - note it won't complete until next frame at the
     * earliest so if possible it's a good idea to call sync() manually as soon as
     * all the properties have been set.
     * @override
     */
    onBeforeRender(renderer, scene, camera, geometry, material, group) {
      this.sync();
      if (material.isTroikaTextMaterial) {
        this._prepareForRender(material);
      }
    }
    /**
     * Shortcut to dispose the geometry specific to this instance.
     * Note: we don't also dispose the derived material here because if anything else is
     * sharing the same base material it will result in a pause next frame as the program
     * is recompiled. Instead users can dispose the base material manually, like normal,
     * and we'll also dispose the derived material at that time.
     */
    dispose() {
      this.geometry.dispose();
    }
    /**
     * @property {TroikaTextRenderInfo|null} textRenderInfo
     * @readonly
     * The current processed rendering data for this TextMesh, returned by the TextBuilder after
     * a `sync()` call. This will be `null` initially, and may be stale for a short period until
     * the asynchrous `sync()` process completes.
     */
    get textRenderInfo() {
      return this._textRenderInfo || null;
    }
    /**
     * Create the text derived material from the base material. Can be overridden to use a custom
     * derived material.
     */
    createDerivedMaterial(baseMaterial) {
      return createTextDerivedMaterial(baseMaterial);
    }
    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping
    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.
    get material() {
      let derivedMaterial = this._derivedMaterial;
      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());
      if (!derivedMaterial || !derivedMaterial.isDerivedFrom(baseMaterial)) {
        derivedMaterial = this._derivedMaterial = this.createDerivedMaterial(baseMaterial);
        baseMaterial.addEventListener("dispose", function onDispose() {
          baseMaterial.removeEventListener("dispose", onDispose);
          derivedMaterial.dispose();
        });
      }
      if (this.hasOutline()) {
        let outlineMaterial = derivedMaterial._outlineMtl;
        if (!outlineMaterial) {
          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {
            id: { value: derivedMaterial.id + 0.1 }
          });
          outlineMaterial.isTextOutlineMaterial = true;
          outlineMaterial.depthWrite = false;
          outlineMaterial.map = null;
          derivedMaterial.addEventListener("dispose", function onDispose() {
            derivedMaterial.removeEventListener("dispose", onDispose);
            outlineMaterial.dispose();
          });
        }
        return [
          outlineMaterial,
          derivedMaterial
        ];
      } else {
        return derivedMaterial;
      }
    }
    set material(baseMaterial) {
      if (baseMaterial && baseMaterial.isTroikaTextMaterial) {
        this._derivedMaterial = baseMaterial;
        this._baseMaterial = baseMaterial.baseMaterial;
      } else {
        this._baseMaterial = baseMaterial;
      }
    }
    hasOutline() {
      return !!(this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY);
    }
    get glyphGeometryDetail() {
      return this.geometry.detail;
    }
    set glyphGeometryDetail(detail) {
      this.geometry.detail = detail;
    }
    get curveRadius() {
      return this.geometry.curveRadius;
    }
    set curveRadius(r) {
      this.geometry.curveRadius = r;
    }
    // Create and update material for shadows upon request:
    get customDepthMaterial() {
      return first(this.material).getDepthMaterial();
    }
    get customDistanceMaterial() {
      return first(this.material).getDistanceMaterial();
    }
    _prepareForRender(material) {
      const isOutline = material.isTextOutlineMaterial;
      const uniforms = material.uniforms;
      const textInfo = this.textRenderInfo;
      if (textInfo) {
        const { sdfTexture, blockBounds } = textInfo;
        uniforms.uTroikaSDFTexture.value = sdfTexture;
        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);
        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;
        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;
        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);
        uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;
        let distanceOffset = 0;
        let blurRadius = 0;
        let strokeWidth = 0;
        let fillOpacity;
        let strokeOpacity;
        let strokeColor;
        let offsetX = 0;
        let offsetY = 0;
        if (isOutline) {
          let { outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity } = this;
          distanceOffset = this._parsePercent(outlineWidth) || 0;
          blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);
          fillOpacity = outlineOpacity;
          offsetX = this._parsePercent(outlineOffsetX) || 0;
          offsetY = this._parsePercent(outlineOffsetY) || 0;
        } else {
          strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);
          if (strokeWidth) {
            strokeColor = this.strokeColor;
            uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);
            strokeOpacity = this.strokeOpacity;
            if (strokeOpacity == null) strokeOpacity = 1;
          }
          fillOpacity = this.fillOpacity;
        }
        uniforms.uTroikaEdgeOffset.value = distanceOffset;
        uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);
        uniforms.uTroikaBlurRadius.value = blurRadius;
        uniforms.uTroikaStrokeWidth.value = strokeWidth;
        uniforms.uTroikaStrokeOpacity.value = strokeOpacity;
        uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;
        uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;
        let clipRect = this.clipRect;
        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {
          uniforms.uTroikaClipRect.value.fromArray(clipRect);
        } else {
          const pad = (this.fontSize || 0.1) * 100;
          uniforms.uTroikaClipRect.value.set(
            blockBounds[0] - pad,
            blockBounds[1] - pad,
            blockBounds[2] + pad,
            blockBounds[3] + pad
          );
        }
        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);
      }
      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;
      material.polygonOffset = !!this.depthOffset;
      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;
      const color = isOutline ? this.outlineColor || 0 : this.color;
      if (color == null) {
        delete material.color;
      } else {
        const colorObj = material.hasOwnProperty("color") ? material.color : material.color = new Color();
        if (color !== colorObj._input || typeof color === "object") {
          colorObj.set(colorObj._input = color);
        }
      }
      let orient = this.orientation || defaultOrient;
      if (orient !== material._orientation) {
        let rotMat = uniforms.uTroikaOrient.value;
        orient = orient.replace(/[^-+xyz]/g, "");
        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);
        if (match) {
          let [, hSign, hAxis, vSign, vAxis] = match;
          tempVec3a.set(0, 0, 0)[hAxis] = hSign === "-" ? 1 : -1;
          tempVec3b.set(0, 0, 0)[vAxis] = vSign === "-" ? -1 : 1;
          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);
          rotMat.setFromMatrix4(tempMat4);
        } else {
          rotMat.identity();
        }
        material._orientation = orient;
      }
    }
    _parsePercent(value2) {
      if (typeof value2 === "string") {
        let match = value2.match(/^(-?[\d.]+)%$/);
        let pct = match ? parseFloat(match[1]) : NaN;
        value2 = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;
      }
      return value2;
    }
    /**
     * Translate a point in local space to an x/y in the text plane.
     */
    localPositionToTextCoords(position, target = new Vector2()) {
      target.copy(position);
      const r = this.curveRadius;
      if (r) {
        target.x = Math.atan2(position.x, Math.abs(r) - Math.abs(position.z)) * Math.abs(r);
      }
      return target;
    }
    /**
     * Translate a point in world space to an x/y in the text plane.
     */
    worldPositionToTextCoords(position, target = new Vector2()) {
      tempVec3a.copy(position);
      return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target);
    }
    /**
     * @override Custom raycasting to test against the whole text block's max rectangular bounds
     * TODO is there any reason to make this more granular, like within individual line or glyph rects?
     */
    raycast(raycaster, intersects) {
      const { textRenderInfo, curveRadius } = this;
      if (textRenderInfo) {
        const bounds = textRenderInfo.blockBounds;
        const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();
        const geom = raycastMesh.geometry;
        const { position, uv } = geom.attributes;
        for (let i = 0; i < uv.count; i++) {
          let x = bounds[0] + uv.getX(i) * (bounds[2] - bounds[0]);
          const y = bounds[1] + uv.getY(i) * (bounds[3] - bounds[1]);
          let z = 0;
          if (curveRadius) {
            z = curveRadius - Math.cos(x / curveRadius) * curveRadius;
            x = Math.sin(x / curveRadius) * curveRadius;
          }
          position.setXYZ(i, x, y, z);
        }
        geom.boundingSphere = this.geometry.boundingSphere;
        geom.boundingBox = this.geometry.boundingBox;
        raycastMesh.matrixWorld = this.matrixWorld;
        raycastMesh.material.side = this.material.side;
        tempArray.length = 0;
        raycastMesh.raycast(raycaster, tempArray);
        for (let i = 0; i < tempArray.length; i++) {
          tempArray[i].object = this;
          intersects.push(tempArray[i]);
        }
      }
    }
    copy(source) {
      const geom = this.geometry;
      super.copy(source);
      this.geometry = geom;
      COPYABLE_PROPS.forEach((prop) => {
        this[prop] = source[prop];
      });
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  SYNCABLE_PROPS.forEach((prop) => {
    const privateKey = "_private_" + prop;
    Object.defineProperty(Text.prototype, prop, {
      get() {
        return this[privateKey];
      },
      set(value2) {
        if (value2 !== this[privateKey]) {
          this[privateKey] = value2;
          this._needsSync = true;
        }
      }
    });
  });
  var tempBox3 = new Box3();
  var tempColor$1 = new Color();

  // src/webgl/focus-and-highlight-user.js
  var higlightUserStack;
  function focusAndHighlightUser({ shortDID, users, scene, camera, moveAndPauseRotation }) {
    const MAX_HIGHLIGHT_COUNT = 25;
    while (higlightUserStack?.length > MAX_HIGHLIGHT_COUNT) {
      const early = higlightUserStack.shift();
      early?.dispose?.();
    }
    const existingEntry = higlightUserStack?.find((entry) => entry.shortDID === shortDID);
    if (existingEntry) {
      existingEntry.highlight();
      return;
    }
    const user = users[shortDID];
    const r = distance2D(user.x, user.y, 0, 0);
    const angle = Math.atan2(user.y, user.x);
    const xPlus = (r + 0.09) * Math.cos(angle);
    const yPlus = (r + 0.09) * Math.sin(angle);
    const hPlus = user.h + 0.04;
    const userColor = rndUserColorer(shortDID);
    const material = new MeshLambertMaterial({
      color: userColor,
      transparent: true,
      opacity: 0.9
      // emissive: userColor,
    });
    const stem = new CylinderGeometry(5e-4, 1e-5, 1e-3);
    const ball = new SphereGeometry(2e-3);
    const stemMesh = new Mesh(stem, material);
    const ballMesh = new Mesh(ball, material);
    stemMesh.position.set(user.x, user.h + 62e-4, user.y);
    stemMesh.scale.set(1, 11.5, 1);
    ballMesh.position.set(user.x, user.h + 0.0136, user.y);
    scene.add(stemMesh);
    scene.add(ballMesh);
    const handleText = new Text();
    handleText.text = "@" + user.shortHandle;
    handleText.fontSize = 0.01;
    handleText.color = userColor;
    handleText.outlineWidth = 5e-4;
    handleText.outlineBlur = 5e-3;
    handleText.position.set(-5e-3, 0.03, 0);
    handleText.onAfterRender = () => {
      applyTextBillboarding();
    };
    const group = new Group();
    group.position.set(user.x, user.h, user.y);
    group.add(
      /** @type {*} */
      handleText
    );
    const displayNameText = user.displayName ? new Text() : void 0;
    if (displayNameText) {
      displayNameText.text = /** @type {string} */
      user.displayName;
      displayNameText.fontSize = 4e-3;
      const co = new Color(userColor);
      co.offsetHSL(0, 0, 0.15);
      displayNameText.color = co.getHex();
      displayNameText.outlineWidth = 3e-4;
      displayNameText.outlineBlur = 5e-3;
      displayNameText.position.set(5e-3, 0.017, 1e-4);
      displayNameText.fontWeight = /** @type {*} */
      200;
      group.add(
        /** @type {*} */
        displayNameText
      );
    }
    scene.add(group);
    handleText.sync();
    if (displayNameText) displayNameText.sync();
    highlightUser();
    if (!higlightUserStack) higlightUserStack = [{ shortDID, dispose: unhighlightUser, highlight: highlightUser }];
    else higlightUserStack.push({ shortDID, dispose: unhighlightUser, highlight: highlightUser });
    function applyTextBillboarding() {
      group.rotation.y = Math.atan2(
        camera.position.x - group.position.x,
        camera.position.z - group.position.z
      );
      handleText.sync();
    }
    function highlightUser() {
      moveAndPauseRotation({ x: xPlus, y: yPlus, h: hPlus }, user);
    }
    function unhighlightUser() {
      scene.remove(group);
      handleText.dispose();
      scene.remove(stemMesh);
      scene.remove(ballMesh);
      material.dispose();
      stem.dispose();
      ball.dispose();
      focusAndHighlightUser.unhighlightUser = void 0;
    }
  }

  // src/webgl/handle-window-resizes.js
  function handleWindowResizes(camera, renderer) {
    window.addEventListener("resize", onWindowResize);
    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }
  }

  // src/coldsky-borrow/is-promise.js
  function isPromise(x) {
    if (!x || typeof x !== "object") return false;
    else return typeof x.then === "function";
  }

  // src/coldsky-borrow/shorten.js
  function shortenDID(did) {
    return did && /** @type {T} */
    (did.replace(_shortenDID_Regex, "").toLowerCase() || void 0);
  }
  var _shortenDID_Regex = /^did\:plc\:/;
  function unwrapShortDID(shortDID) {
    return (
      /** @type {T} */
      !shortDID ? void 0 : shortDID.indexOf(":") < 0 ? "did:plc:" + shortDID.toLowerCase() : shortDID.toLowerCase()
    );
  }
  var offsetTooLarge = Date.UTC(2022, 1, 1);
  function breakFeedURI(uri) {
    if (!uri) return;
    const match = _breakFeedUri_Regex.exec(uri);
    if (!match || !match[4]) return;
    if (match[3] === "app.bsky.feed.post") return { shortDID: shortenDID(match[2]), postID: match[4] };
    return { shortDID: match[2], postID: match[4], feedType: match[3] };
  }
  var _breakFeedUri_Regex = /^at\:\/\/(did:plc:)?([a-z0-9]+)\/([a-z\.]+)\/?(.*)?$/;

  // src/legacy/create-throttled-queue.js
  function createThrottledQueue(concurrency, cooldown) {
    let busy = 0;
    const result = {
      concurrency: concurrency || 3,
      cooldown: cooldown || 0,
      eventually,
      queued: (
        /** @type {{ [key: string]: Promise & { priority: number} }} */
        {}
      )
    };
    return result;
    function eventually(arg, call) {
      let entry = result.queued[arg];
      if (entry) return entry;
      let resolve, reject;
      const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
      promise._arg = arg;
      promise._call = call;
      promise._resolve = resolve;
      promise._reject = reject;
      promise.priority = 0;
      promise.then(completed, completed);
      result.queued[arg] = promise;
      setTimeout(workMore, result.cooldown);
      return (
        /** @type {*} */
        result.queued[arg] = promise
      );
    }
    function completed() {
      busy--;
      setTimeout(workMore, result.cooldown);
    }
    function workMore() {
      if (busy >= result.concurrency) return;
      let topPriorityValue;
      for (const key in result.queued) {
        const entry = result.queued[key];
        if (!topPriorityValue || entry.priority > topPriorityValue.priority)
          topPriorityValue = entry;
      }
      if (!topPriorityValue) return;
      busy++;
      const { _arg, _call, _resolve, _reject } = topPriorityValue;
      delete result.queued[_arg];
      _call(_arg).then(_resolve, _reject);
      if (busy < result.concurrency) setTimeout(workMore, result.cooldown);
    }
  }

  // src/tiles/nearest-label.js
  function nearestLabel({
    testLabel,
    tiles,
    tileX,
    tileY,
    tileDimensionCount,
    isCloseTo,
    isVisible
  }) {
    const tileLabels = tiles[tileX + tileY * tileDimensionCount];
    if (tileLabels) {
      for (const otherLabel of tileLabels) {
        if (otherLabel === /** @type {*} */
        testLabel) break;
        if (!isVisible(otherLabel)) continue;
        if (isCloseTo(otherLabel, testLabel)) return otherLabel;
      }
    }
    for (let xIndex = tileX - 1; xIndex >= 0; xIndex--) {
      const testTile = tiles[xIndex + tileY * tileDimensionCount];
      if (testTile) {
        let anyLabelsInTile = false;
        for (const otherLabel of testTile) {
          if (!isVisible(otherLabel)) continue;
          anyLabelsInTile = true;
          if (isCloseTo(otherLabel, testLabel)) return otherLabel;
        }
        if (anyLabelsInTile) break;
      }
    }
    let stopLeftAt = 0;
    for (let yIndex = tileY - 1; yIndex >= 0; yIndex--) {
      for (let xIndex = tileX; xIndex > stopLeftAt; xIndex--) {
        const testTile = tiles[xIndex + yIndex * tileDimensionCount];
        if (testTile) {
          let anyLabelsInTile = false;
          for (const otherLabel of testTile) {
            if (!isVisible(otherLabel)) continue;
            anyLabelsInTile = true;
            if (isCloseTo(otherLabel, testLabel)) return otherLabel;
          }
          if (anyLabelsInTile) {
            stopLeftAt = xIndex;
            break;
          }
        }
      }
      if (stopLeftAt === tileX) break;
    }
  }

  // src/webgl/render-geo-labels.js
  function renderGeoLabels({ users, tiles, tileDimensionCount, clock }) {
    const ANIMATE_LENGTH_SEC = 0.7;
    const MIN_SCREEN_DISTANCE = 0.5;
    const MAX_LABELS = 120;
    const avatarTextureLoader = new TextureLoader();
    const avatarRequestQueue = createThrottledQueue(3, 300);
    let avatarRequestSuccesses = 0;
    let avatarRequestFailures = 0;
    const avatarCids = {};
    const layerGroup = new Group();
    const labelsByTiles = [];
    const labelsByShortDID = {};
    const pBuf = new Vector3();
    const outcome = {
      layerGroup,
      updateWithCamera,
      labelCount: 0,
      hitTestCount: 0,
      allCachedAvatars: 0,
      avatarRequestCount: 0,
      avatarImages: 0
    };
    addFixedUsers();
    return outcome;
    function addFixedUsers() {
      const fixedUsers = getFixedUsers();
      for (const user of fixedUsers) {
        const label = createLabel(user);
        label.fixed = true;
        const xTileIndex = Math.floor((user.x + 1) / 2 * tileDimensionCount);
        const yTileIndex = Math.floor((user.y + 1) / 2 * tileDimensionCount);
        const tileIndex = xTileIndex + yTileIndex * tileDimensionCount;
        const tileBucket = labelsByTiles[tileIndex] || (labelsByTiles[tileIndex] = /* @__PURE__ */ new Set());
        tileBucket.add(label);
        labelsByShortDID[user.shortDID] = label;
        layerGroup.add(label.group);
      }
    }
    function getFixedUsers() {
      const include = [
        "oyin.bo",
        "africanceleb",
        "ohkafuimykafui",
        "jaz",
        "kite.black",
        "mathan.dev",
        "wolfigelkott.crimea.ua",
        "tressiemcphd",
        "theferocity",
        "reniadeb",
        "kevinlikesmaps",
        "rasmansa",
        "thieflord.dev",
        "twoscooters",
        "finokoye",
        "teetotaller",
        "hystericalblkns",
        "faytak",
        "xkcd.com"
      ];
      const exclude = ["dougchu"];
      const MAX_NUMBER_OF_LARGEST = 300;
      const MIN_DISTANCE = 0.1;
      const fixedUsers = [];
      const largestUsers = [];
      for (const user of users) {
        const userTooSmall = largestUsers.length === MAX_NUMBER_OF_LARGEST && user.weight <= largestUsers[largestUsers.length - 1].weight;
        if (userTooSmall && fixedUsers.length === include.length) continue;
        if (exclude.indexOf(user.shortHandle) >= 0) continue;
        if (include.indexOf(user.shortHandle) >= 0) {
          fixedUsers.push(user);
          continue;
        }
      }
      pruneCrowdedNeighbours(largestUsers);
      return fixedUsers.concat(largestUsers);
      function pruneCrowdedNeighbours(largestUsers2) {
        for (let i = 1; i < largestUsers2.length; i++) {
          const current = largestUsers2[i];
          for (let j = 0; j < i; j++) {
            const prev = largestUsers2[j];
            const dist = distance2D(prev.x, prev.y, current.x, current.y);
            if (dist < MIN_DISTANCE) {
              largestUsers2.splice(i, 1);
              i--;
              break;
            }
          }
        }
      }
    }
    function createLabel(user) {
      let lineMaterial;
      let avatarTexture;
      let avatarMaterial;
      let avatarGeometry;
      let avatarMesh;
      let xmin, ymin, xmax, ymax;
      outcome.labelCount++;
      let disposed = false;
      const text = new Text();
      text.text = "@" + user.shortHandle;
      text.fontSize = 4e-3;
      text.color = user.colorRGB;
      text.outlineWidth = 43e-5;
      text.outlineBlur = 16e-4;
      text.position.set(3e-3, 4e-3, 0);
      text.sync(() => {
        const visibleBounds = text.textRenderInfo?.visibleBounds;
        if (!visibleBounds) return;
        [xmin, ymin, xmax, ymax] = visibleBounds;
        if (!lineMaterial)
          lineMaterial = new MeshBasicMaterial({ color: user.colorRGB, transparent: true });
        const underlineOffset = -6e-3;
        const startOffset = 15e-4;
        const geometry = new BufferGeometry().setFromPoints([
          new Vector3(0, 0, 0),
          new Vector3(xmin + text.position.x + startOffset, text.position.y + underlineOffset, 0),
          new Vector3(xmax + text.position.x, text.position.y + underlineOffset, 0)
        ]);
        const line = new Line(geometry, lineMaterial);
        group.add(line);
      });
      const group = new Group();
      group.position.set(user.x, user.h, user.y);
      group.add(
        /** @type {*} */
        text
      );
      group.rotation.z = 0.3;
      const label = {
        user,
        addedAtSec: clock.nowSeconds,
        group,
        fixed: false,
        searchResult: false,
        animationEndsAtSec: clock.nowSeconds + ANIMATE_LENGTH_SEC,
        visible: true,
        screenX: NaN,
        screenY: NaN,
        textWidth: NaN,
        textHeight: NaN,
        updateWithCamera: updateWithCamera2,
        dispose
      };
      retrieveAvatar();
      return label;
      function dispose() {
        disposed = true;
        group.clear();
        text.dispose();
        lineMaterial?.dispose();
        avatarTexture?.dispose();
        avatarMaterial?.dispose();
        avatarGeometry?.dispose();
        outcome.labelCount--;
        if (avatarMaterial) outcome.avatarImages--;
      }
      function updateWithCamera2(cameraPos) {
        const SCALE_LABELS_CLOSER_THAN = 0.23;
        const trueVisible = label.visible || label.animationEndsAtSec >= clock.nowSeconds;
        if (trueVisible) {
          group.visible = true;
          group.rotation.y = Math.atan2(
            cameraPos.x - group.position.x,
            cameraPos.z - group.position.z
          );
          const scale = cameraPos.distanceTo(group.position) < SCALE_LABELS_CLOSER_THAN ? cameraPos.distanceTo(group.position) / SCALE_LABELS_CLOSER_THAN : 1 + (cameraPos.distanceTo(group.position) / SCALE_LABELS_CLOSER_THAN - 1) * 0.2;
          group.scale.set(scale, scale, scale);
          if (xmin && xmax) {
            label.textWidth = (xmax - xmin) * scale;
            label.textHeight = (ymax - ymin) * scale;
          }
          const animationPhase = (clock.nowSeconds - (label.animationEndsAtSec - ANIMATE_LENGTH_SEC)) / ANIMATE_LENGTH_SEC;
          const opacity = (
            // after animation finished, steady state
            animationPhase > 1 ? label.visible ? 1 : 0 : (
              // fade in
              label.visible ? animationPhase : (
                // fade out
                1 - animationPhase
              )
            )
          );
          text.strokeOpacity = text.outlineOpacity = opacity * opacity;
          text.fillOpacity = opacity;
          if (lineMaterial && lineMaterial?.opacity !== opacity) {
            lineMaterial.opacity = opacity;
            lineMaterial.needsUpdate = true;
          }
          const avatarRequest = avatarRequestQueue.queued[user.shortDID];
          if (avatarRequest)
            avatarRequest.priority += 1;
          if (avatarMaterial && avatarMaterial.opacity !== opacity) {
            avatarMaterial.opacity = opacity;
            avatarMaterial.needsUpdate = true;
          }
          text.sync();
        } else {
          group.visible = false;
          delete avatarRequestQueue.queued[user.shortDID];
        }
      }
      function retrieveAvatar() {
        if (!avatarRequestSuccesses && avatarRequestFailures > 5) {
          avatarRequestQueue.concurrency = 0;
          return;
        }
        let avatarCidPromise = avatarCids[user.shortDID];
        if (avatarCidPromise === "none") return;
        if (typeof avatarCidPromise === "string") return makeAvatarTexture(avatarCidPromise);
        if (avatarCidPromise) avatarCidPromise.priority += 1;
        else avatarCidPromise = avatarCids[user.shortDID] = avatarRequestQueue.eventually(user.shortDID, getAvatarCid);
        if (isPromise(avatarCidPromise)) avatarCidPromise.then(makeAvatarTexture);
        else makeAvatarTexture(avatarCidPromise);
        async function getAvatarCid() {
          try {
            outcome.avatarRequestCount++;
            const plc = await fetch(
              "https://plc.directory/" + unwrapShortDID(user.shortDID) + "/log/audit"
            ).then((x) => x.json());
            let pds;
            for (const entry of plc.reverse()) {
              const endpoint = entry.operation.services?.atproto_pds?.endpoint;
              if (endpoint) {
                pds = endpoint;
                break;
              }
            }
            const data = await fetch(
              (pds || "https://bsky.social") + "/xrpc/com.atproto.repo.listRecords?repo=" + unwrapShortDID(user.shortDID) + "&collection=app.bsky.actor.profile"
            ).then((x) => x.json());
            let avatarCid = (
              /** @type {*} */
              data.records?.[0]?.value?.avatar?.ref?.$link
            );
            if (!avatarCid) avatarCid = "none";
            else avatarRequestSuccesses++;
            if (typeof avatarCids[user.shortDID] !== "string" && avatarCid !== "none") outcome.allCachedAvatars++;
            avatarCids[user.shortDID] = avatarCid;
            outcome.avatarRequestCount--;
            return avatarCid;
          } catch (avatarReqError) {
            avatarRequestFailures++;
            outcome.avatarRequestCount--;
            return "none";
          }
        }
        async function makeAvatarTexture(avatarCid) {
          if (disposed) return;
          if (!avatarCid || avatarCid === "none") return;
          if (labelsByShortDID[user.shortDID]) return;
          const avatarUrl = "https://bsky.social/xrpc/com.atproto.sync.getBlob?did=" + unwrapShortDID(user.shortDID) + "&cid=" + avatarCid;
          avatarTexture = await avatarTextureLoader.loadAsync(avatarUrl);
          if (disposed) return;
          outcome.avatarImages++;
          avatarMaterial = new MeshBasicMaterial({ map: avatarTexture, color: 16777215 });
          avatarMaterial.transparent = true;
          avatarGeometry = new CircleGeometry(14e-4, 16);
          avatarMesh = new Mesh(avatarGeometry, avatarMaterial);
          avatarMesh.position.set(5e-3, 68e-5, 0);
          text.text = text.text.slice(1);
          text.position.set(65e-4, 4e-3, 0);
          text.sync();
          group.add(avatarMesh);
        }
      }
    }
    var lastUpdateTextLabelsMsec;
    function updateWithCamera(camera) {
      const UPDATE_TEXT_LABELS_INTERVAL_MSEC = 2e3;
      const cameraPos = camera.position;
      camera.updateMatrixWorld();
      for (const tileBucket of labelsByTiles) {
        if (!tileBucket) continue;
        let removeLabels;
        for (const label of tileBucket) {
          label.updateWithCamera(cameraPos);
          if (!label.visible && !label.fixed && label.animationEndsAtSec < clock.nowSeconds) {
            if (!removeLabels) removeLabels = [label];
            else removeLabels.push(label);
          }
        }
        if (removeLabels) {
          for (const label of removeLabels) {
            tileBucket.delete(label);
            layerGroup.remove(label.group);
            label.dispose();
            delete labelsByShortDID[label.user.shortDID];
          }
        }
      }
      if (!lastUpdateTextLabelsMsec || clock.nowMSec - lastUpdateTextLabelsMsec > UPDATE_TEXT_LABELS_INTERVAL_MSEC) {
        lastUpdateTextLabelsMsec = clock.nowMSec;
        refreshDynamicLabels(camera);
      }
    }
    function refreshDynamicLabels(camera) {
      let numberOfTests = 0;
      const testArgs = (
        /** @type {Parameters<typeof nearestLabel<LabelInfo, { screenX: number, screenY: Number, visible?: boolean }>>[0]} */
        {
          tileDimensionCount,
          tileX: 0,
          tileY: 0,
          testLabel: { screenX: NaN, screenY: NaN },
          tiles: labelsByTiles,
          isCloseTo: (toLabel, testLabel) => {
            numberOfTests++;
            return Math.max(0, MIN_SCREEN_DISTANCE - labelsDistanceTo(toLabel, testLabel));
          },
          isVisible: (label) => label.visible
        }
      );
      let labelOverflow = false;
      for (let xIndex = 0; xIndex < tileDimensionCount; xIndex++) {
        for (let yIndex = 0; yIndex < tileDimensionCount; yIndex++) {
          const tileIndex = xIndex + yIndex * tileDimensionCount;
          const allTileUsers = tiles[tileIndex];
          if (!allTileUsers) continue;
          const tileLabels = labelsByTiles[tileIndex] || (labelsByTiles[tileIndex] = /* @__PURE__ */ new Set());
          testArgs.tileX = xIndex;
          testArgs.tileY = yIndex;
          for (const existingLabel of tileLabels) {
            pBuf.set(existingLabel.user.x, existingLabel.user.h, existingLabel.user.y);
            pBuf.project(camera);
            existingLabel.screenX = pBuf.x;
            existingLabel.screenY = pBuf.y;
            if (existingLabel.fixed) continue;
            testArgs.testLabel = existingLabel;
            let shouldBeRemoved = nearestLabel(testArgs);
            if (shouldBeRemoved) {
              if (existingLabel.visible) {
                existingLabel.visible = false;
                const remainingFadeTime = existingLabel.animationEndsAtSec > clock.nowSeconds ? ANIMATE_LENGTH_SEC - (existingLabel.animationEndsAtSec - clock.nowSeconds) : ANIMATE_LENGTH_SEC;
                existingLabel.animationEndsAtSec = clock.nowSeconds + remainingFadeTime;
              }
            } else {
              if (!existingLabel.visible) {
                existingLabel.visible = true;
                const remainingFadeTime = existingLabel.animationEndsAtSec > clock.nowSeconds ? ANIMATE_LENGTH_SEC - (existingLabel.animationEndsAtSec - clock.nowSeconds) : ANIMATE_LENGTH_SEC;
                existingLabel.animationEndsAtSec = clock.nowSeconds + remainingFadeTime;
              }
            }
          }
          testArgs.testLabel = { screenX: NaN, screenY: NaN };
          for (const user of allTileUsers) {
            if (labelsByShortDID[user.shortDID]) continue;
            pBuf.set(user.x, user.h, user.y);
            pBuf.project(camera);
            testArgs.testLabel.screenX = pBuf.x;
            testArgs.testLabel.screenY = pBuf.y;
            if (nearestLabel(testArgs)) {
              break;
            } else {
              if (layerGroup.children.length > MAX_LABELS) {
                labelOverflow = true;
                break;
              }
              const label = createLabel(user);
              label.screenX = pBuf.x;
              label.screenY = pBuf.y;
              tileLabels.add(label);
              layerGroup.add(label.group);
            }
          }
          if (labelOverflow) break;
        }
        if (labelOverflow) break;
      }
      outcome.hitTestCount = numberOfTests;
    }
    function labelsDistanceTo(toLabel, testLabel) {
      return distance2D(
        toLabel.screenX + (toLabel.textWidth || 0) * 0.8,
        toLabel.screenY + (toLabel.textHeight || 0) * 3,
        testLabel.screenX,
        testLabel.screenY
      );
    }
  }

  // src/webgl/search-ui/search-report-matches.js
  function searchReportMatches({ matches, subtitleArea, onChipClick }) {
    subtitleArea.innerHTML = "";
    let scroller;
    const scrollerWrapper = elem("div", {
      parent: subtitleArea,
      style: `
            position: absolute;
            width: 100%;
            height: 2.5em;
            overflow: hidden;
            font-size: 80%;
            margin-top: 0.5em;
            `,
      children: [
        scroller = elem("div", {
          parent: subtitleArea,
          style: `
            position: absolute;
            overflow: auto;
            white-space: nowrap;
            width: 100%;
            height: 4em;
            padding-top: 0.2em;
            `
        })
      ]
    });
    for (let iMatch = 0; iMatch < Math.min(10, matches.length); iMatch++) {
      const match = matches[iMatch];
      const matchElem = elem("span", {
        parent: scroller,
        style: `
                margin-left: 0.3em;
                padding: 0px 0.4em 0.2em 0.2em;
                cursor: pointer;
                display: inline-box;
                border: 1px solid rgba(255, 215, 0, 0.28);
                border-radius: 1em;
                background: rgb(88 74 0 / 78%);
                text-shadow: 1px 1px 2px #0000004f;
                box-shadow: 2px 2px 7px #000000a8;
              }
              `,
        children: [
          elem("span", {
            children: [
              elem("span", { textContent: "@", style: "opacity: 0.5; display: inline-block; transform: scale(0.8) translateY(0.05em);" }),
              match.user.shortHandle,
              !match.user.displayName ? void 0 : elem("span", {
                textContent: " " + match.user.displayName,
                style: `
                        opacity: 0.6;
                        display: inline-block;
                        zoom: 0.7;
                        transform: scaleY(1.3) translateY(0.15em);
                        transform-origin: center;
                        max-width: 6em;
                        overflow: hidden;
                        white-space: nowrap;
                        padding-left: 0.25em;
                      `
              })
            ]
          })
        ],
        onclick: () => {
          onChipClick(match.user.shortDID, matchElem);
        }
      });
    }
  }

  // src/webgl/search-ui/search-report-no-matches.js
  function searchReportNoMatches(subtitleArea) {
    subtitleArea.innerHTML = '<div style="font-style: italic; font-size: 80%; text-align: center; opacity: 0.6;">No matches.</div>';
  }

  // src/webgl/search-ui/search-ui-controller.js
  function searchUIController({ titleBarElem }) {
    var searchBar;
    var searchInput;
    var closeButton;
    var searchClosedAt = 1;
    const controller = {
      showSearch,
      closeSearch,
      /** @type {((searchText: string) => void) | undefined} */
      onSearchText: void 0,
      /** @type {(() => void) | undefined} */
      onLayout: void 0,
      /** @type {(() => void) | undefined} */
      onClose: void 0
    };
    titleBarElem.addEventListener("click", () => {
      if (Date.now() - searchClosedAt < 500) return;
      showSearch();
    });
    return controller;
    function showSearch() {
      if (!searchClosedAt) return;
      searchClosedAt = 0;
      if (!searchBar) {
        searchBar = elem("div", {
          parent: titleBarElem,
          style: "position: relative; border-bottom: solid 1px #888;",
          children: [
            searchInput = elem("input", {
              style: `
                  position: relative;
                  left: 0; top: 0; width: 100%; height: 100%;
                  background: transparent;
                  color: gold;
                  border: none;
                  outline: none;
                  `,
              onkeydown: (event) => {
                if (event.keyCode === 27) {
                  controller.onClose?.();
                  closeSearch();
                } else if (event.keyCode === 13 && searchInput.value === "/layout") {
                  searchInput.value = "";
                  controller.onClose?.();
                  closeSearch();
                  controller.onLayout?.();
                  return;
                }
                handleInputEventQueue(event);
              },
              onkeyup: handleInputEventQueue,
              onkeypress: handleInputEventQueue,
              onmousedown: handleInputEventQueue,
              onmouseup: handleInputEventQueue,
              onmouseleave: handleInputEventQueue,
              onchange: handleInputEventQueue,
              oninput: handleInputEventQueue,
              placeholder: "    find accounts..."
            }),
            closeButton = elem("button", {
              style: `
                    position: absolute; right: 0; top: 0; width: 2em; height: 100%;
                    background: transparent; border: none; outline: none;
                    color: gold; font-size: 80%;
                    cursor: pointer;
                    `,
              textContent: "\xD7",
              // cross like x, but not a letter
              onclick: (event) => {
                event.preventDefault();
                controller.onClose?.();
                closeSearch();
              }
            })
          ]
        });
      }
      searchBar.style.display = "block";
      searchInput.focus();
    }
    function closeSearch() {
      if (searchClosedAt) return;
      searchClosedAt = Date.now();
      setTimeout(() => {
        searchBar.style.display = "none";
        searchInput.value = "";
        clearTimeout(debounceTimeoutSearchInput);
      }, 100);
    }
    var debounceTimeoutSearchInput;
    function handleInputEventQueue(event) {
      clearTimeout(debounceTimeoutSearchInput);
      if (searchClosedAt) return;
      debounceTimeoutSearchInput = setTimeout(handleInputEventDebounced, 200);
    }
    var latestSearchInputApplied;
    function handleInputEventDebounced() {
      if (searchClosedAt) return;
      const currentSearchInputStr = (searchInput.value || "").trim();
      if (currentSearchInputStr === latestSearchInputApplied) return;
      console.log("search to run: ", currentSearchInputStr);
      latestSearchInputApplied = currentSearchInputStr;
      controller.onSearchText?.(currentSearchInputStr);
    }
  }

  // node_modules/three/examples/jsm/controls/OrbitControls.js
  var _changeEvent = { type: "change" };
  var _startEvent = { type: "start" };
  var _endEvent = { type: "end" };
  var _ray2 = new Ray();
  var _plane = new Plane();
  var _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);
  var _v = new Vector3();
  var _twoPI = 2 * Math.PI;
  var _STATE = {
    NONE: -1,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2,
    TOUCH_ROTATE: 3,
    TOUCH_PAN: 4,
    TOUCH_DOLLY_PAN: 5,
    TOUCH_DOLLY_ROTATE: 6
  };
  var _EPS = 1e-6;
  var OrbitControls = class extends Controls {
    constructor(object, domElement = null) {
      super(object, domElement);
      this.state = _STATE.NONE;
      this.enabled = true;
      this.target = new Vector3();
      this.cursor = new Vector3();
      this.minDistance = 0;
      this.maxDistance = Infinity;
      this.minZoom = 0;
      this.maxZoom = Infinity;
      this.minTargetRadius = 0;
      this.maxTargetRadius = Infinity;
      this.minPolarAngle = 0;
      this.maxPolarAngle = Math.PI;
      this.minAzimuthAngle = -Infinity;
      this.maxAzimuthAngle = Infinity;
      this.enableDamping = false;
      this.dampingFactor = 0.05;
      this.enableZoom = true;
      this.zoomSpeed = 1;
      this.enableRotate = true;
      this.rotateSpeed = 1;
      this.keyRotateSpeed = 1;
      this.enablePan = true;
      this.panSpeed = 1;
      this.screenSpacePanning = true;
      this.keyPanSpeed = 7;
      this.zoomToCursor = false;
      this.autoRotate = false;
      this.autoRotateSpeed = 2;
      this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
      this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
      this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
      this.target0 = this.target.clone();
      this.position0 = this.object.position.clone();
      this.zoom0 = this.object.zoom;
      this._domElementKeyEvents = null;
      this._lastPosition = new Vector3();
      this._lastQuaternion = new Quaternion();
      this._lastTargetPosition = new Vector3();
      this._quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
      this._quatInverse = this._quat.clone().invert();
      this._spherical = new Spherical();
      this._sphericalDelta = new Spherical();
      this._scale = 1;
      this._panOffset = new Vector3();
      this._rotateStart = new Vector2();
      this._rotateEnd = new Vector2();
      this._rotateDelta = new Vector2();
      this._panStart = new Vector2();
      this._panEnd = new Vector2();
      this._panDelta = new Vector2();
      this._dollyStart = new Vector2();
      this._dollyEnd = new Vector2();
      this._dollyDelta = new Vector2();
      this._dollyDirection = new Vector3();
      this._mouse = new Vector2();
      this._performCursorZoom = false;
      this._pointers = [];
      this._pointerPositions = {};
      this._controlActive = false;
      this._onPointerMove = onPointerMove.bind(this);
      this._onPointerDown = onPointerDown.bind(this);
      this._onPointerUp = onPointerUp.bind(this);
      this._onContextMenu = onContextMenu.bind(this);
      this._onMouseWheel = onMouseWheel.bind(this);
      this._onKeyDown = onKeyDown.bind(this);
      this._onTouchStart = onTouchStart.bind(this);
      this._onTouchMove = onTouchMove.bind(this);
      this._onMouseDown = onMouseDown.bind(this);
      this._onMouseMove = onMouseMove.bind(this);
      this._interceptControlDown = interceptControlDown.bind(this);
      this._interceptControlUp = interceptControlUp.bind(this);
      if (this.domElement !== null) {
        this.connect();
      }
      this.update();
    }
    connect() {
      this.domElement.addEventListener("pointerdown", this._onPointerDown);
      this.domElement.addEventListener("pointercancel", this._onPointerUp);
      this.domElement.addEventListener("contextmenu", this._onContextMenu);
      this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
      const document2 = this.domElement.getRootNode();
      document2.addEventListener("keydown", this._interceptControlDown, { passive: true, capture: true });
      this.domElement.style.touchAction = "none";
    }
    disconnect() {
      this.domElement.removeEventListener("pointerdown", this._onPointerDown);
      this.domElement.removeEventListener("pointermove", this._onPointerMove);
      this.domElement.removeEventListener("pointerup", this._onPointerUp);
      this.domElement.removeEventListener("pointercancel", this._onPointerUp);
      this.domElement.removeEventListener("wheel", this._onMouseWheel);
      this.domElement.removeEventListener("contextmenu", this._onContextMenu);
      this.stopListenToKeyEvents();
      const document2 = this.domElement.getRootNode();
      document2.removeEventListener("keydown", this._interceptControlDown, { capture: true });
      this.domElement.style.touchAction = "auto";
    }
    dispose() {
      this.disconnect();
    }
    getPolarAngle() {
      return this._spherical.phi;
    }
    getAzimuthalAngle() {
      return this._spherical.theta;
    }
    getDistance() {
      return this.object.position.distanceTo(this.target);
    }
    listenToKeyEvents(domElement) {
      domElement.addEventListener("keydown", this._onKeyDown);
      this._domElementKeyEvents = domElement;
    }
    stopListenToKeyEvents() {
      if (this._domElementKeyEvents !== null) {
        this._domElementKeyEvents.removeEventListener("keydown", this._onKeyDown);
        this._domElementKeyEvents = null;
      }
    }
    saveState() {
      this.target0.copy(this.target);
      this.position0.copy(this.object.position);
      this.zoom0 = this.object.zoom;
    }
    reset() {
      this.target.copy(this.target0);
      this.object.position.copy(this.position0);
      this.object.zoom = this.zoom0;
      this.object.updateProjectionMatrix();
      this.dispatchEvent(_changeEvent);
      this.update();
      this.state = _STATE.NONE;
    }
    update(deltaTime = null) {
      const position = this.object.position;
      _v.copy(position).sub(this.target);
      _v.applyQuaternion(this._quat);
      this._spherical.setFromVector3(_v);
      if (this.autoRotate && this.state === _STATE.NONE) {
        this._rotateLeft(this._getAutoRotationAngle(deltaTime));
      }
      if (this.enableDamping) {
        this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;
        this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;
      } else {
        this._spherical.theta += this._sphericalDelta.theta;
        this._spherical.phi += this._sphericalDelta.phi;
      }
      let min = this.minAzimuthAngle;
      let max = this.maxAzimuthAngle;
      if (isFinite(min) && isFinite(max)) {
        if (min < -Math.PI) min += _twoPI;
        else if (min > Math.PI) min -= _twoPI;
        if (max < -Math.PI) max += _twoPI;
        else if (max > Math.PI) max -= _twoPI;
        if (min <= max) {
          this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));
        } else {
          this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);
        }
      }
      this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
      this._spherical.makeSafe();
      if (this.enableDamping === true) {
        this.target.addScaledVector(this._panOffset, this.dampingFactor);
      } else {
        this.target.add(this._panOffset);
      }
      this.target.sub(this.cursor);
      this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);
      this.target.add(this.cursor);
      let zoomChanged = false;
      if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {
        this._spherical.radius = this._clampDistance(this._spherical.radius);
      } else {
        const prevRadius = this._spherical.radius;
        this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);
        zoomChanged = prevRadius != this._spherical.radius;
      }
      _v.setFromSpherical(this._spherical);
      _v.applyQuaternion(this._quatInverse);
      position.copy(this.target).add(_v);
      this.object.lookAt(this.target);
      if (this.enableDamping === true) {
        this._sphericalDelta.theta *= 1 - this.dampingFactor;
        this._sphericalDelta.phi *= 1 - this.dampingFactor;
        this._panOffset.multiplyScalar(1 - this.dampingFactor);
      } else {
        this._sphericalDelta.set(0, 0, 0);
        this._panOffset.set(0, 0, 0);
      }
      if (this.zoomToCursor && this._performCursorZoom) {
        let newRadius = null;
        if (this.object.isPerspectiveCamera) {
          const prevRadius = _v.length();
          newRadius = this._clampDistance(prevRadius * this._scale);
          const radiusDelta = prevRadius - newRadius;
          this.object.position.addScaledVector(this._dollyDirection, radiusDelta);
          this.object.updateMatrixWorld();
          zoomChanged = !!radiusDelta;
        } else if (this.object.isOrthographicCamera) {
          const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);
          mouseBefore.unproject(this.object);
          const prevZoom = this.object.zoom;
          this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
          this.object.updateProjectionMatrix();
          zoomChanged = prevZoom !== this.object.zoom;
          const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);
          mouseAfter.unproject(this.object);
          this.object.position.sub(mouseAfter).add(mouseBefore);
          this.object.updateMatrixWorld();
          newRadius = _v.length();
        } else {
          console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
          this.zoomToCursor = false;
        }
        if (newRadius !== null) {
          if (this.screenSpacePanning) {
            this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);
          } else {
            _ray2.origin.copy(this.object.position);
            _ray2.direction.set(0, 0, -1).transformDirection(this.object.matrix);
            if (Math.abs(this.object.up.dot(_ray2.direction)) < _TILT_LIMIT) {
              this.object.lookAt(this.target);
            } else {
              _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);
              _ray2.intersectPlane(_plane, this.target);
            }
          }
        }
      } else if (this.object.isOrthographicCamera) {
        const prevZoom = this.object.zoom;
        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
        if (prevZoom !== this.object.zoom) {
          this.object.updateProjectionMatrix();
          zoomChanged = true;
        }
      }
      this._scale = 1;
      this._performCursorZoom = false;
      if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
        this._lastQuaternion.copy(this.object.quaternion);
        this._lastTargetPosition.copy(this.target);
        return true;
      }
      return false;
    }
    _getAutoRotationAngle(deltaTime) {
      if (deltaTime !== null) {
        return _twoPI / 60 * this.autoRotateSpeed * deltaTime;
      } else {
        return _twoPI / 60 / 60 * this.autoRotateSpeed;
      }
    }
    _getZoomScale(delta) {
      const normalizedDelta = Math.abs(delta * 0.01);
      return Math.pow(0.95, this.zoomSpeed * normalizedDelta);
    }
    _rotateLeft(angle) {
      this._sphericalDelta.theta -= angle;
    }
    _rotateUp(angle) {
      this._sphericalDelta.phi -= angle;
    }
    _panLeft(distance, objectMatrix) {
      _v.setFromMatrixColumn(objectMatrix, 0);
      _v.multiplyScalar(-distance);
      this._panOffset.add(_v);
    }
    _panUp(distance, objectMatrix) {
      if (this.screenSpacePanning === true) {
        _v.setFromMatrixColumn(objectMatrix, 1);
      } else {
        _v.setFromMatrixColumn(objectMatrix, 0);
        _v.crossVectors(this.object.up, _v);
      }
      _v.multiplyScalar(distance);
      this._panOffset.add(_v);
    }
    // deltaX and deltaY are in pixels; right and down are positive
    _pan(deltaX, deltaY) {
      const element = this.domElement;
      if (this.object.isPerspectiveCamera) {
        const position = this.object.position;
        _v.copy(position).sub(this.target);
        let targetDistance = _v.length();
        targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180);
        this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);
        this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);
      } else if (this.object.isOrthographicCamera) {
        this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);
        this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
        this.enablePan = false;
      }
    }
    _dollyOut(dollyScale) {
      if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
        this._scale /= dollyScale;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        this.enableZoom = false;
      }
    }
    _dollyIn(dollyScale) {
      if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
        this._scale *= dollyScale;
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
        this.enableZoom = false;
      }
    }
    _updateZoomParameters(x, y) {
      if (!this.zoomToCursor) {
        return;
      }
      this._performCursorZoom = true;
      const rect = this.domElement.getBoundingClientRect();
      const dx = x - rect.left;
      const dy = y - rect.top;
      const w = rect.width;
      const h = rect.height;
      this._mouse.x = dx / w * 2 - 1;
      this._mouse.y = -(dy / h) * 2 + 1;
      this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();
    }
    _clampDistance(dist) {
      return Math.max(this.minDistance, Math.min(this.maxDistance, dist));
    }
    //
    // event callbacks - update the object state
    //
    _handleMouseDownRotate(event) {
      this._rotateStart.set(event.clientX, event.clientY);
    }
    _handleMouseDownDolly(event) {
      this._updateZoomParameters(event.clientX, event.clientX);
      this._dollyStart.set(event.clientX, event.clientY);
    }
    _handleMouseDownPan(event) {
      this._panStart.set(event.clientX, event.clientY);
    }
    _handleMouseMoveRotate(event) {
      this._rotateEnd.set(event.clientX, event.clientY);
      this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
      const element = this.domElement;
      this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight);
      this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);
      this._rotateStart.copy(this._rotateEnd);
      this.update();
    }
    _handleMouseMoveDolly(event) {
      this._dollyEnd.set(event.clientX, event.clientY);
      this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);
      if (this._dollyDelta.y > 0) {
        this._dollyOut(this._getZoomScale(this._dollyDelta.y));
      } else if (this._dollyDelta.y < 0) {
        this._dollyIn(this._getZoomScale(this._dollyDelta.y));
      }
      this._dollyStart.copy(this._dollyEnd);
      this.update();
    }
    _handleMouseMovePan(event) {
      this._panEnd.set(event.clientX, event.clientY);
      this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
      this._pan(this._panDelta.x, this._panDelta.y);
      this._panStart.copy(this._panEnd);
      this.update();
    }
    _handleMouseWheel(event) {
      this._updateZoomParameters(event.clientX, event.clientY);
      if (event.deltaY < 0) {
        this._dollyIn(this._getZoomScale(event.deltaY));
      } else if (event.deltaY > 0) {
        this._dollyOut(this._getZoomScale(event.deltaY));
      }
      this.update();
    }
    _handleKeyDown(event) {
      let needsUpdate = false;
      switch (event.code) {
        case this.keys.UP:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (this.enableRotate) {
              this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
            }
          } else {
            if (this.enablePan) {
              this._pan(0, this.keyPanSpeed);
            }
          }
          needsUpdate = true;
          break;
        case this.keys.BOTTOM:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (this.enableRotate) {
              this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
            }
          } else {
            if (this.enablePan) {
              this._pan(0, -this.keyPanSpeed);
            }
          }
          needsUpdate = true;
          break;
        case this.keys.LEFT:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (this.enableRotate) {
              this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
            }
          } else {
            if (this.enablePan) {
              this._pan(this.keyPanSpeed, 0);
            }
          }
          needsUpdate = true;
          break;
        case this.keys.RIGHT:
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (this.enableRotate) {
              this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);
            }
          } else {
            if (this.enablePan) {
              this._pan(-this.keyPanSpeed, 0);
            }
          }
          needsUpdate = true;
          break;
      }
      if (needsUpdate) {
        event.preventDefault();
        this.update();
      }
    }
    _handleTouchStartRotate(event) {
      if (this._pointers.length === 1) {
        this._rotateStart.set(event.pageX, event.pageY);
      } else {
        const position = this._getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        this._rotateStart.set(x, y);
      }
    }
    _handleTouchStartPan(event) {
      if (this._pointers.length === 1) {
        this._panStart.set(event.pageX, event.pageY);
      } else {
        const position = this._getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        this._panStart.set(x, y);
      }
    }
    _handleTouchStartDolly(event) {
      const position = this._getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      this._dollyStart.set(0, distance);
    }
    _handleTouchStartDollyPan(event) {
      if (this.enableZoom) this._handleTouchStartDolly(event);
      if (this.enablePan) this._handleTouchStartPan(event);
    }
    _handleTouchStartDollyRotate(event) {
      if (this.enableZoom) this._handleTouchStartDolly(event);
      if (this.enableRotate) this._handleTouchStartRotate(event);
    }
    _handleTouchMoveRotate(event) {
      if (this._pointers.length == 1) {
        this._rotateEnd.set(event.pageX, event.pageY);
      } else {
        const position = this._getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        this._rotateEnd.set(x, y);
      }
      this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
      const element = this.domElement;
      this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight);
      this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);
      this._rotateStart.copy(this._rotateEnd);
    }
    _handleTouchMovePan(event) {
      if (this._pointers.length === 1) {
        this._panEnd.set(event.pageX, event.pageY);
      } else {
        const position = this._getSecondPointerPosition(event);
        const x = 0.5 * (event.pageX + position.x);
        const y = 0.5 * (event.pageY + position.y);
        this._panEnd.set(x, y);
      }
      this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
      this._pan(this._panDelta.x, this._panDelta.y);
      this._panStart.copy(this._panEnd);
    }
    _handleTouchMoveDolly(event) {
      const position = this._getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      this._dollyEnd.set(0, distance);
      this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));
      this._dollyOut(this._dollyDelta.y);
      this._dollyStart.copy(this._dollyEnd);
      const centerX = (event.pageX + position.x) * 0.5;
      const centerY = (event.pageY + position.y) * 0.5;
      this._updateZoomParameters(centerX, centerY);
    }
    _handleTouchMoveDollyPan(event) {
      if (this.enableZoom) this._handleTouchMoveDolly(event);
      if (this.enablePan) this._handleTouchMovePan(event);
    }
    _handleTouchMoveDollyRotate(event) {
      if (this.enableZoom) this._handleTouchMoveDolly(event);
      if (this.enableRotate) this._handleTouchMoveRotate(event);
    }
    // pointers
    _addPointer(event) {
      this._pointers.push(event.pointerId);
    }
    _removePointer(event) {
      delete this._pointerPositions[event.pointerId];
      for (let i = 0; i < this._pointers.length; i++) {
        if (this._pointers[i] == event.pointerId) {
          this._pointers.splice(i, 1);
          return;
        }
      }
    }
    _isTrackingPointer(event) {
      for (let i = 0; i < this._pointers.length; i++) {
        if (this._pointers[i] == event.pointerId) return true;
      }
      return false;
    }
    _trackPointer(event) {
      let position = this._pointerPositions[event.pointerId];
      if (position === void 0) {
        position = new Vector2();
        this._pointerPositions[event.pointerId] = position;
      }
      position.set(event.pageX, event.pageY);
    }
    _getSecondPointerPosition(event) {
      const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];
      return this._pointerPositions[pointerId];
    }
    //
    _customWheelEvent(event) {
      const mode = event.deltaMode;
      const newEvent = {
        clientX: event.clientX,
        clientY: event.clientY,
        deltaY: event.deltaY
      };
      switch (mode) {
        case 1:
          newEvent.deltaY *= 16;
          break;
        case 2:
          newEvent.deltaY *= 100;
          break;
      }
      if (event.ctrlKey && !this._controlActive) {
        newEvent.deltaY *= 10;
      }
      return newEvent;
    }
  };
  function onPointerDown(event) {
    if (this.enabled === false) return;
    if (this._pointers.length === 0) {
      this.domElement.setPointerCapture(event.pointerId);
      this.domElement.addEventListener("pointermove", this._onPointerMove);
      this.domElement.addEventListener("pointerup", this._onPointerUp);
    }
    if (this._isTrackingPointer(event)) return;
    this._addPointer(event);
    if (event.pointerType === "touch") {
      this._onTouchStart(event);
    } else {
      this._onMouseDown(event);
    }
  }
  function onPointerMove(event) {
    if (this.enabled === false) return;
    if (event.pointerType === "touch") {
      this._onTouchMove(event);
    } else {
      this._onMouseMove(event);
    }
  }
  function onPointerUp(event) {
    this._removePointer(event);
    switch (this._pointers.length) {
      case 0:
        this.domElement.releasePointerCapture(event.pointerId);
        this.domElement.removeEventListener("pointermove", this._onPointerMove);
        this.domElement.removeEventListener("pointerup", this._onPointerUp);
        this.dispatchEvent(_endEvent);
        this.state = _STATE.NONE;
        break;
      case 1:
        const pointerId = this._pointers[0];
        const position = this._pointerPositions[pointerId];
        this._onTouchStart({ pointerId, pageX: position.x, pageY: position.y });
        break;
    }
  }
  function onMouseDown(event) {
    let mouseAction;
    switch (event.button) {
      case 0:
        mouseAction = this.mouseButtons.LEFT;
        break;
      case 1:
        mouseAction = this.mouseButtons.MIDDLE;
        break;
      case 2:
        mouseAction = this.mouseButtons.RIGHT;
        break;
      default:
        mouseAction = -1;
    }
    switch (mouseAction) {
      case MOUSE.DOLLY:
        if (this.enableZoom === false) return;
        this._handleMouseDownDolly(event);
        this.state = _STATE.DOLLY;
        break;
      case MOUSE.ROTATE:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enablePan === false) return;
          this._handleMouseDownPan(event);
          this.state = _STATE.PAN;
        } else {
          if (this.enableRotate === false) return;
          this._handleMouseDownRotate(event);
          this.state = _STATE.ROTATE;
        }
        break;
      case MOUSE.PAN:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (this.enableRotate === false) return;
          this._handleMouseDownRotate(event);
          this.state = _STATE.ROTATE;
        } else {
          if (this.enablePan === false) return;
          this._handleMouseDownPan(event);
          this.state = _STATE.PAN;
        }
        break;
      default:
        this.state = _STATE.NONE;
    }
    if (this.state !== _STATE.NONE) {
      this.dispatchEvent(_startEvent);
    }
  }
  function onMouseMove(event) {
    switch (this.state) {
      case _STATE.ROTATE:
        if (this.enableRotate === false) return;
        this._handleMouseMoveRotate(event);
        break;
      case _STATE.DOLLY:
        if (this.enableZoom === false) return;
        this._handleMouseMoveDolly(event);
        break;
      case _STATE.PAN:
        if (this.enablePan === false) return;
        this._handleMouseMovePan(event);
        break;
    }
  }
  function onMouseWheel(event) {
    if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;
    event.preventDefault();
    this.dispatchEvent(_startEvent);
    this._handleMouseWheel(this._customWheelEvent(event));
    this.dispatchEvent(_endEvent);
  }
  function onKeyDown(event) {
    if (this.enabled === false) return;
    this._handleKeyDown(event);
  }
  function onTouchStart(event) {
    this._trackPointer(event);
    switch (this._pointers.length) {
      case 1:
        switch (this.touches.ONE) {
          case TOUCH.ROTATE:
            if (this.enableRotate === false) return;
            this._handleTouchStartRotate(event);
            this.state = _STATE.TOUCH_ROTATE;
            break;
          case TOUCH.PAN:
            if (this.enablePan === false) return;
            this._handleTouchStartPan(event);
            this.state = _STATE.TOUCH_PAN;
            break;
          default:
            this.state = _STATE.NONE;
        }
        break;
      case 2:
        switch (this.touches.TWO) {
          case TOUCH.DOLLY_PAN:
            if (this.enableZoom === false && this.enablePan === false) return;
            this._handleTouchStartDollyPan(event);
            this.state = _STATE.TOUCH_DOLLY_PAN;
            break;
          case TOUCH.DOLLY_ROTATE:
            if (this.enableZoom === false && this.enableRotate === false) return;
            this._handleTouchStartDollyRotate(event);
            this.state = _STATE.TOUCH_DOLLY_ROTATE;
            break;
          default:
            this.state = _STATE.NONE;
        }
        break;
      default:
        this.state = _STATE.NONE;
    }
    if (this.state !== _STATE.NONE) {
      this.dispatchEvent(_startEvent);
    }
  }
  function onTouchMove(event) {
    this._trackPointer(event);
    switch (this.state) {
      case _STATE.TOUCH_ROTATE:
        if (this.enableRotate === false) return;
        this._handleTouchMoveRotate(event);
        this.update();
        break;
      case _STATE.TOUCH_PAN:
        if (this.enablePan === false) return;
        this._handleTouchMovePan(event);
        this.update();
        break;
      case _STATE.TOUCH_DOLLY_PAN:
        if (this.enableZoom === false && this.enablePan === false) return;
        this._handleTouchMoveDollyPan(event);
        this.update();
        break;
      case _STATE.TOUCH_DOLLY_ROTATE:
        if (this.enableZoom === false && this.enableRotate === false) return;
        this._handleTouchMoveDollyRotate(event);
        this.update();
        break;
      default:
        this.state = _STATE.NONE;
    }
  }
  function onContextMenu(event) {
    if (this.enabled === false) return;
    event.preventDefault();
  }
  function interceptControlDown(event) {
    if (event.key === "Control") {
      this._controlActive = true;
      const document2 = this.domElement.getRootNode();
      document2.addEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
    }
  }
  function interceptControlUp(event) {
    if (event.key === "Control") {
      this._controlActive = false;
      const document2 = this.domElement.getRootNode();
      document2.removeEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
    }
  }

  // node_modules/three/examples/jsm/controls/MapControls.js
  var MapControls = class extends OrbitControls {
    constructor(object, domElement) {
      super(object, domElement);
      this.screenSpacePanning = false;
      this.mouseButtons = { LEFT: MOUSE.PAN, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.ROTATE };
      this.touches = { ONE: TOUCH.PAN, TWO: TOUCH.DOLLY_ROTATE };
    }
  };

  // src/core/dampen-phase.js
  function dampenPhase(phase) {
    return (1 - Math.cos(phase * Math.PI)) / 2;
  }

  // src/webgl/setup-orbit-controls.js
  function setupOrbitControls({ camera, host, clock }) {
    const STEADY_ROTATION_SPEED = 0.2;
    let usedControlType = OrbitControls;
    const possibleControlTypes = [OrbitControls, MapControls];
    let controls = initControls(usedControlType);
    const outcome = {
      controls,
      rotating: !!controls.autoRotate,
      pauseRotation,
      waitAndResumeRotation,
      moveAndPauseRotation,
      flipControlType
    };
    return outcome;
    var changingRotationInterval;
    function initControls(OrbitControls2) {
      let controls2 = new OrbitControls2(camera, host);
      controls2.zoomToCursor = true;
      controls2.addEventListener("start", function() {
        pauseRotation();
      });
      controls2.addEventListener("end", function() {
        waitAndResumeRotation();
      });
      controls2.maxDistance = 40 * 1e3;
      controls2.enableDamping = true;
      controls2.autoRotate = true;
      controls2.autoRotateSpeed = STEADY_ROTATION_SPEED;
      controls2.listenToKeyEvents(createKeyEventProxy(window));
      return controls2;
      function createKeyEventProxy(originalElement) {
        const keydownCallbacks = [];
        return {
          addEventListener: overrideAddEventListener,
          removeEventListener: overrideRemoveEventListener
        };
        function handleKeydown(event) {
          const target = (
            /** @type {HTMLElement} */
            event.target
          );
          if (/input/i.test(target?.tagName)) return;
          let result;
          for (const callback of keydownCallbacks) {
            result = callback(event);
          }
          return result;
        }
        function overrideAddEventListener(event, callback) {
          if (event === "keydown") {
            if (keydownCallbacks.length === 0)
              originalElement.addEventListener("keydown", handleKeydown);
            keydownCallbacks.push(callback);
          } else {
            host.addEventListener(event, callback);
          }
        }
        function overrideRemoveEventListener(event, callback) {
          if (event === "keydown") {
            keydownCallbacks.splice(keydownCallbacks.indexOf(callback), 1);
            if (keydownCallbacks.length === 0)
              originalElement.removeEventListener("keydown", handleKeydown);
          } else {
            host.removeEventListener(event, callback);
          }
        }
      }
    }
    function flipControlType() {
      controls.saveState();
      const state = {};
      for (const key in controls) {
        if (key.charAt(key.length - 1) === "0") {
          state[key] = controls[key];
        }
      }
      controls.dispose();
      const nextControlType = possibleControlTypes[(possibleControlTypes.indexOf(usedControlType) + 1) % possibleControlTypes.length];
      controls = initControls(nextControlType);
      outcome.rotating = controls.autoRotate;
      for (const key in state) {
        controls[key] = state[key];
      }
      controls.reset();
    }
    function pauseRotation() {
      if (controls.autoRotate) controls.autoRotate = false;
      outcome.rotating = false;
      clearInterval(changingRotationInterval);
    }
    function waitAndResumeRotation(resumeAfterWait) {
      const WAIT_BEFORE_RESUMING_MSEC = 1e4;
      const SPEED_UP_WITHIN_MSEC = 1e4;
      if (!resumeAfterWait) resumeAfterWait = WAIT_BEFORE_RESUMING_MSEC;
      clearInterval(changingRotationInterval);
      const startResumingRotation = clock.nowMSec;
      changingRotationInterval = setInterval(continueResumingRotation, 100);
      function continueResumingRotation() {
        const passedTime = clock.nowMSec - startResumingRotation;
        if (passedTime < resumeAfterWait) return;
        if (passedTime > resumeAfterWait + SPEED_UP_WITHIN_MSEC) {
          controls.autoRotateSpeed = STEADY_ROTATION_SPEED;
          controls.autoRotate = true;
          outcome.rotating = true;
          clearInterval(changingRotationInterval);
          return;
        }
        const phase = (passedTime - resumeAfterWait) / SPEED_UP_WITHIN_MSEC;
        controls.autoRotate = true;
        outcome.rotating = true;
        controls.autoRotateSpeed = 0.2 * dampenPhase(phase);
      }
    }
    function moveAndPauseRotation(xyh, towardsXYH) {
      const MOVE_WITHIN_MSEC = 6e3;
      const WAIT_AFTER_MOVEMENT_BEFORE_RESUMING_ROTATION_MSEC = 3e4;
      const MIDDLE_AT_PHASE = 0.6;
      const RAISE_MIDDLE_WITH = 0.25;
      pauseRotation();
      const startMoving = clock.nowMSec;
      const startCameraPosition = camera.position.clone();
      const startCameraTarget = controls.target.clone();
      const r = distance2D(xyh.x, xyh.y, 0, 0);
      const angle = Math.atan2(xyh.y, xyh.x);
      const xMiddle = (r + 0.6) * Math.cos(angle);
      const yMiddle = (r + 0.6) * Math.sin(angle);
      const hMiddle = xyh.h + RAISE_MIDDLE_WITH;
      changingRotationInterval = setInterval(continueMoving, 10);
      function continueMoving() {
        const passedTime = clock.nowMSec - startMoving;
        if (passedTime > MOVE_WITHIN_MSEC) {
          clearInterval(changingRotationInterval);
          camera.position.set(xyh.x, xyh.h, xyh.y);
          controls.target.set(towardsXYH.x, towardsXYH.h, towardsXYH.y);
          waitAndResumeRotation(WAIT_AFTER_MOVEMENT_BEFORE_RESUMING_ROTATION_MSEC);
          return;
        }
        const phase = passedTime / MOVE_WITHIN_MSEC;
        controls.target.set(
          startCameraTarget.x + (towardsXYH.x - startCameraTarget.x) * phase,
          startCameraTarget.y + (towardsXYH.h - startCameraTarget.y) * phase,
          startCameraTarget.z + (towardsXYH.y - startCameraTarget.z) * phase
        );
        if (passedTime < MOVE_WITHIN_MSEC * MIDDLE_AT_PHASE) {
          const dampenedPhase = dampenPhase(phase / MIDDLE_AT_PHASE);
          camera.position.set(
            startCameraPosition.x + (xMiddle - startCameraPosition.x) * dampenedPhase,
            startCameraPosition.y + (hMiddle - startCameraPosition.y) * dampenedPhase,
            startCameraPosition.z + (yMiddle - startCameraPosition.z) * dampenedPhase
          );
        } else {
          const dampenedPhase = dampenPhase((phase - MIDDLE_AT_PHASE) / (1 - MIDDLE_AT_PHASE));
          camera.position.set(
            xMiddle + (xyh.x - xMiddle) * dampenedPhase,
            hMiddle + (xyh.h - hMiddle) * dampenedPhase,
            yMiddle + (xyh.y - yMiddle) * dampenedPhase
          );
        }
      }
    }
  }

  // node_modules/three/examples/jsm/libs/stats.module.js
  var Stats = function() {
    var mode = 0;
    var container = document.createElement("div");
    container.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
    container.addEventListener("click", function(event) {
      event.preventDefault();
      showPanel(++mode % container.children.length);
    }, false);
    function addPanel(panel) {
      container.appendChild(panel.dom);
      return panel;
    }
    function showPanel(id) {
      for (var i = 0; i < container.children.length; i++) {
        container.children[i].style.display = i === id ? "block" : "none";
      }
      mode = id;
    }
    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;
    var fpsPanel = addPanel(new Stats.Panel("FPS", "#0ff", "#002"));
    var msPanel = addPanel(new Stats.Panel("MS", "#0f0", "#020"));
    if (self.performance && self.performance.memory) {
      var memPanel = addPanel(new Stats.Panel("MB", "#f08", "#201"));
    }
    showPanel(0);
    return {
      REVISION: 16,
      dom: container,
      addPanel,
      showPanel,
      begin: function() {
        beginTime = (performance || Date).now();
      },
      end: function() {
        frames++;
        var time = (performance || Date).now();
        msPanel.update(time - beginTime, 200);
        if (time >= prevTime + 1e3) {
          fpsPanel.update(frames * 1e3 / (time - prevTime), 100);
          prevTime = time;
          frames = 0;
          if (memPanel) {
            var memory = performance.memory;
            memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);
          }
        }
        return time;
      },
      update: function() {
        beginTime = this.end();
      },
      // Backwards Compatibility
      domElement: container,
      setMode: showPanel
    };
  };
  Stats.Panel = function(name2, fg, bg) {
    var min = Infinity, max = 0, round = Math.round;
    var PR = round(window.devicePixelRatio || 1);
    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;
    var canvas = document.createElement("canvas");
    canvas.width = WIDTH;
    canvas.height = HEIGHT;
    canvas.style.cssText = "width:80px;height:48px";
    var context = canvas.getContext("2d");
    context.font = "bold " + 9 * PR + "px Helvetica,Arial,sans-serif";
    context.textBaseline = "top";
    context.fillStyle = bg;
    context.fillRect(0, 0, WIDTH, HEIGHT);
    context.fillStyle = fg;
    context.fillText(name2, TEXT_X, TEXT_Y);
    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);
    context.fillStyle = bg;
    context.globalAlpha = 0.9;
    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);
    return {
      dom: canvas,
      update: function(value2, maxValue) {
        min = Math.min(min, value2);
        max = Math.max(max, value2);
        context.fillStyle = bg;
        context.globalAlpha = 1;
        context.fillRect(0, 0, WIDTH, GRAPH_Y);
        context.fillStyle = fg;
        context.fillText(round(value2) + " " + name2 + " (" + round(min) + "-" + round(max) + ")", TEXT_X, TEXT_Y);
        context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);
        context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);
        context.fillStyle = bg;
        context.globalAlpha = 0.9;
        context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value2 / maxValue) * GRAPH_HEIGHT));
      }
    };
  };
  var stats_module_default = Stats;

  // src/webgl/layers/mass-spot-mesh.js
  function massSpotMesh({ clock: clockArg, spots, get }) {
    const clock = clockArg || { now: () => Date.now() };
    const dummy = {
      x: 0,
      y: 0,
      z: 0,
      mass: 0,
      color: 0
    };
    const baseHalf = 1.5 * Math.tan(Math.PI / 6);
    const positions = new Float32Array([0, 0, 0]);
    let offsetBuf = new Float32Array(spots.length * 4);
    let diameterBuf = new Float32Array(spots.length);
    let colorBuf = new Uint32Array(spots.length);
    populateBuffers();
    let geometry = new InstancedBufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    geometry.setAttribute("offset", new InstancedBufferAttribute(offsetBuf, 3));
    geometry.setAttribute("diameter", new InstancedBufferAttribute(diameterBuf, 1));
    geometry.setAttribute("color", new InstancedBufferAttribute(colorBuf, 1));
    geometry.instanceCount = spots.length;
    const material = new ShaderMaterial({
      blending: AdditiveBlending,
      uniforms: {
        time: { value: clock.now() / 1e3 }
      },
      vertexShader: (
        /* glsl */
        `
            precision highp float;

            attribute vec3 offset;
            attribute float diameter;
            attribute uint color;

            uniform float time;

            varying float vDiameter;

            varying float vFogDist;
            varying vec4 vColor;

            void main(){
              vDiameter = diameter;

              gl_Position = projectionMatrix * (modelViewMatrix * vec4(offset, 1.0));

              vec4 viewPosition = modelViewMatrix * vec4(offset, 1.0);
              float distanceToCamera = length(viewPosition.xyz);

              // Calculate the point size based on the diameter and distance (example)
              float pointScaleFactor = 1600.0; // Adjust this value to control scaling
              gl_PointSize = abs(diameter) * pointScaleFactor / distanceToCamera;

              // https://stackoverflow.com/a/22899161/140739
              uint rInt = (color / uint(256 * 256 * 256)) % uint(256);
              uint gInt = (color / uint(256 * 256)) % uint(256);
              uint bInt = (color / uint(256)) % uint(256);
              uint aInt = (color) % uint(256);
              vColor = vec4(float(rInt) / 255.0f, float(gInt) / 255.0f, float(bInt) / 255.0f, float(aInt) / 255.0f);

              vFogDist = distance(cameraPosition, offset);
            }
          `
      ),
      fragmentShader: (
        /* glsl */
        `
            precision highp float;

            uniform float time;

            varying vec4 vColor;
            varying float vFogDist;

            varying float vDiameter;

            void main() {
              gl_FragColor = vColor;
              float dist = distance(gl_PointCoord, vec2(0.5, 0.5));
              dist = vDiameter < 0.0 ? dist * 2.0 : dist;
              float rad = 0.25;
              float areola = rad * 2.0;
              float bodyRatio =
                dist < rad ? 1.0 :
                dist > areola ? 0.0 :
                (areola - dist) / (areola - rad);
              float radiusRatio =
                dist < 0.5 ? 1.0 - dist * 2.0 : 0.0;

              float fogStart = 0.6;
              float fogGray = 1.0;
              float fogRatio = vFogDist < fogStart ? 0.0 : vFogDist > fogGray ? 1.0 : (vFogDist - fogStart) / (fogGray - fogStart);

              vec4 tintColor = vColor;
              tintColor.a = radiusRatio;
              gl_FragColor = mix(gl_FragColor, vec4(1.0,1.0,1.0,0.7), fogRatio * 0.7);
              gl_FragColor = vDiameter < 0.0 ? vec4(0.6,0.0,0.0,1.0) : gl_FragColor;
              gl_FragColor.a = bodyRatio;
            }
          `
      ),
      side: BackSide,
      forceSinglePass: true,
      transparent: true,
      depthWrite: false
    });
    const mesh = new Points(geometry, material);
    mesh.onBeforeRender = () => {
      material.uniforms["time"].value = clock.now() / 1e3;
    };
    const meshWithUpdates = (
      /** @type {typeof mesh & { updateSpots: typeof updateSpots }} */
      mesh
    );
    meshWithUpdates.updateSpots = updateSpots;
    return meshWithUpdates;
    function populateBuffers() {
      for (let i = 0; i < spots.length; i++) {
        const spot = spots[i];
        dummy.x = spot.x || 0;
        dummy.y = spot.z || 0;
        dummy.z = spot.y || 0;
        dummy.mass = spot.mass || 0;
        dummy.color = spot.color || 0;
        if (typeof get === "function") get(spot, dummy);
        offsetBuf[i * 3 + 0] = dummy.x;
        offsetBuf[i * 3 + 1] = dummy.y;
        offsetBuf[i * 3 + 2] = dummy.z;
        diameterBuf[i] = dummy.mass;
        colorBuf[i] = dummy.color;
      }
    }
    function updateSpots(newSpots) {
      spots = newSpots;
      if (newSpots.length > geometry.instanceCount || newSpots.length < geometry.instanceCount / 2) {
        const newAllocateCount = Math.max(
          Math.floor(newSpots.length * 1.5),
          newSpots.length + 300
        );
        offsetBuf = new Float32Array(newAllocateCount * 4);
        diameterBuf = new Float32Array(newAllocateCount);
        colorBuf = new Uint32Array(newAllocateCount);
        populateBuffers();
        const oldGeometry = geometry;
        geometry = new InstancedBufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
        geometry.setAttribute("offset", new InstancedBufferAttribute(offsetBuf, 3));
        geometry.setAttribute("diameter", new InstancedBufferAttribute(diameterBuf, 1));
        geometry.setAttribute("color", new InstancedBufferAttribute(colorBuf, 1));
        geometry.instanceCount = newAllocateCount;
        mesh.geometry = geometry;
        oldGeometry.dispose();
      } else {
        populateBuffers();
        geometry.attributes["offset"].needsUpdate = true;
        geometry.attributes["diameter"].needsUpdate = true;
        geometry.attributes["color"].needsUpdate = true;
      }
    }
  }

  // src/webgl/setup-scene.js
  function setupScene(users, clock) {
    const camera = new PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1e-5, 1e4);
    camera.position.x = 0.18;
    camera.position.y = 0.49;
    camera.position.z = 0.88;
    const scene = new Scene();
    const dirLight1 = new DirectionalLight(16777215, 7);
    dirLight1.position.set(0.5, 1, -0.5);
    scene.add(dirLight1);
    const dirLight2 = new DirectionalLight(16777215, 2);
    dirLight2.position.set(-0.5, -0.5, 0.5);
    scene.add(dirLight2);
    const ambientLight = new AmbientLight(16777215, 0.8);
    scene.add(ambientLight);
    const renderer = new WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    const stats = new stats_module_default();
    const farUsersMesh = massSpotMesh({
      clock: { now: () => clock.nowMSec },
      spots: users,
      get: (user, dummy) => {
        dummy.x = user.x;
        dummy.y = user.h;
        dummy.z = user.y;
        dummy.mass = user.weight;
        dummy.color = user.colorRGB * 256 | 255;
      }
    });
    scene.add(farUsersMesh);
    return {
      scene,
      camera,
      lights: { dirLight1, dirLight2, ambientLight },
      renderer,
      stats,
      updateUsers
    };
    var addedUsers;
    function updateUsers(users2) {
      farUsersMesh.updateSpots(users2);
    }
  }

  // node_modules/@atcute/uint8array/dist/index.js
  var textEncoder = new TextEncoder();
  var textDecoder = new TextDecoder();
  var subtle = crypto.subtle;
  var alloc = (size) => {
    return new Uint8Array(size);
  };
  var allocUnsafe = alloc;
  var decodeUtf8From = (from, offset, length) => {
    let buffer;
    if (offset === void 0) {
      buffer = from;
    } else if (length === void 0) {
      buffer = from.subarray(offset);
    } else {
      buffer = from.subarray(offset, offset + length);
    }
    const result = textDecoder.decode(buffer);
    return result;
  };

  // node_modules/@atcute/multibase/dist/utils.js
  var createRfc4648Encode = (alphabet, bitsPerChar, pad) => {
    return (bytes) => {
      const mask = (1 << bitsPerChar) - 1;
      let str = "";
      let bits = 0;
      let buffer = 0;
      for (let i = 0; i < bytes.length; ++i) {
        buffer = buffer << 8 | bytes[i];
        bits += 8;
        while (bits > bitsPerChar) {
          bits -= bitsPerChar;
          str += alphabet[mask & buffer >> bits];
        }
      }
      if (bits !== 0) {
        str += alphabet[mask & buffer << bitsPerChar - bits];
      }
      if (pad) {
        while ((str.length * bitsPerChar & 7) !== 0) {
          str += "=";
        }
      }
      return str;
    };
  };
  var createRfc4648Decode = (alphabet, bitsPerChar, pad) => {
    const codes = {};
    for (let i = 0; i < alphabet.length; ++i) {
      codes[alphabet[i]] = i;
    }
    return (str) => {
      let end = str.length;
      while (pad && str[end - 1] === "=") {
        --end;
      }
      const bytes = allocUnsafe(end * bitsPerChar / 8 | 0);
      let bits = 0;
      let buffer = 0;
      let written = 0;
      for (let i = 0; i < end; ++i) {
        const value2 = codes[str[i]];
        if (value2 === void 0) {
          throw new SyntaxError(`invalid base string`);
        }
        buffer = buffer << bitsPerChar | value2;
        bits += bitsPerChar;
        if (bits >= 8) {
          bits -= 8;
          bytes[written++] = 255 & buffer >> bits;
        }
      }
      if (bits >= bitsPerChar || (255 & buffer << 8 - bits) !== 0) {
        throw new SyntaxError("unexpected end of data");
      }
      return bytes;
    };
  };

  // node_modules/@atcute/multibase/dist/bases/base64-web.js
  var HAS_UINT8_BASE64_SUPPORT = "fromBase64" in Uint8Array;
  var BASE64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var WS_PAD_RE = /[\s=]/;
  var _fromBase64Polyfill = /* @__PURE__ */ createRfc4648Decode(BASE64_CHARSET, 6, false);
  var _toBase64Polyfill = /* @__PURE__ */ createRfc4648Encode(BASE64_CHARSET, 6, false);
  var _fromBase64Native = (str) => {
    if (str.length % 4 === 1 || WS_PAD_RE.test(str)) {
      throw new SyntaxError(`invalid base64 string`);
    }
    return Uint8Array.fromBase64(str, { alphabet: "base64", lastChunkHandling: "loose" });
  };
  var _toBase64Native = (bytes) => {
    return bytes.toBase64({ alphabet: "base64", omitPadding: true });
  };
  var fromBase64 = !HAS_UINT8_BASE64_SUPPORT ? _fromBase64Polyfill : _fromBase64Native;
  var toBase64 = !HAS_UINT8_BASE64_SUPPORT ? _toBase64Polyfill : _toBase64Native;

  // node_modules/@atcute/multibase/dist/bases/base32.js
  var BASE32_CHARSET = "abcdefghijklmnopqrstuvwxyz234567";
  var toBase32 = /* @__PURE__ */ createRfc4648Encode(BASE32_CHARSET, 5, false);

  // node_modules/@atcute/varint/dist/index.js
  var MSB = 128;
  var REST = 127;
  var MSBALL = ~REST;
  var INT = 2 ** 31;
  var N1 = 2 ** 7;
  var N2 = 2 ** 14;
  var N3 = 2 ** 21;
  var N4 = 2 ** 28;
  var N5 = 2 ** 35;
  var N6 = 2 ** 42;
  var N7 = 2 ** 49;
  var N8 = 2 ** 56;
  var N9 = 2 ** 63;
  var decode = (buf, offset = 0) => {
    let l = buf.length;
    let res = 0;
    let shift = 0;
    let counter = offset;
    let b;
    do {
      if (counter >= l) {
        throw new RangeError("could not decode varint");
      }
      b = buf[counter++];
      res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB);
    return [res, counter - offset];
  };

  // node_modules/@atcute/cid/dist/codec.js
  var CID_VERSION = 1;
  var HASH_SHA256 = 18;
  var CODEC_RAW = 85;
  var CODEC_DCBOR = 113;

  // node_modules/@atcute/cid/dist/cid-link.js
  var CidLinkWrapper = class {
    bytes;
    constructor(bytes) {
      this.bytes = bytes;
    }
    get $link() {
      const encoded = toBase32(this.bytes);
      return `b${encoded}`;
    }
    toJSON() {
      return { $link: this.$link };
    }
  };
  var toCidLink = (cid) => {
    return new CidLinkWrapper(cid.bytes);
  };

  // node_modules/@atcute/cbor/dist/bytes.js
  var BytesWrapper = class {
    buf;
    constructor(buf) {
      this.buf = buf;
    }
    get $bytes() {
      return toBase64(this.buf);
    }
    toJSON() {
      return { $bytes: this.$bytes };
    }
  };
  var toBytes = (buf) => {
    return new BytesWrapper(buf);
  };
  var fromBytes = (bytes) => {
    if (bytes instanceof BytesWrapper) {
      return bytes.buf;
    }
    return fromBase64(bytes.$bytes);
  };

  // node_modules/@atcute/cbor/dist/decode.js
  var readArgument = (state, info) => {
    if (info < 24) {
      return info;
    }
    switch (info) {
      case 24: {
        return readUint8(state);
      }
      case 25: {
        return readUint16(state);
      }
      case 26: {
        return readUint32(state);
      }
      case 27: {
        return readUint53(state);
      }
    }
    throw new Error(`invalid argument encoding; got ${info}`);
  };
  var readFloat64 = (state) => {
    const view = state.v ??= new DataView(state.b.buffer, state.b.byteOffset, state.b.byteLength);
    const value2 = view.getFloat64(state.p);
    state.p += 8;
    return value2;
  };
  var readUint8 = (state) => {
    return state.b[state.p++];
  };
  var readUint16 = (state) => {
    let pos = state.p;
    const buf = state.b;
    const value2 = buf[pos++] << 8 | buf[pos++];
    state.p = pos;
    return value2;
  };
  var readUint32 = (state) => {
    let pos = state.p;
    const buf = state.b;
    const value2 = (buf[pos++] << 24 | buf[pos++] << 16 | buf[pos++] << 8 | buf[pos++]) >>> 0;
    state.p = pos;
    return value2;
  };
  var readUint53 = (state) => {
    let pos = state.p;
    const buf = state.b;
    const hi = (buf[pos++] << 24 | buf[pos++] << 16 | buf[pos++] << 8 | buf[pos++]) >>> 0;
    if (hi > 2097151) {
      throw new RangeError(`can't decode integers beyond safe integer range`);
    }
    const lo = (buf[pos++] << 24 | buf[pos++] << 16 | buf[pos++] << 8 | buf[pos++]) >>> 0;
    const value2 = hi * 2 ** 32 + lo;
    state.p = pos;
    return value2;
  };
  var readString = (state, length) => {
    const string = decodeUtf8From(state.b, state.p, length);
    state.p += length;
    return string;
  };
  var readBytes = (state, length) => {
    const slice = state.b.subarray(state.p, state.p += length);
    return toBytes(slice);
  };
  var readTypeInfo = (state) => {
    const prelude = readUint8(state);
    return [prelude >> 5, prelude & 31];
  };
  var readCid = (state, length) => {
    const slice = state.b.subarray(state.p + 1, state.p += length);
    return new CidLinkWrapper(slice);
  };
  var ContainerType;
  (function(ContainerType2) {
    ContainerType2[ContainerType2["MAP"] = 0] = "MAP";
    ContainerType2[ContainerType2["ARRAY"] = 1] = "ARRAY";
  })(ContainerType || (ContainerType = {}));
  var decodeFirst = (buf) => {
    const len = buf.length;
    const state = {
      b: buf,
      v: null,
      p: 0
    };
    let stack = null;
    let result;
    jump: while (state.p < len) {
      const prelude = readUint8(state);
      const type = prelude >> 5;
      const info = prelude & 31;
      const arg = type < 7 ? readArgument(state, info) : 0;
      let value2;
      switch (type) {
        case 0: {
          value2 = arg;
          break;
        }
        case 1: {
          value2 = -1 - arg;
          break;
        }
        case 2: {
          value2 = readBytes(state, arg);
          break;
        }
        case 3: {
          value2 = readString(state, arg);
          break;
        }
        case 4: {
          const arr = new Array(arg);
          value2 = arr;
          if (arg > 0) {
            stack = { t: ContainerType.ARRAY, c: arr, k: null, r: arg, n: stack };
            continue jump;
          }
          break;
        }
        case 5: {
          const obj = {};
          value2 = obj;
          if (arg > 0) {
            stack = { t: ContainerType.MAP, c: obj, k: null, r: arg * 2, n: stack };
            continue jump;
          }
          break;
        }
        case 6: {
          switch (arg) {
            case 42: {
              const [type2, info2] = readTypeInfo(state);
              if (type2 !== 2) {
                throw new TypeError(`expected cid-link to be type 2 (bytes); got type ${type2}`);
              }
              const len2 = readArgument(state, info2);
              value2 = readCid(state, len2);
              break;
            }
            default: {
              throw new TypeError(`unsupported tag; got ${arg}`);
            }
          }
          break;
        }
        case 7: {
          switch (info) {
            case 20:
            case 21: {
              value2 = info === 21;
              break;
            }
            case 22: {
              value2 = null;
              break;
            }
            case 27: {
              value2 = readFloat64(state);
              break;
            }
            default: {
              throw new Error(`invalid simple value; got ${info}`);
            }
          }
          break;
        }
        default: {
          throw new TypeError(`invalid type; got ${type}`);
        }
      }
      while (stack !== null) {
        const node = stack;
        switch (node.t) {
          case ContainerType.ARRAY: {
            const index = node.c.length - node.r;
            node.c[index] = value2;
            break;
          }
          case ContainerType.MAP: {
            if (node.k === null) {
              if (typeof value2 !== "string") {
                throw new TypeError(`expected map to only have string keys; got ${type}`);
              }
              node.k = value2;
            } else {
              if (node.k === "__proto__") {
                Object.defineProperty(node.c, node.k, { enumerable: true, configurable: true, writable: true });
              }
              node.c[node.k] = value2;
              node.k = null;
            }
            break;
          }
        }
        if (--node.r !== 0) {
          continue jump;
        }
        value2 = node.c;
        stack = node.n;
      }
      result = value2;
      break;
    }
    return [result, buf.subarray(state.p)];
  };
  var decode2 = (buf) => {
    const [value2, remainder] = decodeFirst(buf);
    if (remainder.length !== 0) {
      throw new Error(`decoded value contains remainder`);
    }
    return value2;
  };

  // node_modules/@atcute/car/dist/utilities/sync-byte-reader.js
  var createUint8Reader = (buf) => {
    let pos = 0;
    return {
      get pos() {
        return pos;
      },
      seek(size) {
        if (size > buf.length - pos) {
          throw new RangeError("unexpected end of data");
        }
        pos += size;
      },
      upto(size) {
        return buf.subarray(pos, pos + Math.min(size, buf.length - pos));
      },
      exactly(size, seek) {
        if (size > buf.length - pos) {
          throw new RangeError("unexpected end of data");
        }
        const slice = buf.subarray(pos, pos + size);
        if (seek) {
          pos += size;
        }
        return slice;
      }
    };
  };

  // node_modules/@atcute/car/dist/utilities/car.js
  var isCarV1Header = (value2) => {
    if (value2 === null || typeof value2 !== "object") {
      return false;
    }
    const { version: version3, roots } = value2;
    return version3 === 1 && Array.isArray(roots) && roots.every((root) => root instanceof CidLinkWrapper);
  };

  // node_modules/@atcute/car/dist/utilities/sync-car-reader.js
  var readVarint = (reader, size) => {
    const buf = reader.upto(size);
    if (buf.length === 0) {
      throw new RangeError(`unexpected end of data`);
    }
    const [int, read] = decode(buf);
    reader.seek(read);
    return int;
  };
  var readHeader = (reader) => {
    const length = readVarint(reader, 8);
    if (length === 0) {
      throw new RangeError(`invalid car header; length=0`);
    }
    const rawHeader = reader.exactly(length, true);
    const header = decode2(rawHeader);
    if (!isCarV1Header(header)) {
      throw new TypeError(`expected a car v1 archive`);
    }
    return header;
  };
  var readCid2 = (reader) => {
    const head = reader.upto(3 + 4);
    const version3 = head[0];
    const codec = head[1];
    const digestCodec = head[2];
    if (version3 !== CID_VERSION) {
      throw new RangeError(`incorrect cid version (got v${version3})`);
    }
    if (codec !== CODEC_DCBOR && codec !== CODEC_RAW) {
      throw new RangeError(`incorrect cid codec (got 0x${codec.toString(16)})`);
    }
    if (digestCodec !== HASH_SHA256) {
      throw new RangeError(`incorrect cid hash type (got 0x${digestCodec.toString(16)})`);
    }
    const [digestSize, digestLebSize] = decode(head, 3);
    const bytes = reader.exactly(3 + digestLebSize + digestSize, true);
    const digest = bytes.subarray(3 + digestLebSize);
    const cid = {
      version: version3,
      codec,
      digest: {
        codec: digestCodec,
        contents: digest
      },
      bytes
    };
    return cid;
  };
  var readBlockHeader = (reader) => {
    const start = reader.pos;
    let size = readVarint(reader, 8);
    if (size === 0) {
      throw new Error(`invalid car section; length=0`);
    }
    size += reader.pos - start;
    const cid = readCid2(reader);
    const blockSize = size - (reader.pos - start);
    return { cid, blockSize };
  };
  var createCarReader = (reader) => {
    const { roots } = readHeader(reader);
    return {
      roots,
      *iterate() {
        while (reader.upto(8).length > 0) {
          const { cid, blockSize } = readBlockHeader(reader);
          const bytes = reader.exactly(blockSize, true);
          yield { cid, bytes };
        }
      }
    };
  };

  // node_modules/@atcute/car/dist/reader.js
  var readCar = (buffer) => {
    const reader = createUint8Reader(buffer);
    return createCarReader(reader);
  };

  // node_modules/bski/package.json
  var version2 = "0.9.16";

  // node_modules/bski/firehose.js
  var emptyUint8Array = new Uint8Array();
  var known$Types = (
    /** @type {const} */
    [
      "app.bsky.feed.like",
      "app.bsky.feed.post",
      "app.bsky.feed.repost",
      "app.bsky.feed.threadgate",
      "app.bsky.graph.follow",
      "app.bsky.graph.block",
      "app.bsky.graph.list",
      "app.bsky.graph.listitem",
      "app.bsky.graph.listblock",
      "app.bsky.actor.profile",
      "app.bsky.feed.generator",
      "app.bsky.feed.postgate",
      "chat.bsky.actor.declaration",
      "app.bsky.graph.starterpack"
    ]
  );
  firehose.knownTypes = known$Types;
  function requireWebsocket() {
    const requireFn = typeof __require === "function" ? __require : void 0;
    if (typeof requireFn === "function") return (
      /** @type {typeof WebSocket} */
      requireFn("ws")
    );
    throw new Error("WebSocket not available");
  }
  firehose.each = each;
  firehose.version = version2;
  async function* firehose(address) {
    const WebSocketImpl = typeof WebSocket === "function" ? WebSocket : requireWebsocket();
    const wsAddress = address || "wss://bsky.network/xrpc/com.atproto.sync.subscribeRepos";
    const ws = new WebSocketImpl(wsAddress);
    ws.binaryType = "arraybuffer";
    ws.addEventListener("message", handleMessage);
    ws.addEventListener("error", handleError);
    ws.addEventListener("close", handleClose);
    let buf = createAwaitPromise();
    let closed = false;
    try {
      while (true) {
        await buf.promise;
        if (buf.block?.length) {
          const block = buf.block;
          buf = createAwaitPromise();
          if (closed) {
            block["messages"] = block;
            if (block.length) yield block;
            break;
          }
          yield block;
        } else {
          buf = createAwaitPromise();
        }
      }
    } finally {
      if (!closed) {
        try {
          ws.close();
        } catch (error) {
        }
      }
    }
    function handleClose() {
      closed = true;
      buf.resolve();
    }
    function handleMessage(event) {
      const receiveTimestamp = Date.now();
      if (typeof event.data?.byteLength === "number") {
        parseMessageBufAndResolve(receiveTimestamp, event.data);
      } else if (typeof event.data?.arrayBuffer === "function") {
        event.data.arrayBuffer().then((arrayBuffer) => parseMessageBufAndResolve(receiveTimestamp, arrayBuffer));
      } else {
        buf.block.push({
          $type: "error",
          message: "WebSocket message type not supported.",
          data: event.data,
          receiveTimestamp,
          parseTime: 0
        });
        buf.resolve();
      }
    }
    function parseMessageBufAndResolve(receiveTimestamp, arrayBuf) {
      parseMessageBuf(receiveTimestamp, new Uint8Array(arrayBuf));
      buf.resolve();
    }
    function parseMessageBuf(receiveTimestamp, messageBuf) {
      const parseStart = performance.now();
      try {
        parseMessageBufWorker(receiveTimestamp, parseStart, messageBuf);
        buf.resolve();
      } catch (parseError) {
        buf.block.push({
          $type: "error",
          message: parseError.message,
          receiveTimestamp,
          parseTime: performance.now() - parseStart
        });
      }
      buf.resolve();
    }
    function parseMessageBufWorker(receiveTimestamp, parseStart, messageBuf) {
      const [header, remainder] = decodeFirst(messageBuf);
      const [body, remainder2] = decodeFirst(remainder);
      if (remainder2.length > 0) {
        return buf.block.push({
          $type: "error",
          message: "Excess bytes in message.",
          receiveTimestamp,
          parseTime: performance.now() - parseStart
        });
      }
      const { t, op } = header;
      if (op === -1) {
        return buf.block.push({
          $type: "error",
          message: "Error header#" + body.error + ": " + body.message,
          receiveTimestamp,
          parseTime: performance.now() - parseStart
        });
      }
      if (t === "#commit") {
        const commit = body;
        if (!("blocks" in commit) || !commit.blocks.$bytes.length) {
          return buf.block.push({
            $type: "com.atproto.sync.subscribeRepos#commit",
            ...commit,
            blocks: emptyUint8Array,
            ops: [],
            receiveTimestamp,
            parseTime: performance.now() - parseStart
          });
        }
        const blocks = fromBytes(commit.blocks);
        const car = readCarToMap(blocks);
        for (let opIndex = 0; opIndex < commit.ops.length; opIndex++) {
          const op2 = commit.ops[opIndex];
          const action = op2.action;
          const cid = op2.cid?.$link;
          const now2 = performance.now();
          const record = cid ? car.get(cid) : void 0;
          if (action === "create" || action === "update") {
            if (!cid) {
              buf.block.push({
                $type: "error",
                message: "Missing commit.ops[" + (opIndex - 1) + "].cid.",
                receiveTimestamp,
                parseTime: now2 - parseStart,
                commit
              });
              parseStart = now2;
              continue;
            }
            if (!record) {
              buf.block.push({
                $type: "error",
                message: "Unresolved commit.ops[" + (opIndex - 1) + "].cid " + cid,
                receiveTimestamp,
                parseTime: now2 - parseStart,
                commit
              });
              parseStart = now2;
              continue;
            }
            record.repo = commit.repo;
            record.action = action;
            record.uri = "at://" + commit.repo + "/" + op2.path;
            record.path = op2.path;
            record.cid = cid;
            record.receiveTimestamp = receiveTimestamp;
            record.parseTime = now2 - parseStart;
            buf.block.push(record);
            continue;
          } else if (action === "delete") {
            buf.block.push(
              /** @type {FirehoseDeleteRecord} */
              {
                action,
                path: op2.path,
                receiveTimestamp,
                parseTime: now2 - parseStart
              }
            );
            parseStart = now2;
          } else {
            buf.block.push({
              $type: "error",
              message: "Unknown action " + op2.action,
              ...record,
              receiveTimestamp,
              parseTime: now2 - parseStart
            });
            parseStart = now2;
            continue;
          }
        }
        return;
      }
      return buf.block.push({
        $type: t,
        ...body,
        receiveTimestamp,
        parseTime: performance.now() - parseStart
      });
    }
    function handleError(error) {
      console.error(error);
      const errorText = error.message || "WebSocket error " + error;
      buf.reject(new Error(errorText));
    }
  }
  async function* each(address) {
    for await (const block of firehose(address)) {
      yield* block;
    }
  }
  function createAwaitPromise() {
    const result = {
      /** @type {FirehoseRecord[]} */
      block: []
    };
    result.promise = new Promise((resolve, reject) => {
      result.resolve = resolve;
      result.reject = reject;
    });
    return (
      /** @type {*} */
      result
    );
  }
  function readCarToMap(buffer) {
    const records = /* @__PURE__ */ new Map();
    for (const { cid, bytes } of readCar(buffer).iterate()) {
      records.set(toCidLink(cid).$link, decode2(bytes));
    }
    return records;
  }

  // src/core/load-relative-script-jsonp.js
  function loadRelativeScriptJsonp(relativePath, scriptAlreadyExists) {
    const localPromise = loadDirect(relativePath, scriptAlreadyExists);
    const withFallbackPromise = localPromise.catch(withError);
    return withFallbackPromise;
    function withError(error) {
      return new Promise((resolve) => setTimeout(resolve, 300)).then(
        () => loadDirect(relativePath.replace(/^\.\.\//, "https://mihailik.github.io/"), false)
      );
    }
    function loadDirect(src, scriptAlreadyExists2) {
      return new Promise((resolve, reject) => {
        const funcName = jsonpFuncName(src);
        window[funcName] = hotLoaded;
        if (!scriptAlreadyExists2) {
          scriptAlreadyExists2 = [...document.scripts].find((scr) => scr.src === src);
        }
        let script;
        if (!scriptAlreadyExists2) {
          script = document.createElement("script");
          script.defer = true;
          script.async = true;
          script.onerror = function(err) {
            script.remove();
            console.error("Error loading " + funcName + " data:", err);
            reject(new Error("Error loading " + funcName + " data " + String(err)));
          };
          script.src = src;
          (document.head || document.body).appendChild(script);
        }
        function hotLoaded(data) {
          if (!scriptAlreadyExists2) script?.remove();
          window["hot"] = void 0;
          delete window["hot"];
          if (data instanceof Error) return reject(data);
          else resolve(data);
        }
      });
    }
  }
  function jsonpFuncName(path) {
    return (
      /** @type {string} */
      path.split(/[/\\]/g).pop().replace(/\.js$/, "").replace(/[^a-z0-9]/ig, "")
    );
  }

  // src/firehose/firehose-with-callback.js
  function firehoseDirect(callbacks) {
    let stopped = false;
    iterate();
    return { stop };
    async function iterate() {
      for await (const entry of firehose.each()) {
        if (stopped) break;
        if (entry.action === "create") {
          let now2 = Date.now();
          const who = shortenDID(entry.repo);
          switch (entry.$type) {
            case "app.bsky.feed.like":
              const likeUri = breakFeedURI(entry.subject?.uri);
              if (who && likeUri?.shortDID && likeUri?.postID)
                callbacks?.like?.(who, likeUri.shortDID, likeUri.postID, now2);
              break;
            case "app.bsky.graph.follow":
              const followWhom = shortenDID(entry.subject);
              if (who && followWhom)
                callbacks?.follow?.(who, followWhom, now2);
              break;
            case "app.bsky.feed.post":
              const postUri = breakFeedURI(entry.uri);
              if (who && postUri?.shortDID && postUri?.postID)
                callbacks?.post?.(who, postUri.shortDID, postUri.postID, void 0, void 0, now2);
              break;
            case "app.bsky.feed.repost":
              const repostUri = breakFeedURI(entry.subject?.uri);
              if (who && repostUri?.shortDID && repostUri?.postID)
                callbacks?.repost?.(who, repostUri.shortDID, repostUri.postID, now2);
              break;
            default:
              break;
          }
        }
      }
    }
    function stop() {
      stopped = true;
    }
  }
  var firehoseJsonObj;
  function fallbackFirehose(callbacks) {
    var waitingTimeout, stopped;
    loadAndStartFirehose();
    return { stop };
    async function loadAndStartFirehose() {
      if (!firehoseJsonObj) {
        console.log("Fallback firehose JSONP loading...");
        firehoseJsonObj = loadRelativeScriptJsonp("../atlas-db-jsonp/firehose.js");
      }
      if (typeof firehoseJsonObj?.then === "function") {
        firehoseJsonObj = await firehoseJsonObj;
      }
      let now2 = Date.now();
      console.log(
        "Fallback firehose: ",
        typeof firehoseJsonObj?.length === "number" ? "[" + firehoseJsonObj.length + "]" : typeof firehoseJsonObj
      );
      while (true) {
        let lastTimestamp = 0;
        for (const entry of firehoseJsonObj) {
          if (lastTimestamp)
            await new Promise((resolve) => setTimeout(resolve, entry.timestamp - lastTimestamp));
          if (stopped) return;
          lastTimestamp = entry.timestamp;
          handleMessage(entry);
        }
      }
      function handleMessage(entry) {
        now2 = Date.now();
        const who = shortenDID(entry.repo);
        switch (entry.$type) {
          case "app.bsky.feed.like":
            const likeUri = breakFeedURI(entry.subject?.uri);
            if (who && likeUri?.shortDID && likeUri?.postID)
              callbacks?.like?.(who, likeUri.shortDID, likeUri.postID, now2);
            break;
          case "app.bsky.graph.follow":
            const followWhom = shortenDID(entry.subject);
            if (who && followWhom)
              callbacks?.follow?.(who, followWhom, now2);
            break;
          case "app.bsky.feed.post":
            const postUri = breakFeedURI(entry.subject);
            if (who && postUri?.shortDID && postUri?.postID)
              callbacks?.post?.(who, postUri.shortDID, postUri.postID, void 0, void 0, now2);
            break;
          case "app.bsky.feed.repost":
            const repostUri = breakFeedURI(entry.subject?.uri);
            if (who && repostUri?.shortDID && repostUri?.postID)
              callbacks?.repost?.(who, repostUri.shortDID, repostUri.postID, now2);
            break;
          default:
            break;
        }
      }
    }
    function stop() {
      stopped = true;
      clearTimeout(waitingTimeout);
    }
  }
  function firehoseWithFallback(callbacks, onFallback) {
    let websocketLikesProcessed = 0;
    let fallbackHose;
    let websocketHose = startWebsocketHose();
    let restartFirehoseOnQuietTimeout;
    const QUIET_TIMEOUT_FIREHOSE_RESTART_MSEC = 1e3 * 5;
    return { stop };
    function restartFirehoseOnQuiet() {
      console.log("reconnecting to Firehose websocket due to suspicious quiet...");
      websocketHose?.stop();
      websocketHose = void 0;
      setTimeout(() => {
        websocketHose = startWebsocketHose();
      }, 50 * Math.random() + 50);
    }
    function startWebsocketHose() {
      console.log("connecting to Firehose websocket...");
      return firehoseDirect({
        ...callbacks,
        like: (who, whose, postID, timeMsec) => {
          const result = callbacks.like?.(who, whose, postID, timeMsec);
          websocketLikesProcessed++;
          clearTimeout(restartFirehoseOnQuietTimeout);
          restartFirehoseOnQuietTimeout = setTimeout(restartFirehoseOnQuiet, QUIET_TIMEOUT_FIREHOSE_RESTART_MSEC);
          return result;
        },
        error: (errorWebSocket) => {
          if (websocketLikesProcessed) {
            console.log("reconnecting to Firehose websocket due to network error...");
            websocketHose?.stop();
            websocketHose = void 0;
            setTimeout(() => {
              websocketHose = startWebsocketHose();
            }, 400 + Math.random() * 500);
          } else {
            console.log("connecting to fallback Firehose dummy data...");
            websocketHose?.stop();
            websocketHose = void 0;
            if (typeof onFallback === "function") onFallback();
            fallbackHose = fallbackFirehose(callbacks);
          }
        }
      });
    }
    function stop() {
      websocketHose?.stop();
      fallbackHose?.stop();
    }
  }

  // src/webgl/layers/mass-comet-mesh.js
  function massCometMesh({ clock: clockArg, comets, get }) {
    const clock = clockArg || { now: () => Date.now() };
    const start = { x: 0, y: 0, z: 0, time: 0, mass: 0, color: 0 };
    const stop = { x: 0, y: 0, z: 0, time: 0, mass: 0, color: 0 };
    const control = { x: 0, y: 0, z: 0 };
    const baseHalf = 1.5 * Math.tan(Math.PI / 6);
    const positions = new Float32Array([0, 0, 0]);
    let [
      offsetStartBuf,
      offsetStopBuf,
      offsetControlBuf,
      diameterStartStopBuf,
      timeStartStopBuf,
      colorStartStopBuf
    ] = allocateBuffers(comets.length);
    populateBuffers();
    let geometry = createGeometryAndAttributes();
    geometry.instanceCount = comets.length;
    const material = new ShaderMaterial({
      uniforms: {
        time: { value: clock.now() / 1e3 }
      },
      vertexShader: (
        /* glsl */
        `
            precision highp float;

            attribute vec3 offsetStart;
            attribute vec3 offsetStop;
            attribute vec3 offsetControl;

            attribute vec2 diameterStartStop;
            attribute vec2 timeStartStop;

            attribute uvec2 colorStartStop;

            uniform float time;

            varying vec3 vOffset;
            varying float vDiameter;

            varying float vFogDist;
            varying vec4 vColor;

            varying float vTimeRatio;

            vec3 quadraticBezier(float t, vec3 startPoint, vec3 controlPoint, vec3 stopPoint) {
              float oneMinusT = 1.0 - t;
              return  oneMinusT * oneMinusT * startPoint + 2.0 * oneMinusT * t * controlPoint + t * t * stopPoint;
            }

            void main(){

            float startTime = min(timeStartStop.x, timeStartStop.y);
            float endTime = max(timeStartStop.x, timeStartStop.y);
            vTimeRatio = (time - startTime) / (endTime - startTime);

            float distanceTimeFunction = sqrt(sqrt(vTimeRatio));

            vOffset = quadraticBezier(distanceTimeFunction, offsetStart, offsetControl, offsetStop);

            // DEBUG
            // vOffset = mix(offsetStart, offsetStop, vTimeRatio);
            // vOffset = offsetStart;

            uint rIntStart = (colorStartStop.x / uint(256 * 256 * 256)) % uint(256);
            uint gIntStart = (colorStartStop.x / uint(256 * 256)) % uint(256);
            uint bIntStart = (colorStartStop.x / uint(256)) % uint(256);
            uint aIntStart = (colorStartStop.x) % uint(256);
            vec4 colorStart = vec4(
              float(rIntStart) / 255.0f,
              float(gIntStart) / 255.0f,
              float(bIntStart) / 255.0f,
              float(aIntStart) / 255.0f);

            uint rIntStop = (colorStartStop.y / uint(256 * 256 * 256)) % uint(256);
            uint gIntStop = (colorStartStop.y / uint(256 * 256)) % uint(256);
            uint bIntStop = (colorStartStop.y / uint(256)) % uint(256);
            uint aIntStop = (colorStartStop.y) % uint(256);
            vec4 colorStop = vec4(
              float(rIntStop) / 255.0f,
              float(gIntStop) / 255.0f,
              float(bIntStop) / 255.0f,
              float(aIntStop) / 255.0f);

            vColor = mix(colorStart, colorStop, vTimeRatio);
            vDiameter = mix(diameterStartStop.x, diameterStartStop.y, vTimeRatio);

            // DEBUG?
            if (vTimeRatio > 1.0 || vTimeRatio < 0.0) {
              vDiameter = 0.0;
            }

            gl_Position = projectionMatrix * (modelViewMatrix * vec4(vOffset, 1.0));

            vec4 viewPosition = modelViewMatrix * vec4(vOffset, 1.0);
            float distanceToCamera = length(viewPosition.xyz);

            // Calculate the point size based on the diameter and distance (example)
            float pointScaleFactor = 1600.0; // Adjust this value to control scaling
            gl_PointSize = abs(vDiameter) * pointScaleFactor / distanceToCamera;

            vFogDist = distance(cameraPosition, vOffset);

          }
          `
      ),
      fragmentShader: (
        /* glsl */
        `
            precision highp float;

            uniform float time;

            varying vec3 vOffset;
            varying float vDiameter;

            varying float vFogDist;
            varying vec4 vColor;

            varying float vTimeRatio;

            void main() {
              gl_FragColor = vColor;
              float dist = distance(gl_PointCoord * 2.0, vec2(1.0, 1.0));
              dist = vDiameter < 0.0 ? dist * 2.0 : dist;
              float rad = 0.25;
              float areola = rad * 2.0;
              float bodyRatio =
                dist < rad ? 1.0 :
                dist > areola ? 0.0 :
                (areola - dist) / (areola - rad);
              float radiusRatio =
                dist < 0.5 ? 1.0 - dist * 2.0 : 0.0;

              float fogStart = 0.6;
              float fogGray = 1.0;
              float fogRatio = vFogDist < fogStart ? 0.0 : vFogDist > fogGray ? 1.0 : (vFogDist - fogStart) / (fogGray - fogStart);

              vec4 tintColor = vColor;
              tintColor.a = radiusRatio;
              gl_FragColor = mix(gl_FragColor, vec4(1.0,1.0,1.0,0.7), fogRatio * 0.7);
              gl_FragColor = vDiameter < 0.0 ? vec4(0.6,0.0,0.0,1.0) : gl_FragColor;
              gl_FragColor.a = bodyRatio;

              gl_FragColor = tintColor;

              float stepIn = 0.05;
              float stepOut = 0.01;
              float timeFunction =
                vTimeRatio < stepIn ? vTimeRatio / stepIn :
                1.0 - vTimeRatio < stepOut ? (vTimeRatio - 1.0) / stepOut :
                1.0;

              gl_FragColor = tintColor;

              gl_FragColor.a *= timeFunction;

              vec2 posR = gl_PointCoord * 2.0 - vec2(1.0, 1.0);
              float angle = vTimeRatio * 3.14159 * 4.0;
              mat2 rotationMatrix = mat2(
                cos(angle), -sin(angle),
                sin(angle), cos(angle)
              );
              vec2 posRotated = rotationMatrix * posR;

              float diagBias = 1.0 - max(abs(posRotated.x), abs(posRotated.y));
              float diagBiasUltra = diagBias * diagBias * diagBias * diagBias;
              gl_FragColor.a *= diagBiasUltra * diagBiasUltra * diagBiasUltra;

              // DEBUG
              // gl_FragColor = vec4(mix(1.0, 0.0, vTimeRatio), 0.0, mix(0.0, 1.0, vTimeRatio), 1.0);
              // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);

            }
          `
      ),
      side: BackSide,
      forceSinglePass: true,
      transparent: true,
      depthWrite: false
    });
    const mesh = new Points(geometry, material);
    mesh.onBeforeRender = () => {
      material.uniforms["time"].value = clock.now() / 1e3;
    };
    const meshWithUpdates = (
      /** @type {typeof mesh & { updateComets: typeof updateComets }} */
      mesh
    );
    meshWithUpdates.updateComets = updateComets;
    return meshWithUpdates;
    function createGeometryAndAttributes() {
      const geometry2 = new InstancedBufferGeometry();
      geometry2.setAttribute("position", new Float32BufferAttribute(positions, 3));
      geometry2.setAttribute("offsetStart", new InstancedBufferAttribute(offsetStartBuf, 3));
      geometry2.setAttribute("offsetStop", new InstancedBufferAttribute(offsetStopBuf, 3));
      geometry2.setAttribute("offsetControl", new InstancedBufferAttribute(offsetControlBuf, 3));
      geometry2.setAttribute("diameterStartStop", new InstancedBufferAttribute(diameterStartStopBuf, 2));
      geometry2.setAttribute("timeStartStop", new InstancedBufferAttribute(timeStartStopBuf, 2));
      geometry2.setAttribute("colorStartStop", new InstancedBufferAttribute(colorStartStopBuf, 2));
      return geometry2;
    }
    function allocateBuffers(count) {
      const offsetStartBuf2 = new Float32Array(count * 3);
      const offsetStopBuf2 = new Float32Array(count * 3);
      const offsetControlBuf2 = new Float32Array(count * 3);
      const diameterStartStopBuf2 = new Float32Array(count * 2);
      const timeStartStopBuf2 = new Float32Array(count * 2);
      const colorStartStopBuf2 = new Uint32Array(count * 2);
      return [
        offsetStartBuf2,
        offsetStopBuf2,
        offsetControlBuf2,
        diameterStartStopBuf2,
        timeStartStopBuf2,
        colorStartStopBuf2
      ];
    }
    function zeroEndPoint(p) {
      p.x = 0;
      p.y = 0;
      p.z = 0;
      p.time = 0;
      p.mass = 0;
      p.color = 0;
    }
    function zeroControlPoint(p) {
      p.x = 0;
      p.y = 0;
      p.z = 0;
    }
    function populateBuffers() {
      for (let i = 0; i < comets.length; i++) {
        const spot = comets[i];
        zeroEndPoint(start);
        zeroEndPoint(stop);
        zeroControlPoint(control);
        if (typeof get === "function") get(spot, start, stop, control);
        offsetStartBuf[i * 3 + 0] = start.x;
        offsetStartBuf[i * 3 + 1] = start.y;
        offsetStartBuf[i * 3 + 2] = start.z;
        offsetStopBuf[i * 3 + 0] = stop.x;
        offsetStopBuf[i * 3 + 1] = stop.y;
        offsetStopBuf[i * 3 + 2] = stop.z;
        offsetControlBuf[i * 3 + 0] = control.x;
        offsetControlBuf[i * 3 + 1] = control.y;
        offsetControlBuf[i * 3 + 2] = control.z;
        diameterStartStopBuf[i * 2 + 0] = start.mass;
        diameterStartStopBuf[i * 2 + 1] = stop.mass;
        colorStartStopBuf[i * 2 + 0] = start.color;
        colorStartStopBuf[i * 2 + 1] = stop.color;
        timeStartStopBuf[i * 2 + 0] = start.time;
        timeStartStopBuf[i * 2 + 1] = stop.time;
      }
    }
    function updateComets(newSpots) {
      comets = newSpots;
      if (newSpots.length > geometry.instanceCount || Math.max(320, newSpots.length) < geometry.instanceCount / 2) {
        const newAllocateCount = Math.max(
          Math.floor(newSpots.length * 1.5),
          newSpots.length + 300
        );
        [
          offsetStartBuf,
          offsetStopBuf,
          offsetControlBuf,
          diameterStartStopBuf,
          timeStartStopBuf,
          colorStartStopBuf
        ] = allocateBuffers(newAllocateCount);
        populateBuffers();
        const oldGeometry = geometry;
        geometry = createGeometryAndAttributes();
        geometry.instanceCount = newAllocateCount;
        mesh.geometry = geometry;
        oldGeometry.dispose();
      } else {
        populateBuffers();
        geometry.attributes["offsetStart"].needsUpdate = true;
        geometry.attributes["offsetStop"].needsUpdate = true;
        geometry.attributes["offsetControl"].needsUpdate = true;
        geometry.attributes["diameterStartStop"].needsUpdate = true;
        geometry.attributes["timeStartStop"].needsUpdate = true;
        geometry.attributes["colorStartStop"].needsUpdate = true;
      }
    }
  }

  // src/webgl/layers/mass-flash-mesh.js
  function massFlashMesh({ clock: clockArg, flashes, get }) {
    const clock = clockArg || { now: () => Date.now() };
    const dummy = {
      x: 0,
      y: 0,
      z: 0,
      mass: 0,
      color: 0,
      start: 0,
      stop: 0
    };
    const baseHalf = 1.5 * Math.tan(Math.PI / 6);
    const positions = new Float32Array([0, 0, 0]);
    let offsetBuf = new Float32Array(flashes.length * 4);
    let diameterBuf = new Float32Array(flashes.length);
    let extraBuf = new Float32Array(flashes.length * 2);
    let colorBuf = new Uint32Array(flashes.length);
    populateBuffers();
    let geometry = new InstancedBufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    geometry.setAttribute("offset", new InstancedBufferAttribute(offsetBuf, 3));
    geometry.setAttribute("diameter", new InstancedBufferAttribute(diameterBuf, 1));
    geometry.setAttribute("extra", new InstancedBufferAttribute(extraBuf, 2));
    geometry.setAttribute("color", new InstancedBufferAttribute(colorBuf, 1));
    geometry.instanceCount = flashes.length;
    const material = new ShaderMaterial({
      uniforms: {
        time: { value: clock.now() / 1e3 }
      },
      vertexShader: (
        /* glsl */
        `
            precision highp float;

            attribute vec3 offset;
            attribute float diameter;
            attribute vec2 extra;
            attribute uint color;

            uniform float time;

            varying vec3 vOffset;
            varying float vDiameter;
            varying vec2 vExtra;

            varying float vFogDist;
            varying vec4 vColor;

            void main(){
              vOffset = offset;
              vDiameter = diameter;
              vExtra = extra;

              gl_Position = projectionMatrix * (modelViewMatrix * vec4(offset, 1.0));

              vec4 viewPosition = modelViewMatrix * vec4(offset, 1.0);
              float distanceToCamera = length(viewPosition.xyz);

              // Calculate the point size based on the diameter and distance (example)
              float pointScaleFactor = 2000.0; // Adjust this value to control scaling
              gl_PointSize = abs(diameter) * pointScaleFactor / distanceToCamera;

              // https://stackoverflow.com/a/22899161/140739
              uint rInt = (color / uint(256 * 256 * 256)) % uint(256);
              uint gInt = (color / uint(256 * 256)) % uint(256);
              uint bInt = (color / uint(256)) % uint(256);
              uint aInt = (color) % uint(256);
              vColor = vec4(float(rInt) / 255.0f, float(gInt) / 255.0f, float(bInt) / 255.0f, float(aInt) / 255.0f);

              vFogDist = distance(cameraPosition, offset);

              // this part was kept separate before:
            float startTime = min(extra.x, extra.y);
            float endTime = max(extra.x, extra.y);
            float timeRatio = (time - startTime) / (endTime - startTime);
            float step = 0.1;
            float timeFunction = timeRatio < step ? timeRatio / step : 1.0 - (timeRatio - step) * (1.0 - step);

            //gl_Position.y += timeFunction * timeFunction * timeFunction * 0.001;
            }
          `
      ),
      fragmentShader: (
        /* glsl */
        `
            precision highp float;

            uniform float time;

            varying vec4 vColor;
            varying float vFogDist;

            varying vec3 vOffset;
            varying float vDiameter;
            varying vec2 vExtra;

            void main() {
              gl_FragColor = vColor;
              float dist = distance(gl_PointCoord * 2.0, vec2(1.0, 1.0));
              dist = vDiameter < 0.0 ? dist * 2.0 : dist;
              float rad = 0.25;
              float areola = rad * 2.0;
              float bodyRatio =
                dist < rad ? 1.0 :
                dist > areola ? 0.0 :
                (areola - dist) / (areola - rad);
              float radiusRatio =
                dist < 0.5 ? 1.0 - dist * 2.0 : 0.0;

              float fogStart = 0.6;
              float fogGray = 1.0;
              float fogRatio = vFogDist < fogStart ? 0.0 : vFogDist > fogGray ? 1.0 : (vFogDist - fogStart) / (fogGray - fogStart);

              vec4 tintColor = vColor;
              tintColor.a = radiusRatio;
              gl_FragColor = mix(gl_FragColor, vec4(1.0,1.0,1.0,0.7), fogRatio * 0.7);
              gl_FragColor = vDiameter < 0.0 ? vec4(0.6,0.0,0.0,1.0) : gl_FragColor;
              gl_FragColor.a = bodyRatio;

              vec3 position = vec3((gl_PointCoord * 2.0 - vec2(1.0, 1.0)), 0.0) * vDiameter;
              vec3 offset = vOffset;
              float diameter = vDiameter;
              vec2 extra = vExtra;


              // this part was kept separate before:

            gl_FragColor = tintColor;

            float PI = 3.1415926535897932384626433832795;

            float startTime = min(extra.x, extra.y);
            float endTime = max(extra.x, extra.y);
            float timeRatio = (time - startTime) / (endTime - startTime);
            float step = 0.05;
            float timeFunction =
              timeRatio < step ? timeRatio / step :
              timeRatio < step * 2.0 ?
                (cos((step * 2.0 - timeRatio) * step * PI) + 1.0) / 4.5 + 0.7 :
                (1.0 - (timeRatio - step * 2.0)) / 2.5 + 0.2;

            gl_FragColor = tintColor;

            gl_FragColor.a *= timeFunction;

            // gl_FragColor =
            //   timeRatio > 1000.0 ? vec4(1.0, 0.7, 1.0, tintColor.a) :
            //   timeRatio > 1.0 ? vec4(1.0, 0.0, 1.0, tintColor.a) :
            //   timeRatio > 0.0 ? vec4(0.0, 0.5, 0.5, tintColor.a) :
            //   timeRatio == 0.0 ? vec4(0.0, 0.0, 1.0, tintColor.a) :
            //   timeRatio < 0.0 ? vec4(1.0, 0.0, 0.0, tintColor.a) :
            //   vec4(1.0, 1.0, 0.0, tintColor.a);

            float diagBias = 1.0 - max(abs(gl_PointCoord.x - 0.5), abs(gl_PointCoord.y - 0.5));
            float diagBiasUltra = diagBias * diagBias * diagBias * diagBias;
            gl_FragColor.a *= diagBiasUltra * diagBiasUltra * diagBiasUltra;

            }
          `
      ),
      side: BackSide,
      forceSinglePass: true,
      transparent: true,
      depthWrite: false
    });
    const mesh = new Points(geometry, material);
    mesh.onBeforeRender = () => {
      material.uniforms["time"].value = clock.now() / 1e3;
    };
    const meshWithUpdates = (
      /** @type {typeof mesh & { updateFlashes: typeof updateFlashes }} */
      mesh
    );
    meshWithUpdates.updateFlashes = updateFlashes;
    return meshWithUpdates;
    function populateBuffers() {
      for (let i = 0; i < flashes.length; i++) {
        const flash = flashes[i];
        dummy.x = flash.x || 0;
        dummy.y = flash.z || 0;
        dummy.z = flash.y || 0;
        dummy.mass = flash.mass || 0;
        dummy.color = flash.color || 0;
        dummy.start = flash.start || 0;
        dummy.stop = flash.stop || 0;
        if (typeof get === "function") get(flash, dummy);
        offsetBuf[i * 3 + 0] = dummy.x;
        offsetBuf[i * 3 + 1] = dummy.y;
        offsetBuf[i * 3 + 2] = dummy.z;
        diameterBuf[i] = dummy.mass;
        colorBuf[i] = dummy.color;
        extraBuf[i * 2 + 0] = dummy.start;
        extraBuf[i * 2 + 1] = dummy.stop;
      }
    }
    function updateFlashes(newFlashes) {
      flashes = newFlashes;
      if (newFlashes.length > geometry.instanceCount || Math.max(320, newFlashes.length) < geometry.instanceCount / 2) {
        const newAllocateCount = Math.max(
          Math.floor(newFlashes.length * 1.5),
          newFlashes.length + 300
        );
        offsetBuf = new Float32Array(newAllocateCount * 4);
        diameterBuf = new Float32Array(newAllocateCount);
        extraBuf = new Float32Array(newAllocateCount * 2);
        colorBuf = new Uint32Array(newAllocateCount);
        populateBuffers();
        const oldGeometry = geometry;
        geometry = new InstancedBufferGeometry();
        geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
        geometry.setAttribute("offset", new InstancedBufferAttribute(offsetBuf, 3));
        geometry.setAttribute("diameter", new InstancedBufferAttribute(diameterBuf, 1));
        geometry.setAttribute("extra", new InstancedBufferAttribute(extraBuf, 2));
        geometry.setAttribute("color", new InstancedBufferAttribute(colorBuf, 1));
        geometry.instanceCount = newAllocateCount;
        mesh.geometry = geometry;
        oldGeometry.dispose();
      } else {
        populateBuffers();
        geometry.attributes["offset"].needsUpdate = true;
        geometry.attributes["diameter"].needsUpdate = true;
        geometry.attributes["extra"].needsUpdate = true;
        geometry.attributes["color"].needsUpdate = true;
      }
    }
  }

  // src/webgl/track-firehose.js
  function trackFirehose({ users, clock }) {
    const MAX_WEIGHT = 0.1;
    const FADE_TIME_MSEC = 4e3;
    const COMET_TIME_MSEC = 700;
    const activeFlashes = [];
    const activeComets = [];
    const flashMesh = massFlashMesh({
      clock: { now: () => clock.nowMSec },
      flashes: activeFlashes,
      get: (flash, coords) => {
        const { user } = flash;
        coords.x = user.x;
        coords.y = user.h;
        coords.z = user.y;
        coords.mass = flash.weight;
        coords.color = user.colorRGB * 256 | 255;
        coords.start = flash.start;
        coords.stop = flash.stop;
      }
    });
    const cometMesh = massCometMesh({
      clock: { now: () => clock.nowMSec },
      comets: activeComets,
      get: (comet, start, stop, control) => {
        const { from, to } = comet;
        start.x = from.x;
        start.y = from.h;
        start.z = from.y;
        start.mass = from.weight;
        start.color = from.colorRGB * 256 | 255;
        start.time = comet.start;
        stop.x = to.x;
        stop.y = to.h;
        stop.z = to.y;
        stop.mass = comet.weight;
        stop.color = start.color;
        stop.time = comet.stop;
        control.x = (start.x + stop.x) / 2;
        control.y = (start.y + stop.y) / 2 + 0.1;
        control.z = (start.z + stop.z) / 2;
      }
    });
    const group = new Group();
    group.add(
      flashMesh,
      cometMesh
    );
    const unknownsLastSet = /* @__PURE__ */ new Set();
    const unknownsTotalSet = /* @__PURE__ */ new Set();
    const outcome = {
      posts: 0,
      reposts: 0,
      likes: 0,
      follows: 0,
      flashes: 0,
      comets: 0,
      unknowns: 0,
      unknownsTotal: 0,
      mesh: group,
      fallback: false
    };
    firehoseWithFallback({
      post(author, postID, text, replyTo, replyToThread, timeMsec) {
        clock.update();
        flashShortID(author, 1);
        if (replyTo?.shortDID) {
          flashShortID(replyTo.shortDID, 1);
          cometShortID(author, replyTo.shortDID, 0.5);
        }
        ;
        if (replyToThread?.shortDID) {
          flashShortID(replyToThread.shortDID, 0.5);
        }
        outcome.posts++;
      },
      repost(who, whose, postID, timeMsec) {
        clock.update();
        flashShortID(who, 0.6);
        flashShortID(whose, 0.7);
        cometShortID(who, whose, 0.4);
        outcome.reposts++;
      },
      like(who, whose, postID, timeMsec) {
        clock.update();
        flashShortID(who, 0.1);
        flashShortID(whose, 0.4);
        cometShortID(who, whose, 0.2);
        outcome.likes++;
      },
      follow(who, whom, timeMsec) {
        clock.update();
        flashShortID(who, 0.1);
        flashShortID(whom, 1.5);
        cometShortID(who, whom, 2);
        outcome.follows++;
      }
    }, () => {
      outcome.fallback = true;
    });
    return outcome;
    function cometShortID(fromShortDID, toShortDID, weight) {
      const fromUser = users[fromShortDID];
      const toUser = users[toShortDID];
      if (!toUser) return;
      addComet(
        fromUser || fromShortDID,
        toUser,
        clock.nowSeconds,
        clock.nowSeconds + COMET_TIME_MSEC / 1e3,
        weight
      );
      updateComets();
    }
    function flashShortID(shortDID, weight) {
      const user = users[shortDID];
      if (user) {
        addUserFlash(user, clock.nowSeconds, clock.nowSeconds + FADE_TIME_MSEC / 1e3, weight);
      } else {
        if (!outcome.unknowns) {
          unknownsLastSet.clear();
          updateFlashes();
          updateComets();
        }
        unknownsLastSet.add(shortDID);
        unknownsTotalSet.add(shortDID);
        outcome.unknowns = unknownsLastSet.size;
        outcome.unknownsTotal = unknownsTotalSet.size;
      }
    }
    function updateFlashes() {
      outcome.flashes = 0;
      for (const flash of activeFlashes) {
        if (flash.start <= clock.nowSeconds && flash.stop >= clock.nowSeconds) {
          outcome.flashes++;
        }
      }
    }
    function updateComets() {
      outcome.comets = 0;
      for (const comet of activeComets) {
        if (comet.start <= clock.nowSeconds && comet.stop >= clock.nowSeconds) {
          outcome.comets++;
        }
      }
    }
    function addUserFlash(user, start, stop, weight) {
      const nowSeconds = clock.nowSeconds;
      let gapIndex = -1;
      let userFlash;
      for (let i = 0; i < activeFlashes.length; i++) {
        const flash = activeFlashes[i];
        if (flash.user === user) {
          userFlash = flash;
          break;
        }
        if (nowSeconds > flash.stop) {
          gapIndex = i;
        }
      }
      if (userFlash) {
        userFlash.stop = stop;
        userFlash.weight = Math.min(MAX_WEIGHT, weight * 0.09 + userFlash.weight);
      } else {
        const normWeight = Math.min(MAX_WEIGHT, weight * 0.09 + user.weight);
        if (gapIndex >= 0) {
          const reuseFlash = activeFlashes[gapIndex];
          reuseFlash.user = user;
          reuseFlash.start = start;
          reuseFlash.stop = stop;
          reuseFlash.weight = normWeight;
        } else {
          activeFlashes.push({ user, start, stop, weight: normWeight });
        }
      }
      flashMesh.updateFlashes(activeFlashes);
    }
    function addComet(fromUser, toUser, start, stop, weight) {
      const nowSeconds = clock.nowSeconds;
      let gapIndex = -1;
      for (let i = 0; i < activeComets.length; i++) {
        const co = activeComets[i];
        if (nowSeconds > co.stop) {
          gapIndex = i;
        }
      }
      let fromUserOrUnknown;
      if (typeof fromUser === "string") {
        const toRadius = distance2D(toUser.x, toUser.y, 0, 0);
        fromUserOrUnknown = {
          x: toUser.x * 4,
          y: toUser.y * 4,
          h: toUser.h + 2,
          colorRGB: 16777215,
          weight: toUser.weight * 0.2
        };
      } else {
        fromUserOrUnknown = fromUser;
      }
      const normWeight = Math.min(MAX_WEIGHT, weight * fromUserOrUnknown.weight * 70) * 5;
      if (gapIndex >= 0) {
        const reuseComet = activeComets[gapIndex];
        reuseComet.from = fromUserOrUnknown;
        reuseComet.to = toUser;
        reuseComet.start = start;
        reuseComet.stop = typeof fromUser === "string" ? stop + (stop - start) * 4 : stop;
        reuseComet.weight = normWeight;
      } else {
        activeComets.push({ from: fromUserOrUnknown, to: toUser, start, stop, weight: normWeight });
      }
      cometMesh.updateComets(activeComets);
    }
  }

  // src/webgl/track-touch-with-callback.js
  function trackTouchWithCallback({ touchElement, uxElements, renderElements, touchCallback }) {
    touchElement.addEventListener("touchstart", handleTouch);
    touchElement.addEventListener("touchend", handleTouch);
    touchElement.addEventListener("touchmove", handleTouch);
    touchElement.addEventListener("mousedown", handleMouse);
    touchElement.addEventListener("mousemove", handleMouse);
    touchElement.addEventListener("mouseup", handleMouse);
    var touchCoords;
    var touchTimeout;
    function genuineUX(event) {
      var testElem = (
        /** @type {Element | null | undefined} */
        event.target
      );
      while (testElem && testElem !== document.body) {
        if (uxElements.indexOf(testElem) >= 0) return true;
        if (renderElements.indexOf(testElem) >= 0) return false;
        testElem = testElem.parentElement;
      }
      return true;
    }
    function handleTouch(event) {
      if (genuineUX(event)) return;
      event.preventDefault();
      event.stopPropagation();
      const touches = event.changedTouches || event.targetTouches || event.touches;
      if (touches?.length) {
        for (const t of touches) {
          touchCoords = { x: t.pageX || t.clientX, y: t.pageY || t.clientY };
          break;
        }
      }
      if (!touchTimeout) {
        touchTimeout = setTimeout(processTouch, 100);
      }
    }
    function handleMouse(event) {
      if (genuineUX(event)) return;
      touchCoords = { x: event.pageX ?? event.clientX, y: event.pageY ?? event.clientY };
      event.preventDefault();
      if (!touchTimeout) {
        touchTimeout = setTimeout(processTouch, 100);
      }
    }
    function processTouch() {
      touchTimeout = void 0;
      if (!touchCoords) return;
      if (touchCallback) {
        const passEvent = touchCoords;
        touchCoords = void 0;
        if (typeof touchCallback === "function")
          touchCallback(passEvent);
      }
    }
  }

  // src/webgl/shader-layout/shader-layout-gpgpu.js
  var import_gpu = __toESM(require_gpu_browser());
  var import_gpu2 = __toESM(require_gpu_browser());
  var DEFAULT_GRAVITY = 9.8;
  function shaderLayoutGPU({ gravity, particles, get, set }) {
    let [w, h] = fitDimensions(particles.length);
    const gpu = new import_gpu.default.GPU();
    let calcVelocities = gpu.createKernel(nBodyVelocities, {
      output: [w, h],
      constants: { w, h, gravity: gravity || DEFAULT_GRAVITY },
      pipeline: true,
      tactic: "precision"
    }).setArgumentTypes({
      positions: "Array3D(3)",
      masses: "Array",
      velocities: "Array3D(3)",
      deltaTime: "Float",
      count: "Integer"
    }).setLoopMaxIterations((w + 1) * (h + 1));
    let calcPositions = gpu.createKernel(nBodyPositions, {
      output: [w, h],
      constants: { w, h },
      pipeline: true,
      tactic: "precision"
    }).setArgumentTypes({
      positions: "Array3D(3)",
      velocities: "Array3D(3)",
      deltaTime: "Float",
      count: "Integer"
    });
    let bufPositionsIn;
    let bufMasses;
    let bufVelocities;
    let texPositionsOut;
    let texVelocitiesOut;
    updateParticles(particles);
    return {
      updateParticles,
      runLayout
    };
    function runLayout(deltaTime) {
      const posArg = texPositionsOut || new import_gpu2.Input(
        /** @type {any} */
        bufPositionsIn,
        [w, h, 3]
      );
      const velocitiesRes = (
        /** @type {import('gpu.js').Texture} */
        calcVelocities(
          posArg,
          new import_gpu2.Input(
            /** @type {any} */
            bufMasses,
            [w, h]
          ),
          texVelocitiesOut || new import_gpu2.Input(
            /** @type {any} */
            bufVelocities,
            [w, h, 3]
          ),
          deltaTime,
          particles.length
        )
      );
      const positionsRes = (
        /** @type {import('gpu.js').Texture} */
        calcPositions(
          posArg,
          velocitiesRes,
          deltaTime,
          particles.length
        )
      );
      releaseTextures();
      texVelocitiesOut = velocitiesRes;
      texPositionsOut = positionsRes;
      return applyToParticles;
    }
    function applyToParticles() {
      if (!texPositionsOut || !texVelocitiesOut) throw new Error("Textures are released already.");
      const positions = texPositionsOut.toArray();
      const velocities = texVelocitiesOut.toArray();
      for (let i = 0; i < particles.length; i++) {
        const particle = particles[i];
        const [x, y, z] = (
          /** @type {[number, number, number][]} */
          positions[i]
        );
        const [vx, vy, vz] = (
          /** @type {[number, number, number][]} */
          velocities[i]
        );
        get(particle, { x, y, z, mass: 0, vx, vy, vz });
      }
      const dummy = {
        x: 0,
        y: 0,
        z: 0,
        mass: 0,
        vx: 0,
        vy: 0,
        vz: 0
      };
      for (let indexH = 0; indexH < h; indexH++) {
        for (let indexW = 0; indexW < w; indexW++) {
          dummy.x = dummy.y = dummy.z = 0;
          dummy.mass = 0;
          dummy.vx = dummy.vy = dummy.vz = 0;
          const particle = particles[indexH * w + indexW];
          const posWH = positions[indexH][indexW];
          dummy.x = posWH[0];
          dummy.y = posWH[1];
          dummy.z = posWH[2];
          const velWH = velocities[indexH][indexW];
          dummy.vx = velWH[0];
          dummy.vy = velWH[1];
          dummy.vz = velWH[2];
          set(particle, dummy);
        }
      }
    }
    function populateBuffers(bufPositionsIn2, bufMasses2, bufVelocities2) {
      const dummy = {
        x: 0,
        y: 0,
        z: 0,
        mass: 0,
        vx: 0,
        vy: 0,
        vz: 0
      };
      for (let i = 0; i < particles.length; i++) {
        dummy.x = dummy.y = dummy.z = 0;
        dummy.mass = 0;
        dummy.vx = dummy.vy = dummy.vz = 0;
        const particle = particles[i];
        get(particle, dummy);
        const index = i * 3;
        bufPositionsIn2[index] = dummy.x;
        bufPositionsIn2[index + 1] = dummy.y;
        bufPositionsIn2[index + 2] = dummy.z;
        bufMasses2[i] = dummy.mass;
        bufVelocities2[index] = dummy.vx;
        bufVelocities2[index + 1] = dummy.vy;
        bufVelocities2[index + 2] = dummy.vz;
      }
    }
    function updateParticles(newParticles) {
      particles = newParticles;
      const [newW, newH] = fitDimensions(newParticles.length);
      releaseTextures();
      if (!bufPositionsIn || !bufMasses || !bufVelocities || w * h < newW * newH) {
        bufPositionsIn = void 0;
        bufMasses = void 0;
        bufVelocities = void 0;
        w = newW;
        h = newH;
        bufPositionsIn = new Float32Array(w * h * 3);
        bufMasses = new Float32Array(w * h);
        bufVelocities = new Float32Array(w * h * 3);
      }
      populateBuffers(bufPositionsIn, bufMasses, bufVelocities);
    }
    function releaseTextures() {
      texPositionsOut?.delete();
      texPositionsOut = void 0;
      texVelocitiesOut?.delete();
      texVelocitiesOut = void 0;
    }
  }
  function fitDimensions(num) {
    const rt = Math.floor(Math.sqrt(num));
    if (rt * rt >= num) return [rt, rt];
    if (rt * (rt + 1) >= num) return [rt, rt + 1];
    else return [rt + 1, rt + 1];
  }
  function nBodyVelocities(positions, masses, velocities, deltaTime, count) {
    if (this.thread.y * this.constants.w + this.thread.x > count) return [0, 0, 0];
    const xyz = positions[this.thread.y][this.thread.x];
    const x = xyz[0];
    const y = xyz[1];
    const z = xyz[2];
    const m = masses[this.thread.y][this.thread.x];
    const vXYZ = velocities[this.thread.y][this.thread.x];
    const vx = vXYZ[0];
    const vy = vXYZ[1];
    const vz = vXYZ[2];
    let totalForceX = 0;
    let totalForceY = 0;
    let totalForceZ = 0;
    let index = 0;
    for (let otherIndexY = 0; otherIndexY < this.constants.h; otherIndexY++) {
      for (let otherIndexX = 0; otherIndexX < this.constants.w; otherIndexX++) {
        index++;
        if (otherIndexX === this.thread.x && otherIndexY === this.thread.y) continue;
        const otherXYZ = positions[otherIndexY][otherIndexX];
        const otherX = otherXYZ[0];
        const otherY = otherXYZ[1];
        const otherZ = otherXYZ[2];
        const otherM = masses[otherIndexY][otherIndexX];
        const directionX = otherX - x;
        const directionY = otherY - y;
        const directionZ = otherZ - z;
        const normDiv = Math.sqrt(directionX * directionX + directionY * directionY + directionZ * directionZ);
        const normDirectionX = directionX / normDiv;
        const normDirectionY = directionY / normDiv;
        const normDirectionZ = directionZ / normDiv;
        const distance = Math.sqrt((x - otherX) * (x - otherX) + (y - otherY) * (y - otherY) + (z - otherZ) * (z - otherZ));
        const forceMagnitude = this.constants.gravity * m * otherM / (distance * distance);
        const forceX = forceMagnitude * normDirectionX;
        const forceY = forceMagnitude * normDirectionY;
        const forceZ = forceMagnitude * normDirectionZ;
        totalForceX += forceX;
        totalForceY += forceY;
        totalForceZ += forceZ;
        if (index >= count) break;
      }
    }
    const newVx = vx + totalForceX / m * deltaTime;
    const newVy = vy + totalForceY / m * deltaTime;
    const newVz = vz + totalForceZ / m * deltaTime;
    return [newVx, newVy, newVz];
  }
  function nBodyPositions(positions, velocities, deltaTime, count) {
    if (this.thread.y * this.constants.w + this.thread.x > count) return [0, 0, 0];
    const [x, y, z] = positions[this.thread.y][this.thread.x];
    const [vx, vy, vz] = velocities[this.thread.y][this.thread.x];
    const newX = x + vx * deltaTime;
    const newY = y + vy * deltaTime;
    const newZ = z + vz * deltaTime;
    return [newX, newY, newZ];
  }

  // src/webgl/construct-state-and-run.js
  async function constructStateAndRun(rawUsers) {
    const startProcessToTiles = Date.now();
    const usersAndTiles = await processUsersToTiles({ users: rawUsers, dimensionCount: 48, sleep: () => new Promise((resolve) => setTimeout(resolve, 1)) });
    console.log("Processed users to tiles in ", Date.now() - startProcessToTiles, " msec");
    const clock = makeClock();
    const {
      scene,
      camera,
      renderer,
      stats,
      updateUsers
    } = setupScene(usersAndTiles.all, clock);
    const domElements = createDOMLayout({
      canvas3D: renderer.domElement,
      statsElem: stats.dom,
      userCount: usersAndTiles.all.length
    });
    const orbit = (
      // setupOrbitControls2({ camera, host: renderer.domElement, clock, scene });
      setupOrbitControls({ camera, host: renderer.domElement, clock })
    );
    const searchUI = searchUIController({
      titleBarElem: domElements.title
    });
    searchUI.onClose = () => {
      domElements.subtitleArea.innerHTML = "";
    };
    searchUI.onSearchText = (searchText) => {
      const matches = findUserMatches(searchText, usersAndTiles.all);
      if (!matches?.length) searchReportNoMatches(domElements.subtitleArea);
      else searchReportMatches({
        matches,
        subtitleArea: domElements.subtitleArea,
        onChipClick: (shortDID, userChipElem) => focusAndHighlightUser({
          shortDID,
          users: usersAndTiles.byShortDID,
          scene,
          camera,
          moveAndPauseRotation: orbit.moveAndPauseRotation
        })
      });
    };
    let shaderLayout;
    searchUI.onLayout = () => {
      if (!shaderLayout) {
        shaderLayout = shaderLayoutGPU({
          particles: usersAndTiles.all,
          get: (user, coords) => {
            coords.x = user.x;
            coords.y = user.h;
            coords.z = user.y;
            coords.mass = user.weight;
            coords.vx = 0;
            coords.vy = 0;
            coords.vz = 0;
          },
          set: (user, coords) => {
            user.x = coords.x;
            user.h = coords.y;
            user.y = coords.z;
            user.vx = coords.vx;
            user.vy = coords.vy;
            user.vz = coords.vz;
          }
        });
      }
      const applyBack = shaderLayout.runLayout(1e-3);
      applyBack();
    };
    if (location.hash?.length > 3) {
      const hasCommaParts = location.hash.replace(/^#/, "").split(",");
      if (hasCommaParts.length === 3) {
        const [cameraX, cameraY, cameraZ] = hasCommaParts.map(parseFloat);
        camera.position.set(cameraX, cameraY, cameraZ);
      }
    }
    handleWindowResizes(camera, renderer);
    trackTouchWithCallback({
      touchElement: document.body,
      uxElements: [domElements.titleBar, domElements.subtitleArea, domElements.bottomStatusLine],
      renderElements: [renderer.domElement, domElements.root],
      touchCallback: (xy) => {
      }
    });
    const firehoseTrackingRenderer = trackFirehose({ users: usersAndTiles.byShortDID, clock });
    scene.add(firehoseTrackingRenderer.mesh);
    const geoLayer = renderGeoLabels({
      users: usersAndTiles.all,
      tiles: usersAndTiles.tiles,
      tileDimensionCount: usersAndTiles.dimensionCount,
      clock
    });
    scene.add(geoLayer.layerGroup);
    startAnimation();
    function startAnimation() {
      requestAnimationFrame(continueAnimating);
      function continueAnimating() {
        requestAnimationFrame(continueAnimating);
        renderFrame();
      }
      let lastCameraUpdate;
      let lastCameraPos;
      let lastRender;
      let lastBottomStatsUpdate;
      let lastVibeCameraPos;
      let lastVibeTime;
      function renderFrame() {
        clock.update();
        geoLayer.updateWithCamera(camera);
        let rareMoved = false;
        if (!lastCameraPos || !(clock.nowMSec < lastCameraUpdate + 200)) {
          lastCameraUpdate = clock.nowMSec;
          if (!lastCameraPos) lastCameraPos = new Vector3(NaN, NaN, NaN);
          const dist = camera.position.distanceTo(lastCameraPos);
          if (!(dist < 1e-4)) {
            rareMoved = true;
          }
        }
        if (!lastVibeCameraPos) {
          lastVibeCameraPos = camera.position.clone();
          lastVibeTime = clock.nowMSec;
        } else {
          const vibeDist = camera.position.distanceTo(lastVibeCameraPos);
          if (Number.isFinite(vibeDist) && vibeDist > 0.1 && clock.nowMSec - lastVibeTime > 200) {
            lastVibeCameraPos.copy(camera.position);
            lastVibeTime = clock.nowMSec;
            try {
              if (typeof navigator.vibrate === "function") {
                navigator.vibrate(30);
              }
            } catch (bibErr) {
            }
          }
        }
        stats.begin();
        const delta = lastRender ? clock.nowMSec - lastRender : 0;
        lastRender = clock.nowMSec;
        orbit.controls?.update?.(Math.min(delta / 1e3, 0.2));
        renderer.render(scene, camera);
        stats.end();
        if (rareMoved) {
          lastCameraPos.copy(camera.position);
          domElements.status.update(
            camera,
            orbit.rotating,
            firehoseTrackingRenderer.fallback
          );
          const updatedHash = "#" + camera.position.x.toFixed(2) + "," + camera.position.y.toFixed(2) + "," + camera.position.z.toFixed(2);
          try {
            history.replaceState(null, "", updatedHash);
          } catch (_error) {
          }
        }
        if (!(clock.nowMSec - lastBottomStatsUpdate < 1e3) && domElements.bottomStatusLine) {
          lastBottomStatsUpdate = clock.nowMSec;
          domElements.bottomStatusLine.update(firehoseTrackingRenderer, geoLayer);
        }
      }
    }
  }

  // src/webgl/run-webgl-galaxy.js
  async function runWebglGalaxy(rawUsers) {
    constructStateAndRun(rawUsers);
  }

  // src/boot/load-user-base.js
  function loadUserBase() {
    return loadRelativeScriptJsonp(
      "../atlas-db-jsonp/users/hot.js",
      true
      /* scriptAlreadyExists */
    );
  }

  // src/boot/boot.js
  function boot() {
    const hotJsonPromise = loadUserBase();
    withHot(hotJsonPromise);
  }
  async function withHot(hotJsonPromise) {
    const hotJson = await hotJsonPromise;
    const atlasInit = (
      /** @type {HTMLElement} */
      document.querySelector(".atlas-init")
    );
    if (atlasInit) {
      atlasInit.style.transition = "opacity 2s";
      setTimeout(() => {
        atlasInit.style.opacity = "0";
        atlasInit.style.opacity = "0";
        setTimeout(() => {
          atlasInit?.remove();
        }, 2e3);
      }, 10);
    }
    runWebglGalaxy(hotJson);
  }

  // src/index.js
  boot();
})();
/*! Bundled license information:

gpu.js/dist/gpu-browser.js:
  (**
   * gpu.js
   * http://gpu.rocks/
   *
   * GPU Accelerated JavaScript
   *
   * @version 2.16.0
   * @date Wed Nov 16 2022 15:48:37 GMT-0500 (Eastern Standard Time)
   *
   * @license MIT
   * The MIT License
   *
   * Copyright (c) 2022 gpu.js Team
   *)

three/build/three.core.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

troika-three-text/dist/troika-three-text.esm.js:
  (*!
  Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.
  Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE
  *)
  (*!
  Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate
  (https://github.com/101arrowz/fflate) for use in Troika text rendering. 
  Original licenses apply: 
  - fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)
  - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)
  *)
  (*!
  Custom bundle of @unicode-font-resolver/client v1.0.2 (https://github.com/lojjic/unicode-font-resolver)
  for use in Troika text rendering. 
  Original MIT license applies
  *)
*/
//# sourceMappingURL=index.js.map
