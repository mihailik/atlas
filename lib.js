(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all) => {
    for (var name in all)
      __defProp(target2, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/multiformats/src/bytes.js
  var empty, equals, coerce;
  var init_bytes = __esm({
    "node_modules/multiformats/src/bytes.js"() {
      empty = new Uint8Array(0);
      equals = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
    }
  });

  // node_modules/multiformats/vendor/base-x.js
  function base(ALPHABET, name) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode6(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length2 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i2;
        pbegin++;
      }
      var it2 = size - length2;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length2 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length2 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length2;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode8(string) {
      var buffer2 = decodeUnsafe(string);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name} character`);
    }
    return {
      encode: encode6,
      decodeUnsafe,
      decode: decode8
    };
  }
  var src, _brrp__multiformats_scope_baseX, base_x_default;
  var init_base_x = __esm({
    "node_modules/multiformats/vendor/base-x.js"() {
      src = base;
      _brrp__multiformats_scope_baseX = src;
      base_x_default = _brrp__multiformats_scope_baseX;
    }
  });

  // node_modules/multiformats/src/bases/base.js
  var Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode, encode, rfc4648;
  var init_base = __esm({
    "node_modules/multiformats/src/bases/base.js"() {
      init_base_x();
      init_bytes();
      Encoder = class {
        /**
         * @param {Base} name
         * @param {Prefix} prefix
         * @param {(bytes:Uint8Array) => string} baseEncode
         */
        constructor(name, prefix, baseEncode) {
          this.name = name;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        /**
         * @param {Uint8Array} bytes
         * @returns {API.Multibase<Prefix>}
         */
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder = class {
        /**
         * @param {Base} name
         * @param {Prefix} prefix
         * @param {(text:string) => Uint8Array} baseDecode
         */
        constructor(name, prefix, baseDecode) {
          this.name = name;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = /** @type {number} */
          prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        /**
         * @param {string} text
         */
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        /**
         * @template {string} OtherPrefix
         * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder
         * @returns {ComposedDecoder<Prefix|OtherPrefix>}
         */
        or(decoder2) {
          return or(this, decoder2);
        }
      };
      ComposedDecoder = class {
        /**
         * @param {Decoders<Prefix>} decoders
         */
        constructor(decoders) {
          this.decoders = decoders;
        }
        /**
         * @template {string} OtherPrefix
         * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder
         * @returns {ComposedDecoder<Prefix|OtherPrefix>}
         */
        or(decoder2) {
          return or(this, decoder2);
        }
        /**
         * @param {string} input
         * @returns {Uint8Array}
         */
        decode(input) {
          const prefix = (
            /** @type {Prefix} */
            input[0]
          );
          const decoder2 = this.decoders[prefix];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or = (left, right) => new ComposedDecoder(
        /** @type {Decoders<L|R>} */
        {
          ...left.decoders || { [
            /** @type API.UnibaseDecoder<L> */
            left.prefix
          ]: left },
          ...right.decoders || { [
            /** @type API.UnibaseDecoder<R> */
            right.prefix
          ]: right }
        }
      );
      Codec = class {
        /**
         * @param {Base} name
         * @param {Prefix} prefix
         * @param {(bytes:Uint8Array) => string} baseEncode
         * @param {(text:string) => Uint8Array} baseDecode
         */
        constructor(name, prefix, baseEncode, baseDecode) {
          this.name = name;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name, prefix, baseEncode);
          this.decoder = new Decoder(name, prefix, baseDecode);
        }
        /**
         * @param {Uint8Array} input
         */
        encode(input) {
          return this.encoder.encode(input);
        }
        /**
         * @param {string} input
         */
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from = ({ name, prefix, encode: encode6, decode: decode8 }) => new Codec(name, prefix, encode6, decode8);
      baseX = ({ prefix, name, alphabet }) => {
        const { encode: encode6, decode: decode8 } = base_x_default(alphabet, name);
        return from({
          prefix,
          name,
          encode: encode6,
          /**
           * @param {string} text
           */
          decode: (text) => coerce(decode8(text))
        });
      };
      decode = (string, alphabet, bitsPerChar, name) => {
        const codes = {};
        for (let i = 0; i < alphabet.length; ++i) {
          codes[alphabet[i]] = i;
        }
        let end = string.length;
        while (string[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode = (data, alphabet, bitsPerChar) => {
        const pad = alphabet[alphabet.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {
        return from({
          prefix,
          name,
          encode(input) {
            return encode(input, alphabet, bitsPerChar);
          },
          decode(input) {
            return decode(input, alphabet, bitsPerChar, name);
          }
        });
      };
    }
  });

  // node_modules/multiformats/src/bases/base32.js
  var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
  var init_base32 = __esm({
    "node_modules/multiformats/src/bases/base32.js"() {
      init_base();
      base32 = rfc4648({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper = rfc4648({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad = rfc4648({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper = rfc4648({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex = rfc4648({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper = rfc4648({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad = rfc4648({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper = rfc4648({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z = rfc4648({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/multiformats/src/bases/base58.js
  var base58btc, base58flickr;
  var init_base58 = __esm({
    "node_modules/multiformats/src/bases/base58.js"() {
      init_base();
      base58btc = baseX({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr = baseX({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/multiformats/vendor/varint.js
  function encode2(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT) {
      out[offset++] = num & 255 | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset++] = num & 255 | MSB;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode2.bytes = offset - oldOffset + 1;
    return out;
  }
  function read(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
  }
  var encode_1, MSB, REST, MSBALL, INT, decode2, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
  var init_varint = __esm({
    "node_modules/multiformats/vendor/varint.js"() {
      encode_1 = encode2;
      MSB = 128;
      REST = 127;
      MSBALL = ~REST;
      INT = Math.pow(2, 31);
      decode2 = read;
      MSB$1 = 128;
      REST$1 = 127;
      N1 = Math.pow(2, 7);
      N2 = Math.pow(2, 14);
      N3 = Math.pow(2, 21);
      N4 = Math.pow(2, 28);
      N5 = Math.pow(2, 35);
      N6 = Math.pow(2, 42);
      N7 = Math.pow(2, 49);
      N8 = Math.pow(2, 56);
      N9 = Math.pow(2, 63);
      length = function(value) {
        return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
      };
      varint = {
        encode: encode_1,
        decode: decode2,
        encodingLength: length
      };
      _brrp_varint = varint;
      varint_default = _brrp_varint;
    }
  });

  // node_modules/multiformats/src/varint.js
  var decode3, encodeTo, encodingLength;
  var init_varint2 = __esm({
    "node_modules/multiformats/src/varint.js"() {
      init_varint();
      decode3 = (data, offset = 0) => {
        const code = varint_default.decode(data, offset);
        return [code, varint_default.decode.bytes];
      };
      encodeTo = (int, target2, offset = 0) => {
        varint_default.encode(int, target2, offset);
        return target2;
      };
      encodingLength = (int) => {
        return varint_default.encodingLength(int);
      };
    }
  });

  // node_modules/multiformats/src/hashes/digest.js
  var create, decode4, equals2, Digest;
  var init_digest = __esm({
    "node_modules/multiformats/src/hashes/digest.js"() {
      init_bytes();
      init_varint2();
      create = (code, digest) => {
        const size = digest.byteLength;
        const sizeOffset = encodingLength(code);
        const digestOffset = sizeOffset + encodingLength(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo(code, bytes, 0);
        encodeTo(size, bytes, sizeOffset);
        bytes.set(digest, digestOffset);
        return new Digest(code, size, digest, bytes);
      };
      decode4 = (multihash) => {
        const bytes = coerce(multihash);
        const [code, sizeOffset] = decode3(bytes);
        const [size, digestOffset] = decode3(bytes.subarray(sizeOffset));
        const digest = bytes.subarray(sizeOffset + digestOffset);
        if (digest.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest(code, size, digest, bytes);
      };
      equals2 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          const data = (
            /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */
            b
          );
          return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals(a.bytes, data.bytes);
        }
      };
      Digest = class {
        /**
         * Creates a multihash digest.
         *
         * @param {Code} code
         * @param {Size} size
         * @param {Uint8Array} digest
         * @param {Uint8Array} bytes
         */
        constructor(code, size, digest, bytes) {
          this.code = code;
          this.size = size;
          this.digest = digest;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/multiformats/src/link/interface.js
  var init_interface = __esm({
    "node_modules/multiformats/src/link/interface.js"() {
    }
  });

  // node_modules/multiformats/src/cid.js
  var format, cache, baseCache, CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol;
  var init_cid = __esm({
    "node_modules/multiformats/src/cid.js"() {
      init_base32();
      init_base58();
      init_bytes();
      init_digest();
      init_varint2();
      init_interface();
      format = (link, base2) => {
        const { bytes, version } = link;
        switch (version) {
          case 0:
            return toStringV0(
              bytes,
              baseCache(link),
              /** @type {API.MultibaseEncoder<"z">} */
              base2 || base58btc.encoder
            );
          default:
            return toStringV1(
              bytes,
              baseCache(link),
              /** @type {API.MultibaseEncoder<Prefix>} */
              base2 || base32.encoder
            );
        }
      };
      cache = /* @__PURE__ */ new WeakMap();
      baseCache = (cid) => {
        const baseCache2 = cache.get(cid);
        if (baseCache2 == null) {
          const baseCache3 = /* @__PURE__ */ new Map();
          cache.set(cid, baseCache3);
          return baseCache3;
        }
        return baseCache2;
      };
      CID = class _CID {
        /**
         * @param {Version} version - Version of the CID
         * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
         * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.
         * @param {Uint8Array} bytes
         */
        constructor(version, code, multihash, bytes) {
          this.code = code;
          this.version = version;
          this.multihash = multihash;
          this.bytes = bytes;
          this["/"] = bytes;
        }
        /**
         * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
         * please either use `CID.asCID(cid)` or switch to new signalling mechanism
         *
         * @deprecated
         */
        get asCID() {
          return this;
        }
        // ArrayBufferView
        get byteOffset() {
          return this.bytes.byteOffset;
        }
        // ArrayBufferView
        get byteLength() {
          return this.bytes.byteLength;
        }
        /**
         * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}
         */
        toV0() {
          switch (this.version) {
            case 0: {
              return (
                /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */
                this
              );
            }
            case 1: {
              const { code, multihash } = this;
              if (code !== DAG_PB_CODE) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return (
                /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */
                _CID.createV0(
                  /** @type {API.MultihashDigest<API.SHA_256>} */
                  multihash
                )
              );
            }
            default: {
              throw Error(
                `Can not convert CID version ${this.version} to version 0. This is a bug please report`
              );
            }
          }
        }
        /**
         * @returns {CID<Data, Format, Alg, 1>}
         */
        toV1() {
          switch (this.version) {
            case 0: {
              const { code, digest } = this.multihash;
              const multihash = create(code, digest);
              return (
                /** @type {CID<Data, Format, Alg, 1>} */
                _CID.createV1(this.code, multihash)
              );
            }
            case 1: {
              return (
                /** @type {CID<Data, Format, Alg, 1>} */
                this
              );
            }
            default: {
              throw Error(
                `Can not convert CID version ${this.version} to version 1. This is a bug please report`
              );
            }
          }
        }
        /**
         * @param {unknown} other
         * @returns {other is CID<Data, Format, Alg, Version>}
         */
        equals(other) {
          return _CID.equals(this, other);
        }
        /**
         * @template {unknown} Data
         * @template {number} Format
         * @template {number} Alg
         * @template {API.Version} Version
         * @param {API.Link<Data, Format, Alg, Version>} self
         * @param {unknown} other
         * @returns {other is CID}
         */
        static equals(self2, other) {
          const unknown = (
            /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */
            other
          );
          return unknown && self2.code === unknown.code && self2.version === unknown.version && equals2(self2.multihash, unknown.multihash);
        }
        /**
         * @param {API.MultibaseEncoder<string>} [base]
         * @returns {string}
         */
        toString(base2) {
          return format(this, base2);
        }
        /**
         * @returns {API.LinkJSON<this>}
         */
        toJSON() {
          return { "/": format(this) };
        }
        link() {
          return this;
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        // Legacy
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return `CID(${this.toString()})`;
        }
        /**
         * Takes any input `value` and returns a `CID` instance if it was
         * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
         * it will return value back. If `value` is not instance of this CID
         * class, but is compatible CID it will return new instance of this
         * `CID` class. Otherwise returns null.
         *
         * This allows two different incompatible versions of CID library to
         * co-exist and interop as long as binary interface is compatible.
         *
         * @template {unknown} Data
         * @template {number} Format
         * @template {number} Alg
         * @template {API.Version} Version
         * @template {unknown} U
         * @param {API.Link<Data, Format, Alg, Version>|U} input
         * @returns {CID<Data, Format, Alg, Version>|null}
         */
        static asCID(input) {
          if (input == null) {
            return null;
          }
          const value = (
            /** @type {any} */
            input
          );
          if (value instanceof _CID) {
            return value;
          } else if (value["/"] != null && value["/"] === value.bytes || value.asCID === value) {
            const { version, code, multihash, bytes } = value;
            return new _CID(
              version,
              code,
              /** @type {API.MultihashDigest<Alg>} */
              multihash,
              bytes || encodeCID(version, code, multihash.bytes)
            );
          } else if (value[cidSymbol] === true) {
            const { version, multihash, code } = value;
            const digest = (
              /** @type {API.MultihashDigest<Alg>} */
              decode4(multihash)
            );
            return _CID.create(version, code, digest);
          } else {
            return null;
          }
        }
        /**
         *
         * @template {unknown} Data
         * @template {number} Format
         * @template {number} Alg
         * @template {API.Version} Version
         * @param {Version} version - Version of the CID
         * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
         * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.
         * @returns {CID<Data, Format, Alg, Version>}
         */
        static create(version, code, digest) {
          if (typeof code !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          if (!(digest.bytes instanceof Uint8Array)) {
            throw new Error("Invalid digest");
          }
          switch (version) {
            case 0: {
              if (code !== DAG_PB_CODE) {
                throw new Error(
                  `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`
                );
              } else {
                return new _CID(version, code, digest, digest.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID(version, code, digest.bytes);
              return new _CID(version, code, digest, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        /**
         * Simplified version of `create` for CIDv0.
         *
         * @template {unknown} [T=unknown]
         * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.
         * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}
         */
        static createV0(digest) {
          return _CID.create(0, DAG_PB_CODE, digest);
        }
        /**
         * Simplified version of `create` for CIDv1.
         *
         * @template {unknown} Data
         * @template {number} Code
         * @template {number} Alg
         * @param {Code} code - Content encoding format code.
         * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.
         * @returns {CID<Data, Code, Alg, 1>}
         */
        static createV1(code, digest) {
          return _CID.create(1, code, digest);
        }
        /**
         * Decoded a CID from its binary representation. The byte array must contain
         * only the CID with no additional bytes.
         *
         * An error will be thrown if the bytes provided do not contain a valid
         * binary representation of a CID.
         *
         * @template {unknown} Data
         * @template {number} Code
         * @template {number} Alg
         * @template {API.Version} Ver
         * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes
         * @returns {CID<Data, Code, Alg, Ver>}
         */
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        /**
         * Decoded a CID from its binary representation at the beginning of a byte
         * array.
         *
         * Returns an array with the first element containing the CID and the second
         * element containing the remainder of the original byte array. The remainder
         * will be a zero-length byte array if the provided bytes only contained a
         * binary CID representation.
         *
         * @template {unknown} T
         * @template {number} C
         * @template {number} A
         * @template {API.Version} V
         * @param {API.ByteView<API.Link<T, C, A, V>>} bytes
         * @returns {[CID<T, C, A, V>, Uint8Array]}
         */
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce(
            bytes.subarray(prefixSize, prefixSize + specs.multihashSize)
          );
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(
            specs.multihashSize - specs.digestSize
          );
          const digest = new Digest(
            specs.multihashCode,
            specs.digestSize,
            digestBytes,
            multihashBytes
          );
          const cid = specs.version === 0 ? _CID.createV0(
            /** @type {API.MultihashDigest<API.SHA_256>} */
            digest
          ) : _CID.createV1(specs.codec, digest);
          return [
            /** @type {CID<T, C, A, V>} */
            cid,
            bytes.subarray(specs.size)
          ];
        }
        /**
         * Inspect the initial bytes of a CID to determine its properties.
         *
         * Involves decoding up to 4 varints. Typically this will require only 4 to 6
         * bytes but for larger multicodec code values and larger multihash digest
         * lengths these varints can be quite large. It is recommended that at least
         * 10 bytes be made available in the `initialBytes` argument for a complete
         * inspection.
         *
         * @template {unknown} T
         * @template {number} C
         * @template {number} A
         * @template {API.Version} V
         * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes
         * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}
         */
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length2] = decode3(initialBytes.subarray(offset));
            offset += length2;
            return i;
          };
          let version = (
            /** @type {V} */
            next()
          );
          let codec = (
            /** @type {C} */
            DAG_PB_CODE
          );
          if (
            /** @type {number} */
            version === 18
          ) {
            version = /** @type {V} */
            0;
            offset = 0;
          } else {
            codec = /** @type {C} */
            next();
          }
          if (version !== 0 && version !== 1) {
            throw new RangeError(`Invalid CID version ${version}`);
          }
          const prefixSize = offset;
          const multihashCode = (
            /** @type {A} */
            next()
          );
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return { version, codec, multihashCode, digestSize, multihashSize, size };
        }
        /**
         * Takes cid in a string representation and creates an instance. If `base`
         * decoder is not provided will use a default from the configuration. It will
         * throw an error if encoding of the CID is not compatible with supplied (or
         * a default decoder).
         *
         * @template {string} Prefix
         * @template {unknown} Data
         * @template {number} Code
         * @template {number} Alg
         * @template {API.Version} Ver
         * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source
         * @param {API.MultibaseDecoder<Prefix>} [base]
         * @returns {CID<Data, Code, Alg, Ver>}
         */
        static parse(source, base2) {
          const [prefix, bytes] = parseCIDtoBytes(source, base2);
          const cid = _CID.decode(bytes);
          if (cid.version === 0 && source[0] !== "Q") {
            throw Error("Version 0 CID string must not include multibase prefix");
          }
          baseCache(cid).set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes = (source, base2) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base2 || base58btc;
            return [
              /** @type {Prefix} */
              base58btc.prefix,
              decoder2.decode(`${base58btc.prefix}${source}`)
            ];
          }
          case base58btc.prefix: {
            const decoder2 = base2 || base58btc;
            return [
              /** @type {Prefix} */
              base58btc.prefix,
              decoder2.decode(source)
            ];
          }
          case base32.prefix: {
            const decoder2 = base2 || base32;
            return [
              /** @type {Prefix} */
              base32.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base2 == null) {
              throw Error(
                "To parse non base32 or base58btc encoded CID multibase decoder must be provided"
              );
            }
            return [
              /** @type {Prefix} */
              source[0],
              base2.decode(source)
            ];
          }
        }
      };
      toStringV0 = (bytes, cache2, base2) => {
        const { prefix } = base2;
        if (prefix !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base2.name} encoding`);
        }
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base2.encode(bytes).slice(1);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV1 = (bytes, cache2, base2) => {
        const { prefix } = base2;
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base2.encode(bytes);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE = 112;
      SHA_256_CODE = 18;
      encodeCID = (version, code, multihash) => {
        const codeOffset = encodingLength(version);
        const hashOffset = codeOffset + encodingLength(code);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo(version, bytes, 0);
        encodeTo(code, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol = Symbol.for("@ipld/js-cid/CID");
    }
  });

  // node_modules/multiformats/src/hashes/hasher.js
  var init_hasher = __esm({
    "node_modules/multiformats/src/hashes/hasher.js"() {
      init_digest();
    }
  });

  // node_modules/multiformats/src/interface.js
  var init_interface2 = __esm({
    "node_modules/multiformats/src/interface.js"() {
    }
  });

  // node_modules/multiformats/src/index.js
  var init_src = __esm({
    "node_modules/multiformats/src/index.js"() {
      init_bytes();
      init_cid();
      init_digest();
      init_hasher();
      init_varint2();
      init_interface2();
    }
  });

  // node_modules/three/build/three.module.js
  var three_module_exports = {};
  __export(three_module_exports, {
    ACESFilmicToneMapping: () => ACESFilmicToneMapping,
    AddEquation: () => AddEquation,
    AddOperation: () => AddOperation,
    AdditiveAnimationBlendMode: () => AdditiveAnimationBlendMode,
    AdditiveBlending: () => AdditiveBlending,
    AlphaFormat: () => AlphaFormat,
    AlwaysCompare: () => AlwaysCompare,
    AlwaysDepth: () => AlwaysDepth,
    AlwaysStencilFunc: () => AlwaysStencilFunc,
    AmbientLight: () => AmbientLight,
    AmbientLightProbe: () => AmbientLightProbe,
    AnimationAction: () => AnimationAction,
    AnimationClip: () => AnimationClip,
    AnimationLoader: () => AnimationLoader,
    AnimationMixer: () => AnimationMixer,
    AnimationObjectGroup: () => AnimationObjectGroup,
    AnimationUtils: () => AnimationUtils,
    ArcCurve: () => ArcCurve,
    ArrayCamera: () => ArrayCamera,
    ArrowHelper: () => ArrowHelper,
    Audio: () => Audio,
    AudioAnalyser: () => AudioAnalyser,
    AudioContext: () => AudioContext,
    AudioListener: () => AudioListener,
    AudioLoader: () => AudioLoader,
    AxesHelper: () => AxesHelper,
    BackSide: () => BackSide,
    BasicDepthPacking: () => BasicDepthPacking,
    BasicShadowMap: () => BasicShadowMap,
    Bone: () => Bone,
    BooleanKeyframeTrack: () => BooleanKeyframeTrack,
    Box2: () => Box2,
    Box3: () => Box3,
    Box3Helper: () => Box3Helper,
    BoxGeometry: () => BoxGeometry,
    BoxHelper: () => BoxHelper,
    BufferAttribute: () => BufferAttribute,
    BufferGeometry: () => BufferGeometry,
    BufferGeometryLoader: () => BufferGeometryLoader,
    ByteType: () => ByteType,
    Cache: () => Cache,
    Camera: () => Camera,
    CameraHelper: () => CameraHelper,
    CanvasTexture: () => CanvasTexture,
    CapsuleGeometry: () => CapsuleGeometry,
    CatmullRomCurve3: () => CatmullRomCurve3,
    CineonToneMapping: () => CineonToneMapping,
    CircleGeometry: () => CircleGeometry,
    ClampToEdgeWrapping: () => ClampToEdgeWrapping,
    Clock: () => Clock,
    Color: () => Color,
    ColorKeyframeTrack: () => ColorKeyframeTrack,
    ColorManagement: () => ColorManagement,
    CompressedArrayTexture: () => CompressedArrayTexture,
    CompressedCubeTexture: () => CompressedCubeTexture,
    CompressedTexture: () => CompressedTexture,
    CompressedTextureLoader: () => CompressedTextureLoader,
    ConeGeometry: () => ConeGeometry,
    CubeCamera: () => CubeCamera,
    CubeReflectionMapping: () => CubeReflectionMapping,
    CubeRefractionMapping: () => CubeRefractionMapping,
    CubeTexture: () => CubeTexture,
    CubeTextureLoader: () => CubeTextureLoader,
    CubeUVReflectionMapping: () => CubeUVReflectionMapping,
    CubicBezierCurve: () => CubicBezierCurve,
    CubicBezierCurve3: () => CubicBezierCurve3,
    CubicInterpolant: () => CubicInterpolant,
    CullFaceBack: () => CullFaceBack,
    CullFaceFront: () => CullFaceFront,
    CullFaceFrontBack: () => CullFaceFrontBack,
    CullFaceNone: () => CullFaceNone,
    Curve: () => Curve,
    CurvePath: () => CurvePath,
    CustomBlending: () => CustomBlending,
    CustomToneMapping: () => CustomToneMapping,
    CylinderGeometry: () => CylinderGeometry,
    Cylindrical: () => Cylindrical,
    Data3DTexture: () => Data3DTexture,
    DataArrayTexture: () => DataArrayTexture,
    DataTexture: () => DataTexture,
    DataTextureLoader: () => DataTextureLoader,
    DataUtils: () => DataUtils,
    DecrementStencilOp: () => DecrementStencilOp,
    DecrementWrapStencilOp: () => DecrementWrapStencilOp,
    DefaultLoadingManager: () => DefaultLoadingManager,
    DepthFormat: () => DepthFormat,
    DepthStencilFormat: () => DepthStencilFormat,
    DepthTexture: () => DepthTexture,
    DirectionalLight: () => DirectionalLight,
    DirectionalLightHelper: () => DirectionalLightHelper,
    DiscreteInterpolant: () => DiscreteInterpolant,
    DisplayP3ColorSpace: () => DisplayP3ColorSpace,
    DodecahedronGeometry: () => DodecahedronGeometry,
    DoubleSide: () => DoubleSide,
    DstAlphaFactor: () => DstAlphaFactor,
    DstColorFactor: () => DstColorFactor,
    DynamicCopyUsage: () => DynamicCopyUsage,
    DynamicDrawUsage: () => DynamicDrawUsage,
    DynamicReadUsage: () => DynamicReadUsage,
    EdgesGeometry: () => EdgesGeometry,
    EllipseCurve: () => EllipseCurve,
    EqualCompare: () => EqualCompare,
    EqualDepth: () => EqualDepth,
    EqualStencilFunc: () => EqualStencilFunc,
    EquirectangularReflectionMapping: () => EquirectangularReflectionMapping,
    EquirectangularRefractionMapping: () => EquirectangularRefractionMapping,
    Euler: () => Euler,
    EventDispatcher: () => EventDispatcher,
    ExtrudeGeometry: () => ExtrudeGeometry,
    FileLoader: () => FileLoader,
    Float16BufferAttribute: () => Float16BufferAttribute,
    Float32BufferAttribute: () => Float32BufferAttribute,
    Float64BufferAttribute: () => Float64BufferAttribute,
    FloatType: () => FloatType,
    Fog: () => Fog,
    FogExp2: () => FogExp2,
    FramebufferTexture: () => FramebufferTexture,
    FrontSide: () => FrontSide,
    Frustum: () => Frustum,
    GLBufferAttribute: () => GLBufferAttribute,
    GLSL1: () => GLSL1,
    GLSL3: () => GLSL3,
    GreaterCompare: () => GreaterCompare,
    GreaterDepth: () => GreaterDepth,
    GreaterEqualCompare: () => GreaterEqualCompare,
    GreaterEqualDepth: () => GreaterEqualDepth,
    GreaterEqualStencilFunc: () => GreaterEqualStencilFunc,
    GreaterStencilFunc: () => GreaterStencilFunc,
    GridHelper: () => GridHelper,
    Group: () => Group,
    HalfFloatType: () => HalfFloatType,
    HemisphereLight: () => HemisphereLight,
    HemisphereLightHelper: () => HemisphereLightHelper,
    HemisphereLightProbe: () => HemisphereLightProbe,
    IcosahedronGeometry: () => IcosahedronGeometry,
    ImageBitmapLoader: () => ImageBitmapLoader,
    ImageLoader: () => ImageLoader,
    ImageUtils: () => ImageUtils,
    IncrementStencilOp: () => IncrementStencilOp,
    IncrementWrapStencilOp: () => IncrementWrapStencilOp,
    InstancedBufferAttribute: () => InstancedBufferAttribute,
    InstancedBufferGeometry: () => InstancedBufferGeometry,
    InstancedInterleavedBuffer: () => InstancedInterleavedBuffer,
    InstancedMesh: () => InstancedMesh,
    Int16BufferAttribute: () => Int16BufferAttribute,
    Int32BufferAttribute: () => Int32BufferAttribute,
    Int8BufferAttribute: () => Int8BufferAttribute,
    IntType: () => IntType,
    InterleavedBuffer: () => InterleavedBuffer,
    InterleavedBufferAttribute: () => InterleavedBufferAttribute,
    Interpolant: () => Interpolant,
    InterpolateDiscrete: () => InterpolateDiscrete,
    InterpolateLinear: () => InterpolateLinear,
    InterpolateSmooth: () => InterpolateSmooth,
    InvertStencilOp: () => InvertStencilOp,
    KeepStencilOp: () => KeepStencilOp,
    KeyframeTrack: () => KeyframeTrack,
    LOD: () => LOD,
    LatheGeometry: () => LatheGeometry,
    Layers: () => Layers,
    LessCompare: () => LessCompare,
    LessDepth: () => LessDepth,
    LessEqualCompare: () => LessEqualCompare,
    LessEqualDepth: () => LessEqualDepth,
    LessEqualStencilFunc: () => LessEqualStencilFunc,
    LessStencilFunc: () => LessStencilFunc,
    Light: () => Light,
    LightProbe: () => LightProbe,
    Line: () => Line,
    Line3: () => Line3,
    LineBasicMaterial: () => LineBasicMaterial,
    LineCurve: () => LineCurve,
    LineCurve3: () => LineCurve3,
    LineDashedMaterial: () => LineDashedMaterial,
    LineLoop: () => LineLoop,
    LineSegments: () => LineSegments,
    LinearDisplayP3ColorSpace: () => LinearDisplayP3ColorSpace,
    LinearEncoding: () => LinearEncoding,
    LinearFilter: () => LinearFilter,
    LinearInterpolant: () => LinearInterpolant,
    LinearMipMapLinearFilter: () => LinearMipMapLinearFilter,
    LinearMipMapNearestFilter: () => LinearMipMapNearestFilter,
    LinearMipmapLinearFilter: () => LinearMipmapLinearFilter,
    LinearMipmapNearestFilter: () => LinearMipmapNearestFilter,
    LinearSRGBColorSpace: () => LinearSRGBColorSpace,
    LinearToneMapping: () => LinearToneMapping,
    Loader: () => Loader,
    LoaderUtils: () => LoaderUtils,
    LoadingManager: () => LoadingManager,
    LoopOnce: () => LoopOnce,
    LoopPingPong: () => LoopPingPong,
    LoopRepeat: () => LoopRepeat,
    LuminanceAlphaFormat: () => LuminanceAlphaFormat,
    LuminanceFormat: () => LuminanceFormat,
    MOUSE: () => MOUSE,
    Material: () => Material,
    MaterialLoader: () => MaterialLoader,
    MathUtils: () => MathUtils,
    Matrix3: () => Matrix3,
    Matrix4: () => Matrix4,
    MaxEquation: () => MaxEquation,
    Mesh: () => Mesh,
    MeshBasicMaterial: () => MeshBasicMaterial,
    MeshDepthMaterial: () => MeshDepthMaterial,
    MeshDistanceMaterial: () => MeshDistanceMaterial,
    MeshLambertMaterial: () => MeshLambertMaterial,
    MeshMatcapMaterial: () => MeshMatcapMaterial,
    MeshNormalMaterial: () => MeshNormalMaterial,
    MeshPhongMaterial: () => MeshPhongMaterial,
    MeshPhysicalMaterial: () => MeshPhysicalMaterial,
    MeshStandardMaterial: () => MeshStandardMaterial,
    MeshToonMaterial: () => MeshToonMaterial,
    MinEquation: () => MinEquation,
    MirroredRepeatWrapping: () => MirroredRepeatWrapping,
    MixOperation: () => MixOperation,
    MultiplyBlending: () => MultiplyBlending,
    MultiplyOperation: () => MultiplyOperation,
    NearestFilter: () => NearestFilter,
    NearestMipMapLinearFilter: () => NearestMipMapLinearFilter,
    NearestMipMapNearestFilter: () => NearestMipMapNearestFilter,
    NearestMipmapLinearFilter: () => NearestMipmapLinearFilter,
    NearestMipmapNearestFilter: () => NearestMipmapNearestFilter,
    NeverCompare: () => NeverCompare,
    NeverDepth: () => NeverDepth,
    NeverStencilFunc: () => NeverStencilFunc,
    NoBlending: () => NoBlending,
    NoColorSpace: () => NoColorSpace,
    NoToneMapping: () => NoToneMapping,
    NormalAnimationBlendMode: () => NormalAnimationBlendMode,
    NormalBlending: () => NormalBlending,
    NotEqualCompare: () => NotEqualCompare,
    NotEqualDepth: () => NotEqualDepth,
    NotEqualStencilFunc: () => NotEqualStencilFunc,
    NumberKeyframeTrack: () => NumberKeyframeTrack,
    Object3D: () => Object3D,
    ObjectLoader: () => ObjectLoader,
    ObjectSpaceNormalMap: () => ObjectSpaceNormalMap,
    OctahedronGeometry: () => OctahedronGeometry,
    OneFactor: () => OneFactor,
    OneMinusDstAlphaFactor: () => OneMinusDstAlphaFactor,
    OneMinusDstColorFactor: () => OneMinusDstColorFactor,
    OneMinusSrcAlphaFactor: () => OneMinusSrcAlphaFactor,
    OneMinusSrcColorFactor: () => OneMinusSrcColorFactor,
    OrthographicCamera: () => OrthographicCamera,
    PCFShadowMap: () => PCFShadowMap,
    PCFSoftShadowMap: () => PCFSoftShadowMap,
    PMREMGenerator: () => PMREMGenerator,
    Path: () => Path,
    PerspectiveCamera: () => PerspectiveCamera,
    Plane: () => Plane,
    PlaneGeometry: () => PlaneGeometry,
    PlaneHelper: () => PlaneHelper,
    PointLight: () => PointLight,
    PointLightHelper: () => PointLightHelper,
    Points: () => Points,
    PointsMaterial: () => PointsMaterial,
    PolarGridHelper: () => PolarGridHelper,
    PolyhedronGeometry: () => PolyhedronGeometry,
    PositionalAudio: () => PositionalAudio,
    PropertyBinding: () => PropertyBinding,
    PropertyMixer: () => PropertyMixer,
    QuadraticBezierCurve: () => QuadraticBezierCurve,
    QuadraticBezierCurve3: () => QuadraticBezierCurve3,
    Quaternion: () => Quaternion,
    QuaternionKeyframeTrack: () => QuaternionKeyframeTrack,
    QuaternionLinearInterpolant: () => QuaternionLinearInterpolant,
    RED_GREEN_RGTC2_Format: () => RED_GREEN_RGTC2_Format,
    RED_RGTC1_Format: () => RED_RGTC1_Format,
    REVISION: () => REVISION,
    RGBADepthPacking: () => RGBADepthPacking,
    RGBAFormat: () => RGBAFormat,
    RGBAIntegerFormat: () => RGBAIntegerFormat,
    RGBA_ASTC_10x10_Format: () => RGBA_ASTC_10x10_Format,
    RGBA_ASTC_10x5_Format: () => RGBA_ASTC_10x5_Format,
    RGBA_ASTC_10x6_Format: () => RGBA_ASTC_10x6_Format,
    RGBA_ASTC_10x8_Format: () => RGBA_ASTC_10x8_Format,
    RGBA_ASTC_12x10_Format: () => RGBA_ASTC_12x10_Format,
    RGBA_ASTC_12x12_Format: () => RGBA_ASTC_12x12_Format,
    RGBA_ASTC_4x4_Format: () => RGBA_ASTC_4x4_Format,
    RGBA_ASTC_5x4_Format: () => RGBA_ASTC_5x4_Format,
    RGBA_ASTC_5x5_Format: () => RGBA_ASTC_5x5_Format,
    RGBA_ASTC_6x5_Format: () => RGBA_ASTC_6x5_Format,
    RGBA_ASTC_6x6_Format: () => RGBA_ASTC_6x6_Format,
    RGBA_ASTC_8x5_Format: () => RGBA_ASTC_8x5_Format,
    RGBA_ASTC_8x6_Format: () => RGBA_ASTC_8x6_Format,
    RGBA_ASTC_8x8_Format: () => RGBA_ASTC_8x8_Format,
    RGBA_BPTC_Format: () => RGBA_BPTC_Format,
    RGBA_ETC2_EAC_Format: () => RGBA_ETC2_EAC_Format,
    RGBA_PVRTC_2BPPV1_Format: () => RGBA_PVRTC_2BPPV1_Format,
    RGBA_PVRTC_4BPPV1_Format: () => RGBA_PVRTC_4BPPV1_Format,
    RGBA_S3TC_DXT1_Format: () => RGBA_S3TC_DXT1_Format,
    RGBA_S3TC_DXT3_Format: () => RGBA_S3TC_DXT3_Format,
    RGBA_S3TC_DXT5_Format: () => RGBA_S3TC_DXT5_Format,
    RGB_BPTC_SIGNED_Format: () => RGB_BPTC_SIGNED_Format,
    RGB_BPTC_UNSIGNED_Format: () => RGB_BPTC_UNSIGNED_Format,
    RGB_ETC1_Format: () => RGB_ETC1_Format,
    RGB_ETC2_Format: () => RGB_ETC2_Format,
    RGB_PVRTC_2BPPV1_Format: () => RGB_PVRTC_2BPPV1_Format,
    RGB_PVRTC_4BPPV1_Format: () => RGB_PVRTC_4BPPV1_Format,
    RGB_S3TC_DXT1_Format: () => RGB_S3TC_DXT1_Format,
    RGFormat: () => RGFormat,
    RGIntegerFormat: () => RGIntegerFormat,
    RawShaderMaterial: () => RawShaderMaterial,
    Ray: () => Ray,
    Raycaster: () => Raycaster,
    RectAreaLight: () => RectAreaLight,
    RedFormat: () => RedFormat,
    RedIntegerFormat: () => RedIntegerFormat,
    ReinhardToneMapping: () => ReinhardToneMapping,
    RenderTarget: () => RenderTarget,
    RepeatWrapping: () => RepeatWrapping,
    ReplaceStencilOp: () => ReplaceStencilOp,
    ReverseSubtractEquation: () => ReverseSubtractEquation,
    RingGeometry: () => RingGeometry,
    SIGNED_RED_GREEN_RGTC2_Format: () => SIGNED_RED_GREEN_RGTC2_Format,
    SIGNED_RED_RGTC1_Format: () => SIGNED_RED_RGTC1_Format,
    SRGBColorSpace: () => SRGBColorSpace,
    Scene: () => Scene,
    ShaderChunk: () => ShaderChunk,
    ShaderLib: () => ShaderLib,
    ShaderMaterial: () => ShaderMaterial,
    ShadowMaterial: () => ShadowMaterial,
    Shape: () => Shape,
    ShapeGeometry: () => ShapeGeometry,
    ShapePath: () => ShapePath,
    ShapeUtils: () => ShapeUtils,
    ShortType: () => ShortType,
    Skeleton: () => Skeleton,
    SkeletonHelper: () => SkeletonHelper,
    SkinnedMesh: () => SkinnedMesh,
    Source: () => Source,
    Sphere: () => Sphere,
    SphereGeometry: () => SphereGeometry,
    Spherical: () => Spherical,
    SphericalHarmonics3: () => SphericalHarmonics3,
    SplineCurve: () => SplineCurve,
    SpotLight: () => SpotLight,
    SpotLightHelper: () => SpotLightHelper,
    Sprite: () => Sprite,
    SpriteMaterial: () => SpriteMaterial,
    SrcAlphaFactor: () => SrcAlphaFactor,
    SrcAlphaSaturateFactor: () => SrcAlphaSaturateFactor,
    SrcColorFactor: () => SrcColorFactor,
    StaticCopyUsage: () => StaticCopyUsage,
    StaticDrawUsage: () => StaticDrawUsage,
    StaticReadUsage: () => StaticReadUsage,
    StereoCamera: () => StereoCamera,
    StreamCopyUsage: () => StreamCopyUsage,
    StreamDrawUsage: () => StreamDrawUsage,
    StreamReadUsage: () => StreamReadUsage,
    StringKeyframeTrack: () => StringKeyframeTrack,
    SubtractEquation: () => SubtractEquation,
    SubtractiveBlending: () => SubtractiveBlending,
    TOUCH: () => TOUCH,
    TangentSpaceNormalMap: () => TangentSpaceNormalMap,
    TetrahedronGeometry: () => TetrahedronGeometry,
    Texture: () => Texture,
    TextureLoader: () => TextureLoader,
    TorusGeometry: () => TorusGeometry,
    TorusKnotGeometry: () => TorusKnotGeometry,
    Triangle: () => Triangle,
    TriangleFanDrawMode: () => TriangleFanDrawMode,
    TriangleStripDrawMode: () => TriangleStripDrawMode,
    TrianglesDrawMode: () => TrianglesDrawMode,
    TubeGeometry: () => TubeGeometry,
    TwoPassDoubleSide: () => TwoPassDoubleSide,
    UVMapping: () => UVMapping,
    Uint16BufferAttribute: () => Uint16BufferAttribute,
    Uint32BufferAttribute: () => Uint32BufferAttribute,
    Uint8BufferAttribute: () => Uint8BufferAttribute,
    Uint8ClampedBufferAttribute: () => Uint8ClampedBufferAttribute,
    Uniform: () => Uniform,
    UniformsGroup: () => UniformsGroup,
    UniformsLib: () => UniformsLib,
    UniformsUtils: () => UniformsUtils,
    UnsignedByteType: () => UnsignedByteType,
    UnsignedInt248Type: () => UnsignedInt248Type,
    UnsignedIntType: () => UnsignedIntType,
    UnsignedShort4444Type: () => UnsignedShort4444Type,
    UnsignedShort5551Type: () => UnsignedShort5551Type,
    UnsignedShortType: () => UnsignedShortType,
    VSMShadowMap: () => VSMShadowMap,
    Vector2: () => Vector2,
    Vector3: () => Vector3,
    Vector4: () => Vector4,
    VectorKeyframeTrack: () => VectorKeyframeTrack,
    VideoTexture: () => VideoTexture,
    WebGL1Renderer: () => WebGL1Renderer,
    WebGL3DRenderTarget: () => WebGL3DRenderTarget,
    WebGLArrayRenderTarget: () => WebGLArrayRenderTarget,
    WebGLCoordinateSystem: () => WebGLCoordinateSystem,
    WebGLCubeRenderTarget: () => WebGLCubeRenderTarget,
    WebGLMultipleRenderTargets: () => WebGLMultipleRenderTargets,
    WebGLRenderTarget: () => WebGLRenderTarget,
    WebGLRenderer: () => WebGLRenderer,
    WebGLUtils: () => WebGLUtils,
    WebGPUCoordinateSystem: () => WebGPUCoordinateSystem,
    WireframeGeometry: () => WireframeGeometry,
    WrapAroundEnding: () => WrapAroundEnding,
    ZeroCurvatureEnding: () => ZeroCurvatureEnding,
    ZeroFactor: () => ZeroFactor,
    ZeroSlopeEnding: () => ZeroSlopeEnding,
    ZeroStencilOp: () => ZeroStencilOp,
    _SRGBAFormat: () => _SRGBAFormat,
    createCanvasElement: () => createCanvasElement,
    sRGBEncoding: () => sRGBEncoding
  });
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  }
  function inverseLerp(x, y, value) {
    if (x !== y) {
      return (value - x) / (y - x);
    } else {
      return 0;
    }
  }
  function lerp(x, y, t) {
    return (1 - t) * x + t * y;
  }
  function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
  }
  function pingpong(x, length2 = 1) {
    return length2 - Math.abs(euclideanModulo(x, length2 * 2) - length2);
  }
  function smoothstep(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  }
  function smootherstep(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  }
  function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  }
  function randFloat(low, high) {
    return low + Math.random() * (high - low);
  }
  function randFloatSpread(range) {
    return range * (0.5 - Math.random());
  }
  function seededRandom(s) {
    if (s !== void 0)
      _seed = s;
    let t = _seed += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
  function degToRad(degrees) {
    return degrees * DEG2RAD;
  }
  function radToDeg(radians) {
    return radians * RAD2DEG;
  }
  function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
  }
  function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  }
  function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }
  function setQuaternionFromProperEuler(q, a, b, c, order) {
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch (order) {
      case "XYX":
        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
        break;
      case "YZY":
        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
        break;
      case "ZXZ":
        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
        break;
      case "XZX":
        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
        break;
      case "YXY":
        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
        break;
      case "ZYZ":
        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function arrayNeedsUint32(array) {
    for (let i = array.length - 1; i >= 0; --i) {
      if (array[i] >= 65535)
        return true;
    }
    return false;
  }
  function getTypedArray(type, buffer2) {
    return new TYPED_ARRAYS[type](buffer2);
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  function warnOnce(message) {
    if (message in _cache)
      return;
    _cache[message] = true;
    console.warn(message);
  }
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  function DisplayP3ToLinearSRGB(color) {
    return color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);
  }
  function LinearSRGBToDisplayP3(color) {
    return color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();
  }
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  function hue2rgb(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  function _generateTables() {
    const buffer2 = new ArrayBuffer(4);
    const floatView = new Float32Array(buffer2);
    const uint32View = new Uint32Array(buffer2);
    const baseTable = new Uint32Array(512);
    const shiftTable = new Uint32Array(512);
    for (let i = 0; i < 256; ++i) {
      const e = i - 127;
      if (e < -27) {
        baseTable[i] = 0;
        baseTable[i | 256] = 32768;
        shiftTable[i] = 24;
        shiftTable[i | 256] = 24;
      } else if (e < -14) {
        baseTable[i] = 1024 >> -e - 14;
        baseTable[i | 256] = 1024 >> -e - 14 | 32768;
        shiftTable[i] = -e - 1;
        shiftTable[i | 256] = -e - 1;
      } else if (e <= 15) {
        baseTable[i] = e + 15 << 10;
        baseTable[i | 256] = e + 15 << 10 | 32768;
        shiftTable[i] = 13;
        shiftTable[i | 256] = 13;
      } else if (e < 128) {
        baseTable[i] = 31744;
        baseTable[i | 256] = 64512;
        shiftTable[i] = 24;
        shiftTable[i | 256] = 24;
      } else {
        baseTable[i] = 31744;
        baseTable[i | 256] = 64512;
        shiftTable[i] = 13;
        shiftTable[i | 256] = 13;
      }
    }
    const mantissaTable = new Uint32Array(2048);
    const exponentTable = new Uint32Array(64);
    const offsetTable = new Uint32Array(64);
    for (let i = 1; i < 1024; ++i) {
      let m = i << 13;
      let e = 0;
      while ((m & 8388608) === 0) {
        m <<= 1;
        e -= 8388608;
      }
      m &= ~8388608;
      e += 947912704;
      mantissaTable[i] = m | e;
    }
    for (let i = 1024; i < 2048; ++i) {
      mantissaTable[i] = 939524096 + (i - 1024 << 13);
    }
    for (let i = 1; i < 31; ++i) {
      exponentTable[i] = i << 23;
    }
    exponentTable[31] = 1199570944;
    exponentTable[32] = 2147483648;
    for (let i = 33; i < 63; ++i) {
      exponentTable[i] = 2147483648 + (i - 32 << 23);
    }
    exponentTable[63] = 3347054592;
    for (let i = 1; i < 64; ++i) {
      if (i !== 32) {
        offsetTable[i] = 1024;
      }
    }
    return {
      floatView,
      uint32View,
      baseTable,
      shiftTable,
      mantissaTable,
      exponentTable,
      offsetTable
    };
  }
  function toHalfFloat(val) {
    if (Math.abs(val) > 65504)
      console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
    val = clamp(val, -65504, 65504);
    _tables.floatView[0] = val;
    const f = _tables.uint32View[0];
    const e = f >> 23 & 511;
    return _tables.baseTable[e] + ((f & 8388607) >> _tables.shiftTable[e]);
  }
  function fromHalfFloat(val) {
    const m = val >> 10;
    _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 1023)] + _tables.exponentTable[m];
    return _tables.floatView[0];
  }
  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      if (uv) {
        _uvA$1.fromBufferAttribute(uv, a);
        _uvB$1.fromBufferAttribute(uv, b);
        _uvC$1.fromBufferAttribute(uv, c);
        intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
      }
      if (uv1) {
        _uvA$1.fromBufferAttribute(uv1, a);
        _uvB$1.fromBufferAttribute(uv1, b);
        _uvC$1.fromBufferAttribute(uv1, c);
        intersection.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
        intersection.uv2 = intersection.uv1;
      }
      if (normal) {
        _normalA.fromBufferAttribute(normal, a);
        _normalB.fromBufferAttribute(normal, b);
        _normalC.fromBufferAttribute(normal, c);
        intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
    }
    return intersection;
  }
  function cloneUniforms(src3) {
    const dst = {};
    for (const u in src3) {
      dst[u] = {};
      for (const p in src3[u]) {
        const property = src3[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp2 = cloneUniforms(uniforms[u]);
      for (const p in tmp2) {
        merged[p] = tmp2[p];
      }
    }
    return merged;
  }
  function cloneUniformsGroups(src3) {
    const dst = [];
    for (let u = 0; u < src3.length; u++) {
      dst.push(src3[u].clone());
    }
    return dst;
  }
  function getUnlitUniformColorSpace(renderer) {
    if (renderer.getRenderTarget() === null) {
      return renderer.outputColorSpace;
    }
    return LinearSRGBColorSpace;
  }
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = /* @__PURE__ */ new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const buffer2 = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer2);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type;
      if (array instanceof Float32Array) {
        type = gl.FLOAT;
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          if (isWebGL2) {
            type = gl.HALF_FLOAT;
          } else {
            throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
          }
        } else {
          type = gl.UNSIGNED_SHORT;
        }
      } else if (array instanceof Int16Array) {
        type = gl.SHORT;
      } else if (array instanceof Uint32Array) {
        type = gl.UNSIGNED_INT;
      } else if (array instanceof Int32Array) {
        type = gl.INT;
      } else if (array instanceof Int8Array) {
        type = gl.BYTE;
      } else if (array instanceof Uint8Array) {
        type = gl.UNSIGNED_BYTE;
      } else if (array instanceof Uint8ClampedArray) {
        type = gl.UNSIGNED_BYTE;
      } else {
        throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
      }
      return {
        buffer: buffer2,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version
      };
    }
    function updateBuffer(buffer2, attribute, bufferType) {
      const array = attribute.array;
      const updateRange = attribute.updateRange;
      gl.bindBuffer(bufferType, buffer2);
      if (updateRange.count === -1) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        if (isWebGL2) {
          gl.bufferSubData(
            bufferType,
            updateRange.offset * array.BYTES_PER_ELEMENT,
            array,
            updateRange.offset,
            updateRange.count
          );
        } else {
          gl.bufferSubData(
            bufferType,
            updateRange.offset * array.BYTES_PER_ELEMENT,
            array.subarray(updateRange.offset, updateRange.offset + updateRange.count)
          );
        }
        updateRange.count = -1;
      }
      attribute.onUploadCallback();
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update(attribute, bufferType) {
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update
    };
  }
  function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
      let forceClear = false;
      let background = scene.isScene === true ? scene.background : null;
      if (background && background.isTexture) {
        const usePMREM = scene.backgroundBlurriness > 0;
        background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
      }
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();
      if (environmentBlendMode === "additive") {
        state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
      } else if (environmentBlendMode === "alpha-blend") {
        state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
      }
      if (renderer.autoClear || forceClear) {
        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
      }
      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(
            new BoxGeometry(1, 1, 1),
            new ShaderMaterial({
              name: "BackgroundCubeMaterial",
              uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
              vertexShader: ShaderLib.backgroundCube.vertexShader,
              fragmentShader: ShaderLib.backgroundCube.fragmentShader,
              side: BackSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer2, scene2, camera) {
            this.matrixWorld.copyPosition(camera.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
        boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
        boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        boxMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        boxMesh.layers.enableAll();
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(
            new PlaneGeometry(2, 2),
            new ShaderMaterial({
              name: "BackgroundMaterial",
              uniforms: cloneUniforms(ShaderLib.background.uniforms),
              vertexShader: ShaderLib.background.vertexShader,
              fragmentShader: ShaderLib.background.fragmentShader,
              side: FrontSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        planeMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        planeMesh.layers.enableAll();
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha2) {
      color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
      state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha2 = 1) {
        clearColor.set(color);
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha2) {
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      render
    };
  }
  function WebGLBindingStates(gl, extensions2, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const extension = capabilities.isWebGL2 ? null : extensions2.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      if (vaoAvailable) {
        const state = getBindingState(geometry, program, material);
        if (currentState !== state) {
          currentState = state;
          bindVertexArrayObject(currentState.object);
        }
        updateBuffers = needsUpdate(object, geometry, program, index);
        if (updateBuffers)
          saveCache(object, geometry, program, index);
      } else {
        const wireframe = material.wireframe === true;
        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
          currentState.geometry = geometry.id;
          currentState.program = program.id;
          currentState.wireframe = wireframe;
          updateBuffers = true;
        }
      }
      if (index !== null) {
        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
      }
      if (updateBuffers || forceUpdate) {
        forceUpdate = false;
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      if (capabilities.isWebGL2)
        return gl.createVertexArray();
      return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.bindVertexArray(vao);
      return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.deleteVertexArray(vao);
      return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        // for backward compatibility on non-VAO support browser
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(object, geometry, program, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          const cachedAttribute = cachedAttributes[name];
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (cachedAttribute === void 0)
            return true;
          if (cachedAttribute.attribute !== geometryAttribute)
            return true;
          if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data)
            return true;
          attributesNum++;
        }
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(object, geometry, program, index) {
      const cache2 = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let attribute = attributes2[name];
          if (attribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              attribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              attribute = object.instanceColor;
          }
          const data = {};
          data.attribute = attribute;
          if (attribute && attribute.data) {
            data.data = attribute.data;
          }
          cache2[name] = data;
          attributesNum++;
        }
      }
      currentState.attributes = cache2;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        const extension2 = capabilities.isWebGL2 ? gl : extensions2.get("ANGLE_instanced_arrays");
        extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
      if (integer === true) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
        if (extensions2.get("ANGLE_instanced_arrays") === null)
          return;
      }
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer2 = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            const integer = capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType);
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data.isInstancedInterleavedBuffer) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer2);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  stride * bytesPerElement,
                  (offset + size / programAttribute.locationSize * i) * bytesPerElement,
                  integer
                );
              }
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer2);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  size * bytesPerElement,
                  size / programAttribute.locationSize * i * bytesPerElement,
                  integer
                );
              }
            }
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute.location, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute.location, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute.location, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute.location, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      forceUpdate = true;
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions2, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawArraysInstanced";
      } else {
        extension = extensions2.get("ANGLE_instanced_arrays");
        methodName = "drawArraysInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLCapabilities(gl, extensions2, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      if (extensions2.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions2.get("EXT_texture_filter_anisotropic");
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl.constructor.name === "WebGL2RenderingContext";
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions2.has("WEBGL_draw_buffers");
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions2.has("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
    return {
      isWebGL2,
      drawBuffers,
      getMaxAnisotropy,
      getMaxPrecision,
      precision,
      logarithmicDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      floatFragmentTextures,
      floatVertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
      const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
      // run another frame in order to reset the state:
      numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
      globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer) {
    let cubemaps = /* @__PURE__ */ new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
              renderTarget.fromEquirectangularTexture(renderer, texture);
              cubemaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for (let i = 0; i < totalLods; i++) {
      const sizeLod = Math.pow(2, lod);
      sizeLods.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i > lodMax - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
      } else if (i === 0) {
        sigma = 0;
      }
      sigmas.push(sigma);
      const texelSize = 1 / (sizeLod - 2);
      const min = -texelSize;
      const max = 1 + texelSize;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position3 = new Float32Array(positionSize * vertices * cubeFaces);
      const uv = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x = face % 3 * 2 / 3 - 1;
        const y = face > 2 ? 0 : -1;
        const coordinates = [
          x,
          y,
          0,
          x + 2 / 3,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y + 1,
          0
        ];
        position3.set(coordinates, positionSize * vertices * face);
        uv.set(uv1, uvSize * vertices * face);
        const fill = [face, face, face, face, face, face];
        faceIndex.set(fill, faceIndexSize * vertices * face);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position3, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      lodPlanes.push(planes);
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { lodPlanes, sizeLods, sigmas };
  }
  function _createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target2, x, y, width, height) {
    target2.viewport.set(x, y, width, height);
    target2.scissor.set(x, y, width, height);
  }
  function _getBlurShader(lodMax, width, height) {
    const weights = new Float32Array(MAX_SAMPLES);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new ShaderMaterial({
      name: "SphericalGaussianBlur",
      defines: {
        "n": MAX_SAMPLES,
        "CUBEUV_TEXEL_WIDTH": 1 / width,
        "CUBEUV_TEXEL_HEIGHT": 1 / height,
        "CUBEUV_MAX_MIP": `${lodMax}.0`
      },
      uniforms: {
        "envMap": { value: null },
        "samples": { value: 1 },
        "weights": { value: weights },
        "latitudinal": { value: false },
        "dTheta": { value: 0 },
        "mipInt": { value: 0 },
        "poleAxis": { value: poleAxis }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getEquirectMaterial() {
    return new ShaderMaterial({
      name: "EquirectangularToCubeUV",
      uniforms: {
        "envMap": { value: null }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCubemapMaterial() {
    return new ShaderMaterial({
      name: "CubemapToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "flipEnvMap": { value: -1 }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCommonVertexShader() {
    return (
      /* glsl */
      `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
    );
  }
  function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = /* @__PURE__ */ new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
        if (isEquirectMap || isCubeMap) {
          if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
            texture.needsPMREMUpdate = false;
            let renderTarget = cubeUVmaps.get(texture);
            if (pmremGenerator === null)
              pmremGenerator = new PMREMGenerator(renderer);
            renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
            cubeUVmaps.set(texture, renderTarget);
            return renderTarget.texture;
          } else {
            if (cubeUVmaps.has(texture)) {
              return cubeUVmaps.get(texture).texture;
            } else {
              const image = texture.image;
              if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                if (pmremGenerator === null)
                  pmremGenerator = new PMREMGenerator(renderer);
                const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                cubeUVmaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return renderTarget.texture;
              } else {
                return null;
              }
            }
          }
        }
      }
      return texture;
    }
    function isCubeTextureComplete(image) {
      let count = 0;
      const length2 = 6;
      for (let i = 0; i < length2; i++) {
        if (image[i] !== void 0)
          count++;
      }
      return count === length2;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemapUV = cubeUVmaps.get(texture);
      if (cubemapUV !== void 0) {
        cubeUVmaps.delete(texture);
        cubemapUV.dispose();
      }
    }
    function dispose() {
      cubeUVmaps = /* @__PURE__ */ new WeakMap();
      if (pmremGenerator !== null) {
        pmremGenerator.dispose();
        pmremGenerator = null;
      }
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions2 = {};
    function getExtension(name) {
      if (extensions2[name] !== void 0) {
        return extensions2[name];
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions2[name] = extension;
      return extension;
    }
    return {
      has: function(name) {
        return getExtension(name) !== null;
      },
      init: function(capabilities) {
        if (capabilities.isWebGL2) {
          getExtension("EXT_color_buffer_float");
        } else {
          getExtension("WEBGL_depth_texture");
          getExtension("OES_texture_float");
          getExtension("OES_texture_half_float");
          getExtension("OES_texture_half_float_linear");
          getExtension("OES_standard_derivatives");
          getExtension("OES_element_index_uint");
          getExtension("OES_vertex_array_object");
          getExtension("ANGLE_instanced_arrays");
        }
        getExtension("OES_texture_float_linear");
        getExtension("EXT_color_buffer_half_float");
        getExtension("WEBGL_multisampled_render_to_texture");
      },
      get: function(name) {
        const extension = getExtension(name);
        if (extension === null) {
          console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extension;
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = /* @__PURE__ */ new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      if (geometry.index !== null) {
        attributes.remove(geometry.index);
      }
      for (const name in geometry.attributes) {
        attributes.remove(geometry.attributes[name]);
      }
      for (const name in geometry.morphAttributes) {
        const array = geometry.morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.remove(array[i]);
        }
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      delete geometries[geometry.id];
      const attribute = wireframeAttributes.get(geometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(geometry);
      }
      bindingStates.releaseStatesOfGeometry(geometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      if (geometries[geometry.id] === true)
        return geometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      geometries[geometry.id] = true;
      info.memory.geometries++;
      return geometry;
    }
    function update(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
      }
      const morphAttributes = geometry.morphAttributes;
      for (const name in morphAttributes) {
        const array = morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.update(array[i], gl.ARRAY_BUFFER);
        }
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else if (geometryPosition !== void 0) {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      } else {
        return;
      }
      const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions2, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawElementsInstanced";
      } else {
        extension = extensions2.get("ANGLE_instanced_arrays");
        methodName = "drawElementsInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case gl.TRIANGLES:
          render.triangles += instanceCount * (count / 3);
          break;
        case gl.LINES:
          render.lines += instanceCount * (count / 2);
          break;
        case gl.LINE_STRIP:
          render.lines += instanceCount * (count - 1);
          break;
        case gl.LINE_LOOP:
          render.lines += instanceCount * count;
          break;
        case gl.POINTS:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update
    };
  }
  function numericalSort(a, b) {
    return a[0] - b[0];
  }
  function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
  }
  function WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const morphTextures = /* @__PURE__ */ new WeakMap();
    const morph = new Vector4();
    const workInfluences = [];
    for (let i = 0; i < 8; i++) {
      workInfluences[i] = [i, 0];
    }
    function update(object, geometry, program) {
      const objectInfluences = object.morphTargetInfluences;
      if (capabilities.isWebGL2 === true) {
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        let entry = morphTextures.get(geometry);
        if (entry === void 0 || entry.count !== morphTargetsCount) {
          let disposeTexture = function() {
            texture.dispose();
            morphTextures.delete(geometry);
            geometry.removeEventListener("dispose", disposeTexture);
          };
          if (entry !== void 0)
            entry.texture.dispose();
          const hasMorphPosition = geometry.morphAttributes.position !== void 0;
          const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
          const hasMorphColors = geometry.morphAttributes.color !== void 0;
          const morphTargets = geometry.morphAttributes.position || [];
          const morphNormals = geometry.morphAttributes.normal || [];
          const morphColors = geometry.morphAttributes.color || [];
          let vertexDataCount = 0;
          if (hasMorphPosition === true)
            vertexDataCount = 1;
          if (hasMorphNormals === true)
            vertexDataCount = 2;
          if (hasMorphColors === true)
            vertexDataCount = 3;
          let width = geometry.attributes.position.count * vertexDataCount;
          let height = 1;
          if (width > capabilities.maxTextureSize) {
            height = Math.ceil(width / capabilities.maxTextureSize);
            width = capabilities.maxTextureSize;
          }
          const buffer2 = new Float32Array(width * height * 4 * morphTargetsCount);
          const texture = new DataArrayTexture(buffer2, width, height, morphTargetsCount);
          texture.type = FloatType;
          texture.needsUpdate = true;
          const vertexDataStride = vertexDataCount * 4;
          for (let i = 0; i < morphTargetsCount; i++) {
            const morphTarget = morphTargets[i];
            const morphNormal = morphNormals[i];
            const morphColor = morphColors[i];
            const offset = width * height * 4 * i;
            for (let j = 0; j < morphTarget.count; j++) {
              const stride = j * vertexDataStride;
              if (hasMorphPosition === true) {
                morph.fromBufferAttribute(morphTarget, j);
                buffer2[offset + stride + 0] = morph.x;
                buffer2[offset + stride + 1] = morph.y;
                buffer2[offset + stride + 2] = morph.z;
                buffer2[offset + stride + 3] = 0;
              }
              if (hasMorphNormals === true) {
                morph.fromBufferAttribute(morphNormal, j);
                buffer2[offset + stride + 4] = morph.x;
                buffer2[offset + stride + 5] = morph.y;
                buffer2[offset + stride + 6] = morph.z;
                buffer2[offset + stride + 7] = 0;
              }
              if (hasMorphColors === true) {
                morph.fromBufferAttribute(morphColor, j);
                buffer2[offset + stride + 8] = morph.x;
                buffer2[offset + stride + 9] = morph.y;
                buffer2[offset + stride + 10] = morph.z;
                buffer2[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
              }
            }
          }
          entry = {
            count: morphTargetsCount,
            texture,
            size: new Vector2(width, height)
          };
          morphTextures.set(geometry, entry);
          geometry.addEventListener("dispose", disposeTexture);
        }
        let morphInfluencesSum = 0;
        for (let i = 0; i < objectInfluences.length; i++) {
          morphInfluencesSum += objectInfluences[i];
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
        program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
        program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
      } else {
        const length2 = objectInfluences === void 0 ? 0 : objectInfluences.length;
        let influences = influencesList[geometry.id];
        if (influences === void 0 || influences.length !== length2) {
          influences = [];
          for (let i = 0; i < length2; i++) {
            influences[i] = [i, 0];
          }
          influencesList[geometry.id] = influences;
        }
        for (let i = 0; i < length2; i++) {
          const influence = influences[i];
          influence[0] = i;
          influence[1] = objectInfluences[i];
        }
        influences.sort(absNumericalSort);
        for (let i = 0; i < 8; i++) {
          if (i < length2 && influences[i][1]) {
            workInfluences[i][0] = influences[i][0];
            workInfluences[i][1] = influences[i][1];
          } else {
            workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
            workInfluences[i][1] = 0;
          }
        }
        workInfluences.sort(numericalSort);
        const morphTargets = geometry.morphAttributes.position;
        const morphNormals = geometry.morphAttributes.normal;
        let morphInfluencesSum = 0;
        for (let i = 0; i < 8; i++) {
          const influence = workInfluences[i];
          const index = influence[0];
          const value = influence[1];
          if (index !== Number.MAX_SAFE_INTEGER && value) {
            if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
              geometry.setAttribute("morphTarget" + i, morphTargets[index]);
            }
            if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
              geometry.setAttribute("morphNormal" + i, morphNormals[index]);
            }
            morphInfluences[i] = value;
            morphInfluencesSum += value;
          } else {
            if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
              geometry.deleteAttribute("morphTarget" + i);
            }
            if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
              geometry.deleteAttribute("morphNormal" + i);
            }
            morphInfluences[i] = 0;
          }
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
      }
    }
    return {
      update
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = /* @__PURE__ */ new WeakMap();
    function update(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
          object.addEventListener("dispose", onInstancedMeshDispose);
        }
        if (updateMap.get(object) !== frame) {
          attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
          if (object.instanceColor !== null) {
            attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
          }
          updateMap.set(object, frame);
        }
      }
      if (object.isSkinnedMesh) {
        const skeleton = object.skeleton;
        if (updateMap.get(skeleton) !== frame) {
          skeleton.update();
          updateMap.set(skeleton, frame);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = /* @__PURE__ */ new WeakMap();
    }
    function onInstancedMeshDispose(event) {
      const instancedMesh = event.target;
      instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
      attributes.remove(instancedMesh.instanceMatrix);
      if (instancedMesh.instanceColor !== null)
        attributes.remove(instancedMesh.instanceColor);
    }
    return {
      update,
      dispose
    };
  }
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache2 = this.cache;
    if (cache2[0] === v)
      return;
    gl.uniform1f(this.addr, v);
    cache2[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache2[0] = v.x;
        cache2[1] = v.y;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache2[0] !== v.r || cache2[1] !== v.g || cache2[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache2[0] = v.r;
        cache2[1] = v.g;
        cache2[2] = v.b;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z || cache2[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
        cache2[3] = v.w;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueM2(gl, v) {
    const cache2 = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache2, v))
        return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache2, v);
    } else {
      if (arraysEqual(cache2, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache2, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache2 = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache2, v))
        return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache2, v);
    } else {
      if (arraysEqual(cache2, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache2, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache2 = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache2, v))
        return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache2, v);
    } else {
      if (arraysEqual(cache2, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache2, elements);
    }
  }
  function setValueV1i(gl, v) {
    const cache2 = this.cache;
    if (cache2[0] === v)
      return;
    gl.uniform1i(this.addr, v);
    cache2[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y) {
        gl.uniform2i(this.addr, v.x, v.y);
        cache2[0] = v.x;
        cache2[1] = v.y;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform2iv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV3i(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z) {
        gl.uniform3i(this.addr, v.x, v.y, v.z);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform3iv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV4i(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z || cache2[3] !== v.w) {
        gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
        cache2[3] = v.w;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform4iv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV1ui(gl, v) {
    const cache2 = this.cache;
    if (cache2[0] === v)
      return;
    gl.uniform1ui(this.addr, v);
    cache2[0] = v;
  }
  function setValueV2ui(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y) {
        gl.uniform2ui(this.addr, v.x, v.y);
        cache2[0] = v.x;
        cache2[1] = v.y;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform2uiv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV3ui(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z) {
        gl.uniform3ui(this.addr, v.x, v.y, v.z);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform3uiv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueV4ui(gl, v) {
    const cache2 = this.cache;
    if (v.x !== void 0) {
      if (cache2[0] !== v.x || cache2[1] !== v.y || cache2[2] !== v.z || cache2[3] !== v.w) {
        gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
        cache2[0] = v.x;
        cache2[1] = v.y;
        cache2[2] = v.z;
        cache2[3] = v.w;
      }
    } else {
      if (arraysEqual(cache2, v))
        return;
      gl.uniform4uiv(this.addr, v);
      copyArray(cache2, v);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache2 = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache2[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache2[0] = unit;
    }
    textures.setTexture2D(v || emptyTexture, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache2 = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache2[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache2[0] = unit;
    }
    textures.setTexture3D(v || empty3dTexture, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache2 = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache2[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache2[0] = unit;
    }
    textures.setTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache2 = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache2[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache2[0] = unit;
    }
    textures.setTexture2DArray(v || emptyArrayTexture, unit);
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 36294:
        return setValueV2ui;
      case 36295:
        return setValueV3ui;
      case 36296:
        return setValueV4ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
  }
  function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
  }
  function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
  }
  function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
  }
  function setValueT1Array(gl, v, textures) {
    const cache2 = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache2, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache2, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT3DArray(gl, v, textures) {
    const cache2 = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache2, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache2, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture3D(v[i] || empty3dTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const cache2 = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache2, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache2, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function setValueT2DArrayArray(gl, v, textures) {
    const cache2 = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache2, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache2, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 5125:
        return setValueV1uiArray;
      case 36294:
        return setValueV2uiArray;
      case 36295:
        return setValueV3uiArray;
      case 36296:
        return setValueV4uiArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3DArray;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArrayArray;
    }
  }
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from2 = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i = from2; i < to; i++) {
      const line = i + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
  }
  function getEncodingComponents(colorSpace) {
    switch (colorSpace) {
      case LinearSRGBColorSpace:
        return ["Linear", "( value )"];
      case SRGBColorSpace:
        return ["sRGB", "( value )"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace);
        return ["Linear", "( value )"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "")
      return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  function getTexelEncodingFunction(functionName, colorSpace) {
    const components = getEncodingComponents(colorSpace);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "OptimizedCineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  function generateExtensions(parameters) {
    const chunks = [
      parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name = info.name;
      let locationSize = 1;
      if (info.type === gl.FLOAT_MAT2)
        locationSize = 2;
      if (info.type === gl.FLOAT_MAT3)
        locationSize = 3;
      if (info.type === gl.FLOAT_MAT4)
        locationSize = 4;
      attributes[name] = {
        type: info.type,
        location: gl.getAttribLocation(program, name),
        locationSize
      };
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  function includeReplacer(match, include) {
    let string = ShaderChunk[include];
    if (string === void 0) {
      const newInclude = shaderChunkMap.get(include);
      if (newInclude !== void 0) {
        string = ShaderChunk[newInclude];
        console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
      } else {
        throw new Error("Can not resolve #include <" + include + ">");
      }
    }
    return resolveIncludes(string);
  }
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null)
      return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1 / imageHeight;
    const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
    return { texelWidth, texelHeight, maxMip };
  }
  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = generateCubeUVSize(parameters);
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        customExtensions,
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        //
        parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
        parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
        parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
        parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
        parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
        parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
        parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
        parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
        parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
        parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
        parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
        parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
        parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
        parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
        parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
        parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
        parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
        parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
        parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
        parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
        parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
        parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
        parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
        //
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.morphColors && parameters.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        customExtensions,
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
        envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaTest ? "#define USE_ALPHATEST" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        // this code is required here because it is used by the toneMapping() function defined below
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        parameters.opaque ? "#define OPAQUE" : "",
        ShaderChunk["colorspace_pars_fragment"],
        // this code is required here because it is used by the various encoding/decoding function defined below
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
        parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    if (renderer.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        runnable = false;
        if (typeof renderer.debug.onShaderError === "function") {
          renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        this.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        cachedUniforms = new WebGLUniforms(gl, program);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        cachedAttributes = fetchAttributeLocations(gl, program);
      }
      return cachedAttributes;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions2, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const programs = [];
    const IS_WEBGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function getChannel(value) {
      if (value === 0)
        return "uv";
      return `uv${value}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
      const fog = scene.fog;
      const geometry = object.geometry;
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
      const shaderID = shaderIDs[material.type];
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let morphTextureStride = 0;
      if (geometry.morphAttributes.position !== void 0)
        morphTextureStride = 1;
      if (geometry.morphAttributes.normal !== void 0)
        morphTextureStride = 2;
      if (geometry.morphAttributes.color !== void 0)
        morphTextureStride = 3;
      let vertexShader, fragmentShader;
      let customVertexShaderID, customFragmentShaderID;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
        _customShaders.update(material);
        customVertexShaderID = _customShaders.getVertexShaderID(material);
        customFragmentShaderID = _customShaders.getFragmentShaderID(material);
      }
      const currentRenderTarget = renderer.getRenderTarget();
      const IS_INSTANCEDMESH = object.isInstancedMesh === true;
      const HAS_MAP = !!material.map;
      const HAS_MATCAP = !!material.matcap;
      const HAS_ENVMAP = !!envMap;
      const HAS_AOMAP = !!material.aoMap;
      const HAS_LIGHTMAP = !!material.lightMap;
      const HAS_BUMPMAP = !!material.bumpMap;
      const HAS_NORMALMAP = !!material.normalMap;
      const HAS_DISPLACEMENTMAP = !!material.displacementMap;
      const HAS_EMISSIVEMAP = !!material.emissiveMap;
      const HAS_METALNESSMAP = !!material.metalnessMap;
      const HAS_ROUGHNESSMAP = !!material.roughnessMap;
      const HAS_ANISOTROPY = material.anisotropy > 0;
      const HAS_CLEARCOAT = material.clearcoat > 0;
      const HAS_IRIDESCENCE = material.iridescence > 0;
      const HAS_SHEEN = material.sheen > 0;
      const HAS_TRANSMISSION = material.transmission > 0;
      const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
      const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
      const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
      const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
      const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
      const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
      const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
      const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
      const HAS_SPECULARMAP = !!material.specularMap;
      const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
      const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
      const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
      const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
      const HAS_GRADIENTMAP = !!material.gradientMap;
      const HAS_ALPHAMAP = !!material.alphaMap;
      const HAS_ALPHATEST = material.alphaTest > 0;
      const HAS_ALPHAHASH = !!material.alphaHash;
      const HAS_EXTENSIONS = !!material.extensions;
      const HAS_ATTRIBUTE_UV1 = !!geometry.attributes.uv1;
      const HAS_ATTRIBUTE_UV2 = !!geometry.attributes.uv2;
      const HAS_ATTRIBUTE_UV3 = !!geometry.attributes.uv3;
      let toneMapping = NoToneMapping;
      if (material.toneMapped) {
        if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
          toneMapping = renderer.toneMapping;
        }
      }
      const parameters = {
        isWebGL2: IS_WEBGL2,
        shaderID,
        shaderType: material.type,
        shaderName: material.name,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        customVertexShaderID,
        customFragmentShaderID,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        instancing: IS_INSTANCEDMESH,
        instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
        supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
        outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
        map: HAS_MAP,
        matcap: HAS_MATCAP,
        envMap: HAS_ENVMAP,
        envMapMode: HAS_ENVMAP && envMap.mapping,
        envMapCubeUVHeight,
        aoMap: HAS_AOMAP,
        lightMap: HAS_LIGHTMAP,
        bumpMap: HAS_BUMPMAP,
        normalMap: HAS_NORMALMAP,
        displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
        emissiveMap: HAS_EMISSIVEMAP,
        normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
        normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
        metalnessMap: HAS_METALNESSMAP,
        roughnessMap: HAS_ROUGHNESSMAP,
        anisotropy: HAS_ANISOTROPY,
        anisotropyMap: HAS_ANISOTROPYMAP,
        clearcoat: HAS_CLEARCOAT,
        clearcoatMap: HAS_CLEARCOATMAP,
        clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
        clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
        iridescence: HAS_IRIDESCENCE,
        iridescenceMap: HAS_IRIDESCENCEMAP,
        iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
        sheen: HAS_SHEEN,
        sheenColorMap: HAS_SHEEN_COLORMAP,
        sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
        specularMap: HAS_SPECULARMAP,
        specularColorMap: HAS_SPECULAR_COLORMAP,
        specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
        transmission: HAS_TRANSMISSION,
        transmissionMap: HAS_TRANSMISSIONMAP,
        thicknessMap: HAS_THICKNESSMAP,
        gradientMap: HAS_GRADIENTMAP,
        opaque: material.transparent === false && material.blending === NormalBlending,
        alphaMap: HAS_ALPHAMAP,
        alphaTest: HAS_ALPHATEST,
        alphaHash: HAS_ALPHAHASH,
        combine: material.combine,
        //
        mapUv: HAS_MAP && getChannel(material.map.channel),
        aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
        lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
        bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
        normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
        displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
        emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
        metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
        roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
        anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
        clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
        clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
        clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
        iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
        iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
        sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
        sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
        specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
        specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
        specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
        transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
        thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
        alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
        //
        vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
        vertexColors: material.vertexColors,
        vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
        vertexUv1s: HAS_ATTRIBUTE_UV1,
        vertexUv2s: HAS_ATTRIBUTE_UV2,
        vertexUv3s: HAS_ATTRIBUTE_UV3,
        pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
        fog: !!fog,
        useFog: material.fog === true,
        fogExp2: fog && fog.isFogExp2,
        flatShading: material.flatShading === true,
        sizeAttenuation: material.sizeAttenuation === true,
        logarithmicDepthBuffer,
        skinning: object.isSkinnedMesh === true,
        morphTargets: geometry.morphAttributes.position !== void 0,
        morphNormals: geometry.morphAttributes.normal !== void 0,
        morphColors: geometry.morphAttributes.color !== void 0,
        morphTargetsCount,
        morphTextureStride,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numSpotLightMaps: lights.spotLightMap.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer.shadowMap.type,
        toneMapping,
        useLegacyLights: renderer._useLegacyLights,
        decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && material.map.colorSpace === SRGBColorSpace,
        premultipliedAlpha: material.premultipliedAlpha,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        useDepthPacking: material.depthPacking >= 0,
        depthPacking: material.depthPacking || 0,
        index0AttributeName: material.index0AttributeName,
        extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
        extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
        extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
        extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
        rendererExtensionFragDepth: IS_WEBGL2 || extensions2.has("EXT_frag_depth"),
        rendererExtensionDrawBuffers: IS_WEBGL2 || extensions2.has("WEBGL_draw_buffers"),
        rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions2.has("EXT_shader_texture_lod"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.customVertexShaderID);
        array.push(parameters.customFragmentShaderID);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        getProgramCacheKeyParameters(array, parameters);
        getProgramCacheKeyBooleans(array, parameters);
        array.push(renderer.outputColorSpace);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
      array.push(parameters.precision);
      array.push(parameters.outputColorSpace);
      array.push(parameters.envMapMode);
      array.push(parameters.envMapCubeUVHeight);
      array.push(parameters.mapUv);
      array.push(parameters.alphaMapUv);
      array.push(parameters.lightMapUv);
      array.push(parameters.aoMapUv);
      array.push(parameters.bumpMapUv);
      array.push(parameters.normalMapUv);
      array.push(parameters.displacementMapUv);
      array.push(parameters.emissiveMapUv);
      array.push(parameters.metalnessMapUv);
      array.push(parameters.roughnessMapUv);
      array.push(parameters.anisotropyMapUv);
      array.push(parameters.clearcoatMapUv);
      array.push(parameters.clearcoatNormalMapUv);
      array.push(parameters.clearcoatRoughnessMapUv);
      array.push(parameters.iridescenceMapUv);
      array.push(parameters.iridescenceThicknessMapUv);
      array.push(parameters.sheenColorMapUv);
      array.push(parameters.sheenRoughnessMapUv);
      array.push(parameters.specularMapUv);
      array.push(parameters.specularColorMapUv);
      array.push(parameters.specularIntensityMapUv);
      array.push(parameters.transmissionMapUv);
      array.push(parameters.thicknessMapUv);
      array.push(parameters.combine);
      array.push(parameters.fogExp2);
      array.push(parameters.sizeAttenuation);
      array.push(parameters.morphTargetsCount);
      array.push(parameters.morphAttributeCount);
      array.push(parameters.numDirLights);
      array.push(parameters.numPointLights);
      array.push(parameters.numSpotLights);
      array.push(parameters.numSpotLightMaps);
      array.push(parameters.numHemiLights);
      array.push(parameters.numRectAreaLights);
      array.push(parameters.numDirLightShadows);
      array.push(parameters.numPointLightShadows);
      array.push(parameters.numSpotLightShadows);
      array.push(parameters.numSpotLightShadowsWithMaps);
      array.push(parameters.shadowMapType);
      array.push(parameters.toneMapping);
      array.push(parameters.numClippingPlanes);
      array.push(parameters.numClipIntersection);
      array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
      _programLayers.disableAll();
      if (parameters.isWebGL2)
        _programLayers.enable(0);
      if (parameters.supportsVertexTextures)
        _programLayers.enable(1);
      if (parameters.instancing)
        _programLayers.enable(2);
      if (parameters.instancingColor)
        _programLayers.enable(3);
      if (parameters.matcap)
        _programLayers.enable(4);
      if (parameters.envMap)
        _programLayers.enable(5);
      if (parameters.normalMapObjectSpace)
        _programLayers.enable(6);
      if (parameters.normalMapTangentSpace)
        _programLayers.enable(7);
      if (parameters.clearcoat)
        _programLayers.enable(8);
      if (parameters.iridescence)
        _programLayers.enable(9);
      if (parameters.alphaTest)
        _programLayers.enable(10);
      if (parameters.vertexColors)
        _programLayers.enable(11);
      if (parameters.vertexAlphas)
        _programLayers.enable(12);
      if (parameters.vertexUv1s)
        _programLayers.enable(13);
      if (parameters.vertexUv2s)
        _programLayers.enable(14);
      if (parameters.vertexUv3s)
        _programLayers.enable(15);
      if (parameters.vertexTangents)
        _programLayers.enable(16);
      if (parameters.anisotropy)
        _programLayers.enable(17);
      array.push(_programLayers.mask);
      _programLayers.disableAll();
      if (parameters.fog)
        _programLayers.enable(0);
      if (parameters.useFog)
        _programLayers.enable(1);
      if (parameters.flatShading)
        _programLayers.enable(2);
      if (parameters.logarithmicDepthBuffer)
        _programLayers.enable(3);
      if (parameters.skinning)
        _programLayers.enable(4);
      if (parameters.morphTargets)
        _programLayers.enable(5);
      if (parameters.morphNormals)
        _programLayers.enable(6);
      if (parameters.morphColors)
        _programLayers.enable(7);
      if (parameters.premultipliedAlpha)
        _programLayers.enable(8);
      if (parameters.shadowMapEnabled)
        _programLayers.enable(9);
      if (parameters.useLegacyLights)
        _programLayers.enable(10);
      if (parameters.doubleSided)
        _programLayers.enable(11);
      if (parameters.flipSided)
        _programLayers.enable(12);
      if (parameters.useDepthPacking)
        _programLayers.enable(13);
      if (parameters.dithering)
        _programLayers.enable(14);
      if (parameters.transmission)
        _programLayers.enable(15);
      if (parameters.sheen)
        _programLayers.enable(16);
      if (parameters.opaque)
        _programLayers.enable(17);
      if (parameters.pointsUvs)
        _programLayers.enable(18);
      if (parameters.decodeVideoTexture)
        _programLayers.enable(19);
      array.push(_programLayers.mask);
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    function releaseShaderCache(material) {
      _customShaders.remove(material);
    }
    function dispose() {
      _customShaders.dispose();
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      releaseShaderCache,
      // Exposed for resource monitoring & error feedback via renderer.info:
      programs,
      dispose
    };
  }
  function WebGLProperties() {
    let properties = /* @__PURE__ */ new WeakMap();
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      remove,
      update,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transmissive.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
      let renderItem = renderItems[renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.push(renderItem);
      } else if (material.transparent === true) {
        transparent.push(renderItem);
      } else {
        opaque.push(renderItem);
      }
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
      if (material.transmission > 0) {
        transmissive.unshift(renderItem);
      } else if (material.transparent === true) {
        transparent.unshift(renderItem);
      } else {
        opaque.unshift(renderItem);
      }
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transmissive.length > 1)
        transmissive.sort(customTransparentSort || reversePainterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transmissive,
      transparent,
      init,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists() {
    let lists = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth) {
      const listArray = lists.get(scene);
      let list;
      if (listArray === void 0) {
        list = new WebGLRenderList();
        lists.set(scene, [list]);
      } else {
        if (renderCallDepth >= listArray.length) {
          list = new WebGLRenderList();
          listArray.push(list);
        } else {
          list = listArray[renderCallDepth];
        }
      }
      return list;
    }
    function dispose() {
      lists = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
  }
  function WebGLLights(extensions2, capabilities) {
    const cache2 = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0
    };
    for (let i = 0; i < 9; i++)
      state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, useLegacyLights) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++)
        state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      let numSpotMaps = 0;
      let numSpotShadowsWithMaps = 0;
      lights.sort(shadowCastingAndTexturingLightsFirst);
      const scaleFactor = useLegacyLights === true ? Math.PI : 1;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity * scaleFactor;
          g += color.g * intensity * scaleFactor;
          b += color.b * intensity * scaleFactor;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
        } else if (light.isDirectionalLight) {
          const uniforms = cache2.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache2.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
          uniforms.distance = distance;
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          state.spot[spotLength] = uniforms;
          const shadow = light.shadow;
          if (light.map) {
            state.spotLightMap[numSpotMaps] = light.map;
            numSpotMaps++;
            shadow.updateMatrices(light);
            if (light.castShadow)
              numSpotShadowsWithMaps++;
          }
          state.spotLightMatrix[spotLength] = shadow.matrix;
          if (light.castShadow) {
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            numSpotShadows++;
          }
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache2.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache2.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache2.get(light);
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (capabilities.isWebGL2) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          if (extensions2.has("OES_texture_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else if (extensions2.has("OES_texture_half_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
          } else {
            console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
          }
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
        state.spotLightMap.length = numSpotMaps;
        state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        hash.numSpotMaps = numSpotMaps;
        state.version = nextVersion++;
      }
    }
    function setupView(lights, camera) {
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      const viewMatrix = camera.matrixWorldInverse;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        if (light.isDirectionalLight) {
          const uniforms = state.directional[directionalLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = state.spot[spotLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = state.rectArea[rectAreaLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = state.point[pointLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = state.hemi[hemiLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          hemiLength++;
        }
      }
    }
    return {
      setup,
      setupView,
      state
    };
  }
  function WebGLRenderState(extensions2, capabilities) {
    const lights = new WebGLLights(extensions2, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights(useLegacyLights) {
      lights.setup(lightsArray, useLegacyLights);
    }
    function setupLightsView(camera) {
      lights.setupView(lightsArray, camera);
    }
    const state = {
      lightsArray,
      shadowsArray,
      lights
    };
    return {
      init,
      state,
      setupLights,
      setupLightsView,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions2, capabilities) {
    let renderStates = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth = 0) {
      const renderStateArray = renderStates.get(scene);
      let renderState;
      if (renderStateArray === void 0) {
        renderState = new WebGLRenderState(extensions2, capabilities);
        renderStates.set(scene, [renderState]);
      } else {
        if (renderCallDepth >= renderStateArray.length) {
          renderState = new WebGLRenderState(extensions2, capabilities);
          renderStateArray.push(renderState);
        } else {
          renderState = renderStateArray[renderCallDepth];
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: { value: null },
        resolution: { value: new Vector2() },
        radius: { value: 4 }
      },
      vertexShader: vertex,
      fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute(
      "position",
      new BufferAttribute(
        new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
        3
      )
    );
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = _renderer.getRenderTarget();
      const activeCubeFace = _renderer.getActiveCubeFace();
      const activeMipmapLevel = _renderer.getActiveMipmapLevel();
      const _state = _renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
      const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
          if (_shadowMapSize.x > _maxTextureSize) {
            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > _maxTextureSize) {
            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null || toVSM === true || fromVSM === true) {
          const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
          if (shadow.map !== null) {
            shadow.map.dispose();
          }
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(
            _viewportSize.x * viewport.x,
            _viewportSize.y * viewport.y,
            _viewportSize.x * viewport.z,
            _viewportSize.y * viewport.w
          );
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene, camera, shadow.camera, light, this.type);
        }
        if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
          VSMPass(shadow, camera);
        }
        shadow.needsUpdate = false;
      }
      _previousType = this.type;
      scope.needsUpdate = false;
      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
      const geometry = _objects.update(fullScreenMesh);
      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialVertical.needsUpdate = true;
        shadowMaterialHorizontal.needsUpdate = true;
      }
      if (shadow.mapPass === null) {
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
      }
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.mapPass);
      _renderer.clear();
      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
      let result = null;
      const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
      if (customMaterial !== void 0) {
        result = customMaterial;
      } else {
        result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
          const keyA = result.uuid, keyB = material.uuid;
          let materialsForVariant = _materialCache[keyA];
          if (materialsForVariant === void 0) {
            materialsForVariant = {};
            _materialCache[keyA] = materialsForVariant;
          }
          let cachedMaterial = materialsForVariant[keyB];
          if (cachedMaterial === void 0) {
            cachedMaterial = result.clone();
            materialsForVariant[keyB] = cachedMaterial;
          }
          result = cachedMaterial;
        }
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.alphaMap = material.alphaMap;
      result.alphaTest = material.alphaTest;
      result.map = material.map;
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.displacementMap = material.displacementMap;
      result.displacementScale = material.displacementScale;
      result.displacementBias = material.displacementBias;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        const materialProperties = _renderer.properties.get(result);
        materialProperties.light = light;
      }
      return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = _objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group = groups[k];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, material, light, type);
            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera, shadowCamera, light, type);
      }
    }
  }
  function WebGLState(gl, extensions2, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setTest: function(depthTest) {
          if (depthTest) {
            enable(gl.DEPTH_TEST);
          } else {
            disable(gl.DEPTH_TEST);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (currentDepthFunc !== depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(gl.NEVER);
                break;
              case AlwaysDepth:
                gl.depthFunc(gl.ALWAYS);
                break;
              case LessDepth:
                gl.depthFunc(gl.LESS);
                break;
              case LessEqualDepth:
                gl.depthFunc(gl.LEQUAL);
                break;
              case EqualDepth:
                gl.depthFunc(gl.EQUAL);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(gl.GEQUAL);
                break;
              case GreaterDepth:
                gl.depthFunc(gl.GREATER);
                break;
              case NotEqualDepth:
                gl.depthFunc(gl.NOTEQUAL);
                break;
              default:
                gl.depthFunc(gl.LEQUAL);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(gl.STENCIL_TEST);
            } else {
              disable(gl.STENCIL_TEST);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = /* @__PURE__ */ new WeakMap();
    const uboProgramMap = /* @__PURE__ */ new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target2, count, dimensions) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      for (let i = 0; i < count; i++) {
        if (isWebGL2 && (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY)) {
          gl.texImage3D(target2, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        } else {
          gl.texImage2D(target2 + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        }
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    if (isWebGL2) {
      emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
      emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    }
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(gl.CULL_FACE);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function bindFramebuffer(target2, framebuffer) {
      if (currentBoundFramebuffers[target2] !== framebuffer) {
        gl.bindFramebuffer(target2, framebuffer);
        currentBoundFramebuffers[target2] = framebuffer;
        if (isWebGL2) {
          if (target2 === gl.DRAW_FRAMEBUFFER) {
            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
          }
          if (target2 === gl.FRAMEBUFFER) {
            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
          }
        }
        return true;
      }
      return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
      let drawBuffers2 = defaultDrawbuffers;
      let needsUpdate = false;
      if (renderTarget) {
        drawBuffers2 = currentDrawbuffers.get(framebuffer);
        if (drawBuffers2 === void 0) {
          drawBuffers2 = [];
          currentDrawbuffers.set(framebuffer, drawBuffers2);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) {
          const textures = renderTarget.texture;
          if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
            for (let i = 0, il = textures.length; i < il; i++) {
              drawBuffers2[i] = gl.COLOR_ATTACHMENT0 + i;
            }
            drawBuffers2.length = textures.length;
            needsUpdate = true;
          }
        } else {
          if (drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
            drawBuffers2[0] = gl.COLOR_ATTACHMENT0;
            needsUpdate = true;
          }
        }
      } else {
        if (drawBuffers2[0] !== gl.BACK) {
          drawBuffers2[0] = gl.BACK;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        if (capabilities.isWebGL2) {
          gl.drawBuffers(drawBuffers2);
        } else {
          extensions2.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers2);
        }
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: gl.FUNC_ADD,
      [SubtractEquation]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    if (isWebGL2) {
      equationToGL[MinEquation] = gl.MIN;
      equationToGL[MaxEquation] = gl.MAX;
    } else {
      const extension = extensions2.get("EXT_blend_minmax");
      if (extension !== null) {
        equationToGL[MinEquation] = extension.MIN_EXT;
        equationToGL[MaxEquation] = extension.MAX_EXT;
      }
    }
    const factorToGL = {
      [ZeroFactor]: gl.ZERO,
      [OneFactor]: gl.ONE,
      [SrcColorFactor]: gl.SRC_COLOR,
      [SrcAlphaFactor]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor]: gl.DST_COLOR,
      [DstAlphaFactor]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled === true) {
          disable(gl.BLEND);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (currentBlendingEnabled === false) {
        enable(gl.BLEND);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(gl.FUNC_ADD);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.ONE, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(gl.CW);
        } else {
          gl.frontFace(gl.CCW);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(gl.CULL_FACE);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(gl.BACK);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(gl.FRONT);
          } else {
            gl.cullFace(gl.FRONT_AND_BACK);
          }
        }
      } else {
        disable(gl.CULL_FACE);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(gl.POLYGON_OFFSET_FILL);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(gl.POLYGON_OFFSET_FILL);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(gl.SCISSOR_TEST);
      } else {
        disable(gl.SCISSOR_TEST);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
      if (webglSlot === void 0) {
        if (currentTextureSlot === null) {
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        } else {
          webglSlot = currentTextureSlot;
        }
      }
      let boundTexture = currentBoundTextures[webglSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[webglSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          currentTextureSlot = webglSlot;
        }
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexImage3D() {
      try {
        gl.compressedTexImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage2D() {
      try {
        gl.texSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage3D() {
      try {
        gl.texSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage2D() {
      try {
        gl.compressedTexSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage3D() {
      try {
        gl.compressedTexSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage2D() {
      try {
        gl.texStorage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage3D() {
      try {
        gl.texStorage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function updateUBOMapping(uniformsGroup, program) {
      let mapping = uboProgramMap.get(program);
      if (mapping === void 0) {
        mapping = /* @__PURE__ */ new WeakMap();
        uboProgramMap.set(program, mapping);
      }
      let blockIndex = mapping.get(uniformsGroup);
      if (blockIndex === void 0) {
        blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
        mapping.set(uniformsGroup, blockIndex);
      }
    }
    function uniformBlockBinding(uniformsGroup, program) {
      const mapping = uboProgramMap.get(program);
      const blockIndex = mapping.get(uniformsGroup);
      if (uboBindings.get(program) !== blockIndex) {
        gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
        uboBindings.set(program, blockIndex);
      }
    }
    function reset() {
      gl.disable(gl.BLEND);
      gl.disable(gl.CULL_FACE);
      gl.disable(gl.DEPTH_TEST);
      gl.disable(gl.POLYGON_OFFSET_FILL);
      gl.disable(gl.SCISSOR_TEST);
      gl.disable(gl.STENCIL_TEST);
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.ONE, gl.ZERO);
      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
      gl.colorMask(true, true, true, true);
      gl.clearColor(0, 0, 0, 0);
      gl.depthMask(true);
      gl.depthFunc(gl.LESS);
      gl.clearDepth(1);
      gl.stencilMask(4294967295);
      gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
      gl.clearStencil(0);
      gl.cullFace(gl.BACK);
      gl.frontFace(gl.CCW);
      gl.polygonOffset(0, 0);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      if (isWebGL2 === true) {
        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
      }
      gl.useProgram(null);
      gl.lineWidth(1);
      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentBoundFramebuffers = {};
      currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      defaultDrawbuffers = [];
      currentProgram = null;
      currentBlendingEnabled = false;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      bindFramebuffer,
      drawBuffers,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      compressedTexImage3D,
      texImage2D,
      texImage3D,
      updateUBOMapping,
      uniformBlockBinding,
      texStorage2D,
      texStorage3D,
      texSubImage2D,
      texSubImage3D,
      compressedTexSubImage2D,
      compressedTexSubImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions2, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const multisampledRTTExt = extensions2.has("WEBGL_multisampled_render_to_texture") ? extensions2.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _videoTextures = /* @__PURE__ */ new WeakMap();
    let _canvas2;
    const _sources = /* @__PURE__ */ new WeakMap();
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? (
        // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height)
      ) : createElementNS("canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
      let scale = 1;
      if (image.width > maxSize || image.height > maxSize) {
        scale = maxSize / Math.max(image.width, image.height);
      }
      if (scale < 1 || needsPowerOfTwo === true) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
          const width = floor(scale * image.width);
          const height = floor(scale * image.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function isPowerOfTwo$1(image) {
      return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
      if (isWebGL2)
        return false;
      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target2) {
      _gl.generateMipmap(target2);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
      if (isWebGL2 === false)
        return glFormat;
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === _gl.RED) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.R32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.R16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.R8;
      }
      if (glFormat === _gl.RED_INTEGER) {
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.R8UI;
        if (glType === _gl.UNSIGNED_SHORT)
          internalFormat = _gl.R16UI;
        if (glType === _gl.UNSIGNED_INT)
          internalFormat = _gl.R32UI;
        if (glType === _gl.BYTE)
          internalFormat = _gl.R8I;
        if (glType === _gl.SHORT)
          internalFormat = _gl.R16I;
        if (glType === _gl.INT)
          internalFormat = _gl.R32I;
      }
      if (glFormat === _gl.RG) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RG32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RG16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RG8;
      }
      if (glFormat === _gl.RGBA) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RGBA32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RGBA16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = colorSpace === SRGBColorSpace && forceLinearTransfer === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
        if (glType === _gl.UNSIGNED_SHORT_4_4_4_4)
          internalFormat = _gl.RGBA4;
        if (glType === _gl.UNSIGNED_SHORT_5_5_5_1)
          internalFormat = _gl.RGB5_A1;
      }
      if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
        extensions2.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
      if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        return Math.log2(Math.max(image.width, image.height)) + 1;
      } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
        return texture.mipmaps.length;
      } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
        return image.mipmaps.length;
      } else {
        return 1;
      }
    }
    function filterFallback(f) {
      if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
        return _gl.NEAREST;
      }
      return _gl.LINEAR;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      const source = texture.source;
      const webglTextures = _sources.get(source);
      if (webglTextures) {
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        webglTexture.usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
        if (Object.keys(webglTextures).length === 0) {
          _sources.delete(source);
        }
      }
      properties.remove(texture);
    }
    function deleteTexture(texture) {
      const textureProperties = properties.get(texture);
      _gl.deleteTexture(textureProperties.__webglTexture);
      const source = texture.source;
      const webglTextures = _sources.get(source);
      delete webglTextures[textureProperties.__cacheKey];
      info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglTexture !== void 0) {
        _gl.deleteTexture(textureProperties.__webglTexture);
        info.memory.textures--;
      }
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) {
            for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++)
              _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
          } else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          }
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++)
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        }
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer) {
          for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
            if (renderTargetProperties.__webglColorRenderbuffer[i])
              _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
          }
        }
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      if (renderTarget.isWebGLMultipleRenderTargets) {
        for (let i = 0, il = texture.length; i < il; i++) {
          const attachmentProperties = properties.get(texture[i]);
          if (attachmentProperties.__webglTexture) {
            _gl.deleteTexture(attachmentProperties.__webglTexture);
            info.memory.textures--;
          }
          properties.remove(texture[i]);
        }
      }
      properties.remove(texture);
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function getTextureCacheKey(texture) {
      const array = [];
      array.push(texture.wrapS);
      array.push(texture.wrapT);
      array.push(texture.wrapR || 0);
      array.push(texture.magFilter);
      array.push(texture.minFilter);
      array.push(texture.anisotropy);
      array.push(texture.internalFormat);
      array.push(texture.format);
      array.push(texture.type);
      array.push(texture.generateMipmaps);
      array.push(texture.premultiplyAlpha);
      array.push(texture.flipY);
      array.push(texture.unpackAlignment);
      array.push(texture.colorSpace);
      return array.join();
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === null) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
      [RepeatWrapping]: _gl.REPEAT,
      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
      [NearestFilter]: _gl.NEAREST,
      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter]: _gl.LINEAR,
      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
      [NeverCompare]: _gl.NEVER,
      [AlwaysCompare]: _gl.ALWAYS,
      [LessCompare]: _gl.LESS,
      [LessEqualCompare]: _gl.LEQUAL,
      [EqualCompare]: _gl.EQUAL,
      [GreaterEqualCompare]: _gl.GEQUAL,
      [GreaterCompare]: _gl.GREATER,
      [NotEqualCompare]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture, supportsMips) {
      if (supportsMips) {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
        }
        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
      } else {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
        }
        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
        }
        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
      }
      if (texture.compareFunction) {
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
      }
      if (extensions2.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions2.get("EXT_texture_filter_anisotropic");
        if (texture.magFilter === NearestFilter)
          return;
        if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter)
          return;
        if (texture.type === FloatType && extensions2.has("OES_texture_float_linear") === false)
          return;
        if (isWebGL2 === false && (texture.type === HalfFloatType && extensions2.has("OES_texture_half_float_linear") === false))
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      let forceUpload = false;
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
      }
      const source = texture.source;
      let webglTextures = _sources.get(source);
      if (webglTextures === void 0) {
        webglTextures = {};
        _sources.set(source, webglTextures);
      }
      const textureCacheKey = getTextureCacheKey(texture);
      if (textureCacheKey !== textureProperties.__cacheKey) {
        if (webglTextures[textureCacheKey] === void 0) {
          webglTextures[textureCacheKey] = {
            texture: _gl.createTexture(),
            usedTimes: 0
          };
          info.memory.textures++;
          forceUpload = true;
        }
        webglTextures[textureCacheKey].usedTimes++;
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        if (webglTexture !== void 0) {
          webglTextures[textureProperties.__cacheKey].usedTimes--;
          if (webglTexture.usedTimes === 0) {
            deleteTexture(texture);
          }
        }
        textureProperties.__cacheKey = textureCacheKey;
        textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
      }
      return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = _gl.TEXTURE_2D;
      if (texture.isDataArrayTexture || texture.isCompressedArrayTexture)
        textureType = _gl.TEXTURE_2D_ARRAY;
      if (texture.isData3DTexture)
        textureType = _gl.TEXTURE_3D;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
        const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
        let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
        image = verifyColorSpace(texture, image);
        const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace);
        let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
        setTextureParameters(textureType, texture, supportsMips);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const levels = getMipLevels(texture, image, supportsMips);
        if (texture.isDepthTexture) {
          glInternalFormat = _gl.DEPTH_COMPONENT;
          if (isWebGL2) {
            if (texture.type === FloatType) {
              glInternalFormat = _gl.DEPTH_COMPONENT32F;
            } else if (texture.type === UnsignedIntType) {
              glInternalFormat = _gl.DEPTH_COMPONENT24;
            } else if (texture.type === UnsignedInt248Type) {
              glInternalFormat = _gl.DEPTH24_STENCIL8;
            } else {
              glInternalFormat = _gl.DEPTH_COMPONENT16;
            }
          } else {
            if (texture.type === FloatType) {
              console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
            }
          }
          if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
            if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
              console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
              texture.type = UnsignedIntType;
              glType = utils.convert(texture.type);
            }
          }
          if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
            glInternalFormat = _gl.DEPTH_STENCIL;
            if (texture.type !== UnsignedInt248Type) {
              console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
              texture.type = UnsignedInt248Type;
              glType = utils.convert(texture.type);
            }
          }
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
            }
          }
        } else if (texture.isDataTexture) {
          if (mipmaps.length > 0 && supportsMips) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            }
          }
        } else if (texture.isCompressedTexture) {
          if (texture.isCompressedArrayTexture) {
            if (useTexStorage && allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                  } else {
                    state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                } else {
                  state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          } else {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else if (texture.isDataArrayTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          } else {
            state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isData3DTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          } else {
            state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isFramebufferTexture) {
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            } else {
              let width = image.width, height = image.height;
              for (let i = 0; i < levels; i++) {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                width >>= 1;
                height >>= 1;
              }
            }
          }
        } else {
          if (mipmaps.length > 0 && supportsMips) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(textureType);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
        const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for (let i = 0; i < 6; i++) {
          if (!isCompressed && !isDataTexture) {
            cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
          } else {
            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
          }
          cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
        }
        const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        let levels = getMipLevels(texture, image, supportsMips);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
        let mipmaps;
        if (isCompressed) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
          }
          for (let i = 0; i < 6; i++) {
            mipmaps = cubeImage[i].mipmaps;
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else {
          mipmaps = texture.mipmaps;
          if (useTexStorage && allocateMemory) {
            if (mipmaps.length > 0)
              levels++;
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
          }
          for (let i = 0; i < 6; i++) {
            if (isDataTexture) {
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                const mipmapImage = mipmap.image[i].image;
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
              }
            } else {
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                }
              }
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const renderTargetProperties = properties.get(renderTarget);
      if (!renderTargetProperties.__hasExternalTextures) {
        const width = Math.max(1, renderTarget.width >> level);
        const height = Math.max(1, renderTarget.height >> level);
        if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
          state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
        } else {
          state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
      } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, level);
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
        let glInternalFormat = _gl.DEPTH_COMPONENT16;
        if (isMultisample || useMultisampledRTT(renderTarget)) {
          const depthTexture = renderTarget.depthTexture;
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === FloatType) {
              glInternalFormat = _gl.DEPTH_COMPONENT32F;
            } else if (depthTexture.type === UnsignedIntType) {
              glInternalFormat = _gl.DEPTH_COMPONENT24;
            }
          }
          const samples = getRenderTargetSamples(renderTarget);
          if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && useMultisampledRTT(renderTarget) === false) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
        } else if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
      } else {
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
        for (let i = 0; i < textures.length; i++) {
          const texture = textures[i];
          const glFormat = utils.convert(texture.format, texture.colorSpace);
          const glType = utils.convert(texture.type);
          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
          const samples = getRenderTargetSamples(renderTarget);
          if (isMultisample && useMultisampledRTT(renderTarget) === false) {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        }
      }
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
      const samples = getRenderTargetSamples(renderTarget);
      if (renderTarget.depthTexture.format === DepthFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
          }
        } else {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      if (colorTexture !== void 0) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
      }
      if (depthTexture !== void 0) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function setupRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      if (renderTarget.isWebGLMultipleRenderTargets !== true) {
        if (textureProperties.__webglTexture === void 0) {
          textureProperties.__webglTexture = _gl.createTexture();
        }
        textureProperties.__version = texture.version;
        info.memory.textures++;
      }
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
            renderTargetProperties.__webglFramebuffer[i] = [];
            for (let level = 0; level < texture.mipmaps.length; level++) {
              renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
            }
          } else {
            renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
          }
        }
      } else {
        if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer = [];
          for (let level = 0; level < texture.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        }
        if (isMultipleRenderTargets) {
          if (capabilities.drawBuffers) {
            const textures = renderTarget.texture;
            for (let i = 0, il = textures.length; i < il; i++) {
              const attachmentProperties = properties.get(textures[i]);
              if (attachmentProperties.__webglTexture === void 0) {
                attachmentProperties.__webglTexture = _gl.createTexture();
                info.memory.textures++;
              }
            }
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
          }
        }
        if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
          const textures = isMultipleRenderTargets ? texture : [texture];
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = [];
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            const texture2 = textures[i];
            renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const glFormat = utils.convert(texture2.format, texture2.colorSpace);
            const glType = utils.convert(texture2.type);
            const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
        }
      }
      if (isCube) {
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
        for (let i = 0; i < 6; i++) {
          if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
            for (let level = 0; level < texture.mipmaps.length; level++) {
              setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
            }
          } else {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
          }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        state.unbindTexture();
      } else if (isMultipleRenderTargets) {
        const textures = renderTarget.texture;
        for (let i = 0, il = textures.length; i < il; i++) {
          const attachment = textures[i];
          const attachmentProperties = properties.get(attachment);
          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
          setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
          if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
            generateMipmap(_gl.TEXTURE_2D);
          }
        }
        state.unbindTexture();
      } else {
        let glTextureType = _gl.TEXTURE_2D;
        if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
          if (isWebGL2) {
            glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
          } else {
            console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
          }
        }
        state.bindTexture(glTextureType, textureProperties.__webglTexture);
        setTextureParameters(glTextureType, texture, supportsMips);
        if (isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0) {
          for (let level = 0; level < texture.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(glTextureType);
        }
        state.unbindTexture();
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
      for (let i = 0, il = textures.length; i < il; i++) {
        const texture = textures[i];
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          const target2 = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
          const webglTexture = properties.get(texture).__webglTexture;
          state.bindTexture(target2, webglTexture);
          generateMipmap(target2);
          state.unbindTexture();
        }
      }
    }
    function updateMultisampleRenderTarget(renderTarget) {
      if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = _gl.COLOR_BUFFER_BIT;
        const invalidationArray = [];
        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const renderTargetProperties = properties.get(renderTarget);
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        for (let i = 0; i < textures.length; i++) {
          invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
          if (renderTarget.depthBuffer) {
            invalidationArray.push(depthStyle);
          }
          const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== void 0 ? renderTargetProperties.__ignoreDepthValues : false;
          if (ignoreDepthValues === false) {
            if (renderTarget.depthBuffer)
              mask |= _gl.DEPTH_BUFFER_BIT;
            if (renderTarget.stencilBuffer)
              mask |= _gl.STENCIL_BUFFER_BIT;
          }
          if (isMultipleRenderTargets) {
            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          if (ignoreDepthValues === true) {
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);
            _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
          }
          if (isMultipleRenderTargets) {
            const webglTexture = properties.get(textures[i]).__webglTexture;
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
          }
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
          if (supportsInvalidateFramebuffer) {
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const webglTexture = properties.get(textures[i]).__webglTexture;
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
          }
        }
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return Math.min(maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      return isWebGL2 && renderTarget.samples > 0 && extensions2.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    function verifyColorSpace(texture, image) {
      const colorSpace = texture.colorSpace;
      const format2 = texture.format;
      const type = texture.type;
      if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat)
        return image;
      if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
        if (colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace) {
          if (isWebGL2 === false) {
            if (extensions2.has("EXT_sRGB") === true && format2 === RGBAFormat) {
              texture.format = _SRGBAFormat;
              texture.minFilter = LinearFilter;
              texture.generateMipmaps = false;
            } else {
              image = ImageUtils.sRGBToLinear(image);
            }
          } else {
            if (format2 !== RGBAFormat || type !== UnsignedByteType) {
              console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
            }
          }
        } else {
          console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
        }
      }
      return image;
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
  }
  function WebGLUtils(gl, extensions2, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p, colorSpace = NoColorSpace) {
      let extension;
      const transferFunction = colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace ? SRGBTransferFunction : LinearTransferFunction;
      if (p === UnsignedByteType)
        return gl.UNSIGNED_BYTE;
      if (p === UnsignedShort4444Type)
        return gl.UNSIGNED_SHORT_4_4_4_4;
      if (p === UnsignedShort5551Type)
        return gl.UNSIGNED_SHORT_5_5_5_1;
      if (p === ByteType)
        return gl.BYTE;
      if (p === ShortType)
        return gl.SHORT;
      if (p === UnsignedShortType)
        return gl.UNSIGNED_SHORT;
      if (p === IntType)
        return gl.INT;
      if (p === UnsignedIntType)
        return gl.UNSIGNED_INT;
      if (p === FloatType)
        return gl.FLOAT;
      if (p === HalfFloatType) {
        if (isWebGL2)
          return gl.HALF_FLOAT;
        extension = extensions2.get("OES_texture_half_float");
        if (extension !== null) {
          return extension.HALF_FLOAT_OES;
        } else {
          return null;
        }
      }
      if (p === AlphaFormat)
        return gl.ALPHA;
      if (p === RGBAFormat)
        return gl.RGBA;
      if (p === LuminanceFormat)
        return gl.LUMINANCE;
      if (p === LuminanceAlphaFormat)
        return gl.LUMINANCE_ALPHA;
      if (p === DepthFormat)
        return gl.DEPTH_COMPONENT;
      if (p === DepthStencilFormat)
        return gl.DEPTH_STENCIL;
      if (p === _SRGBAFormat) {
        extension = extensions2.get("EXT_sRGB");
        if (extension !== null) {
          return extension.SRGB_ALPHA_EXT;
        } else {
          return null;
        }
      }
      if (p === RedFormat)
        return gl.RED;
      if (p === RedIntegerFormat)
        return gl.RED_INTEGER;
      if (p === RGFormat)
        return gl.RG;
      if (p === RGIntegerFormat)
        return gl.RG_INTEGER;
      if (p === RGBAIntegerFormat)
        return gl.RGBA_INTEGER;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        if (transferFunction === SRGBTransferFunction) {
          extension = extensions2.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions2.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions2.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format) {
        extension = extensions2.get("WEBGL_compressed_texture_etc1");
        if (extension !== null) {
          return extension.COMPRESSED_RGB_ETC1_WEBGL;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions2.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC2_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
        extension = extensions2.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p === RGBA_ASTC_4x4_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p === RGBA_ASTC_5x4_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p === RGBA_ASTC_5x5_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p === RGBA_ASTC_6x5_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p === RGBA_ASTC_6x6_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p === RGBA_ASTC_8x5_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p === RGBA_ASTC_8x6_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p === RGBA_ASTC_8x8_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p === RGBA_ASTC_10x5_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p === RGBA_ASTC_10x6_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p === RGBA_ASTC_10x8_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p === RGBA_ASTC_10x10_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p === RGBA_ASTC_12x10_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p === RGBA_ASTC_12x12_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format) {
        extension = extensions2.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return transferFunction === SRGBTransferFunction ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
          if (p === RGB_BPTC_SIGNED_Format)
            return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
          if (p === RGB_BPTC_UNSIGNED_Format)
            return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
        } else {
          return null;
        }
      }
      if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
        extension = extensions2.get("EXT_texture_compression_rgtc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return extension.COMPRESSED_RED_RGTC1_EXT;
          if (p === SIGNED_RED_RGTC1_Format)
            return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (p === RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (p === SIGNED_RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) {
        if (isWebGL2)
          return gl.UNSIGNED_INT_24_8;
        extension = extensions2.get("WEBGL_depth_texture");
        if (extension !== null) {
          return extension.UNSIGNED_INT_24_8_WEBGL;
        } else {
          return null;
        }
      }
      return gl[p] !== void 0 ? gl[p] : null;
    }
    return { convert };
  }
  function WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
      if (map.matrixAutoUpdate === true) {
        map.updateMatrix();
      }
      uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
      fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsStandard(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide) {
          uniforms.bumpScale.value *= -1;
        }
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide) {
          uniforms.normalScale.value.negate();
        }
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
        refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
        refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMap.value = envMap;
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.ior.value = material.ior;
        uniforms.refractionRatio.value = material.refractionRatio;
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        const scaleFactor = renderer._useLegacyLights === true ? Math.PI : 1;
        uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
        refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
        refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.uvTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.metalness.value = material.metalness;
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
        refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
      }
      uniforms.roughness.value = material.roughness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
        refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
      uniforms.ior.value = material.ior;
      if (material.sheen > 0) {
        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
        uniforms.sheenRoughness.value = material.sheenRoughness;
        if (material.sheenColorMap) {
          uniforms.sheenColorMap.value = material.sheenColorMap;
          refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
        }
        if (material.sheenRoughnessMap) {
          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
          refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
        }
      }
      if (material.clearcoat > 0) {
        uniforms.clearcoat.value = material.clearcoat;
        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
        if (material.clearcoatMap) {
          uniforms.clearcoatMap.value = material.clearcoatMap;
          refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
        }
        if (material.clearcoatRoughnessMap) {
          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
          refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
        }
        if (material.clearcoatNormalMap) {
          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
          refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
          if (material.side === BackSide) {
            uniforms.clearcoatNormalScale.value.negate();
          }
        }
      }
      if (material.iridescence > 0) {
        uniforms.iridescence.value = material.iridescence;
        uniforms.iridescenceIOR.value = material.iridescenceIOR;
        uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
        uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
        if (material.iridescenceMap) {
          uniforms.iridescenceMap.value = material.iridescenceMap;
          refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
        }
        if (material.iridescenceThicknessMap) {
          uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
          refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
        }
      }
      if (material.transmission > 0) {
        uniforms.transmission.value = material.transmission;
        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
        if (material.transmissionMap) {
          uniforms.transmissionMap.value = material.transmissionMap;
          refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
        }
        uniforms.thickness.value = material.thickness;
        if (material.thicknessMap) {
          uniforms.thicknessMap.value = material.thicknessMap;
          refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
        }
        uniforms.attenuationDistance.value = material.attenuationDistance;
        uniforms.attenuationColor.value.copy(material.attenuationColor);
      }
      if (material.anisotropy > 0) {
        uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
        if (material.anisotropyMap) {
          uniforms.anisotropyMap.value = material.anisotropyMap;
          refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
        }
      }
      uniforms.specularIntensity.value = material.specularIntensity;
      uniforms.specularColor.value.copy(material.specularColor);
      if (material.specularColorMap) {
        uniforms.specularColorMap.value = material.specularColorMap;
        refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
      }
      if (material.specularIntensityMap) {
        uniforms.specularIntensityMap.value = material.specularIntensityMap;
        refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      const light = properties.get(material).light;
      uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
      uniforms.nearDistance.value = light.shadow.camera.near;
      uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
    function bind(uniformsGroup, program) {
      const webglProgram = program.program;
      state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
      let buffer2 = buffers[uniformsGroup.id];
      if (buffer2 === void 0) {
        prepareUniformsGroup(uniformsGroup);
        buffer2 = createBuffer(uniformsGroup);
        buffers[uniformsGroup.id] = buffer2;
        uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
      }
      const webglProgram = program.program;
      state.updateUBOMapping(uniformsGroup, webglProgram);
      const frame = info.render.frame;
      if (updateList[uniformsGroup.id] !== frame) {
        updateBufferData(uniformsGroup);
        updateList[uniformsGroup.id] = frame;
      }
    }
    function createBuffer(uniformsGroup) {
      const bindingPointIndex = allocateBindingPointIndex();
      uniformsGroup.__bindingPointIndex = bindingPointIndex;
      const buffer2 = gl.createBuffer();
      const size = uniformsGroup.__size;
      const usage = uniformsGroup.usage;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer2);
      gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer2);
      return buffer2;
    }
    function allocateBindingPointIndex() {
      for (let i = 0; i < maxBindingPoints; i++) {
        if (allocatedBindingPoints.indexOf(i) === -1) {
          allocatedBindingPoints.push(i);
          return i;
        }
      }
      console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
      return 0;
    }
    function updateBufferData(uniformsGroup) {
      const buffer2 = buffers[uniformsGroup.id];
      const uniforms = uniformsGroup.uniforms;
      const cache2 = uniformsGroup.__cache;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer2);
      for (let i = 0, il = uniforms.length; i < il; i++) {
        const uniform = uniforms[i];
        if (hasUniformChanged(uniform, i, cache2) === true) {
          const offset = uniform.__offset;
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          let arrayOffset = 0;
          for (let i2 = 0; i2 < values.length; i2++) {
            const value = values[i2];
            const info2 = getUniformSize(value);
            if (typeof value === "number") {
              uniform.__data[0] = value;
              gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
            } else if (value.isMatrix3) {
              uniform.__data[0] = value.elements[0];
              uniform.__data[1] = value.elements[1];
              uniform.__data[2] = value.elements[2];
              uniform.__data[3] = value.elements[0];
              uniform.__data[4] = value.elements[3];
              uniform.__data[5] = value.elements[4];
              uniform.__data[6] = value.elements[5];
              uniform.__data[7] = value.elements[0];
              uniform.__data[8] = value.elements[6];
              uniform.__data[9] = value.elements[7];
              uniform.__data[10] = value.elements[8];
              uniform.__data[11] = value.elements[0];
            } else {
              value.toArray(uniform.__data, arrayOffset);
              arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
            }
          }
          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
        }
      }
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, cache2) {
      const value = uniform.value;
      if (cache2[index] === void 0) {
        if (typeof value === "number") {
          cache2[index] = value;
        } else {
          const values = Array.isArray(value) ? value : [value];
          const tempValues = [];
          for (let i = 0; i < values.length; i++) {
            tempValues.push(values[i].clone());
          }
          cache2[index] = tempValues;
        }
        return true;
      } else {
        if (typeof value === "number") {
          if (cache2[index] !== value) {
            cache2[index] = value;
            return true;
          }
        } else {
          const cachedObjects = Array.isArray(cache2[index]) ? cache2[index] : [cache2[index]];
          const values = Array.isArray(value) ? value : [value];
          for (let i = 0; i < cachedObjects.length; i++) {
            const cachedObject = cachedObjects[i];
            if (cachedObject.equals(values[i]) === false) {
              cachedObject.copy(values[i]);
              return true;
            }
          }
        }
      }
      return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
      const uniforms = uniformsGroup.uniforms;
      let offset = 0;
      const chunkSize = 16;
      let chunkOffset = 0;
      for (let i = 0, l = uniforms.length; i < l; i++) {
        const uniform = uniforms[i];
        const infos = {
          boundary: 0,
          // bytes
          storage: 0
          // bytes
        };
        const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
        for (let j = 0, jl = values.length; j < jl; j++) {
          const value = values[j];
          const info2 = getUniformSize(value);
          infos.boundary += info2.boundary;
          infos.storage += info2.storage;
        }
        uniform.__data = new Float32Array(infos.storage / Float32Array.BYTES_PER_ELEMENT);
        uniform.__offset = offset;
        if (i > 0) {
          chunkOffset = offset % chunkSize;
          const remainingSizeInChunk = chunkSize - chunkOffset;
          if (chunkOffset !== 0 && remainingSizeInChunk - infos.boundary < 0) {
            offset += chunkSize - chunkOffset;
            uniform.__offset = offset;
          }
        }
        offset += infos.storage;
      }
      chunkOffset = offset % chunkSize;
      if (chunkOffset > 0)
        offset += chunkSize - chunkOffset;
      uniformsGroup.__size = offset;
      uniformsGroup.__cache = {};
      return this;
    }
    function getUniformSize(value) {
      const info2 = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      };
      if (typeof value === "number") {
        info2.boundary = 4;
        info2.storage = 4;
      } else if (value.isVector2) {
        info2.boundary = 8;
        info2.storage = 8;
      } else if (value.isVector3 || value.isColor) {
        info2.boundary = 16;
        info2.storage = 12;
      } else if (value.isVector4) {
        info2.boundary = 16;
        info2.storage = 16;
      } else if (value.isMatrix3) {
        info2.boundary = 48;
        info2.storage = 48;
      } else if (value.isMatrix4) {
        info2.boundary = 64;
        info2.storage = 64;
      } else if (value.isTexture) {
        console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
      } else {
        console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
      }
      return info2;
    }
    function onUniformsGroupsDispose(event) {
      const uniformsGroup = event.target;
      uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
      const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
      allocatedBindingPoints.splice(index, 1);
      gl.deleteBuffer(buffers[uniformsGroup.id]);
      delete buffers[uniformsGroup.id];
      delete updateList[uniformsGroup.id];
    }
    function dispose() {
      for (const id in buffers) {
        gl.deleteBuffer(buffers[id]);
      }
      allocatedBindingPoints = [];
      buffers = {};
      updateList = {};
    }
    return {
      bind,
      update,
      dispose
    };
  }
  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    if (sin !== void 0) {
      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else {
      _rotatedPosition.copy(_alignedPosition);
    }
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    vertexPosition.applyMatrix4(_viewWorldMatrix);
  }
  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
    const rayPointDistanceSq = _ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
      const intersectPoint = new Vector3();
      _ray.closestPointToPoint(point, intersectPoint);
      intersectPoint.applyMatrix4(matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far)
        return;
      intersects2.push({
        distance,
        distanceToRay: Math.sqrt(rayPointDistanceSq),
        point: intersectPoint,
        index,
        face: null,
        object
      });
    }
  }
  function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    function init(x0, x1, t0, t1) {
      c0 = x0;
      c1 = t0;
      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
      c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
      initCatmullRom: function(x0, x1, x2, x3, tension) {
        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
      },
      initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
        t1 *= dt1;
        t2 *= dt1;
        init(x1, x2, t1, t2);
      },
      calc: function(t) {
        const t2 = t * t;
        const t3 = t2 * t;
        return c0 + c1 * t + c2 * t2 + c3 * t3;
      }
    };
  }
  function CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
  }
  function QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
  }
  function QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
  }
  function QuadraticBezierP2(t, p) {
    return t * t * p;
  }
  function QuadraticBezier(t, p0, p1, p2) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
  }
  function CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
  }
  function CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
  }
  function CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
  }
  function CubicBezierP3(t, p) {
    return t * t * t * p;
  }
  function CubicBezier(t, p0, p1, p2, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
  }
  function linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) {
      for (i = start; i < end; i += dim)
        last = insertNode(i, data[i], data[i + 1], last);
    } else {
      for (i = end - dim; i >= start; i -= dim)
        last = insertNode(i, data[i], data[i + 1], last);
    }
    if (last && equals3(last, last.next)) {
      removeNode(last);
      last = last.next;
    }
    return last;
  }
  function filterPoints(start, end) {
    if (!start)
      return start;
    if (!end)
      end = start;
    let p = start, again;
    do {
      again = false;
      if (!p.steiner && (equals3(p, p.next) || area(p.prev, p, p.next) === 0)) {
        removeNode(p);
        p = end = p.prev;
        if (p === p.next)
          break;
        again = true;
      } else {
        p = p.next;
      }
    } while (again || p !== end);
    return end;
  }
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
      return;
    if (!pass && invSize)
      indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;
      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        triangles.push(prev.i / dim | 0);
        triangles.push(ear.i / dim | 0);
        triangles.push(next.i / dim | 0);
        removeNode(ear);
        ear = next.next;
        stop = next.next;
        continue;
      }
      ear = next;
      if (ear === stop) {
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }
        break;
      }
    }
  }
  function isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    let p = c.next;
    while (p !== a) {
      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.next;
    }
    return true;
  }
  function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0)
      return false;
    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    while (p && p.z >= minZ && n && n.z <= maxZ) {
      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
      if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    while (p && p.z >= minZ) {
      if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
        return false;
      p = p.prevZ;
    }
    while (n && n.z <= maxZ) {
      if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
        return false;
      n = n.nextZ;
    }
    return true;
  }
  function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
      const a = p.prev, b = p.next.next;
      if (!equals3(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
        triangles.push(a.i / dim | 0);
        triangles.push(p.i / dim | 0);
        triangles.push(b.i / dim | 0);
        removeNode(p);
        removeNode(p.next);
        p = start = b;
      }
      p = p.next;
    } while (p !== start);
    return filterPoints(p);
  }
  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    let a = start;
    do {
      let b = a.next.next;
      while (b !== a.prev) {
        if (a.i !== b.i && isValidDiagonal(a, b)) {
          let c = splitPolygon(a, b);
          a = filterPoints(a, a.next);
          c = filterPoints(c, c.next);
          earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
          earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
          return;
        }
        b = b.next;
      }
      a = a.next;
    } while (a !== start);
  }
  function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue2 = [];
    let i, len, start, end, list;
    for (i = 0, len = holeIndices.length; i < len; i++) {
      start = holeIndices[i] * dim;
      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false);
      if (list === list.next)
        list.steiner = true;
      queue2.push(getLeftmost(list));
    }
    queue2.sort(compareX);
    for (i = 0; i < queue2.length; i++) {
      outerNode = eliminateHole(queue2[i], outerNode);
    }
    return outerNode;
  }
  function compareX(a, b) {
    return a.x - b.x;
  }
  function eliminateHole(hole, outerNode) {
    const bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
      return outerNode;
    }
    const bridgeReverse = splitPolygon(bridge, hole);
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
  }
  function findHoleBridge(hole, outerNode) {
    let p = outerNode, qx = -Infinity, m;
    const hx = hole.x, hy = hole.y;
    do {
      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
        const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
        if (x <= hx && x > qx) {
          qx = x;
          m = p.x < p.next.x ? p : p.next;
          if (x === hx)
            return m;
        }
      }
      p = p.next;
    } while (p !== outerNode);
    if (!m)
      return null;
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
        tan = Math.abs(hy - p.y) / (hx - p.x);
        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
          m = p;
          tanMin = tan;
        }
      }
      p = p.next;
    } while (p !== stop);
    return m;
  }
  function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
  }
  function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
      if (p.z === 0)
        p.z = zOrder(p.x, p.y, minX, minY, invSize);
      p.prevZ = p.prev;
      p.nextZ = p.next;
      p = p.next;
    } while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
  }
  function sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
      p = list;
      list = null;
      tail = null;
      numMerges = 0;
      while (p) {
        numMerges++;
        q = p;
        pSize = 0;
        for (i = 0; i < inSize; i++) {
          pSize++;
          q = q.nextZ;
          if (!q)
            break;
        }
        qSize = inSize;
        while (pSize > 0 || qSize > 0 && q) {
          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
            e = p;
            p = p.nextZ;
            pSize--;
          } else {
            e = q;
            q = q.nextZ;
            qSize--;
          }
          if (tail)
            tail.nextZ = e;
          else
            list = e;
          e.prevZ = tail;
          tail = e;
        }
        p = q;
      }
      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);
    return list;
  }
  function zOrder(x, y, minX, minY, invSize) {
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
  }
  function getLeftmost(start) {
    let p = start, leftmost = start;
    do {
      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
        leftmost = p;
      p = p.next;
    } while (p !== start);
    return leftmost;
  }
  function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
    return (cx - px2) * (ay - py2) >= (ax - px2) * (cy - py2) && (ax - px2) * (by - py2) >= (bx - px2) * (ay - py2) && (bx - px2) * (cy - py2) >= (cx - px2) * (by - py2);
  }
  function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
    (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
    (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
    equals3(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
  }
  function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  }
  function equals3(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  }
  function intersects(p1, q1, p2, q2) {
    const o1 = sign(area(p1, q1, p2));
    const o2 = sign(area(p1, q1, q2));
    const o3 = sign(area(p2, q2, p1));
    const o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4)
      return true;
    if (o1 === 0 && onSegment(p1, p2, q1))
      return true;
    if (o2 === 0 && onSegment(p1, q2, q1))
      return true;
    if (o3 === 0 && onSegment(p2, p1, q2))
      return true;
    if (o4 === 0 && onSegment(p2, q1, q2))
      return true;
    return false;
  }
  function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }
  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  }
  function intersectsPolygon(a, b) {
    let p = a;
    do {
      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
        return true;
      p = p.next;
    } while (p !== a);
    return false;
  }
  function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  }
  function middleInside(a, b) {
    let p = a, inside = false;
    const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
    do {
      if (p.y > py2 !== p.next.y > py2 && p.next.y !== p.y && px2 < (p.next.x - p.x) * (py2 - p.y) / (p.next.y - p.y) + p.x)
        inside = !inside;
      p = p.next;
    } while (p !== a);
    return inside;
  }
  function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
  }
  function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
      p.prev = p;
      p.next = p;
    } else {
      p.next = last.next;
      p.prev = last;
      last.next.prev = p;
      last.next = p;
    }
    return p;
  }
  function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ)
      p.prevZ.nextZ = p.nextZ;
    if (p.nextZ)
      p.nextZ.prevZ = p.prevZ;
  }
  function Node(i, x, y) {
    this.i = i;
    this.x = x;
    this.y = y;
    this.prev = null;
    this.next = null;
    this.z = 0;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
  }
  function signedArea(data, start, end, dim) {
    let sum = 0;
    for (let i = start, j = end - dim; i < end; i += dim) {
      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
      j = i;
    }
    return sum;
  }
  function removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) {
      points.pop();
    }
  }
  function addContour(vertices, contour) {
    for (let i = 0; i < contour.length; i++) {
      vertices.push(contour[i].x);
      vertices.push(contour[i].y);
    }
  }
  function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    data.options = Object.assign({}, options);
    if (options.extrudePath !== void 0)
      data.options.extrudePath = options.extrudePath.toJSON();
    return data;
  }
  function toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) {
      for (let i = 0, l = shapes.length; i < l; i++) {
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
      }
    } else {
      data.shapes.push(shapes.uuid);
    }
    return data;
  }
  function isUniqueEdge(start, end, edges) {
    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
    if (edges.has(hash1) === true || edges.has(hash2) === true) {
      return false;
    } else {
      edges.add(hash1);
      edges.add(hash2);
      return true;
    }
  }
  function arraySlice(array, from2, to) {
    if (isTypedArray(array)) {
      return new array.constructor(array.subarray(from2, to !== void 0 ? to : array.length));
    }
    return array.slice(from2, to);
  }
  function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type)
      return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  }
  function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  }
  function getKeyframeOrder(times) {
    function compareTime(i, j) {
      return times[i] - times[j];
    }
    const n = times.length;
    const result = new Array(n);
    for (let i = 0; i !== n; ++i)
      result[i] = i;
    result.sort(compareTime);
    return result;
  }
  function sortedArray(values, stride, order) {
    const nValues = values.length;
    const result = new values.constructor(nValues);
    for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
      const srcOffset = order[i] * stride;
      for (let j = 0; j !== stride; ++j) {
        result[dstOffset++] = values[srcOffset + j];
      }
    }
    return result;
  }
  function flattenJSON(jsonKeys, times, values, valuePropertyName) {
    let i = 1, key = jsonKeys[0];
    while (key !== void 0 && key[valuePropertyName] === void 0) {
      key = jsonKeys[i++];
    }
    if (key === void 0)
      return;
    let value = key[valuePropertyName];
    if (value === void 0)
      return;
    if (Array.isArray(value)) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push.apply(values, value);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    } else if (value.toArray !== void 0) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          value.toArray(values, values.length);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    } else {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push(value);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    }
  }
  function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
    const clip = sourceClip.clone();
    clip.name = name;
    const tracks = [];
    for (let i = 0; i < clip.tracks.length; ++i) {
      const track = clip.tracks[i];
      const valueSize = track.getValueSize();
      const times = [];
      const values = [];
      for (let j = 0; j < track.times.length; ++j) {
        const frame = track.times[j] * fps;
        if (frame < startFrame || frame >= endFrame)
          continue;
        times.push(track.times[j]);
        for (let k = 0; k < valueSize; ++k) {
          values.push(track.values[j * valueSize + k]);
        }
      }
      if (times.length === 0)
        continue;
      track.times = convertArray(times, track.times.constructor);
      track.values = convertArray(values, track.values.constructor);
      tracks.push(track);
    }
    clip.tracks = tracks;
    let minStartTime = Infinity;
    for (let i = 0; i < clip.tracks.length; ++i) {
      if (minStartTime > clip.tracks[i].times[0]) {
        minStartTime = clip.tracks[i].times[0];
      }
    }
    for (let i = 0; i < clip.tracks.length; ++i) {
      clip.tracks[i].shift(-1 * minStartTime);
    }
    clip.resetDuration();
    return clip;
  }
  function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
    if (fps <= 0)
      fps = 30;
    const numTracks = referenceClip.tracks.length;
    const referenceTime = referenceFrame / fps;
    for (let i = 0; i < numTracks; ++i) {
      const referenceTrack = referenceClip.tracks[i];
      const referenceTrackType = referenceTrack.ValueTypeName;
      if (referenceTrackType === "bool" || referenceTrackType === "string")
        continue;
      const targetTrack = targetClip.tracks.find(function(track) {
        return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
      });
      if (targetTrack === void 0)
        continue;
      let referenceOffset = 0;
      const referenceValueSize = referenceTrack.getValueSize();
      if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        referenceOffset = referenceValueSize / 3;
      }
      let targetOffset = 0;
      const targetValueSize = targetTrack.getValueSize();
      if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        targetOffset = targetValueSize / 3;
      }
      const lastIndex = referenceTrack.times.length - 1;
      let referenceValue;
      if (referenceTime <= referenceTrack.times[0]) {
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
      } else if (referenceTime >= referenceTrack.times[lastIndex]) {
        const startIndex = lastIndex * referenceValueSize + referenceOffset;
        const endIndex = startIndex + referenceValueSize - referenceOffset;
        referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
      } else {
        const interpolant = referenceTrack.createInterpolant();
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        interpolant.evaluate(referenceTime);
        referenceValue = arraySlice(interpolant.resultBuffer, startIndex, endIndex);
      }
      if (referenceTrackType === "quaternion") {
        const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
        referenceQuat.toArray(referenceValue);
      }
      const numTimes = targetTrack.times.length;
      for (let j = 0; j < numTimes; ++j) {
        const valueStart = j * targetValueSize + targetOffset;
        if (referenceTrackType === "quaternion") {
          Quaternion.multiplyQuaternionsFlat(
            targetTrack.values,
            valueStart,
            referenceValue,
            0,
            targetTrack.values,
            valueStart
          );
        } else {
          const valueEnd = targetValueSize - targetOffset * 2;
          for (let k = 0; k < valueEnd; ++k) {
            targetTrack.values[valueStart + k] -= referenceValue[k];
          }
        }
      }
    }
    targetClip.blendMode = AdditiveAnimationBlendMode;
    return targetClip;
  }
  function getTrackTypeForValueTypeName(typeName) {
    switch (typeName.toLowerCase()) {
      case "scalar":
      case "double":
      case "float":
      case "number":
      case "integer":
        return NumberKeyframeTrack;
      case "vector":
      case "vector2":
      case "vector3":
      case "vector4":
        return VectorKeyframeTrack;
      case "color":
        return ColorKeyframeTrack;
      case "quaternion":
        return QuaternionKeyframeTrack;
      case "bool":
      case "boolean":
        return BooleanKeyframeTrack;
      case "string":
        return StringKeyframeTrack;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
  }
  function parseKeyframeTrack(json) {
    if (json.type === void 0) {
      throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    }
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === void 0) {
      const times = [], values = [];
      flattenJSON(json.keys, times, values, "value");
      json.times = times;
      json.values = values;
    }
    if (trackType.parse !== void 0) {
      return trackType.parse(json);
    } else {
      return new trackType(json.name, json.times, json.values, json.interpolation);
    }
  }
  function now() {
    return (typeof performance === "undefined" ? Date : performance).now();
  }
  function ascSort(a, b) {
    return a.distance - b.distance;
  }
  function intersectObject(object, raycaster, intersects2, recursive) {
    if (object.layers.test(raycaster.layers)) {
      object.raycast(raycaster, intersects2);
    }
    if (recursive === true) {
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        intersectObject(children[i], raycaster, intersects2, true);
      }
    }
  }
  function getBoneList(object) {
    const boneList = [];
    if (object.isBone === true) {
      boneList.push(object);
    }
    for (let i = 0; i < object.children.length; i++) {
      boneList.push.apply(boneList, getBoneList(object.children[i]));
    }
    return boneList;
  }
  function setPoint(point, pointMap, geometry, camera, x, y, z) {
    _vector.set(x, y, z).unproject(camera);
    const points = pointMap[point];
    if (points !== void 0) {
      const position3 = geometry.getAttribute("position");
      for (let i = 0, l = points.length; i < l; i++) {
        position3.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
      }
    }
  }
  var REVISION, MOUSE, TOUCH, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, VSMShadowMap, FrontSide, BackSide, DoubleSide, TwoPassDoubleSide, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, CustomToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, CubeUVReflectionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipmapNearestFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedInt248Type, AlphaFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, DepthFormat, DepthStencilFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, NormalAnimationBlendMode, AdditiveAnimationBlendMode, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, BasicDepthPacking, RGBADepthPacking, TangentSpaceNormalMap, ObjectSpaceNormalMap, NoColorSpace, SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, LinearDisplayP3ColorSpace, ZeroStencilOp, KeepStencilOp, ReplaceStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp, InvertStencilOp, NeverStencilFunc, LessStencilFunc, EqualStencilFunc, LessEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc, GreaterEqualStencilFunc, AlwaysStencilFunc, NeverCompare, LessCompare, EqualCompare, LessEqualCompare, GreaterCompare, NotEqualCompare, GreaterEqualCompare, AlwaysCompare, StaticDrawUsage, DynamicDrawUsage, StreamDrawUsage, StaticReadUsage, DynamicReadUsage, StreamReadUsage, StaticCopyUsage, DynamicCopyUsage, StreamCopyUsage, GLSL1, GLSL3, _SRGBAFormat, WebGLCoordinateSystem, WebGPUCoordinateSystem, EventDispatcher, _lut, _seed, DEG2RAD, RAD2DEG, MathUtils, Vector2, Matrix3, _m3, TYPED_ARRAYS, _cache, LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, TO_LINEAR, FROM_LINEAR, ColorManagement, _canvas, ImageUtils, sourceId, Source, _textureId, Texture, Vector4, RenderTarget, WebGLRenderTarget, DataArrayTexture, WebGLArrayRenderTarget, Data3DTexture, WebGL3DRenderTarget, WebGLMultipleRenderTargets, Quaternion, Vector3, _vector$b, _quaternion$4, Box3, _points, _vector$a, _box$3, _v0$2, _v1$7, _v2$4, _f0, _f1, _f2, _center, _extents, _triangleNormal, _testAxis, _box$2, _v1$6, _v2$3, Sphere, _vector$9, _segCenter, _segDir, _diff, _edge1, _edge2, _normal$1, Ray, Matrix4, _v1$5, _m1$2, _zero, _one, _x, _y, _z, _matrix, _quaternion$3, Euler, Layers, _object3DId, _v1$4, _q1, _m1$1, _target, _position$3, _scale$2, _quaternion$2, _xAxis, _yAxis, _zAxis, _addedEvent, _removedEvent, Object3D, _v0$1, _v1$3, _v2$2, _v3$1, _vab, _vac, _vbc, _vap, _vbp, _vcp, warnedGetUV, Triangle, _materialId, Material, _colorKeywords, _hslA, _hslB, Color, _color, MeshBasicMaterial, _tables, DataUtils, _vector$8, _vector2$1, BufferAttribute, Int8BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Int16BufferAttribute, Uint16BufferAttribute, Int32BufferAttribute, Uint32BufferAttribute, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, _id$2, _m1, _obj, _offset, _box$1, _boxMorphTargets, _vector$7, BufferGeometry, _inverseMatrix$3, _ray$3, _sphere$5, _sphereHitAt, _vA$1, _vB$1, _vC$1, _tempA, _morphA, _uvA$1, _uvB$1, _uvC$1, _normalA, _normalB, _normalC, _intersectionPoint, _intersectionPointWorld, Mesh, BoxGeometry, UniformsUtils, default_vertex, default_fragment, ShaderMaterial, Camera, PerspectiveCamera, fov, aspect, CubeCamera, CubeTexture, WebGLCubeRenderTarget, _vector1, _vector2, _normalMatrix, Plane, _sphere$4, _vector$6, Frustum, PlaneGeometry, alphahash_fragment, alphahash_pars_fragment, alphamap_fragment, alphamap_pars_fragment, alphatest_fragment, alphatest_pars_fragment, aomap_fragment, aomap_pars_fragment, begin_vertex, beginnormal_vertex, bsdfs, iridescence_fragment, bumpmap_pars_fragment, clipping_planes_fragment, clipping_planes_pars_fragment, clipping_planes_pars_vertex, clipping_planes_vertex, color_fragment, color_pars_fragment, color_pars_vertex, color_vertex, common, cube_uv_reflection_fragment, defaultnormal_vertex, displacementmap_pars_vertex, displacementmap_vertex, emissivemap_fragment, emissivemap_pars_fragment, colorspace_fragment, colorspace_pars_fragment, envmap_fragment, envmap_common_pars_fragment, envmap_pars_fragment, envmap_pars_vertex, envmap_vertex, fog_vertex, fog_pars_vertex, fog_fragment, fog_pars_fragment, gradientmap_pars_fragment, lightmap_fragment, lightmap_pars_fragment, lights_lambert_fragment, lights_lambert_pars_fragment, lights_pars_begin, envmap_physical_pars_fragment, lights_toon_fragment, lights_toon_pars_fragment, lights_phong_fragment, lights_phong_pars_fragment, lights_physical_fragment, lights_physical_pars_fragment, lights_fragment_begin, lights_fragment_maps, lights_fragment_end, logdepthbuf_fragment, logdepthbuf_pars_fragment, logdepthbuf_pars_vertex, logdepthbuf_vertex, map_fragment, map_pars_fragment, map_particle_fragment, map_particle_pars_fragment, metalnessmap_fragment, metalnessmap_pars_fragment, morphcolor_vertex, morphnormal_vertex, morphtarget_pars_vertex, morphtarget_vertex, normal_fragment_begin, normal_fragment_maps, normal_pars_fragment, normal_pars_vertex, normal_vertex, normalmap_pars_fragment, clearcoat_normal_fragment_begin, clearcoat_normal_fragment_maps, clearcoat_pars_fragment, iridescence_pars_fragment, opaque_fragment, packing, premultiplied_alpha_fragment, project_vertex, dithering_fragment, dithering_pars_fragment, roughnessmap_fragment, roughnessmap_pars_fragment, shadowmap_pars_fragment, shadowmap_pars_vertex, shadowmap_vertex, shadowmask_pars_fragment, skinbase_vertex, skinning_pars_vertex, skinning_vertex, skinnormal_vertex, specularmap_fragment, specularmap_pars_fragment, tonemapping_fragment, tonemapping_pars_fragment, transmission_fragment, transmission_pars_fragment, uv_pars_fragment, uv_pars_vertex, uv_vertex, worldpos_vertex, vertex$h, fragment$h, vertex$g, fragment$g, vertex$f, fragment$f, vertex$e, fragment$e, vertex$d, fragment$d, vertex$c, fragment$c, vertex$b, fragment$b, vertex$a, fragment$a, vertex$9, fragment$9, vertex$8, fragment$8, vertex$7, fragment$7, vertex$6, fragment$6, vertex$5, fragment$5, vertex$4, fragment$4, vertex$3, fragment$3, vertex$2, fragment$2, vertex$1, fragment$1, ShaderChunk, UniformsLib, ShaderLib, _rgb, OrthographicCamera, LOD_MIN, EXTRA_LOD_SIGMA, MAX_SAMPLES, _flatCamera, _clearColor, _oldTarget, PHI, INV_PHI, _axisDirections, PMREMGenerator, emptyTexture, emptyArrayTexture, empty3dTexture, emptyCubeTexture, arrayCacheF32, arrayCacheI32, mat4array, mat3array, mat2array, SingleUniform, PureArrayUniform, StructuredUniform, RePathPart, WebGLUniforms, programIdCount, includePattern, shaderChunkMap, unrollLoopPattern, _id$1, WebGLShaderCache, WebGLShaderStage, nextVersion, MeshDepthMaterial, MeshDistanceMaterial, vertex, fragment, LinearTransferFunction, SRGBTransferFunction, ArrayCamera, Group, _moveEvent, WebXRController, DepthTexture, WebXRManager, WebGLRenderer, WebGL1Renderer, FogExp2, Fog, Scene, InterleavedBuffer, _vector$5, InterleavedBufferAttribute, SpriteMaterial, _geometry, _intersectPoint, _worldScale, _mvPosition, _alignedPosition, _rotatedPosition, _viewWorldMatrix, _vA, _vB, _vC, _uvA, _uvB, _uvC, Sprite, _v1$2, _v2$1, LOD, _basePosition, _skinIndex, _skinWeight, _vector3, _matrix4, _vertex, _sphere$3, _inverseMatrix$2, _ray$2, SkinnedMesh, Bone, DataTexture, _offsetMatrix, _identityMatrix, Skeleton, InstancedBufferAttribute, _instanceLocalMatrix, _instanceWorldMatrix, _instanceIntersects, _box3, _identity, _mesh, _sphere$2, InstancedMesh, LineBasicMaterial, _start$1, _end$1, _inverseMatrix$1, _ray$1, _sphere$1, Line, _start, _end, LineSegments, LineLoop, PointsMaterial, _inverseMatrix, _ray, _sphere, _position$2, Points, VideoTexture, FramebufferTexture, CompressedTexture, CompressedArrayTexture, CompressedCubeTexture, CanvasTexture, Curve, EllipseCurve, ArcCurve, tmp, px, py, pz, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, Curves, CurvePath, Path, LatheGeometry, CapsuleGeometry, CircleGeometry, CylinderGeometry, ConeGeometry, PolyhedronGeometry, DodecahedronGeometry, _v0, _v1$1, _normal, _triangle, EdgesGeometry, Shape, Earcut, ShapeUtils, ExtrudeGeometry, WorldUVGenerator, IcosahedronGeometry, OctahedronGeometry, RingGeometry, ShapeGeometry, SphereGeometry, TetrahedronGeometry, TorusGeometry, TorusKnotGeometry, TubeGeometry, WireframeGeometry, Geometries, ShadowMaterial, RawShaderMaterial, MeshStandardMaterial, MeshPhysicalMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshMatcapMaterial, LineDashedMaterial, AnimationUtils, Interpolant, CubicInterpolant, LinearInterpolant, DiscreteInterpolant, KeyframeTrack, BooleanKeyframeTrack, ColorKeyframeTrack, NumberKeyframeTrack, QuaternionLinearInterpolant, QuaternionKeyframeTrack, StringKeyframeTrack, VectorKeyframeTrack, AnimationClip, Cache, LoadingManager, DefaultLoadingManager, Loader, loading, HttpError, FileLoader, AnimationLoader, CompressedTextureLoader, ImageLoader, CubeTextureLoader, DataTextureLoader, TextureLoader, Light, HemisphereLight, _projScreenMatrix$1, _lightPositionWorld$1, _lookTarget$1, LightShadow, SpotLightShadow, SpotLight, _projScreenMatrix, _lightPositionWorld, _lookTarget, PointLightShadow, PointLight, DirectionalLightShadow, DirectionalLight, AmbientLight, RectAreaLight, SphericalHarmonics3, LightProbe, MaterialLoader, LoaderUtils, InstancedBufferGeometry, BufferGeometryLoader, ObjectLoader, TEXTURE_MAPPING, TEXTURE_WRAPPING, TEXTURE_FILTER, ImageBitmapLoader, _context, AudioContext, AudioLoader, HemisphereLightProbe, AmbientLightProbe, _eyeRight, _eyeLeft, _projectionMatrix, StereoCamera, Clock, _position$1, _quaternion$1, _scale$1, _orientation$1, AudioListener, Audio, _position, _quaternion, _scale, _orientation, PositionalAudio, AudioAnalyser, PropertyMixer, _RESERVED_CHARS_RE, _reservedRe, _wordChar, _wordCharOrDot, _directoryRe, _nodeRe, _objectRe, _propertyRe, _trackRe, _supportedObjectNames, Composite, PropertyBinding, AnimationObjectGroup, AnimationAction, _controlInterpolantsResultBuffer, AnimationMixer, Uniform, _id, UniformsGroup, InstancedInterleavedBuffer, GLBufferAttribute, Raycaster, Spherical, Cylindrical, _vector$4, Box2, _startP, _startEnd, Line3, _vector$3, SpotLightHelper, _vector$2, _boneMatrix, _matrixWorldInv, SkeletonHelper, PointLightHelper, _vector$1, _color1, _color2, HemisphereLightHelper, GridHelper, PolarGridHelper, _v1, _v2, _v3, DirectionalLightHelper, _vector, _camera, CameraHelper, _box, BoxHelper, Box3Helper, PlaneHelper, _axis, _lineGeometry, _coneGeometry, ArrowHelper, AxesHelper, ShapePath;
  var init_three_module = __esm({
    "node_modules/three/build/three.module.js"() {
      REVISION = "156";
      MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
      TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
      CullFaceNone = 0;
      CullFaceBack = 1;
      CullFaceFront = 2;
      CullFaceFrontBack = 3;
      BasicShadowMap = 0;
      PCFShadowMap = 1;
      PCFSoftShadowMap = 2;
      VSMShadowMap = 3;
      FrontSide = 0;
      BackSide = 1;
      DoubleSide = 2;
      TwoPassDoubleSide = 2;
      NoBlending = 0;
      NormalBlending = 1;
      AdditiveBlending = 2;
      SubtractiveBlending = 3;
      MultiplyBlending = 4;
      CustomBlending = 5;
      AddEquation = 100;
      SubtractEquation = 101;
      ReverseSubtractEquation = 102;
      MinEquation = 103;
      MaxEquation = 104;
      ZeroFactor = 200;
      OneFactor = 201;
      SrcColorFactor = 202;
      OneMinusSrcColorFactor = 203;
      SrcAlphaFactor = 204;
      OneMinusSrcAlphaFactor = 205;
      DstAlphaFactor = 206;
      OneMinusDstAlphaFactor = 207;
      DstColorFactor = 208;
      OneMinusDstColorFactor = 209;
      SrcAlphaSaturateFactor = 210;
      NeverDepth = 0;
      AlwaysDepth = 1;
      LessDepth = 2;
      LessEqualDepth = 3;
      EqualDepth = 4;
      GreaterEqualDepth = 5;
      GreaterDepth = 6;
      NotEqualDepth = 7;
      MultiplyOperation = 0;
      MixOperation = 1;
      AddOperation = 2;
      NoToneMapping = 0;
      LinearToneMapping = 1;
      ReinhardToneMapping = 2;
      CineonToneMapping = 3;
      ACESFilmicToneMapping = 4;
      CustomToneMapping = 5;
      UVMapping = 300;
      CubeReflectionMapping = 301;
      CubeRefractionMapping = 302;
      EquirectangularReflectionMapping = 303;
      EquirectangularRefractionMapping = 304;
      CubeUVReflectionMapping = 306;
      RepeatWrapping = 1e3;
      ClampToEdgeWrapping = 1001;
      MirroredRepeatWrapping = 1002;
      NearestFilter = 1003;
      NearestMipmapNearestFilter = 1004;
      NearestMipMapNearestFilter = 1004;
      NearestMipmapLinearFilter = 1005;
      NearestMipMapLinearFilter = 1005;
      LinearFilter = 1006;
      LinearMipmapNearestFilter = 1007;
      LinearMipMapNearestFilter = 1007;
      LinearMipmapLinearFilter = 1008;
      LinearMipMapLinearFilter = 1008;
      UnsignedByteType = 1009;
      ByteType = 1010;
      ShortType = 1011;
      UnsignedShortType = 1012;
      IntType = 1013;
      UnsignedIntType = 1014;
      FloatType = 1015;
      HalfFloatType = 1016;
      UnsignedShort4444Type = 1017;
      UnsignedShort5551Type = 1018;
      UnsignedInt248Type = 1020;
      AlphaFormat = 1021;
      RGBAFormat = 1023;
      LuminanceFormat = 1024;
      LuminanceAlphaFormat = 1025;
      DepthFormat = 1026;
      DepthStencilFormat = 1027;
      RedFormat = 1028;
      RedIntegerFormat = 1029;
      RGFormat = 1030;
      RGIntegerFormat = 1031;
      RGBAIntegerFormat = 1033;
      RGB_S3TC_DXT1_Format = 33776;
      RGBA_S3TC_DXT1_Format = 33777;
      RGBA_S3TC_DXT3_Format = 33778;
      RGBA_S3TC_DXT5_Format = 33779;
      RGB_PVRTC_4BPPV1_Format = 35840;
      RGB_PVRTC_2BPPV1_Format = 35841;
      RGBA_PVRTC_4BPPV1_Format = 35842;
      RGBA_PVRTC_2BPPV1_Format = 35843;
      RGB_ETC1_Format = 36196;
      RGB_ETC2_Format = 37492;
      RGBA_ETC2_EAC_Format = 37496;
      RGBA_ASTC_4x4_Format = 37808;
      RGBA_ASTC_5x4_Format = 37809;
      RGBA_ASTC_5x5_Format = 37810;
      RGBA_ASTC_6x5_Format = 37811;
      RGBA_ASTC_6x6_Format = 37812;
      RGBA_ASTC_8x5_Format = 37813;
      RGBA_ASTC_8x6_Format = 37814;
      RGBA_ASTC_8x8_Format = 37815;
      RGBA_ASTC_10x5_Format = 37816;
      RGBA_ASTC_10x6_Format = 37817;
      RGBA_ASTC_10x8_Format = 37818;
      RGBA_ASTC_10x10_Format = 37819;
      RGBA_ASTC_12x10_Format = 37820;
      RGBA_ASTC_12x12_Format = 37821;
      RGBA_BPTC_Format = 36492;
      RGB_BPTC_SIGNED_Format = 36494;
      RGB_BPTC_UNSIGNED_Format = 36495;
      RED_RGTC1_Format = 36283;
      SIGNED_RED_RGTC1_Format = 36284;
      RED_GREEN_RGTC2_Format = 36285;
      SIGNED_RED_GREEN_RGTC2_Format = 36286;
      LoopOnce = 2200;
      LoopRepeat = 2201;
      LoopPingPong = 2202;
      InterpolateDiscrete = 2300;
      InterpolateLinear = 2301;
      InterpolateSmooth = 2302;
      ZeroCurvatureEnding = 2400;
      ZeroSlopeEnding = 2401;
      WrapAroundEnding = 2402;
      NormalAnimationBlendMode = 2500;
      AdditiveAnimationBlendMode = 2501;
      TrianglesDrawMode = 0;
      TriangleStripDrawMode = 1;
      TriangleFanDrawMode = 2;
      LinearEncoding = 3e3;
      sRGBEncoding = 3001;
      BasicDepthPacking = 3200;
      RGBADepthPacking = 3201;
      TangentSpaceNormalMap = 0;
      ObjectSpaceNormalMap = 1;
      NoColorSpace = "";
      SRGBColorSpace = "srgb";
      LinearSRGBColorSpace = "srgb-linear";
      DisplayP3ColorSpace = "display-p3";
      LinearDisplayP3ColorSpace = "display-p3-linear";
      ZeroStencilOp = 0;
      KeepStencilOp = 7680;
      ReplaceStencilOp = 7681;
      IncrementStencilOp = 7682;
      DecrementStencilOp = 7683;
      IncrementWrapStencilOp = 34055;
      DecrementWrapStencilOp = 34056;
      InvertStencilOp = 5386;
      NeverStencilFunc = 512;
      LessStencilFunc = 513;
      EqualStencilFunc = 514;
      LessEqualStencilFunc = 515;
      GreaterStencilFunc = 516;
      NotEqualStencilFunc = 517;
      GreaterEqualStencilFunc = 518;
      AlwaysStencilFunc = 519;
      NeverCompare = 512;
      LessCompare = 513;
      EqualCompare = 514;
      LessEqualCompare = 515;
      GreaterCompare = 516;
      NotEqualCompare = 517;
      GreaterEqualCompare = 518;
      AlwaysCompare = 519;
      StaticDrawUsage = 35044;
      DynamicDrawUsage = 35048;
      StreamDrawUsage = 35040;
      StaticReadUsage = 35045;
      DynamicReadUsage = 35049;
      StreamReadUsage = 35041;
      StaticCopyUsage = 35046;
      DynamicCopyUsage = 35050;
      StreamCopyUsage = 35042;
      GLSL1 = "100";
      GLSL3 = "300 es";
      _SRGBAFormat = 1035;
      WebGLCoordinateSystem = 2e3;
      WebGPUCoordinateSystem = 2001;
      EventDispatcher = class {
        addEventListener(type, listener) {
          if (this._listeners === void 0)
            this._listeners = {};
          const listeners = this._listeners;
          if (listeners[type] === void 0) {
            listeners[type] = [];
          }
          if (listeners[type].indexOf(listener) === -1) {
            listeners[type].push(listener);
          }
        }
        hasEventListener(type, listener) {
          if (this._listeners === void 0)
            return false;
          const listeners = this._listeners;
          return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
        }
        removeEventListener(type, listener) {
          if (this._listeners === void 0)
            return;
          const listeners = this._listeners;
          const listenerArray = listeners[type];
          if (listenerArray !== void 0) {
            const index = listenerArray.indexOf(listener);
            if (index !== -1) {
              listenerArray.splice(index, 1);
            }
          }
        }
        dispatchEvent(event) {
          if (this._listeners === void 0)
            return;
          const listeners = this._listeners;
          const listenerArray = listeners[event.type];
          if (listenerArray !== void 0) {
            event.target = this;
            const array = listenerArray.slice(0);
            for (let i = 0, l = array.length; i < l; i++) {
              array[i].call(this, event);
            }
            event.target = null;
          }
        }
      };
      _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
      _seed = 1234567;
      DEG2RAD = Math.PI / 180;
      RAD2DEG = 180 / Math.PI;
      MathUtils = {
        DEG2RAD,
        RAD2DEG,
        generateUUID,
        clamp,
        euclideanModulo,
        mapLinear,
        inverseLerp,
        lerp,
        damp,
        pingpong,
        smoothstep,
        smootherstep,
        randInt,
        randFloat,
        randFloatSpread,
        seededRandom,
        degToRad,
        radToDeg,
        isPowerOfTwo,
        ceilPowerOfTwo,
        floorPowerOfTwo,
        setQuaternionFromProperEuler,
        normalize,
        denormalize
      };
      Vector2 = class _Vector2 {
        constructor(x = 0, y = 0) {
          _Vector2.prototype.isVector2 = true;
          this.x = x;
          this.y = y;
        }
        get width() {
          return this.x;
        }
        set width(value) {
          this.x = value;
        }
        get height() {
          return this.y;
        }
        set height(value) {
          this.y = value;
        }
        set(x, y) {
          this.x = x;
          this.y = y;
          return this;
        }
        setScalar(scalar) {
          this.x = scalar;
          this.y = scalar;
          return this;
        }
        setX(x) {
          this.x = x;
          return this;
        }
        setY(y) {
          this.y = y;
          return this;
        }
        setComponent(index, value) {
          switch (index) {
            case 0:
              this.x = value;
              break;
            case 1:
              this.y = value;
              break;
            default:
              throw new Error("index is out of range: " + index);
          }
          return this;
        }
        getComponent(index) {
          switch (index) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + index);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y);
        }
        copy(v) {
          this.x = v.x;
          this.y = v.y;
          return this;
        }
        add(v) {
          this.x += v.x;
          this.y += v.y;
          return this;
        }
        addScalar(s) {
          this.x += s;
          this.y += s;
          return this;
        }
        addVectors(a, b) {
          this.x = a.x + b.x;
          this.y = a.y + b.y;
          return this;
        }
        addScaledVector(v, s) {
          this.x += v.x * s;
          this.y += v.y * s;
          return this;
        }
        sub(v) {
          this.x -= v.x;
          this.y -= v.y;
          return this;
        }
        subScalar(s) {
          this.x -= s;
          this.y -= s;
          return this;
        }
        subVectors(a, b) {
          this.x = a.x - b.x;
          this.y = a.y - b.y;
          return this;
        }
        multiply(v) {
          this.x *= v.x;
          this.y *= v.y;
          return this;
        }
        multiplyScalar(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          return this;
        }
        divide(v) {
          this.x /= v.x;
          this.y /= v.y;
          return this;
        }
        divideScalar(scalar) {
          return this.multiplyScalar(1 / scalar);
        }
        applyMatrix3(m) {
          const x = this.x, y = this.y;
          const e = m.elements;
          this.x = e[0] * x + e[3] * y + e[6];
          this.y = e[1] * x + e[4] * y + e[7];
          return this;
        }
        min(v) {
          this.x = Math.min(this.x, v.x);
          this.y = Math.min(this.y, v.y);
          return this;
        }
        max(v) {
          this.x = Math.max(this.x, v.x);
          this.y = Math.max(this.y, v.y);
          return this;
        }
        clamp(min, max) {
          this.x = Math.max(min.x, Math.min(max.x, this.x));
          this.y = Math.max(min.y, Math.min(max.y, this.y));
          return this;
        }
        clampScalar(minVal, maxVal) {
          this.x = Math.max(minVal, Math.min(maxVal, this.x));
          this.y = Math.max(minVal, Math.min(maxVal, this.y));
          return this;
        }
        clampLength(min, max) {
          const length2 = this.length();
          return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min, Math.min(max, length2)));
        }
        floor() {
          this.x = Math.floor(this.x);
          this.y = Math.floor(this.y);
          return this;
        }
        ceil() {
          this.x = Math.ceil(this.x);
          this.y = Math.ceil(this.y);
          return this;
        }
        round() {
          this.x = Math.round(this.x);
          this.y = Math.round(this.y);
          return this;
        }
        roundToZero() {
          this.x = Math.trunc(this.x);
          this.y = Math.trunc(this.y);
          return this;
        }
        negate() {
          this.x = -this.x;
          this.y = -this.y;
          return this;
        }
        dot(v) {
          return this.x * v.x + this.y * v.y;
        }
        cross(v) {
          return this.x * v.y - this.y * v.x;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        angle() {
          const angle = Math.atan2(-this.y, -this.x) + Math.PI;
          return angle;
        }
        angleTo(v) {
          const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
          if (denominator === 0)
            return Math.PI / 2;
          const theta = this.dot(v) / denominator;
          return Math.acos(clamp(theta, -1, 1));
        }
        distanceTo(v) {
          return Math.sqrt(this.distanceToSquared(v));
        }
        distanceToSquared(v) {
          const dx = this.x - v.x, dy = this.y - v.y;
          return dx * dx + dy * dy;
        }
        manhattanDistanceTo(v) {
          return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
        }
        setLength(length2) {
          return this.normalize().multiplyScalar(length2);
        }
        lerp(v, alpha) {
          this.x += (v.x - this.x) * alpha;
          this.y += (v.y - this.y) * alpha;
          return this;
        }
        lerpVectors(v1, v2, alpha) {
          this.x = v1.x + (v2.x - v1.x) * alpha;
          this.y = v1.y + (v2.y - v1.y) * alpha;
          return this;
        }
        equals(v) {
          return v.x === this.x && v.y === this.y;
        }
        fromArray(array, offset = 0) {
          this.x = array[offset];
          this.y = array[offset + 1];
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this.x;
          array[offset + 1] = this.y;
          return array;
        }
        fromBufferAttribute(attribute, index) {
          this.x = attribute.getX(index);
          this.y = attribute.getY(index);
          return this;
        }
        rotateAround(center, angle) {
          const c = Math.cos(angle), s = Math.sin(angle);
          const x = this.x - center.x;
          const y = this.y - center.y;
          this.x = x * c - y * s + center.x;
          this.y = x * s + y * c + center.y;
          return this;
        }
        random() {
          this.x = Math.random();
          this.y = Math.random();
          return this;
        }
        *[Symbol.iterator]() {
          yield this.x;
          yield this.y;
        }
      };
      Matrix3 = class _Matrix3 {
        constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
          _Matrix3.prototype.isMatrix3 = true;
          this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
          ];
          if (n11 !== void 0) {
            this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
          }
        }
        set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
          const te = this.elements;
          te[0] = n11;
          te[1] = n21;
          te[2] = n31;
          te[3] = n12;
          te[4] = n22;
          te[5] = n32;
          te[6] = n13;
          te[7] = n23;
          te[8] = n33;
          return this;
        }
        identity() {
          this.set(
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
          );
          return this;
        }
        copy(m) {
          const te = this.elements;
          const me = m.elements;
          te[0] = me[0];
          te[1] = me[1];
          te[2] = me[2];
          te[3] = me[3];
          te[4] = me[4];
          te[5] = me[5];
          te[6] = me[6];
          te[7] = me[7];
          te[8] = me[8];
          return this;
        }
        extractBasis(xAxis, yAxis, zAxis) {
          xAxis.setFromMatrix3Column(this, 0);
          yAxis.setFromMatrix3Column(this, 1);
          zAxis.setFromMatrix3Column(this, 2);
          return this;
        }
        setFromMatrix4(m) {
          const me = m.elements;
          this.set(
            me[0],
            me[4],
            me[8],
            me[1],
            me[5],
            me[9],
            me[2],
            me[6],
            me[10]
          );
          return this;
        }
        multiply(m) {
          return this.multiplyMatrices(this, m);
        }
        premultiply(m) {
          return this.multiplyMatrices(m, this);
        }
        multiplyMatrices(a, b) {
          const ae = a.elements;
          const be = b.elements;
          const te = this.elements;
          const a11 = ae[0], a12 = ae[3], a13 = ae[6];
          const a21 = ae[1], a22 = ae[4], a23 = ae[7];
          const a31 = ae[2], a32 = ae[5], a33 = ae[8];
          const b11 = be[0], b12 = be[3], b13 = be[6];
          const b21 = be[1], b22 = be[4], b23 = be[7];
          const b31 = be[2], b32 = be[5], b33 = be[8];
          te[0] = a11 * b11 + a12 * b21 + a13 * b31;
          te[3] = a11 * b12 + a12 * b22 + a13 * b32;
          te[6] = a11 * b13 + a12 * b23 + a13 * b33;
          te[1] = a21 * b11 + a22 * b21 + a23 * b31;
          te[4] = a21 * b12 + a22 * b22 + a23 * b32;
          te[7] = a21 * b13 + a22 * b23 + a23 * b33;
          te[2] = a31 * b11 + a32 * b21 + a33 * b31;
          te[5] = a31 * b12 + a32 * b22 + a33 * b32;
          te[8] = a31 * b13 + a32 * b23 + a33 * b33;
          return this;
        }
        multiplyScalar(s) {
          const te = this.elements;
          te[0] *= s;
          te[3] *= s;
          te[6] *= s;
          te[1] *= s;
          te[4] *= s;
          te[7] *= s;
          te[2] *= s;
          te[5] *= s;
          te[8] *= s;
          return this;
        }
        determinant() {
          const te = this.elements;
          const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
          return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
        }
        invert() {
          const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
          if (det === 0)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          const detInv = 1 / det;
          te[0] = t11 * detInv;
          te[1] = (n31 * n23 - n33 * n21) * detInv;
          te[2] = (n32 * n21 - n31 * n22) * detInv;
          te[3] = t12 * detInv;
          te[4] = (n33 * n11 - n31 * n13) * detInv;
          te[5] = (n31 * n12 - n32 * n11) * detInv;
          te[6] = t13 * detInv;
          te[7] = (n21 * n13 - n23 * n11) * detInv;
          te[8] = (n22 * n11 - n21 * n12) * detInv;
          return this;
        }
        transpose() {
          let tmp2;
          const m = this.elements;
          tmp2 = m[1];
          m[1] = m[3];
          m[3] = tmp2;
          tmp2 = m[2];
          m[2] = m[6];
          m[6] = tmp2;
          tmp2 = m[5];
          m[5] = m[7];
          m[7] = tmp2;
          return this;
        }
        getNormalMatrix(matrix4) {
          return this.setFromMatrix4(matrix4).invert().transpose();
        }
        transposeIntoArray(r) {
          const m = this.elements;
          r[0] = m[0];
          r[1] = m[3];
          r[2] = m[6];
          r[3] = m[1];
          r[4] = m[4];
          r[5] = m[7];
          r[6] = m[2];
          r[7] = m[5];
          r[8] = m[8];
          return this;
        }
        setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
          const c = Math.cos(rotation);
          const s = Math.sin(rotation);
          this.set(
            sx * c,
            sx * s,
            -sx * (c * cx + s * cy) + cx + tx,
            -sy * s,
            sy * c,
            -sy * (-s * cx + c * cy) + cy + ty,
            0,
            0,
            1
          );
          return this;
        }
        //
        scale(sx, sy) {
          this.premultiply(_m3.makeScale(sx, sy));
          return this;
        }
        rotate(theta) {
          this.premultiply(_m3.makeRotation(-theta));
          return this;
        }
        translate(tx, ty) {
          this.premultiply(_m3.makeTranslation(tx, ty));
          return this;
        }
        // for 2D Transforms
        makeTranslation(x, y) {
          if (x.isVector2) {
            this.set(
              1,
              0,
              x.x,
              0,
              1,
              x.y,
              0,
              0,
              1
            );
          } else {
            this.set(
              1,
              0,
              x,
              0,
              1,
              y,
              0,
              0,
              1
            );
          }
          return this;
        }
        makeRotation(theta) {
          const c = Math.cos(theta);
          const s = Math.sin(theta);
          this.set(
            c,
            -s,
            0,
            s,
            c,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeScale(x, y) {
          this.set(
            x,
            0,
            0,
            0,
            y,
            0,
            0,
            0,
            1
          );
          return this;
        }
        //
        equals(matrix) {
          const te = this.elements;
          const me = matrix.elements;
          for (let i = 0; i < 9; i++) {
            if (te[i] !== me[i])
              return false;
          }
          return true;
        }
        fromArray(array, offset = 0) {
          for (let i = 0; i < 9; i++) {
            this.elements[i] = array[i + offset];
          }
          return this;
        }
        toArray(array = [], offset = 0) {
          const te = this.elements;
          array[offset] = te[0];
          array[offset + 1] = te[1];
          array[offset + 2] = te[2];
          array[offset + 3] = te[3];
          array[offset + 4] = te[4];
          array[offset + 5] = te[5];
          array[offset + 6] = te[6];
          array[offset + 7] = te[7];
          array[offset + 8] = te[8];
          return array;
        }
        clone() {
          return new this.constructor().fromArray(this.elements);
        }
      };
      _m3 = /* @__PURE__ */ new Matrix3();
      TYPED_ARRAYS = {
        Int8Array,
        Uint8Array,
        Uint8ClampedArray,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array
      };
      _cache = {};
      LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /* @__PURE__ */ new Matrix3().fromArray([
        0.8224621,
        0.0331941,
        0.0170827,
        0.177538,
        0.9668058,
        0.0723974,
        -1e-7,
        1e-7,
        0.9105199
      ]);
      LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /* @__PURE__ */ new Matrix3().fromArray([
        1.2249401,
        -0.0420569,
        -0.0196376,
        -0.2249404,
        1.0420571,
        -0.0786361,
        1e-7,
        0,
        1.0982735
      ]);
      TO_LINEAR = {
        [LinearSRGBColorSpace]: (color) => color,
        [SRGBColorSpace]: (color) => color.convertSRGBToLinear(),
        [DisplayP3ColorSpace]: DisplayP3ToLinearSRGB
      };
      FROM_LINEAR = {
        [LinearSRGBColorSpace]: (color) => color,
        [SRGBColorSpace]: (color) => color.convertLinearToSRGB(),
        [DisplayP3ColorSpace]: LinearSRGBToDisplayP3
      };
      ColorManagement = {
        enabled: true,
        get legacyMode() {
          console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
          return !this.enabled;
        },
        set legacyMode(legacyMode) {
          console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
          this.enabled = !legacyMode;
        },
        get workingColorSpace() {
          return LinearSRGBColorSpace;
        },
        set workingColorSpace(colorSpace) {
          console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
        },
        convert: function(color, sourceColorSpace, targetColorSpace) {
          if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
            return color;
          }
          const sourceToLinear = TO_LINEAR[sourceColorSpace];
          const targetFromLinear = FROM_LINEAR[targetColorSpace];
          if (sourceToLinear === void 0 || targetFromLinear === void 0) {
            throw new Error(`Unsupported color space conversion, "${sourceColorSpace}" to "${targetColorSpace}".`);
          }
          return targetFromLinear(sourceToLinear(color));
        },
        fromWorkingColorSpace: function(color, targetColorSpace) {
          return this.convert(color, this.workingColorSpace, targetColorSpace);
        },
        toWorkingColorSpace: function(color, sourceColorSpace) {
          return this.convert(color, sourceColorSpace, this.workingColorSpace);
        }
      };
      ImageUtils = class {
        static getDataURL(image) {
          if (/^data:/i.test(image.src)) {
            return image.src;
          }
          if (typeof HTMLCanvasElement === "undefined") {
            return image.src;
          }
          let canvas;
          if (image instanceof HTMLCanvasElement) {
            canvas = image;
          } else {
            if (_canvas === void 0)
              _canvas = createElementNS("canvas");
            _canvas.width = image.width;
            _canvas.height = image.height;
            const context = _canvas.getContext("2d");
            if (image instanceof ImageData) {
              context.putImageData(image, 0, 0);
            } else {
              context.drawImage(image, 0, 0, image.width, image.height);
            }
            canvas = _canvas;
          }
          if (canvas.width > 2048 || canvas.height > 2048) {
            console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
            return canvas.toDataURL("image/jpeg", 0.6);
          } else {
            return canvas.toDataURL("image/png");
          }
        }
        static sRGBToLinear(image) {
          if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
            const canvas = createElementNS("canvas");
            canvas.width = image.width;
            canvas.height = image.height;
            const context = canvas.getContext("2d");
            context.drawImage(image, 0, 0, image.width, image.height);
            const imageData = context.getImageData(0, 0, image.width, image.height);
            const data = imageData.data;
            for (let i = 0; i < data.length; i++) {
              data[i] = SRGBToLinear(data[i] / 255) * 255;
            }
            context.putImageData(imageData, 0, 0);
            return canvas;
          } else if (image.data) {
            const data = image.data.slice(0);
            for (let i = 0; i < data.length; i++) {
              if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
                data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
              } else {
                data[i] = SRGBToLinear(data[i]);
              }
            }
            return {
              data,
              width: image.width,
              height: image.height
            };
          } else {
            console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
            return image;
          }
        }
      };
      sourceId = 0;
      Source = class {
        constructor(data = null) {
          this.isSource = true;
          Object.defineProperty(this, "id", { value: sourceId++ });
          this.uuid = generateUUID();
          this.data = data;
          this.version = 0;
        }
        set needsUpdate(value) {
          if (value === true)
            this.version++;
        }
        toJSON(meta) {
          const isRootObject = meta === void 0 || typeof meta === "string";
          if (!isRootObject && meta.images[this.uuid] !== void 0) {
            return meta.images[this.uuid];
          }
          const output = {
            uuid: this.uuid,
            url: ""
          };
          const data = this.data;
          if (data !== null) {
            let url;
            if (Array.isArray(data)) {
              url = [];
              for (let i = 0, l = data.length; i < l; i++) {
                if (data[i].isDataTexture) {
                  url.push(serializeImage(data[i].image));
                } else {
                  url.push(serializeImage(data[i]));
                }
              }
            } else {
              url = serializeImage(data);
            }
            output.url = url;
          }
          if (!isRootObject) {
            meta.images[this.uuid] = output;
          }
          return output;
        }
      };
      _textureId = 0;
      Texture = class _Texture extends EventDispatcher {
        constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format2 = RGBAFormat, type = UnsignedByteType, anisotropy = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
          super();
          this.isTexture = true;
          Object.defineProperty(this, "id", { value: _textureId++ });
          this.uuid = generateUUID();
          this.name = "";
          this.source = new Source(image);
          this.mipmaps = [];
          this.mapping = mapping;
          this.channel = 0;
          this.wrapS = wrapS;
          this.wrapT = wrapT;
          this.magFilter = magFilter;
          this.minFilter = minFilter;
          this.anisotropy = anisotropy;
          this.format = format2;
          this.internalFormat = null;
          this.type = type;
          this.offset = new Vector2(0, 0);
          this.repeat = new Vector2(1, 1);
          this.center = new Vector2(0, 0);
          this.rotation = 0;
          this.matrixAutoUpdate = true;
          this.matrix = new Matrix3();
          this.generateMipmaps = true;
          this.premultiplyAlpha = false;
          this.flipY = true;
          this.unpackAlignment = 4;
          if (typeof colorSpace === "string") {
            this.colorSpace = colorSpace;
          } else {
            warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
            this.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
          }
          this.userData = {};
          this.version = 0;
          this.onUpdate = null;
          this.isRenderTargetTexture = false;
          this.needsPMREMUpdate = false;
        }
        get image() {
          return this.source.data;
        }
        set image(value = null) {
          this.source.data = value;
        }
        updateMatrix() {
          this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(source) {
          this.name = source.name;
          this.source = source.source;
          this.mipmaps = source.mipmaps.slice(0);
          this.mapping = source.mapping;
          this.channel = source.channel;
          this.wrapS = source.wrapS;
          this.wrapT = source.wrapT;
          this.magFilter = source.magFilter;
          this.minFilter = source.minFilter;
          this.anisotropy = source.anisotropy;
          this.format = source.format;
          this.internalFormat = source.internalFormat;
          this.type = source.type;
          this.offset.copy(source.offset);
          this.repeat.copy(source.repeat);
          this.center.copy(source.center);
          this.rotation = source.rotation;
          this.matrixAutoUpdate = source.matrixAutoUpdate;
          this.matrix.copy(source.matrix);
          this.generateMipmaps = source.generateMipmaps;
          this.premultiplyAlpha = source.premultiplyAlpha;
          this.flipY = source.flipY;
          this.unpackAlignment = source.unpackAlignment;
          this.colorSpace = source.colorSpace;
          this.userData = JSON.parse(JSON.stringify(source.userData));
          this.needsUpdate = true;
          return this;
        }
        toJSON(meta) {
          const isRootObject = meta === void 0 || typeof meta === "string";
          if (!isRootObject && meta.textures[this.uuid] !== void 0) {
            return meta.textures[this.uuid];
          }
          const output = {
            metadata: {
              version: 4.6,
              type: "Texture",
              generator: "Texture.toJSON"
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(meta).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [this.repeat.x, this.repeat.y],
            offset: [this.offset.x, this.offset.y],
            center: [this.center.x, this.center.y],
            rotation: this.rotation,
            wrap: [this.wrapS, this.wrapT],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
          };
          if (Object.keys(this.userData).length > 0)
            output.userData = this.userData;
          if (!isRootObject) {
            meta.textures[this.uuid] = output;
          }
          return output;
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        transformUv(uv) {
          if (this.mapping !== UVMapping)
            return uv;
          uv.applyMatrix3(this.matrix);
          if (uv.x < 0 || uv.x > 1) {
            switch (this.wrapS) {
              case RepeatWrapping:
                uv.x = uv.x - Math.floor(uv.x);
                break;
              case ClampToEdgeWrapping:
                uv.x = uv.x < 0 ? 0 : 1;
                break;
              case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv.x) % 2) === 1) {
                  uv.x = Math.ceil(uv.x) - uv.x;
                } else {
                  uv.x = uv.x - Math.floor(uv.x);
                }
                break;
            }
          }
          if (uv.y < 0 || uv.y > 1) {
            switch (this.wrapT) {
              case RepeatWrapping:
                uv.y = uv.y - Math.floor(uv.y);
                break;
              case ClampToEdgeWrapping:
                uv.y = uv.y < 0 ? 0 : 1;
                break;
              case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv.y) % 2) === 1) {
                  uv.y = Math.ceil(uv.y) - uv.y;
                } else {
                  uv.y = uv.y - Math.floor(uv.y);
                }
                break;
            }
          }
          if (this.flipY) {
            uv.y = 1 - uv.y;
          }
          return uv;
        }
        set needsUpdate(value) {
          if (value === true) {
            this.version++;
            this.source.needsUpdate = true;
          }
        }
        get encoding() {
          warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
          return this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
        }
        set encoding(encoding) {
          warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
          this.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
        }
      };
      Texture.DEFAULT_IMAGE = null;
      Texture.DEFAULT_MAPPING = UVMapping;
      Texture.DEFAULT_ANISOTROPY = 1;
      Vector4 = class _Vector4 {
        constructor(x = 0, y = 0, z = 0, w = 1) {
          _Vector4.prototype.isVector4 = true;
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
        }
        get width() {
          return this.z;
        }
        set width(value) {
          this.z = value;
        }
        get height() {
          return this.w;
        }
        set height(value) {
          this.w = value;
        }
        set(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
          return this;
        }
        setScalar(scalar) {
          this.x = scalar;
          this.y = scalar;
          this.z = scalar;
          this.w = scalar;
          return this;
        }
        setX(x) {
          this.x = x;
          return this;
        }
        setY(y) {
          this.y = y;
          return this;
        }
        setZ(z) {
          this.z = z;
          return this;
        }
        setW(w) {
          this.w = w;
          return this;
        }
        setComponent(index, value) {
          switch (index) {
            case 0:
              this.x = value;
              break;
            case 1:
              this.y = value;
              break;
            case 2:
              this.z = value;
              break;
            case 3:
              this.w = value;
              break;
            default:
              throw new Error("index is out of range: " + index);
          }
          return this;
        }
        getComponent(index) {
          switch (index) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + index);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }
        copy(v) {
          this.x = v.x;
          this.y = v.y;
          this.z = v.z;
          this.w = v.w !== void 0 ? v.w : 1;
          return this;
        }
        add(v) {
          this.x += v.x;
          this.y += v.y;
          this.z += v.z;
          this.w += v.w;
          return this;
        }
        addScalar(s) {
          this.x += s;
          this.y += s;
          this.z += s;
          this.w += s;
          return this;
        }
        addVectors(a, b) {
          this.x = a.x + b.x;
          this.y = a.y + b.y;
          this.z = a.z + b.z;
          this.w = a.w + b.w;
          return this;
        }
        addScaledVector(v, s) {
          this.x += v.x * s;
          this.y += v.y * s;
          this.z += v.z * s;
          this.w += v.w * s;
          return this;
        }
        sub(v) {
          this.x -= v.x;
          this.y -= v.y;
          this.z -= v.z;
          this.w -= v.w;
          return this;
        }
        subScalar(s) {
          this.x -= s;
          this.y -= s;
          this.z -= s;
          this.w -= s;
          return this;
        }
        subVectors(a, b) {
          this.x = a.x - b.x;
          this.y = a.y - b.y;
          this.z = a.z - b.z;
          this.w = a.w - b.w;
          return this;
        }
        multiply(v) {
          this.x *= v.x;
          this.y *= v.y;
          this.z *= v.z;
          this.w *= v.w;
          return this;
        }
        multiplyScalar(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          this.w *= scalar;
          return this;
        }
        applyMatrix4(m) {
          const x = this.x, y = this.y, z = this.z, w = this.w;
          const e = m.elements;
          this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
          this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
          this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
          this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
          return this;
        }
        divideScalar(scalar) {
          return this.multiplyScalar(1 / scalar);
        }
        setAxisAngleFromQuaternion(q) {
          this.w = 2 * Math.acos(q.w);
          const s = Math.sqrt(1 - q.w * q.w);
          if (s < 1e-4) {
            this.x = 1;
            this.y = 0;
            this.z = 0;
          } else {
            this.x = q.x / s;
            this.y = q.y / s;
            this.z = q.z / s;
          }
          return this;
        }
        setAxisAngleFromRotationMatrix(m) {
          let angle, x, y, z;
          const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
          if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
            if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
              this.set(1, 0, 0, 0);
              return this;
            }
            angle = Math.PI;
            const xx = (m11 + 1) / 2;
            const yy = (m22 + 1) / 2;
            const zz = (m33 + 1) / 2;
            const xy = (m12 + m21) / 4;
            const xz = (m13 + m31) / 4;
            const yz = (m23 + m32) / 4;
            if (xx > yy && xx > zz) {
              if (xx < epsilon) {
                x = 0;
                y = 0.707106781;
                z = 0.707106781;
              } else {
                x = Math.sqrt(xx);
                y = xy / x;
                z = xz / x;
              }
            } else if (yy > zz) {
              if (yy < epsilon) {
                x = 0.707106781;
                y = 0;
                z = 0.707106781;
              } else {
                y = Math.sqrt(yy);
                x = xy / y;
                z = yz / y;
              }
            } else {
              if (zz < epsilon) {
                x = 0.707106781;
                y = 0.707106781;
                z = 0;
              } else {
                z = Math.sqrt(zz);
                x = xz / z;
                y = yz / z;
              }
            }
            this.set(x, y, z, angle);
            return this;
          }
          let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
          if (Math.abs(s) < 1e-3)
            s = 1;
          this.x = (m32 - m23) / s;
          this.y = (m13 - m31) / s;
          this.z = (m21 - m12) / s;
          this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
          return this;
        }
        min(v) {
          this.x = Math.min(this.x, v.x);
          this.y = Math.min(this.y, v.y);
          this.z = Math.min(this.z, v.z);
          this.w = Math.min(this.w, v.w);
          return this;
        }
        max(v) {
          this.x = Math.max(this.x, v.x);
          this.y = Math.max(this.y, v.y);
          this.z = Math.max(this.z, v.z);
          this.w = Math.max(this.w, v.w);
          return this;
        }
        clamp(min, max) {
          this.x = Math.max(min.x, Math.min(max.x, this.x));
          this.y = Math.max(min.y, Math.min(max.y, this.y));
          this.z = Math.max(min.z, Math.min(max.z, this.z));
          this.w = Math.max(min.w, Math.min(max.w, this.w));
          return this;
        }
        clampScalar(minVal, maxVal) {
          this.x = Math.max(minVal, Math.min(maxVal, this.x));
          this.y = Math.max(minVal, Math.min(maxVal, this.y));
          this.z = Math.max(minVal, Math.min(maxVal, this.z));
          this.w = Math.max(minVal, Math.min(maxVal, this.w));
          return this;
        }
        clampLength(min, max) {
          const length2 = this.length();
          return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min, Math.min(max, length2)));
        }
        floor() {
          this.x = Math.floor(this.x);
          this.y = Math.floor(this.y);
          this.z = Math.floor(this.z);
          this.w = Math.floor(this.w);
          return this;
        }
        ceil() {
          this.x = Math.ceil(this.x);
          this.y = Math.ceil(this.y);
          this.z = Math.ceil(this.z);
          this.w = Math.ceil(this.w);
          return this;
        }
        round() {
          this.x = Math.round(this.x);
          this.y = Math.round(this.y);
          this.z = Math.round(this.z);
          this.w = Math.round(this.w);
          return this;
        }
        roundToZero() {
          this.x = Math.trunc(this.x);
          this.y = Math.trunc(this.y);
          this.z = Math.trunc(this.z);
          this.w = Math.trunc(this.w);
          return this;
        }
        negate() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          this.w = -this.w;
          return this;
        }
        dot(v) {
          return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(length2) {
          return this.normalize().multiplyScalar(length2);
        }
        lerp(v, alpha) {
          this.x += (v.x - this.x) * alpha;
          this.y += (v.y - this.y) * alpha;
          this.z += (v.z - this.z) * alpha;
          this.w += (v.w - this.w) * alpha;
          return this;
        }
        lerpVectors(v1, v2, alpha) {
          this.x = v1.x + (v2.x - v1.x) * alpha;
          this.y = v1.y + (v2.y - v1.y) * alpha;
          this.z = v1.z + (v2.z - v1.z) * alpha;
          this.w = v1.w + (v2.w - v1.w) * alpha;
          return this;
        }
        equals(v) {
          return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
        }
        fromArray(array, offset = 0) {
          this.x = array[offset];
          this.y = array[offset + 1];
          this.z = array[offset + 2];
          this.w = array[offset + 3];
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this.x;
          array[offset + 1] = this.y;
          array[offset + 2] = this.z;
          array[offset + 3] = this.w;
          return array;
        }
        fromBufferAttribute(attribute, index) {
          this.x = attribute.getX(index);
          this.y = attribute.getY(index);
          this.z = attribute.getZ(index);
          this.w = attribute.getW(index);
          return this;
        }
        random() {
          this.x = Math.random();
          this.y = Math.random();
          this.z = Math.random();
          this.w = Math.random();
          return this;
        }
        *[Symbol.iterator]() {
          yield this.x;
          yield this.y;
          yield this.z;
          yield this.w;
        }
      };
      RenderTarget = class extends EventDispatcher {
        constructor(width = 1, height = 1, options = {}) {
          super();
          this.isRenderTarget = true;
          this.width = width;
          this.height = height;
          this.depth = 1;
          this.scissor = new Vector4(0, 0, width, height);
          this.scissorTest = false;
          this.viewport = new Vector4(0, 0, width, height);
          const image = { width, height, depth: 1 };
          if (options.encoding !== void 0) {
            warnOnce("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
          }
          this.texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
          this.texture.isRenderTargetTexture = true;
          this.texture.flipY = false;
          this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
          this.texture.internalFormat = options.internalFormat !== void 0 ? options.internalFormat : null;
          this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
          this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
          this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
          this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
          this.samples = options.samples !== void 0 ? options.samples : 0;
        }
        setSize(width, height, depth = 1) {
          if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.texture.image.width = width;
            this.texture.image.height = height;
            this.texture.image.depth = depth;
            this.dispose();
          }
          this.viewport.set(0, 0, width, height);
          this.scissor.set(0, 0, width, height);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(source) {
          this.width = source.width;
          this.height = source.height;
          this.depth = source.depth;
          this.scissor.copy(source.scissor);
          this.scissorTest = source.scissorTest;
          this.viewport.copy(source.viewport);
          this.texture = source.texture.clone();
          this.texture.isRenderTargetTexture = true;
          const image = Object.assign({}, source.texture.image);
          this.texture.source = new Source(image);
          this.depthBuffer = source.depthBuffer;
          this.stencilBuffer = source.stencilBuffer;
          if (source.depthTexture !== null)
            this.depthTexture = source.depthTexture.clone();
          this.samples = source.samples;
          return this;
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      };
      WebGLRenderTarget = class extends RenderTarget {
        constructor(width = 1, height = 1, options = {}) {
          super(width, height, options);
          this.isWebGLRenderTarget = true;
        }
      };
      DataArrayTexture = class extends Texture {
        constructor(data = null, width = 1, height = 1, depth = 1) {
          super(null);
          this.isDataArrayTexture = true;
          this.image = { data, width, height, depth };
          this.magFilter = NearestFilter;
          this.minFilter = NearestFilter;
          this.wrapR = ClampToEdgeWrapping;
          this.generateMipmaps = false;
          this.flipY = false;
          this.unpackAlignment = 1;
        }
      };
      WebGLArrayRenderTarget = class extends WebGLRenderTarget {
        constructor(width = 1, height = 1, depth = 1) {
          super(width, height);
          this.isWebGLArrayRenderTarget = true;
          this.depth = depth;
          this.texture = new DataArrayTexture(null, width, height, depth);
          this.texture.isRenderTargetTexture = true;
        }
      };
      Data3DTexture = class extends Texture {
        constructor(data = null, width = 1, height = 1, depth = 1) {
          super(null);
          this.isData3DTexture = true;
          this.image = { data, width, height, depth };
          this.magFilter = NearestFilter;
          this.minFilter = NearestFilter;
          this.wrapR = ClampToEdgeWrapping;
          this.generateMipmaps = false;
          this.flipY = false;
          this.unpackAlignment = 1;
        }
      };
      WebGL3DRenderTarget = class extends WebGLRenderTarget {
        constructor(width = 1, height = 1, depth = 1) {
          super(width, height);
          this.isWebGL3DRenderTarget = true;
          this.depth = depth;
          this.texture = new Data3DTexture(null, width, height, depth);
          this.texture.isRenderTargetTexture = true;
        }
      };
      WebGLMultipleRenderTargets = class extends WebGLRenderTarget {
        constructor(width = 1, height = 1, count = 1, options = {}) {
          super(width, height, options);
          this.isWebGLMultipleRenderTargets = true;
          const texture = this.texture;
          this.texture = [];
          for (let i = 0; i < count; i++) {
            this.texture[i] = texture.clone();
            this.texture[i].isRenderTargetTexture = true;
          }
        }
        setSize(width, height, depth = 1) {
          if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            for (let i = 0, il = this.texture.length; i < il; i++) {
              this.texture[i].image.width = width;
              this.texture[i].image.height = height;
              this.texture[i].image.depth = depth;
            }
            this.dispose();
          }
          this.viewport.set(0, 0, width, height);
          this.scissor.set(0, 0, width, height);
        }
        copy(source) {
          this.dispose();
          this.width = source.width;
          this.height = source.height;
          this.depth = source.depth;
          this.scissor.copy(source.scissor);
          this.scissorTest = source.scissorTest;
          this.viewport.copy(source.viewport);
          this.depthBuffer = source.depthBuffer;
          this.stencilBuffer = source.stencilBuffer;
          if (source.depthTexture !== null)
            this.depthTexture = source.depthTexture.clone();
          this.texture.length = 0;
          for (let i = 0, il = source.texture.length; i < il; i++) {
            this.texture[i] = source.texture[i].clone();
            this.texture[i].isRenderTargetTexture = true;
          }
          return this;
        }
      };
      Quaternion = class {
        constructor(x = 0, y = 0, z = 0, w = 1) {
          this.isQuaternion = true;
          this._x = x;
          this._y = y;
          this._z = z;
          this._w = w;
        }
        static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
          let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
          const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
          if (t === 0) {
            dst[dstOffset + 0] = x0;
            dst[dstOffset + 1] = y0;
            dst[dstOffset + 2] = z0;
            dst[dstOffset + 3] = w0;
            return;
          }
          if (t === 1) {
            dst[dstOffset + 0] = x1;
            dst[dstOffset + 1] = y1;
            dst[dstOffset + 2] = z1;
            dst[dstOffset + 3] = w1;
            return;
          }
          if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
            let s = 1 - t;
            const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
            if (sqrSin > Number.EPSILON) {
              const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
              s = Math.sin(s * len) / sin;
              t = Math.sin(t * len) / sin;
            }
            const tDir = t * dir;
            x0 = x0 * s + x1 * tDir;
            y0 = y0 * s + y1 * tDir;
            z0 = z0 * s + z1 * tDir;
            w0 = w0 * s + w1 * tDir;
            if (s === 1 - t) {
              const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
              x0 *= f;
              y0 *= f;
              z0 *= f;
              w0 *= f;
            }
          }
          dst[dstOffset] = x0;
          dst[dstOffset + 1] = y0;
          dst[dstOffset + 2] = z0;
          dst[dstOffset + 3] = w0;
        }
        static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
          const x0 = src0[srcOffset0];
          const y0 = src0[srcOffset0 + 1];
          const z0 = src0[srcOffset0 + 2];
          const w0 = src0[srcOffset0 + 3];
          const x1 = src1[srcOffset1];
          const y1 = src1[srcOffset1 + 1];
          const z1 = src1[srcOffset1 + 2];
          const w1 = src1[srcOffset1 + 3];
          dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
          dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
          dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
          dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
          return dst;
        }
        get x() {
          return this._x;
        }
        set x(value) {
          this._x = value;
          this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(value) {
          this._y = value;
          this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(value) {
          this._z = value;
          this._onChangeCallback();
        }
        get w() {
          return this._w;
        }
        set w(value) {
          this._w = value;
          this._onChangeCallback();
        }
        set(x, y, z, w) {
          this._x = x;
          this._y = y;
          this._z = z;
          this._w = w;
          this._onChangeCallback();
          return this;
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }
        copy(quaternion) {
          this._x = quaternion.x;
          this._y = quaternion.y;
          this._z = quaternion.z;
          this._w = quaternion.w;
          this._onChangeCallback();
          return this;
        }
        setFromEuler(euler, update) {
          const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
          const cos = Math.cos;
          const sin = Math.sin;
          const c1 = cos(x / 2);
          const c2 = cos(y / 2);
          const c3 = cos(z / 2);
          const s1 = sin(x / 2);
          const s2 = sin(y / 2);
          const s3 = sin(z / 2);
          switch (order) {
            case "XYZ":
              this._x = s1 * c2 * c3 + c1 * s2 * s3;
              this._y = c1 * s2 * c3 - s1 * c2 * s3;
              this._z = c1 * c2 * s3 + s1 * s2 * c3;
              this._w = c1 * c2 * c3 - s1 * s2 * s3;
              break;
            case "YXZ":
              this._x = s1 * c2 * c3 + c1 * s2 * s3;
              this._y = c1 * s2 * c3 - s1 * c2 * s3;
              this._z = c1 * c2 * s3 - s1 * s2 * c3;
              this._w = c1 * c2 * c3 + s1 * s2 * s3;
              break;
            case "ZXY":
              this._x = s1 * c2 * c3 - c1 * s2 * s3;
              this._y = c1 * s2 * c3 + s1 * c2 * s3;
              this._z = c1 * c2 * s3 + s1 * s2 * c3;
              this._w = c1 * c2 * c3 - s1 * s2 * s3;
              break;
            case "ZYX":
              this._x = s1 * c2 * c3 - c1 * s2 * s3;
              this._y = c1 * s2 * c3 + s1 * c2 * s3;
              this._z = c1 * c2 * s3 - s1 * s2 * c3;
              this._w = c1 * c2 * c3 + s1 * s2 * s3;
              break;
            case "YZX":
              this._x = s1 * c2 * c3 + c1 * s2 * s3;
              this._y = c1 * s2 * c3 + s1 * c2 * s3;
              this._z = c1 * c2 * s3 - s1 * s2 * c3;
              this._w = c1 * c2 * c3 - s1 * s2 * s3;
              break;
            case "XZY":
              this._x = s1 * c2 * c3 - c1 * s2 * s3;
              this._y = c1 * s2 * c3 - s1 * c2 * s3;
              this._z = c1 * c2 * s3 + s1 * s2 * c3;
              this._w = c1 * c2 * c3 + s1 * s2 * s3;
              break;
            default:
              console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
          }
          if (update !== false)
            this._onChangeCallback();
          return this;
        }
        setFromAxisAngle(axis, angle) {
          const halfAngle = angle / 2, s = Math.sin(halfAngle);
          this._x = axis.x * s;
          this._y = axis.y * s;
          this._z = axis.z * s;
          this._w = Math.cos(halfAngle);
          this._onChangeCallback();
          return this;
        }
        setFromRotationMatrix(m) {
          const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
          if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1);
            this._w = 0.25 / s;
            this._x = (m32 - m23) * s;
            this._y = (m13 - m31) * s;
            this._z = (m21 - m12) * s;
          } else if (m11 > m22 && m11 > m33) {
            const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            this._w = (m32 - m23) / s;
            this._x = 0.25 * s;
            this._y = (m12 + m21) / s;
            this._z = (m13 + m31) / s;
          } else if (m22 > m33) {
            const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            this._w = (m13 - m31) / s;
            this._x = (m12 + m21) / s;
            this._y = 0.25 * s;
            this._z = (m23 + m32) / s;
          } else {
            const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            this._w = (m21 - m12) / s;
            this._x = (m13 + m31) / s;
            this._y = (m23 + m32) / s;
            this._z = 0.25 * s;
          }
          this._onChangeCallback();
          return this;
        }
        setFromUnitVectors(vFrom, vTo) {
          let r = vFrom.dot(vTo) + 1;
          if (r < Number.EPSILON) {
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
              this._x = -vFrom.y;
              this._y = vFrom.x;
              this._z = 0;
              this._w = r;
            } else {
              this._x = 0;
              this._y = -vFrom.z;
              this._z = vFrom.y;
              this._w = r;
            }
          } else {
            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
            this._w = r;
          }
          return this.normalize();
        }
        angleTo(q) {
          return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
        }
        rotateTowards(q, step) {
          const angle = this.angleTo(q);
          if (angle === 0)
            return this;
          const t = Math.min(1, step / angle);
          this.slerp(q, t);
          return this;
        }
        identity() {
          return this.set(0, 0, 0, 1);
        }
        invert() {
          return this.conjugate();
        }
        conjugate() {
          this._x *= -1;
          this._y *= -1;
          this._z *= -1;
          this._onChangeCallback();
          return this;
        }
        dot(v) {
          return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
        }
        lengthSq() {
          return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }
        length() {
          return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }
        normalize() {
          let l = this.length();
          if (l === 0) {
            this._x = 0;
            this._y = 0;
            this._z = 0;
            this._w = 1;
          } else {
            l = 1 / l;
            this._x = this._x * l;
            this._y = this._y * l;
            this._z = this._z * l;
            this._w = this._w * l;
          }
          this._onChangeCallback();
          return this;
        }
        multiply(q) {
          return this.multiplyQuaternions(this, q);
        }
        premultiply(q) {
          return this.multiplyQuaternions(q, this);
        }
        multiplyQuaternions(a, b) {
          const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
          const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
          this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
          this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
          this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
          this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
          this._onChangeCallback();
          return this;
        }
        slerp(qb, t) {
          if (t === 0)
            return this;
          if (t === 1)
            return this.copy(qb);
          const x = this._x, y = this._y, z = this._z, w = this._w;
          let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
          if (cosHalfTheta < 0) {
            this._w = -qb._w;
            this._x = -qb._x;
            this._y = -qb._y;
            this._z = -qb._z;
            cosHalfTheta = -cosHalfTheta;
          } else {
            this.copy(qb);
          }
          if (cosHalfTheta >= 1) {
            this._w = w;
            this._x = x;
            this._y = y;
            this._z = z;
            return this;
          }
          const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
          if (sqrSinHalfTheta <= Number.EPSILON) {
            const s = 1 - t;
            this._w = s * w + t * this._w;
            this._x = s * x + t * this._x;
            this._y = s * y + t * this._y;
            this._z = s * z + t * this._z;
            this.normalize();
            this._onChangeCallback();
            return this;
          }
          const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
          const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
          const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
          this._w = w * ratioA + this._w * ratioB;
          this._x = x * ratioA + this._x * ratioB;
          this._y = y * ratioA + this._y * ratioB;
          this._z = z * ratioA + this._z * ratioB;
          this._onChangeCallback();
          return this;
        }
        slerpQuaternions(qa, qb, t) {
          return this.copy(qa).slerp(qb, t);
        }
        random() {
          const u1 = Math.random();
          const sqrt1u1 = Math.sqrt(1 - u1);
          const sqrtu1 = Math.sqrt(u1);
          const u2 = 2 * Math.PI * Math.random();
          const u3 = 2 * Math.PI * Math.random();
          return this.set(
            sqrt1u1 * Math.cos(u2),
            sqrtu1 * Math.sin(u3),
            sqrtu1 * Math.cos(u3),
            sqrt1u1 * Math.sin(u2)
          );
        }
        equals(quaternion) {
          return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
        }
        fromArray(array, offset = 0) {
          this._x = array[offset];
          this._y = array[offset + 1];
          this._z = array[offset + 2];
          this._w = array[offset + 3];
          this._onChangeCallback();
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this._x;
          array[offset + 1] = this._y;
          array[offset + 2] = this._z;
          array[offset + 3] = this._w;
          return array;
        }
        fromBufferAttribute(attribute, index) {
          this._x = attribute.getX(index);
          this._y = attribute.getY(index);
          this._z = attribute.getZ(index);
          this._w = attribute.getW(index);
          return this;
        }
        toJSON() {
          return this.toArray();
        }
        _onChange(callback) {
          this._onChangeCallback = callback;
          return this;
        }
        _onChangeCallback() {
        }
        *[Symbol.iterator]() {
          yield this._x;
          yield this._y;
          yield this._z;
          yield this._w;
        }
      };
      Vector3 = class _Vector3 {
        constructor(x = 0, y = 0, z = 0) {
          _Vector3.prototype.isVector3 = true;
          this.x = x;
          this.y = y;
          this.z = z;
        }
        set(x, y, z) {
          if (z === void 0)
            z = this.z;
          this.x = x;
          this.y = y;
          this.z = z;
          return this;
        }
        setScalar(scalar) {
          this.x = scalar;
          this.y = scalar;
          this.z = scalar;
          return this;
        }
        setX(x) {
          this.x = x;
          return this;
        }
        setY(y) {
          this.y = y;
          return this;
        }
        setZ(z) {
          this.z = z;
          return this;
        }
        setComponent(index, value) {
          switch (index) {
            case 0:
              this.x = value;
              break;
            case 1:
              this.y = value;
              break;
            case 2:
              this.z = value;
              break;
            default:
              throw new Error("index is out of range: " + index);
          }
          return this;
        }
        getComponent(index) {
          switch (index) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + index);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z);
        }
        copy(v) {
          this.x = v.x;
          this.y = v.y;
          this.z = v.z;
          return this;
        }
        add(v) {
          this.x += v.x;
          this.y += v.y;
          this.z += v.z;
          return this;
        }
        addScalar(s) {
          this.x += s;
          this.y += s;
          this.z += s;
          return this;
        }
        addVectors(a, b) {
          this.x = a.x + b.x;
          this.y = a.y + b.y;
          this.z = a.z + b.z;
          return this;
        }
        addScaledVector(v, s) {
          this.x += v.x * s;
          this.y += v.y * s;
          this.z += v.z * s;
          return this;
        }
        sub(v) {
          this.x -= v.x;
          this.y -= v.y;
          this.z -= v.z;
          return this;
        }
        subScalar(s) {
          this.x -= s;
          this.y -= s;
          this.z -= s;
          return this;
        }
        subVectors(a, b) {
          this.x = a.x - b.x;
          this.y = a.y - b.y;
          this.z = a.z - b.z;
          return this;
        }
        multiply(v) {
          this.x *= v.x;
          this.y *= v.y;
          this.z *= v.z;
          return this;
        }
        multiplyScalar(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          return this;
        }
        multiplyVectors(a, b) {
          this.x = a.x * b.x;
          this.y = a.y * b.y;
          this.z = a.z * b.z;
          return this;
        }
        applyEuler(euler) {
          return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
        }
        applyAxisAngle(axis, angle) {
          return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
        }
        applyMatrix3(m) {
          const x = this.x, y = this.y, z = this.z;
          const e = m.elements;
          this.x = e[0] * x + e[3] * y + e[6] * z;
          this.y = e[1] * x + e[4] * y + e[7] * z;
          this.z = e[2] * x + e[5] * y + e[8] * z;
          return this;
        }
        applyNormalMatrix(m) {
          return this.applyMatrix3(m).normalize();
        }
        applyMatrix4(m) {
          const x = this.x, y = this.y, z = this.z;
          const e = m.elements;
          const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
          this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
          this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
          this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
          return this;
        }
        applyQuaternion(q) {
          const x = this.x, y = this.y, z = this.z;
          const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
          const ix = qw * x + qy * z - qz * y;
          const iy = qw * y + qz * x - qx * z;
          const iz = qw * z + qx * y - qy * x;
          const iw = -qx * x - qy * y - qz * z;
          this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
          this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
          this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
          return this;
        }
        project(camera) {
          return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
        }
        unproject(camera) {
          return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
        }
        transformDirection(m) {
          const x = this.x, y = this.y, z = this.z;
          const e = m.elements;
          this.x = e[0] * x + e[4] * y + e[8] * z;
          this.y = e[1] * x + e[5] * y + e[9] * z;
          this.z = e[2] * x + e[6] * y + e[10] * z;
          return this.normalize();
        }
        divide(v) {
          this.x /= v.x;
          this.y /= v.y;
          this.z /= v.z;
          return this;
        }
        divideScalar(scalar) {
          return this.multiplyScalar(1 / scalar);
        }
        min(v) {
          this.x = Math.min(this.x, v.x);
          this.y = Math.min(this.y, v.y);
          this.z = Math.min(this.z, v.z);
          return this;
        }
        max(v) {
          this.x = Math.max(this.x, v.x);
          this.y = Math.max(this.y, v.y);
          this.z = Math.max(this.z, v.z);
          return this;
        }
        clamp(min, max) {
          this.x = Math.max(min.x, Math.min(max.x, this.x));
          this.y = Math.max(min.y, Math.min(max.y, this.y));
          this.z = Math.max(min.z, Math.min(max.z, this.z));
          return this;
        }
        clampScalar(minVal, maxVal) {
          this.x = Math.max(minVal, Math.min(maxVal, this.x));
          this.y = Math.max(minVal, Math.min(maxVal, this.y));
          this.z = Math.max(minVal, Math.min(maxVal, this.z));
          return this;
        }
        clampLength(min, max) {
          const length2 = this.length();
          return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min, Math.min(max, length2)));
        }
        floor() {
          this.x = Math.floor(this.x);
          this.y = Math.floor(this.y);
          this.z = Math.floor(this.z);
          return this;
        }
        ceil() {
          this.x = Math.ceil(this.x);
          this.y = Math.ceil(this.y);
          this.z = Math.ceil(this.z);
          return this;
        }
        round() {
          this.x = Math.round(this.x);
          this.y = Math.round(this.y);
          this.z = Math.round(this.z);
          return this;
        }
        roundToZero() {
          this.x = Math.trunc(this.x);
          this.y = Math.trunc(this.y);
          this.z = Math.trunc(this.z);
          return this;
        }
        negate() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          return this;
        }
        dot(v) {
          return this.x * v.x + this.y * v.y + this.z * v.z;
        }
        // TODO lengthSquared?
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(length2) {
          return this.normalize().multiplyScalar(length2);
        }
        lerp(v, alpha) {
          this.x += (v.x - this.x) * alpha;
          this.y += (v.y - this.y) * alpha;
          this.z += (v.z - this.z) * alpha;
          return this;
        }
        lerpVectors(v1, v2, alpha) {
          this.x = v1.x + (v2.x - v1.x) * alpha;
          this.y = v1.y + (v2.y - v1.y) * alpha;
          this.z = v1.z + (v2.z - v1.z) * alpha;
          return this;
        }
        cross(v) {
          return this.crossVectors(this, v);
        }
        crossVectors(a, b) {
          const ax = a.x, ay = a.y, az = a.z;
          const bx = b.x, by = b.y, bz = b.z;
          this.x = ay * bz - az * by;
          this.y = az * bx - ax * bz;
          this.z = ax * by - ay * bx;
          return this;
        }
        projectOnVector(v) {
          const denominator = v.lengthSq();
          if (denominator === 0)
            return this.set(0, 0, 0);
          const scalar = v.dot(this) / denominator;
          return this.copy(v).multiplyScalar(scalar);
        }
        projectOnPlane(planeNormal) {
          _vector$b.copy(this).projectOnVector(planeNormal);
          return this.sub(_vector$b);
        }
        reflect(normal) {
          return this.sub(_vector$b.copy(normal).multiplyScalar(2 * this.dot(normal)));
        }
        angleTo(v) {
          const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
          if (denominator === 0)
            return Math.PI / 2;
          const theta = this.dot(v) / denominator;
          return Math.acos(clamp(theta, -1, 1));
        }
        distanceTo(v) {
          return Math.sqrt(this.distanceToSquared(v));
        }
        distanceToSquared(v) {
          const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
          return dx * dx + dy * dy + dz * dz;
        }
        manhattanDistanceTo(v) {
          return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
        }
        setFromSpherical(s) {
          return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
        }
        setFromSphericalCoords(radius, phi, theta) {
          const sinPhiRadius = Math.sin(phi) * radius;
          this.x = sinPhiRadius * Math.sin(theta);
          this.y = Math.cos(phi) * radius;
          this.z = sinPhiRadius * Math.cos(theta);
          return this;
        }
        setFromCylindrical(c) {
          return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
        }
        setFromCylindricalCoords(radius, theta, y) {
          this.x = radius * Math.sin(theta);
          this.y = y;
          this.z = radius * Math.cos(theta);
          return this;
        }
        setFromMatrixPosition(m) {
          const e = m.elements;
          this.x = e[12];
          this.y = e[13];
          this.z = e[14];
          return this;
        }
        setFromMatrixScale(m) {
          const sx = this.setFromMatrixColumn(m, 0).length();
          const sy = this.setFromMatrixColumn(m, 1).length();
          const sz = this.setFromMatrixColumn(m, 2).length();
          this.x = sx;
          this.y = sy;
          this.z = sz;
          return this;
        }
        setFromMatrixColumn(m, index) {
          return this.fromArray(m.elements, index * 4);
        }
        setFromMatrix3Column(m, index) {
          return this.fromArray(m.elements, index * 3);
        }
        setFromEuler(e) {
          this.x = e._x;
          this.y = e._y;
          this.z = e._z;
          return this;
        }
        setFromColor(c) {
          this.x = c.r;
          this.y = c.g;
          this.z = c.b;
          return this;
        }
        equals(v) {
          return v.x === this.x && v.y === this.y && v.z === this.z;
        }
        fromArray(array, offset = 0) {
          this.x = array[offset];
          this.y = array[offset + 1];
          this.z = array[offset + 2];
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this.x;
          array[offset + 1] = this.y;
          array[offset + 2] = this.z;
          return array;
        }
        fromBufferAttribute(attribute, index) {
          this.x = attribute.getX(index);
          this.y = attribute.getY(index);
          this.z = attribute.getZ(index);
          return this;
        }
        random() {
          this.x = Math.random();
          this.y = Math.random();
          this.z = Math.random();
          return this;
        }
        randomDirection() {
          const u = (Math.random() - 0.5) * 2;
          const t = Math.random() * Math.PI * 2;
          const f = Math.sqrt(1 - u ** 2);
          this.x = f * Math.cos(t);
          this.y = f * Math.sin(t);
          this.z = u;
          return this;
        }
        *[Symbol.iterator]() {
          yield this.x;
          yield this.y;
          yield this.z;
        }
      };
      _vector$b = /* @__PURE__ */ new Vector3();
      _quaternion$4 = /* @__PURE__ */ new Quaternion();
      Box3 = class {
        constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
          this.isBox3 = true;
          this.min = min;
          this.max = max;
        }
        set(min, max) {
          this.min.copy(min);
          this.max.copy(max);
          return this;
        }
        setFromArray(array) {
          this.makeEmpty();
          for (let i = 0, il = array.length; i < il; i += 3) {
            this.expandByPoint(_vector$a.fromArray(array, i));
          }
          return this;
        }
        setFromBufferAttribute(attribute) {
          this.makeEmpty();
          for (let i = 0, il = attribute.count; i < il; i++) {
            this.expandByPoint(_vector$a.fromBufferAttribute(attribute, i));
          }
          return this;
        }
        setFromPoints(points) {
          this.makeEmpty();
          for (let i = 0, il = points.length; i < il; i++) {
            this.expandByPoint(points[i]);
          }
          return this;
        }
        setFromCenterAndSize(center, size) {
          const halfSize = _vector$a.copy(size).multiplyScalar(0.5);
          this.min.copy(center).sub(halfSize);
          this.max.copy(center).add(halfSize);
          return this;
        }
        setFromObject(object, precise = false) {
          this.makeEmpty();
          return this.expandByObject(object, precise);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(box) {
          this.min.copy(box.min);
          this.max.copy(box.max);
          return this;
        }
        makeEmpty() {
          this.min.x = this.min.y = this.min.z = Infinity;
          this.max.x = this.max.y = this.max.z = -Infinity;
          return this;
        }
        isEmpty() {
          return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }
        getCenter(target2) {
          return this.isEmpty() ? target2.set(0, 0, 0) : target2.addVectors(this.min, this.max).multiplyScalar(0.5);
        }
        getSize(target2) {
          return this.isEmpty() ? target2.set(0, 0, 0) : target2.subVectors(this.max, this.min);
        }
        expandByPoint(point) {
          this.min.min(point);
          this.max.max(point);
          return this;
        }
        expandByVector(vector) {
          this.min.sub(vector);
          this.max.add(vector);
          return this;
        }
        expandByScalar(scalar) {
          this.min.addScalar(-scalar);
          this.max.addScalar(scalar);
          return this;
        }
        expandByObject(object, precise = false) {
          object.updateWorldMatrix(false, false);
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$3.copy(object.boundingBox);
            _box$3.applyMatrix4(object.matrixWorld);
            this.union(_box$3);
          } else {
            const geometry = object.geometry;
            if (geometry !== void 0) {
              if (precise && geometry.attributes !== void 0 && geometry.attributes.position !== void 0) {
                const position3 = geometry.attributes.position;
                for (let i = 0, l = position3.count; i < l; i++) {
                  _vector$a.fromBufferAttribute(position3, i).applyMatrix4(object.matrixWorld);
                  this.expandByPoint(_vector$a);
                }
              } else {
                if (geometry.boundingBox === null) {
                  geometry.computeBoundingBox();
                }
                _box$3.copy(geometry.boundingBox);
                _box$3.applyMatrix4(object.matrixWorld);
                this.union(_box$3);
              }
            }
          }
          const children = object.children;
          for (let i = 0, l = children.length; i < l; i++) {
            this.expandByObject(children[i], precise);
          }
          return this;
        }
        containsPoint(point) {
          return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
        }
        containsBox(box) {
          return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
        }
        getParameter(point, target2) {
          return target2.set(
            (point.x - this.min.x) / (this.max.x - this.min.x),
            (point.y - this.min.y) / (this.max.y - this.min.y),
            (point.z - this.min.z) / (this.max.z - this.min.z)
          );
        }
        intersectsBox(box) {
          return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
        }
        intersectsSphere(sphere) {
          this.clampPoint(sphere.center, _vector$a);
          return _vector$a.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
        }
        intersectsPlane(plane) {
          let min, max;
          if (plane.normal.x > 0) {
            min = plane.normal.x * this.min.x;
            max = plane.normal.x * this.max.x;
          } else {
            min = plane.normal.x * this.max.x;
            max = plane.normal.x * this.min.x;
          }
          if (plane.normal.y > 0) {
            min += plane.normal.y * this.min.y;
            max += plane.normal.y * this.max.y;
          } else {
            min += plane.normal.y * this.max.y;
            max += plane.normal.y * this.min.y;
          }
          if (plane.normal.z > 0) {
            min += plane.normal.z * this.min.z;
            max += plane.normal.z * this.max.z;
          } else {
            min += plane.normal.z * this.max.z;
            max += plane.normal.z * this.min.z;
          }
          return min <= -plane.constant && max >= -plane.constant;
        }
        intersectsTriangle(triangle) {
          if (this.isEmpty()) {
            return false;
          }
          this.getCenter(_center);
          _extents.subVectors(this.max, _center);
          _v0$2.subVectors(triangle.a, _center);
          _v1$7.subVectors(triangle.b, _center);
          _v2$4.subVectors(triangle.c, _center);
          _f0.subVectors(_v1$7, _v0$2);
          _f1.subVectors(_v2$4, _v1$7);
          _f2.subVectors(_v0$2, _v2$4);
          let axes = [
            0,
            -_f0.z,
            _f0.y,
            0,
            -_f1.z,
            _f1.y,
            0,
            -_f2.z,
            _f2.y,
            _f0.z,
            0,
            -_f0.x,
            _f1.z,
            0,
            -_f1.x,
            _f2.z,
            0,
            -_f2.x,
            -_f0.y,
            _f0.x,
            0,
            -_f1.y,
            _f1.x,
            0,
            -_f2.y,
            _f2.x,
            0
          ];
          if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
            return false;
          }
          axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
          if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
            return false;
          }
          _triangleNormal.crossVectors(_f0, _f1);
          axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
          return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
        }
        clampPoint(point, target2) {
          return target2.copy(point).clamp(this.min, this.max);
        }
        distanceToPoint(point) {
          return this.clampPoint(point, _vector$a).distanceTo(point);
        }
        getBoundingSphere(target2) {
          if (this.isEmpty()) {
            target2.makeEmpty();
          } else {
            this.getCenter(target2.center);
            target2.radius = this.getSize(_vector$a).length() * 0.5;
          }
          return target2;
        }
        intersect(box) {
          this.min.max(box.min);
          this.max.min(box.max);
          if (this.isEmpty())
            this.makeEmpty();
          return this;
        }
        union(box) {
          this.min.min(box.min);
          this.max.max(box.max);
          return this;
        }
        applyMatrix4(matrix) {
          if (this.isEmpty())
            return this;
          _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
          _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
          _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
          _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
          _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
          _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
          _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
          _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
          this.setFromPoints(_points);
          return this;
        }
        translate(offset) {
          this.min.add(offset);
          this.max.add(offset);
          return this;
        }
        equals(box) {
          return box.min.equals(this.min) && box.max.equals(this.max);
        }
      };
      _points = [
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3(),
        /* @__PURE__ */ new Vector3()
      ];
      _vector$a = /* @__PURE__ */ new Vector3();
      _box$3 = /* @__PURE__ */ new Box3();
      _v0$2 = /* @__PURE__ */ new Vector3();
      _v1$7 = /* @__PURE__ */ new Vector3();
      _v2$4 = /* @__PURE__ */ new Vector3();
      _f0 = /* @__PURE__ */ new Vector3();
      _f1 = /* @__PURE__ */ new Vector3();
      _f2 = /* @__PURE__ */ new Vector3();
      _center = /* @__PURE__ */ new Vector3();
      _extents = /* @__PURE__ */ new Vector3();
      _triangleNormal = /* @__PURE__ */ new Vector3();
      _testAxis = /* @__PURE__ */ new Vector3();
      _box$2 = /* @__PURE__ */ new Box3();
      _v1$6 = /* @__PURE__ */ new Vector3();
      _v2$3 = /* @__PURE__ */ new Vector3();
      Sphere = class {
        constructor(center = new Vector3(), radius = -1) {
          this.center = center;
          this.radius = radius;
        }
        set(center, radius) {
          this.center.copy(center);
          this.radius = radius;
          return this;
        }
        setFromPoints(points, optionalCenter) {
          const center = this.center;
          if (optionalCenter !== void 0) {
            center.copy(optionalCenter);
          } else {
            _box$2.setFromPoints(points).getCenter(center);
          }
          let maxRadiusSq = 0;
          for (let i = 0, il = points.length; i < il; i++) {
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
          }
          this.radius = Math.sqrt(maxRadiusSq);
          return this;
        }
        copy(sphere) {
          this.center.copy(sphere.center);
          this.radius = sphere.radius;
          return this;
        }
        isEmpty() {
          return this.radius < 0;
        }
        makeEmpty() {
          this.center.set(0, 0, 0);
          this.radius = -1;
          return this;
        }
        containsPoint(point) {
          return point.distanceToSquared(this.center) <= this.radius * this.radius;
        }
        distanceToPoint(point) {
          return point.distanceTo(this.center) - this.radius;
        }
        intersectsSphere(sphere) {
          const radiusSum = this.radius + sphere.radius;
          return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
        }
        intersectsBox(box) {
          return box.intersectsSphere(this);
        }
        intersectsPlane(plane) {
          return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
        }
        clampPoint(point, target2) {
          const deltaLengthSq = this.center.distanceToSquared(point);
          target2.copy(point);
          if (deltaLengthSq > this.radius * this.radius) {
            target2.sub(this.center).normalize();
            target2.multiplyScalar(this.radius).add(this.center);
          }
          return target2;
        }
        getBoundingBox(target2) {
          if (this.isEmpty()) {
            target2.makeEmpty();
            return target2;
          }
          target2.set(this.center, this.center);
          target2.expandByScalar(this.radius);
          return target2;
        }
        applyMatrix4(matrix) {
          this.center.applyMatrix4(matrix);
          this.radius = this.radius * matrix.getMaxScaleOnAxis();
          return this;
        }
        translate(offset) {
          this.center.add(offset);
          return this;
        }
        expandByPoint(point) {
          if (this.isEmpty()) {
            this.center.copy(point);
            this.radius = 0;
            return this;
          }
          _v1$6.subVectors(point, this.center);
          const lengthSq = _v1$6.lengthSq();
          if (lengthSq > this.radius * this.radius) {
            const length2 = Math.sqrt(lengthSq);
            const delta = (length2 - this.radius) * 0.5;
            this.center.addScaledVector(_v1$6, delta / length2);
            this.radius += delta;
          }
          return this;
        }
        union(sphere) {
          if (sphere.isEmpty()) {
            return this;
          }
          if (this.isEmpty()) {
            this.copy(sphere);
            return this;
          }
          if (this.center.equals(sphere.center) === true) {
            this.radius = Math.max(this.radius, sphere.radius);
          } else {
            _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
            this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
            this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
          }
          return this;
        }
        equals(sphere) {
          return sphere.center.equals(this.center) && sphere.radius === this.radius;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      _vector$9 = /* @__PURE__ */ new Vector3();
      _segCenter = /* @__PURE__ */ new Vector3();
      _segDir = /* @__PURE__ */ new Vector3();
      _diff = /* @__PURE__ */ new Vector3();
      _edge1 = /* @__PURE__ */ new Vector3();
      _edge2 = /* @__PURE__ */ new Vector3();
      _normal$1 = /* @__PURE__ */ new Vector3();
      Ray = class {
        constructor(origin2 = new Vector3(), direction = new Vector3(0, 0, -1)) {
          this.origin = origin2;
          this.direction = direction;
        }
        set(origin2, direction) {
          this.origin.copy(origin2);
          this.direction.copy(direction);
          return this;
        }
        copy(ray) {
          this.origin.copy(ray.origin);
          this.direction.copy(ray.direction);
          return this;
        }
        at(t, target2) {
          return target2.copy(this.origin).addScaledVector(this.direction, t);
        }
        lookAt(v) {
          this.direction.copy(v).sub(this.origin).normalize();
          return this;
        }
        recast(t) {
          this.origin.copy(this.at(t, _vector$9));
          return this;
        }
        closestPointToPoint(point, target2) {
          target2.subVectors(point, this.origin);
          const directionDistance = target2.dot(this.direction);
          if (directionDistance < 0) {
            return target2.copy(this.origin);
          }
          return target2.copy(this.origin).addScaledVector(this.direction, directionDistance);
        }
        distanceToPoint(point) {
          return Math.sqrt(this.distanceSqToPoint(point));
        }
        distanceSqToPoint(point) {
          const directionDistance = _vector$9.subVectors(point, this.origin).dot(this.direction);
          if (directionDistance < 0) {
            return this.origin.distanceToSquared(point);
          }
          _vector$9.copy(this.origin).addScaledVector(this.direction, directionDistance);
          return _vector$9.distanceToSquared(point);
        }
        distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
          _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
          _segDir.copy(v1).sub(v0).normalize();
          _diff.copy(this.origin).sub(_segCenter);
          const segExtent = v0.distanceTo(v1) * 0.5;
          const a01 = -this.direction.dot(_segDir);
          const b0 = _diff.dot(this.direction);
          const b1 = -_diff.dot(_segDir);
          const c = _diff.lengthSq();
          const det = Math.abs(1 - a01 * a01);
          let s0, s1, sqrDist, extDet;
          if (det > 0) {
            s0 = a01 * b1 - b0;
            s1 = a01 * b0 - b1;
            extDet = segExtent * det;
            if (s0 >= 0) {
              if (s1 >= -extDet) {
                if (s1 <= extDet) {
                  const invDet = 1 / det;
                  s0 *= invDet;
                  s1 *= invDet;
                  sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                } else {
                  s1 = segExtent;
                  s0 = Math.max(0, -(a01 * s1 + b0));
                  sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
              } else {
                s1 = -segExtent;
                s0 = Math.max(0, -(a01 * s1 + b0));
                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
              }
            } else {
              if (s1 <= -extDet) {
                s0 = Math.max(0, -(-a01 * segExtent + b0));
                s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
              } else if (s1 <= extDet) {
                s0 = 0;
                s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                sqrDist = s1 * (s1 + 2 * b1) + c;
              } else {
                s0 = Math.max(0, -(a01 * segExtent + b0));
                s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
              }
            }
          } else {
            s1 = a01 > 0 ? -segExtent : segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
          if (optionalPointOnRay) {
            optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
          }
          if (optionalPointOnSegment) {
            optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
          }
          return sqrDist;
        }
        intersectSphere(sphere, target2) {
          _vector$9.subVectors(sphere.center, this.origin);
          const tca = _vector$9.dot(this.direction);
          const d2 = _vector$9.dot(_vector$9) - tca * tca;
          const radius2 = sphere.radius * sphere.radius;
          if (d2 > radius2)
            return null;
          const thc = Math.sqrt(radius2 - d2);
          const t0 = tca - thc;
          const t1 = tca + thc;
          if (t1 < 0)
            return null;
          if (t0 < 0)
            return this.at(t1, target2);
          return this.at(t0, target2);
        }
        intersectsSphere(sphere) {
          return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
        }
        distanceToPlane(plane) {
          const denominator = plane.normal.dot(this.direction);
          if (denominator === 0) {
            if (plane.distanceToPoint(this.origin) === 0) {
              return 0;
            }
            return null;
          }
          const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
          return t >= 0 ? t : null;
        }
        intersectPlane(plane, target2) {
          const t = this.distanceToPlane(plane);
          if (t === null) {
            return null;
          }
          return this.at(t, target2);
        }
        intersectsPlane(plane) {
          const distToPoint = plane.distanceToPoint(this.origin);
          if (distToPoint === 0) {
            return true;
          }
          const denominator = plane.normal.dot(this.direction);
          if (denominator * distToPoint < 0) {
            return true;
          }
          return false;
        }
        intersectBox(box, target2) {
          let tmin, tmax, tymin, tymax, tzmin, tzmax;
          const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
          const origin2 = this.origin;
          if (invdirx >= 0) {
            tmin = (box.min.x - origin2.x) * invdirx;
            tmax = (box.max.x - origin2.x) * invdirx;
          } else {
            tmin = (box.max.x - origin2.x) * invdirx;
            tmax = (box.min.x - origin2.x) * invdirx;
          }
          if (invdiry >= 0) {
            tymin = (box.min.y - origin2.y) * invdiry;
            tymax = (box.max.y - origin2.y) * invdiry;
          } else {
            tymin = (box.max.y - origin2.y) * invdiry;
            tymax = (box.min.y - origin2.y) * invdiry;
          }
          if (tmin > tymax || tymin > tmax)
            return null;
          if (tymin > tmin || isNaN(tmin))
            tmin = tymin;
          if (tymax < tmax || isNaN(tmax))
            tmax = tymax;
          if (invdirz >= 0) {
            tzmin = (box.min.z - origin2.z) * invdirz;
            tzmax = (box.max.z - origin2.z) * invdirz;
          } else {
            tzmin = (box.max.z - origin2.z) * invdirz;
            tzmax = (box.min.z - origin2.z) * invdirz;
          }
          if (tmin > tzmax || tzmin > tmax)
            return null;
          if (tzmin > tmin || tmin !== tmin)
            tmin = tzmin;
          if (tzmax < tmax || tmax !== tmax)
            tmax = tzmax;
          if (tmax < 0)
            return null;
          return this.at(tmin >= 0 ? tmin : tmax, target2);
        }
        intersectsBox(box) {
          return this.intersectBox(box, _vector$9) !== null;
        }
        intersectTriangle(a, b, c, backfaceCulling, target2) {
          _edge1.subVectors(b, a);
          _edge2.subVectors(c, a);
          _normal$1.crossVectors(_edge1, _edge2);
          let DdN = this.direction.dot(_normal$1);
          let sign2;
          if (DdN > 0) {
            if (backfaceCulling)
              return null;
            sign2 = 1;
          } else if (DdN < 0) {
            sign2 = -1;
            DdN = -DdN;
          } else {
            return null;
          }
          _diff.subVectors(this.origin, a);
          const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
          if (DdQxE2 < 0) {
            return null;
          }
          const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
          if (DdE1xQ < 0) {
            return null;
          }
          if (DdQxE2 + DdE1xQ > DdN) {
            return null;
          }
          const QdN = -sign2 * _diff.dot(_normal$1);
          if (QdN < 0) {
            return null;
          }
          return this.at(QdN / DdN, target2);
        }
        applyMatrix4(matrix4) {
          this.origin.applyMatrix4(matrix4);
          this.direction.transformDirection(matrix4);
          return this;
        }
        equals(ray) {
          return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      Matrix4 = class _Matrix4 {
        constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
          _Matrix4.prototype.isMatrix4 = true;
          this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
          ];
          if (n11 !== void 0) {
            this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
          }
        }
        set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
          const te = this.elements;
          te[0] = n11;
          te[4] = n12;
          te[8] = n13;
          te[12] = n14;
          te[1] = n21;
          te[5] = n22;
          te[9] = n23;
          te[13] = n24;
          te[2] = n31;
          te[6] = n32;
          te[10] = n33;
          te[14] = n34;
          te[3] = n41;
          te[7] = n42;
          te[11] = n43;
          te[15] = n44;
          return this;
        }
        identity() {
          this.set(
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        clone() {
          return new _Matrix4().fromArray(this.elements);
        }
        copy(m) {
          const te = this.elements;
          const me = m.elements;
          te[0] = me[0];
          te[1] = me[1];
          te[2] = me[2];
          te[3] = me[3];
          te[4] = me[4];
          te[5] = me[5];
          te[6] = me[6];
          te[7] = me[7];
          te[8] = me[8];
          te[9] = me[9];
          te[10] = me[10];
          te[11] = me[11];
          te[12] = me[12];
          te[13] = me[13];
          te[14] = me[14];
          te[15] = me[15];
          return this;
        }
        copyPosition(m) {
          const te = this.elements, me = m.elements;
          te[12] = me[12];
          te[13] = me[13];
          te[14] = me[14];
          return this;
        }
        setFromMatrix3(m) {
          const me = m.elements;
          this.set(
            me[0],
            me[3],
            me[6],
            0,
            me[1],
            me[4],
            me[7],
            0,
            me[2],
            me[5],
            me[8],
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        extractBasis(xAxis, yAxis, zAxis) {
          xAxis.setFromMatrixColumn(this, 0);
          yAxis.setFromMatrixColumn(this, 1);
          zAxis.setFromMatrixColumn(this, 2);
          return this;
        }
        makeBasis(xAxis, yAxis, zAxis) {
          this.set(
            xAxis.x,
            yAxis.x,
            zAxis.x,
            0,
            xAxis.y,
            yAxis.y,
            zAxis.y,
            0,
            xAxis.z,
            yAxis.z,
            zAxis.z,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        extractRotation(m) {
          const te = this.elements;
          const me = m.elements;
          const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
          const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
          const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
          te[0] = me[0] * scaleX;
          te[1] = me[1] * scaleX;
          te[2] = me[2] * scaleX;
          te[3] = 0;
          te[4] = me[4] * scaleY;
          te[5] = me[5] * scaleY;
          te[6] = me[6] * scaleY;
          te[7] = 0;
          te[8] = me[8] * scaleZ;
          te[9] = me[9] * scaleZ;
          te[10] = me[10] * scaleZ;
          te[11] = 0;
          te[12] = 0;
          te[13] = 0;
          te[14] = 0;
          te[15] = 1;
          return this;
        }
        makeRotationFromEuler(euler) {
          const te = this.elements;
          const x = euler.x, y = euler.y, z = euler.z;
          const a = Math.cos(x), b = Math.sin(x);
          const c = Math.cos(y), d = Math.sin(y);
          const e = Math.cos(z), f = Math.sin(z);
          if (euler.order === "XYZ") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
          } else if (euler.order === "YXZ") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
          } else if (euler.order === "ZXY") {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce - df * b;
            te[4] = -a * f;
            te[8] = de + cf * b;
            te[1] = cf + de * b;
            te[5] = a * e;
            te[9] = df - ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
          } else if (euler.order === "ZYX") {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = be * d - af;
            te[8] = ae * d + bf;
            te[1] = c * f;
            te[5] = bf * d + ae;
            te[9] = af * d - be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
          } else if (euler.order === "YZX") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
          } else if (euler.order === "XZY") {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = ac * f + bd;
            te[5] = a * e;
            te[9] = ad * f - bc;
            te[2] = bc * f - ad;
            te[6] = b * e;
            te[10] = bd * f + ac;
          }
          te[3] = 0;
          te[7] = 0;
          te[11] = 0;
          te[12] = 0;
          te[13] = 0;
          te[14] = 0;
          te[15] = 1;
          return this;
        }
        makeRotationFromQuaternion(q) {
          return this.compose(_zero, q, _one);
        }
        lookAt(eye, target2, up) {
          const te = this.elements;
          _z.subVectors(eye, target2);
          if (_z.lengthSq() === 0) {
            _z.z = 1;
          }
          _z.normalize();
          _x.crossVectors(up, _z);
          if (_x.lengthSq() === 0) {
            if (Math.abs(up.z) === 1) {
              _z.x += 1e-4;
            } else {
              _z.z += 1e-4;
            }
            _z.normalize();
            _x.crossVectors(up, _z);
          }
          _x.normalize();
          _y.crossVectors(_z, _x);
          te[0] = _x.x;
          te[4] = _y.x;
          te[8] = _z.x;
          te[1] = _x.y;
          te[5] = _y.y;
          te[9] = _z.y;
          te[2] = _x.z;
          te[6] = _y.z;
          te[10] = _z.z;
          return this;
        }
        multiply(m) {
          return this.multiplyMatrices(this, m);
        }
        premultiply(m) {
          return this.multiplyMatrices(m, this);
        }
        multiplyMatrices(a, b) {
          const ae = a.elements;
          const be = b.elements;
          const te = this.elements;
          const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
          const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
          const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
          const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
          const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
          const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
          const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
          const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
          te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
          te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
          te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
          te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
          te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
          te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
          te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
          te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
          te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
          te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
          te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
          te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
          te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
          te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
          te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
          te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
          return this;
        }
        multiplyScalar(s) {
          const te = this.elements;
          te[0] *= s;
          te[4] *= s;
          te[8] *= s;
          te[12] *= s;
          te[1] *= s;
          te[5] *= s;
          te[9] *= s;
          te[13] *= s;
          te[2] *= s;
          te[6] *= s;
          te[10] *= s;
          te[14] *= s;
          te[3] *= s;
          te[7] *= s;
          te[11] *= s;
          te[15] *= s;
          return this;
        }
        determinant() {
          const te = this.elements;
          const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
          const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
          const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
          const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
          return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
        }
        transpose() {
          const te = this.elements;
          let tmp2;
          tmp2 = te[1];
          te[1] = te[4];
          te[4] = tmp2;
          tmp2 = te[2];
          te[2] = te[8];
          te[8] = tmp2;
          tmp2 = te[6];
          te[6] = te[9];
          te[9] = tmp2;
          tmp2 = te[3];
          te[3] = te[12];
          te[12] = tmp2;
          tmp2 = te[7];
          te[7] = te[13];
          te[13] = tmp2;
          tmp2 = te[11];
          te[11] = te[14];
          te[14] = tmp2;
          return this;
        }
        setPosition(x, y, z) {
          const te = this.elements;
          if (x.isVector3) {
            te[12] = x.x;
            te[13] = x.y;
            te[14] = x.z;
          } else {
            te[12] = x;
            te[13] = y;
            te[14] = z;
          }
          return this;
        }
        invert() {
          const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
          const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
          if (det === 0)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          const detInv = 1 / det;
          te[0] = t11 * detInv;
          te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
          te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
          te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
          te[4] = t12 * detInv;
          te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
          te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
          te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
          te[8] = t13 * detInv;
          te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
          te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
          te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
          te[12] = t14 * detInv;
          te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
          te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
          te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
          return this;
        }
        scale(v) {
          const te = this.elements;
          const x = v.x, y = v.y, z = v.z;
          te[0] *= x;
          te[4] *= y;
          te[8] *= z;
          te[1] *= x;
          te[5] *= y;
          te[9] *= z;
          te[2] *= x;
          te[6] *= y;
          te[10] *= z;
          te[3] *= x;
          te[7] *= y;
          te[11] *= z;
          return this;
        }
        getMaxScaleOnAxis() {
          const te = this.elements;
          const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
          const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
          const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
          return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
        }
        makeTranslation(x, y, z) {
          if (x.isVector3) {
            this.set(
              1,
              0,
              0,
              x.x,
              0,
              1,
              0,
              x.y,
              0,
              0,
              1,
              x.z,
              0,
              0,
              0,
              1
            );
          } else {
            this.set(
              1,
              0,
              0,
              x,
              0,
              1,
              0,
              y,
              0,
              0,
              1,
              z,
              0,
              0,
              0,
              1
            );
          }
          return this;
        }
        makeRotationX(theta) {
          const c = Math.cos(theta), s = Math.sin(theta);
          this.set(
            1,
            0,
            0,
            0,
            0,
            c,
            -s,
            0,
            0,
            s,
            c,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeRotationY(theta) {
          const c = Math.cos(theta), s = Math.sin(theta);
          this.set(
            c,
            0,
            s,
            0,
            0,
            1,
            0,
            0,
            -s,
            0,
            c,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeRotationZ(theta) {
          const c = Math.cos(theta), s = Math.sin(theta);
          this.set(
            c,
            -s,
            0,
            0,
            s,
            c,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeRotationAxis(axis, angle) {
          const c = Math.cos(angle);
          const s = Math.sin(angle);
          const t = 1 - c;
          const x = axis.x, y = axis.y, z = axis.z;
          const tx = t * x, ty = t * y;
          this.set(
            tx * x + c,
            tx * y - s * z,
            tx * z + s * y,
            0,
            tx * y + s * z,
            ty * y + c,
            ty * z - s * x,
            0,
            tx * z - s * y,
            ty * z + s * x,
            t * z * z + c,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeScale(x, y, z) {
          this.set(
            x,
            0,
            0,
            0,
            0,
            y,
            0,
            0,
            0,
            0,
            z,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        makeShear(xy, xz, yx, yz, zx, zy) {
          this.set(
            1,
            yx,
            zx,
            0,
            xy,
            1,
            zy,
            0,
            xz,
            yz,
            1,
            0,
            0,
            0,
            0,
            1
          );
          return this;
        }
        compose(position3, quaternion, scale) {
          const te = this.elements;
          const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
          const x2 = x + x, y2 = y + y, z2 = z + z;
          const xx = x * x2, xy = x * y2, xz = x * z2;
          const yy = y * y2, yz = y * z2, zz = z * z2;
          const wx = w * x2, wy = w * y2, wz = w * z2;
          const sx = scale.x, sy = scale.y, sz = scale.z;
          te[0] = (1 - (yy + zz)) * sx;
          te[1] = (xy + wz) * sx;
          te[2] = (xz - wy) * sx;
          te[3] = 0;
          te[4] = (xy - wz) * sy;
          te[5] = (1 - (xx + zz)) * sy;
          te[6] = (yz + wx) * sy;
          te[7] = 0;
          te[8] = (xz + wy) * sz;
          te[9] = (yz - wx) * sz;
          te[10] = (1 - (xx + yy)) * sz;
          te[11] = 0;
          te[12] = position3.x;
          te[13] = position3.y;
          te[14] = position3.z;
          te[15] = 1;
          return this;
        }
        decompose(position3, quaternion, scale) {
          const te = this.elements;
          let sx = _v1$5.set(te[0], te[1], te[2]).length();
          const sy = _v1$5.set(te[4], te[5], te[6]).length();
          const sz = _v1$5.set(te[8], te[9], te[10]).length();
          const det = this.determinant();
          if (det < 0)
            sx = -sx;
          position3.x = te[12];
          position3.y = te[13];
          position3.z = te[14];
          _m1$2.copy(this);
          const invSX = 1 / sx;
          const invSY = 1 / sy;
          const invSZ = 1 / sz;
          _m1$2.elements[0] *= invSX;
          _m1$2.elements[1] *= invSX;
          _m1$2.elements[2] *= invSX;
          _m1$2.elements[4] *= invSY;
          _m1$2.elements[5] *= invSY;
          _m1$2.elements[6] *= invSY;
          _m1$2.elements[8] *= invSZ;
          _m1$2.elements[9] *= invSZ;
          _m1$2.elements[10] *= invSZ;
          quaternion.setFromRotationMatrix(_m1$2);
          scale.x = sx;
          scale.y = sy;
          scale.z = sz;
          return this;
        }
        makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
          const te = this.elements;
          const x = 2 * near / (right - left);
          const y = 2 * near / (top - bottom);
          const a = (right + left) / (right - left);
          const b = (top + bottom) / (top - bottom);
          let c, d;
          if (coordinateSystem === WebGLCoordinateSystem) {
            c = -(far + near) / (far - near);
            d = -2 * far * near / (far - near);
          } else if (coordinateSystem === WebGPUCoordinateSystem) {
            c = -far / (far - near);
            d = -far * near / (far - near);
          } else {
            throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
          }
          te[0] = x;
          te[4] = 0;
          te[8] = a;
          te[12] = 0;
          te[1] = 0;
          te[5] = y;
          te[9] = b;
          te[13] = 0;
          te[2] = 0;
          te[6] = 0;
          te[10] = c;
          te[14] = d;
          te[3] = 0;
          te[7] = 0;
          te[11] = -1;
          te[15] = 0;
          return this;
        }
        makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
          const te = this.elements;
          const w = 1 / (right - left);
          const h = 1 / (top - bottom);
          const p = 1 / (far - near);
          const x = (right + left) * w;
          const y = (top + bottom) * h;
          let z, zInv;
          if (coordinateSystem === WebGLCoordinateSystem) {
            z = (far + near) * p;
            zInv = -2 * p;
          } else if (coordinateSystem === WebGPUCoordinateSystem) {
            z = near * p;
            zInv = -1 * p;
          } else {
            throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
          }
          te[0] = 2 * w;
          te[4] = 0;
          te[8] = 0;
          te[12] = -x;
          te[1] = 0;
          te[5] = 2 * h;
          te[9] = 0;
          te[13] = -y;
          te[2] = 0;
          te[6] = 0;
          te[10] = zInv;
          te[14] = -z;
          te[3] = 0;
          te[7] = 0;
          te[11] = 0;
          te[15] = 1;
          return this;
        }
        equals(matrix) {
          const te = this.elements;
          const me = matrix.elements;
          for (let i = 0; i < 16; i++) {
            if (te[i] !== me[i])
              return false;
          }
          return true;
        }
        fromArray(array, offset = 0) {
          for (let i = 0; i < 16; i++) {
            this.elements[i] = array[i + offset];
          }
          return this;
        }
        toArray(array = [], offset = 0) {
          const te = this.elements;
          array[offset] = te[0];
          array[offset + 1] = te[1];
          array[offset + 2] = te[2];
          array[offset + 3] = te[3];
          array[offset + 4] = te[4];
          array[offset + 5] = te[5];
          array[offset + 6] = te[6];
          array[offset + 7] = te[7];
          array[offset + 8] = te[8];
          array[offset + 9] = te[9];
          array[offset + 10] = te[10];
          array[offset + 11] = te[11];
          array[offset + 12] = te[12];
          array[offset + 13] = te[13];
          array[offset + 14] = te[14];
          array[offset + 15] = te[15];
          return array;
        }
      };
      _v1$5 = /* @__PURE__ */ new Vector3();
      _m1$2 = /* @__PURE__ */ new Matrix4();
      _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
      _one = /* @__PURE__ */ new Vector3(1, 1, 1);
      _x = /* @__PURE__ */ new Vector3();
      _y = /* @__PURE__ */ new Vector3();
      _z = /* @__PURE__ */ new Vector3();
      _matrix = /* @__PURE__ */ new Matrix4();
      _quaternion$3 = /* @__PURE__ */ new Quaternion();
      Euler = class _Euler {
        constructor(x = 0, y = 0, z = 0, order = _Euler.DEFAULT_ORDER) {
          this.isEuler = true;
          this._x = x;
          this._y = y;
          this._z = z;
          this._order = order;
        }
        get x() {
          return this._x;
        }
        set x(value) {
          this._x = value;
          this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(value) {
          this._y = value;
          this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(value) {
          this._z = value;
          this._onChangeCallback();
        }
        get order() {
          return this._order;
        }
        set order(value) {
          this._order = value;
          this._onChangeCallback();
        }
        set(x, y, z, order = this._order) {
          this._x = x;
          this._y = y;
          this._z = z;
          this._order = order;
          this._onChangeCallback();
          return this;
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }
        copy(euler) {
          this._x = euler._x;
          this._y = euler._y;
          this._z = euler._z;
          this._order = euler._order;
          this._onChangeCallback();
          return this;
        }
        setFromRotationMatrix(m, order = this._order, update = true) {
          const te = m.elements;
          const m11 = te[0], m12 = te[4], m13 = te[8];
          const m21 = te[1], m22 = te[5], m23 = te[9];
          const m31 = te[2], m32 = te[6], m33 = te[10];
          switch (order) {
            case "XYZ":
              this._y = Math.asin(clamp(m13, -1, 1));
              if (Math.abs(m13) < 0.9999999) {
                this._x = Math.atan2(-m23, m33);
                this._z = Math.atan2(-m12, m11);
              } else {
                this._x = Math.atan2(m32, m22);
                this._z = 0;
              }
              break;
            case "YXZ":
              this._x = Math.asin(-clamp(m23, -1, 1));
              if (Math.abs(m23) < 0.9999999) {
                this._y = Math.atan2(m13, m33);
                this._z = Math.atan2(m21, m22);
              } else {
                this._y = Math.atan2(-m31, m11);
                this._z = 0;
              }
              break;
            case "ZXY":
              this._x = Math.asin(clamp(m32, -1, 1));
              if (Math.abs(m32) < 0.9999999) {
                this._y = Math.atan2(-m31, m33);
                this._z = Math.atan2(-m12, m22);
              } else {
                this._y = 0;
                this._z = Math.atan2(m21, m11);
              }
              break;
            case "ZYX":
              this._y = Math.asin(-clamp(m31, -1, 1));
              if (Math.abs(m31) < 0.9999999) {
                this._x = Math.atan2(m32, m33);
                this._z = Math.atan2(m21, m11);
              } else {
                this._x = 0;
                this._z = Math.atan2(-m12, m22);
              }
              break;
            case "YZX":
              this._z = Math.asin(clamp(m21, -1, 1));
              if (Math.abs(m21) < 0.9999999) {
                this._x = Math.atan2(-m23, m22);
                this._y = Math.atan2(-m31, m11);
              } else {
                this._x = 0;
                this._y = Math.atan2(m13, m33);
              }
              break;
            case "XZY":
              this._z = Math.asin(-clamp(m12, -1, 1));
              if (Math.abs(m12) < 0.9999999) {
                this._x = Math.atan2(m32, m22);
                this._y = Math.atan2(m13, m11);
              } else {
                this._x = Math.atan2(-m23, m33);
                this._y = 0;
              }
              break;
            default:
              console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
          }
          this._order = order;
          if (update === true)
            this._onChangeCallback();
          return this;
        }
        setFromQuaternion(q, order, update) {
          _matrix.makeRotationFromQuaternion(q);
          return this.setFromRotationMatrix(_matrix, order, update);
        }
        setFromVector3(v, order = this._order) {
          return this.set(v.x, v.y, v.z, order);
        }
        reorder(newOrder) {
          _quaternion$3.setFromEuler(this);
          return this.setFromQuaternion(_quaternion$3, newOrder);
        }
        equals(euler) {
          return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
        }
        fromArray(array) {
          this._x = array[0];
          this._y = array[1];
          this._z = array[2];
          if (array[3] !== void 0)
            this._order = array[3];
          this._onChangeCallback();
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this._x;
          array[offset + 1] = this._y;
          array[offset + 2] = this._z;
          array[offset + 3] = this._order;
          return array;
        }
        _onChange(callback) {
          this._onChangeCallback = callback;
          return this;
        }
        _onChangeCallback() {
        }
        *[Symbol.iterator]() {
          yield this._x;
          yield this._y;
          yield this._z;
          yield this._order;
        }
      };
      Euler.DEFAULT_ORDER = "XYZ";
      Layers = class {
        constructor() {
          this.mask = 1 | 0;
        }
        set(channel) {
          this.mask = (1 << channel | 0) >>> 0;
        }
        enable(channel) {
          this.mask |= 1 << channel | 0;
        }
        enableAll() {
          this.mask = 4294967295 | 0;
        }
        toggle(channel) {
          this.mask ^= 1 << channel | 0;
        }
        disable(channel) {
          this.mask &= ~(1 << channel | 0);
        }
        disableAll() {
          this.mask = 0;
        }
        test(layers) {
          return (this.mask & layers.mask) !== 0;
        }
        isEnabled(channel) {
          return (this.mask & (1 << channel | 0)) !== 0;
        }
      };
      _object3DId = 0;
      _v1$4 = /* @__PURE__ */ new Vector3();
      _q1 = /* @__PURE__ */ new Quaternion();
      _m1$1 = /* @__PURE__ */ new Matrix4();
      _target = /* @__PURE__ */ new Vector3();
      _position$3 = /* @__PURE__ */ new Vector3();
      _scale$2 = /* @__PURE__ */ new Vector3();
      _quaternion$2 = /* @__PURE__ */ new Quaternion();
      _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
      _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
      _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
      _addedEvent = { type: "added" };
      _removedEvent = { type: "removed" };
      Object3D = class _Object3D extends EventDispatcher {
        constructor() {
          super();
          this.isObject3D = true;
          Object.defineProperty(this, "id", { value: _object3DId++ });
          this.uuid = generateUUID();
          this.name = "";
          this.type = "Object3D";
          this.parent = null;
          this.children = [];
          this.up = _Object3D.DEFAULT_UP.clone();
          const position3 = new Vector3();
          const rotation = new Euler();
          const quaternion = new Quaternion();
          const scale = new Vector3(1, 1, 1);
          function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
          }
          function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, void 0, false);
          }
          rotation._onChange(onRotationChange);
          quaternion._onChange(onQuaternionChange);
          Object.defineProperties(this, {
            position: {
              configurable: true,
              enumerable: true,
              value: position3
            },
            rotation: {
              configurable: true,
              enumerable: true,
              value: rotation
            },
            quaternion: {
              configurable: true,
              enumerable: true,
              value: quaternion
            },
            scale: {
              configurable: true,
              enumerable: true,
              value: scale
            },
            modelViewMatrix: {
              value: new Matrix4()
            },
            normalMatrix: {
              value: new Matrix3()
            }
          });
          this.matrix = new Matrix4();
          this.matrixWorld = new Matrix4();
          this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
          this.matrixWorldNeedsUpdate = false;
          this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
          this.layers = new Layers();
          this.visible = true;
          this.castShadow = false;
          this.receiveShadow = false;
          this.frustumCulled = true;
          this.renderOrder = 0;
          this.animations = [];
          this.userData = {};
        }
        onBeforeRender() {
        }
        onAfterRender() {
        }
        applyMatrix4(matrix) {
          if (this.matrixAutoUpdate)
            this.updateMatrix();
          this.matrix.premultiply(matrix);
          this.matrix.decompose(this.position, this.quaternion, this.scale);
        }
        applyQuaternion(q) {
          this.quaternion.premultiply(q);
          return this;
        }
        setRotationFromAxisAngle(axis, angle) {
          this.quaternion.setFromAxisAngle(axis, angle);
        }
        setRotationFromEuler(euler) {
          this.quaternion.setFromEuler(euler, true);
        }
        setRotationFromMatrix(m) {
          this.quaternion.setFromRotationMatrix(m);
        }
        setRotationFromQuaternion(q) {
          this.quaternion.copy(q);
        }
        rotateOnAxis(axis, angle) {
          _q1.setFromAxisAngle(axis, angle);
          this.quaternion.multiply(_q1);
          return this;
        }
        rotateOnWorldAxis(axis, angle) {
          _q1.setFromAxisAngle(axis, angle);
          this.quaternion.premultiply(_q1);
          return this;
        }
        rotateX(angle) {
          return this.rotateOnAxis(_xAxis, angle);
        }
        rotateY(angle) {
          return this.rotateOnAxis(_yAxis, angle);
        }
        rotateZ(angle) {
          return this.rotateOnAxis(_zAxis, angle);
        }
        translateOnAxis(axis, distance) {
          _v1$4.copy(axis).applyQuaternion(this.quaternion);
          this.position.add(_v1$4.multiplyScalar(distance));
          return this;
        }
        translateX(distance) {
          return this.translateOnAxis(_xAxis, distance);
        }
        translateY(distance) {
          return this.translateOnAxis(_yAxis, distance);
        }
        translateZ(distance) {
          return this.translateOnAxis(_zAxis, distance);
        }
        localToWorld(vector) {
          this.updateWorldMatrix(true, false);
          return vector.applyMatrix4(this.matrixWorld);
        }
        worldToLocal(vector) {
          this.updateWorldMatrix(true, false);
          return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
        }
        lookAt(x, y, z) {
          if (x.isVector3) {
            _target.copy(x);
          } else {
            _target.set(x, y, z);
          }
          const parent = this.parent;
          this.updateWorldMatrix(true, false);
          _position$3.setFromMatrixPosition(this.matrixWorld);
          if (this.isCamera || this.isLight) {
            _m1$1.lookAt(_position$3, _target, this.up);
          } else {
            _m1$1.lookAt(_target, _position$3, this.up);
          }
          this.quaternion.setFromRotationMatrix(_m1$1);
          if (parent) {
            _m1$1.extractRotation(parent.matrixWorld);
            _q1.setFromRotationMatrix(_m1$1);
            this.quaternion.premultiply(_q1.invert());
          }
        }
        add(object) {
          if (arguments.length > 1) {
            for (let i = 0; i < arguments.length; i++) {
              this.add(arguments[i]);
            }
            return this;
          }
          if (object === this) {
            console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
            return this;
          }
          if (object && object.isObject3D) {
            if (object.parent !== null) {
              object.parent.remove(object);
            }
            object.parent = this;
            this.children.push(object);
            object.dispatchEvent(_addedEvent);
          } else {
            console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
          }
          return this;
        }
        remove(object) {
          if (arguments.length > 1) {
            for (let i = 0; i < arguments.length; i++) {
              this.remove(arguments[i]);
            }
            return this;
          }
          const index = this.children.indexOf(object);
          if (index !== -1) {
            object.parent = null;
            this.children.splice(index, 1);
            object.dispatchEvent(_removedEvent);
          }
          return this;
        }
        removeFromParent() {
          const parent = this.parent;
          if (parent !== null) {
            parent.remove(this);
          }
          return this;
        }
        clear() {
          return this.remove(...this.children);
        }
        attach(object) {
          this.updateWorldMatrix(true, false);
          _m1$1.copy(this.matrixWorld).invert();
          if (object.parent !== null) {
            object.parent.updateWorldMatrix(true, false);
            _m1$1.multiply(object.parent.matrixWorld);
          }
          object.applyMatrix4(_m1$1);
          this.add(object);
          object.updateWorldMatrix(false, true);
          return this;
        }
        getObjectById(id) {
          return this.getObjectByProperty("id", id);
        }
        getObjectByName(name) {
          return this.getObjectByProperty("name", name);
        }
        getObjectByProperty(name, value) {
          if (this[name] === value)
            return this;
          for (let i = 0, l = this.children.length; i < l; i++) {
            const child = this.children[i];
            const object = child.getObjectByProperty(name, value);
            if (object !== void 0) {
              return object;
            }
          }
          return void 0;
        }
        getObjectsByProperty(name, value) {
          let result = [];
          if (this[name] === value)
            result.push(this);
          for (let i = 0, l = this.children.length; i < l; i++) {
            const childResult = this.children[i].getObjectsByProperty(name, value);
            if (childResult.length > 0) {
              result = result.concat(childResult);
            }
          }
          return result;
        }
        getWorldPosition(target2) {
          this.updateWorldMatrix(true, false);
          return target2.setFromMatrixPosition(this.matrixWorld);
        }
        getWorldQuaternion(target2) {
          this.updateWorldMatrix(true, false);
          this.matrixWorld.decompose(_position$3, target2, _scale$2);
          return target2;
        }
        getWorldScale(target2) {
          this.updateWorldMatrix(true, false);
          this.matrixWorld.decompose(_position$3, _quaternion$2, target2);
          return target2;
        }
        getWorldDirection(target2) {
          this.updateWorldMatrix(true, false);
          const e = this.matrixWorld.elements;
          return target2.set(e[8], e[9], e[10]).normalize();
        }
        raycast() {
        }
        traverse(callback) {
          callback(this);
          const children = this.children;
          for (let i = 0, l = children.length; i < l; i++) {
            children[i].traverse(callback);
          }
        }
        traverseVisible(callback) {
          if (this.visible === false)
            return;
          callback(this);
          const children = this.children;
          for (let i = 0, l = children.length; i < l; i++) {
            children[i].traverseVisible(callback);
          }
        }
        traverseAncestors(callback) {
          const parent = this.parent;
          if (parent !== null) {
            callback(parent);
            parent.traverseAncestors(callback);
          }
        }
        updateMatrix() {
          this.matrix.compose(this.position, this.quaternion, this.scale);
          this.matrixWorldNeedsUpdate = true;
        }
        updateMatrixWorld(force) {
          if (this.matrixAutoUpdate)
            this.updateMatrix();
          if (this.matrixWorldNeedsUpdate || force) {
            if (this.parent === null) {
              this.matrixWorld.copy(this.matrix);
            } else {
              this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            }
            this.matrixWorldNeedsUpdate = false;
            force = true;
          }
          const children = this.children;
          for (let i = 0, l = children.length; i < l; i++) {
            const child = children[i];
            if (child.matrixWorldAutoUpdate === true || force === true) {
              child.updateMatrixWorld(force);
            }
          }
        }
        updateWorldMatrix(updateParents, updateChildren) {
          const parent = this.parent;
          if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
            parent.updateWorldMatrix(true, false);
          }
          if (this.matrixAutoUpdate)
            this.updateMatrix();
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
          if (updateChildren === true) {
            const children = this.children;
            for (let i = 0, l = children.length; i < l; i++) {
              const child = children[i];
              if (child.matrixWorldAutoUpdate === true) {
                child.updateWorldMatrix(false, true);
              }
            }
          }
        }
        toJSON(meta) {
          const isRootObject = meta === void 0 || typeof meta === "string";
          const output = {};
          if (isRootObject) {
            meta = {
              geometries: {},
              materials: {},
              textures: {},
              images: {},
              shapes: {},
              skeletons: {},
              animations: {},
              nodes: {}
            };
            output.metadata = {
              version: 4.6,
              type: "Object",
              generator: "Object3D.toJSON"
            };
          }
          const object = {};
          object.uuid = this.uuid;
          object.type = this.type;
          if (this.name !== "")
            object.name = this.name;
          if (this.castShadow === true)
            object.castShadow = true;
          if (this.receiveShadow === true)
            object.receiveShadow = true;
          if (this.visible === false)
            object.visible = false;
          if (this.frustumCulled === false)
            object.frustumCulled = false;
          if (this.renderOrder !== 0)
            object.renderOrder = this.renderOrder;
          if (Object.keys(this.userData).length > 0)
            object.userData = this.userData;
          object.layers = this.layers.mask;
          object.matrix = this.matrix.toArray();
          object.up = this.up.toArray();
          if (this.matrixAutoUpdate === false)
            object.matrixAutoUpdate = false;
          if (this.isInstancedMesh) {
            object.type = "InstancedMesh";
            object.count = this.count;
            object.instanceMatrix = this.instanceMatrix.toJSON();
            if (this.instanceColor !== null)
              object.instanceColor = this.instanceColor.toJSON();
          }
          function serialize(library, element) {
            if (library[element.uuid] === void 0) {
              library[element.uuid] = element.toJSON(meta);
            }
            return element.uuid;
          }
          if (this.isScene) {
            if (this.background) {
              if (this.background.isColor) {
                object.background = this.background.toJSON();
              } else if (this.background.isTexture) {
                object.background = this.background.toJSON(meta).uuid;
              }
            }
            if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
              object.environment = this.environment.toJSON(meta).uuid;
            }
          } else if (this.isMesh || this.isLine || this.isPoints) {
            object.geometry = serialize(meta.geometries, this.geometry);
            const parameters = this.geometry.parameters;
            if (parameters !== void 0 && parameters.shapes !== void 0) {
              const shapes = parameters.shapes;
              if (Array.isArray(shapes)) {
                for (let i = 0, l = shapes.length; i < l; i++) {
                  const shape = shapes[i];
                  serialize(meta.shapes, shape);
                }
              } else {
                serialize(meta.shapes, shapes);
              }
            }
          }
          if (this.isSkinnedMesh) {
            object.bindMode = this.bindMode;
            object.bindMatrix = this.bindMatrix.toArray();
            if (this.skeleton !== void 0) {
              serialize(meta.skeletons, this.skeleton);
              object.skeleton = this.skeleton.uuid;
            }
          }
          if (this.material !== void 0) {
            if (Array.isArray(this.material)) {
              const uuids = [];
              for (let i = 0, l = this.material.length; i < l; i++) {
                uuids.push(serialize(meta.materials, this.material[i]));
              }
              object.material = uuids;
            } else {
              object.material = serialize(meta.materials, this.material);
            }
          }
          if (this.children.length > 0) {
            object.children = [];
            for (let i = 0; i < this.children.length; i++) {
              object.children.push(this.children[i].toJSON(meta).object);
            }
          }
          if (this.animations.length > 0) {
            object.animations = [];
            for (let i = 0; i < this.animations.length; i++) {
              const animation = this.animations[i];
              object.animations.push(serialize(meta.animations, animation));
            }
          }
          if (isRootObject) {
            const geometries = extractFromCache(meta.geometries);
            const materials = extractFromCache(meta.materials);
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            const shapes = extractFromCache(meta.shapes);
            const skeletons = extractFromCache(meta.skeletons);
            const animations = extractFromCache(meta.animations);
            const nodes = extractFromCache(meta.nodes);
            if (geometries.length > 0)
              output.geometries = geometries;
            if (materials.length > 0)
              output.materials = materials;
            if (textures.length > 0)
              output.textures = textures;
            if (images.length > 0)
              output.images = images;
            if (shapes.length > 0)
              output.shapes = shapes;
            if (skeletons.length > 0)
              output.skeletons = skeletons;
            if (animations.length > 0)
              output.animations = animations;
            if (nodes.length > 0)
              output.nodes = nodes;
          }
          output.object = object;
          return output;
          function extractFromCache(cache2) {
            const values = [];
            for (const key in cache2) {
              const data = cache2[key];
              delete data.metadata;
              values.push(data);
            }
            return values;
          }
        }
        clone(recursive) {
          return new this.constructor().copy(this, recursive);
        }
        copy(source, recursive = true) {
          this.name = source.name;
          this.up.copy(source.up);
          this.position.copy(source.position);
          this.rotation.order = source.rotation.order;
          this.quaternion.copy(source.quaternion);
          this.scale.copy(source.scale);
          this.matrix.copy(source.matrix);
          this.matrixWorld.copy(source.matrixWorld);
          this.matrixAutoUpdate = source.matrixAutoUpdate;
          this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
          this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
          this.layers.mask = source.layers.mask;
          this.visible = source.visible;
          this.castShadow = source.castShadow;
          this.receiveShadow = source.receiveShadow;
          this.frustumCulled = source.frustumCulled;
          this.renderOrder = source.renderOrder;
          this.animations = source.animations.slice();
          this.userData = JSON.parse(JSON.stringify(source.userData));
          if (recursive === true) {
            for (let i = 0; i < source.children.length; i++) {
              const child = source.children[i];
              this.add(child.clone());
            }
          }
          return this;
        }
      };
      Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
      Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
      Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
      _v0$1 = /* @__PURE__ */ new Vector3();
      _v1$3 = /* @__PURE__ */ new Vector3();
      _v2$2 = /* @__PURE__ */ new Vector3();
      _v3$1 = /* @__PURE__ */ new Vector3();
      _vab = /* @__PURE__ */ new Vector3();
      _vac = /* @__PURE__ */ new Vector3();
      _vbc = /* @__PURE__ */ new Vector3();
      _vap = /* @__PURE__ */ new Vector3();
      _vbp = /* @__PURE__ */ new Vector3();
      _vcp = /* @__PURE__ */ new Vector3();
      warnedGetUV = false;
      Triangle = class _Triangle {
        constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
          this.a = a;
          this.b = b;
          this.c = c;
        }
        static getNormal(a, b, c, target2) {
          target2.subVectors(c, b);
          _v0$1.subVectors(a, b);
          target2.cross(_v0$1);
          const targetLengthSq = target2.lengthSq();
          if (targetLengthSq > 0) {
            return target2.multiplyScalar(1 / Math.sqrt(targetLengthSq));
          }
          return target2.set(0, 0, 0);
        }
        // static/instance method to calculate barycentric coordinates
        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
        static getBarycoord(point, a, b, c, target2) {
          _v0$1.subVectors(c, a);
          _v1$3.subVectors(b, a);
          _v2$2.subVectors(point, a);
          const dot00 = _v0$1.dot(_v0$1);
          const dot01 = _v0$1.dot(_v1$3);
          const dot02 = _v0$1.dot(_v2$2);
          const dot11 = _v1$3.dot(_v1$3);
          const dot12 = _v1$3.dot(_v2$2);
          const denom = dot00 * dot11 - dot01 * dot01;
          if (denom === 0) {
            return target2.set(-2, -1, -1);
          }
          const invDenom = 1 / denom;
          const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
          const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
          return target2.set(1 - u - v, v, u);
        }
        static containsPoint(point, a, b, c) {
          this.getBarycoord(point, a, b, c, _v3$1);
          return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
        }
        static getUV(point, p1, p2, p3, uv1, uv2, uv3, target2) {
          if (warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            warnedGetUV = true;
          }
          return this.getInterpolation(point, p1, p2, p3, uv1, uv2, uv3, target2);
        }
        static getInterpolation(point, p1, p2, p3, v1, v2, v3, target2) {
          this.getBarycoord(point, p1, p2, p3, _v3$1);
          target2.setScalar(0);
          target2.addScaledVector(v1, _v3$1.x);
          target2.addScaledVector(v2, _v3$1.y);
          target2.addScaledVector(v3, _v3$1.z);
          return target2;
        }
        static isFrontFacing(a, b, c, direction) {
          _v0$1.subVectors(c, b);
          _v1$3.subVectors(a, b);
          return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
        }
        set(a, b, c) {
          this.a.copy(a);
          this.b.copy(b);
          this.c.copy(c);
          return this;
        }
        setFromPointsAndIndices(points, i0, i1, i2) {
          this.a.copy(points[i0]);
          this.b.copy(points[i1]);
          this.c.copy(points[i2]);
          return this;
        }
        setFromAttributeAndIndices(attribute, i0, i1, i2) {
          this.a.fromBufferAttribute(attribute, i0);
          this.b.fromBufferAttribute(attribute, i1);
          this.c.fromBufferAttribute(attribute, i2);
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(triangle) {
          this.a.copy(triangle.a);
          this.b.copy(triangle.b);
          this.c.copy(triangle.c);
          return this;
        }
        getArea() {
          _v0$1.subVectors(this.c, this.b);
          _v1$3.subVectors(this.a, this.b);
          return _v0$1.cross(_v1$3).length() * 0.5;
        }
        getMidpoint(target2) {
          return target2.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }
        getNormal(target2) {
          return _Triangle.getNormal(this.a, this.b, this.c, target2);
        }
        getPlane(target2) {
          return target2.setFromCoplanarPoints(this.a, this.b, this.c);
        }
        getBarycoord(point, target2) {
          return _Triangle.getBarycoord(point, this.a, this.b, this.c, target2);
        }
        getUV(point, uv1, uv2, uv3, target2) {
          if (warnedGetUV === false) {
            console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
            warnedGetUV = true;
          }
          return _Triangle.getInterpolation(point, this.a, this.b, this.c, uv1, uv2, uv3, target2);
        }
        getInterpolation(point, v1, v2, v3, target2) {
          return _Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target2);
        }
        containsPoint(point) {
          return _Triangle.containsPoint(point, this.a, this.b, this.c);
        }
        isFrontFacing(direction) {
          return _Triangle.isFrontFacing(this.a, this.b, this.c, direction);
        }
        intersectsBox(box) {
          return box.intersectsTriangle(this);
        }
        closestPointToPoint(p, target2) {
          const a = this.a, b = this.b, c = this.c;
          let v, w;
          _vab.subVectors(b, a);
          _vac.subVectors(c, a);
          _vap.subVectors(p, a);
          const d1 = _vab.dot(_vap);
          const d2 = _vac.dot(_vap);
          if (d1 <= 0 && d2 <= 0) {
            return target2.copy(a);
          }
          _vbp.subVectors(p, b);
          const d3 = _vab.dot(_vbp);
          const d4 = _vac.dot(_vbp);
          if (d3 >= 0 && d4 <= d3) {
            return target2.copy(b);
          }
          const vc = d1 * d4 - d3 * d2;
          if (vc <= 0 && d1 >= 0 && d3 <= 0) {
            v = d1 / (d1 - d3);
            return target2.copy(a).addScaledVector(_vab, v);
          }
          _vcp.subVectors(p, c);
          const d5 = _vab.dot(_vcp);
          const d6 = _vac.dot(_vcp);
          if (d6 >= 0 && d5 <= d6) {
            return target2.copy(c);
          }
          const vb = d5 * d2 - d1 * d6;
          if (vb <= 0 && d2 >= 0 && d6 <= 0) {
            w = d2 / (d2 - d6);
            return target2.copy(a).addScaledVector(_vac, w);
          }
          const va = d3 * d6 - d5 * d4;
          if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
            _vbc.subVectors(c, b);
            w = (d4 - d3) / (d4 - d3 + (d5 - d6));
            return target2.copy(b).addScaledVector(_vbc, w);
          }
          const denom = 1 / (va + vb + vc);
          v = vb * denom;
          w = vc * denom;
          return target2.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
        }
        equals(triangle) {
          return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
        }
      };
      _materialId = 0;
      Material = class extends EventDispatcher {
        constructor() {
          super();
          this.isMaterial = true;
          Object.defineProperty(this, "id", { value: _materialId++ });
          this.uuid = generateUUID();
          this.name = "";
          this.type = "Material";
          this.blending = NormalBlending;
          this.side = FrontSide;
          this.vertexColors = false;
          this.opacity = 1;
          this.transparent = false;
          this.alphaHash = false;
          this.blendSrc = SrcAlphaFactor;
          this.blendDst = OneMinusSrcAlphaFactor;
          this.blendEquation = AddEquation;
          this.blendSrcAlpha = null;
          this.blendDstAlpha = null;
          this.blendEquationAlpha = null;
          this.depthFunc = LessEqualDepth;
          this.depthTest = true;
          this.depthWrite = true;
          this.stencilWriteMask = 255;
          this.stencilFunc = AlwaysStencilFunc;
          this.stencilRef = 0;
          this.stencilFuncMask = 255;
          this.stencilFail = KeepStencilOp;
          this.stencilZFail = KeepStencilOp;
          this.stencilZPass = KeepStencilOp;
          this.stencilWrite = false;
          this.clippingPlanes = null;
          this.clipIntersection = false;
          this.clipShadows = false;
          this.shadowSide = null;
          this.colorWrite = true;
          this.precision = null;
          this.polygonOffset = false;
          this.polygonOffsetFactor = 0;
          this.polygonOffsetUnits = 0;
          this.dithering = false;
          this.alphaToCoverage = false;
          this.premultipliedAlpha = false;
          this.forceSinglePass = false;
          this.visible = true;
          this.toneMapped = true;
          this.userData = {};
          this.version = 0;
          this._alphaTest = 0;
        }
        get alphaTest() {
          return this._alphaTest;
        }
        set alphaTest(value) {
          if (this._alphaTest > 0 !== value > 0) {
            this.version++;
          }
          this._alphaTest = value;
        }
        onBuild() {
        }
        onBeforeRender() {
        }
        onBeforeCompile() {
        }
        customProgramCacheKey() {
          return this.onBeforeCompile.toString();
        }
        setValues(values) {
          if (values === void 0)
            return;
          for (const key in values) {
            const newValue = values[key];
            if (newValue === void 0) {
              console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
              continue;
            }
            const currentValue = this[key];
            if (currentValue === void 0) {
              console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
              continue;
            }
            if (currentValue && currentValue.isColor) {
              currentValue.set(newValue);
            } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
              currentValue.copy(newValue);
            } else {
              this[key] = newValue;
            }
          }
        }
        toJSON(meta) {
          const isRootObject = meta === void 0 || typeof meta === "string";
          if (isRootObject) {
            meta = {
              textures: {},
              images: {}
            };
          }
          const data = {
            metadata: {
              version: 4.6,
              type: "Material",
              generator: "Material.toJSON"
            }
          };
          data.uuid = this.uuid;
          data.type = this.type;
          if (this.name !== "")
            data.name = this.name;
          if (this.color && this.color.isColor)
            data.color = this.color.getHex();
          if (this.roughness !== void 0)
            data.roughness = this.roughness;
          if (this.metalness !== void 0)
            data.metalness = this.metalness;
          if (this.sheen !== void 0)
            data.sheen = this.sheen;
          if (this.sheenColor && this.sheenColor.isColor)
            data.sheenColor = this.sheenColor.getHex();
          if (this.sheenRoughness !== void 0)
            data.sheenRoughness = this.sheenRoughness;
          if (this.emissive && this.emissive.isColor)
            data.emissive = this.emissive.getHex();
          if (this.emissiveIntensity && this.emissiveIntensity !== 1)
            data.emissiveIntensity = this.emissiveIntensity;
          if (this.specular && this.specular.isColor)
            data.specular = this.specular.getHex();
          if (this.specularIntensity !== void 0)
            data.specularIntensity = this.specularIntensity;
          if (this.specularColor && this.specularColor.isColor)
            data.specularColor = this.specularColor.getHex();
          if (this.shininess !== void 0)
            data.shininess = this.shininess;
          if (this.clearcoat !== void 0)
            data.clearcoat = this.clearcoat;
          if (this.clearcoatRoughness !== void 0)
            data.clearcoatRoughness = this.clearcoatRoughness;
          if (this.clearcoatMap && this.clearcoatMap.isTexture) {
            data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
          }
          if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
            data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
          }
          if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
            data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
            data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
          }
          if (this.iridescence !== void 0)
            data.iridescence = this.iridescence;
          if (this.iridescenceIOR !== void 0)
            data.iridescenceIOR = this.iridescenceIOR;
          if (this.iridescenceThicknessRange !== void 0)
            data.iridescenceThicknessRange = this.iridescenceThicknessRange;
          if (this.iridescenceMap && this.iridescenceMap.isTexture) {
            data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
          }
          if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
            data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
          }
          if (this.anisotropy !== void 0)
            data.anisotropy = this.anisotropy;
          if (this.anisotropyRotation !== void 0)
            data.anisotropyRotation = this.anisotropyRotation;
          if (this.anisotropyMap && this.anisotropyMap.isTexture) {
            data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
          }
          if (this.map && this.map.isTexture)
            data.map = this.map.toJSON(meta).uuid;
          if (this.matcap && this.matcap.isTexture)
            data.matcap = this.matcap.toJSON(meta).uuid;
          if (this.alphaMap && this.alphaMap.isTexture)
            data.alphaMap = this.alphaMap.toJSON(meta).uuid;
          if (this.lightMap && this.lightMap.isTexture) {
            data.lightMap = this.lightMap.toJSON(meta).uuid;
            data.lightMapIntensity = this.lightMapIntensity;
          }
          if (this.aoMap && this.aoMap.isTexture) {
            data.aoMap = this.aoMap.toJSON(meta).uuid;
            data.aoMapIntensity = this.aoMapIntensity;
          }
          if (this.bumpMap && this.bumpMap.isTexture) {
            data.bumpMap = this.bumpMap.toJSON(meta).uuid;
            data.bumpScale = this.bumpScale;
          }
          if (this.normalMap && this.normalMap.isTexture) {
            data.normalMap = this.normalMap.toJSON(meta).uuid;
            data.normalMapType = this.normalMapType;
            data.normalScale = this.normalScale.toArray();
          }
          if (this.displacementMap && this.displacementMap.isTexture) {
            data.displacementMap = this.displacementMap.toJSON(meta).uuid;
            data.displacementScale = this.displacementScale;
            data.displacementBias = this.displacementBias;
          }
          if (this.roughnessMap && this.roughnessMap.isTexture)
            data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
          if (this.metalnessMap && this.metalnessMap.isTexture)
            data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
          if (this.emissiveMap && this.emissiveMap.isTexture)
            data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
          if (this.specularMap && this.specularMap.isTexture)
            data.specularMap = this.specularMap.toJSON(meta).uuid;
          if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
            data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
          if (this.specularColorMap && this.specularColorMap.isTexture)
            data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
          if (this.envMap && this.envMap.isTexture) {
            data.envMap = this.envMap.toJSON(meta).uuid;
            if (this.combine !== void 0)
              data.combine = this.combine;
          }
          if (this.envMapIntensity !== void 0)
            data.envMapIntensity = this.envMapIntensity;
          if (this.reflectivity !== void 0)
            data.reflectivity = this.reflectivity;
          if (this.refractionRatio !== void 0)
            data.refractionRatio = this.refractionRatio;
          if (this.gradientMap && this.gradientMap.isTexture) {
            data.gradientMap = this.gradientMap.toJSON(meta).uuid;
          }
          if (this.transmission !== void 0)
            data.transmission = this.transmission;
          if (this.transmissionMap && this.transmissionMap.isTexture)
            data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
          if (this.thickness !== void 0)
            data.thickness = this.thickness;
          if (this.thicknessMap && this.thicknessMap.isTexture)
            data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
          if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity)
            data.attenuationDistance = this.attenuationDistance;
          if (this.attenuationColor !== void 0)
            data.attenuationColor = this.attenuationColor.getHex();
          if (this.size !== void 0)
            data.size = this.size;
          if (this.shadowSide !== null)
            data.shadowSide = this.shadowSide;
          if (this.sizeAttenuation !== void 0)
            data.sizeAttenuation = this.sizeAttenuation;
          if (this.blending !== NormalBlending)
            data.blending = this.blending;
          if (this.side !== FrontSide)
            data.side = this.side;
          if (this.vertexColors)
            data.vertexColors = true;
          if (this.opacity < 1)
            data.opacity = this.opacity;
          if (this.transparent === true)
            data.transparent = this.transparent;
          data.depthFunc = this.depthFunc;
          data.depthTest = this.depthTest;
          data.depthWrite = this.depthWrite;
          data.colorWrite = this.colorWrite;
          data.stencilWrite = this.stencilWrite;
          data.stencilWriteMask = this.stencilWriteMask;
          data.stencilFunc = this.stencilFunc;
          data.stencilRef = this.stencilRef;
          data.stencilFuncMask = this.stencilFuncMask;
          data.stencilFail = this.stencilFail;
          data.stencilZFail = this.stencilZFail;
          data.stencilZPass = this.stencilZPass;
          if (this.rotation !== void 0 && this.rotation !== 0)
            data.rotation = this.rotation;
          if (this.polygonOffset === true)
            data.polygonOffset = true;
          if (this.polygonOffsetFactor !== 0)
            data.polygonOffsetFactor = this.polygonOffsetFactor;
          if (this.polygonOffsetUnits !== 0)
            data.polygonOffsetUnits = this.polygonOffsetUnits;
          if (this.linewidth !== void 0 && this.linewidth !== 1)
            data.linewidth = this.linewidth;
          if (this.dashSize !== void 0)
            data.dashSize = this.dashSize;
          if (this.gapSize !== void 0)
            data.gapSize = this.gapSize;
          if (this.scale !== void 0)
            data.scale = this.scale;
          if (this.dithering === true)
            data.dithering = true;
          if (this.alphaTest > 0)
            data.alphaTest = this.alphaTest;
          if (this.alphaHash === true)
            data.alphaHash = this.alphaHash;
          if (this.alphaToCoverage === true)
            data.alphaToCoverage = this.alphaToCoverage;
          if (this.premultipliedAlpha === true)
            data.premultipliedAlpha = this.premultipliedAlpha;
          if (this.forceSinglePass === true)
            data.forceSinglePass = this.forceSinglePass;
          if (this.wireframe === true)
            data.wireframe = this.wireframe;
          if (this.wireframeLinewidth > 1)
            data.wireframeLinewidth = this.wireframeLinewidth;
          if (this.wireframeLinecap !== "round")
            data.wireframeLinecap = this.wireframeLinecap;
          if (this.wireframeLinejoin !== "round")
            data.wireframeLinejoin = this.wireframeLinejoin;
          if (this.flatShading === true)
            data.flatShading = this.flatShading;
          if (this.visible === false)
            data.visible = false;
          if (this.toneMapped === false)
            data.toneMapped = false;
          if (this.fog === false)
            data.fog = false;
          if (Object.keys(this.userData).length > 0)
            data.userData = this.userData;
          function extractFromCache(cache2) {
            const values = [];
            for (const key in cache2) {
              const data2 = cache2[key];
              delete data2.metadata;
              values.push(data2);
            }
            return values;
          }
          if (isRootObject) {
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            if (textures.length > 0)
              data.textures = textures;
            if (images.length > 0)
              data.images = images;
          }
          return data;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(source) {
          this.name = source.name;
          this.blending = source.blending;
          this.side = source.side;
          this.vertexColors = source.vertexColors;
          this.opacity = source.opacity;
          this.transparent = source.transparent;
          this.blendSrc = source.blendSrc;
          this.blendDst = source.blendDst;
          this.blendEquation = source.blendEquation;
          this.blendSrcAlpha = source.blendSrcAlpha;
          this.blendDstAlpha = source.blendDstAlpha;
          this.blendEquationAlpha = source.blendEquationAlpha;
          this.depthFunc = source.depthFunc;
          this.depthTest = source.depthTest;
          this.depthWrite = source.depthWrite;
          this.stencilWriteMask = source.stencilWriteMask;
          this.stencilFunc = source.stencilFunc;
          this.stencilRef = source.stencilRef;
          this.stencilFuncMask = source.stencilFuncMask;
          this.stencilFail = source.stencilFail;
          this.stencilZFail = source.stencilZFail;
          this.stencilZPass = source.stencilZPass;
          this.stencilWrite = source.stencilWrite;
          const srcPlanes = source.clippingPlanes;
          let dstPlanes = null;
          if (srcPlanes !== null) {
            const n = srcPlanes.length;
            dstPlanes = new Array(n);
            for (let i = 0; i !== n; ++i) {
              dstPlanes[i] = srcPlanes[i].clone();
            }
          }
          this.clippingPlanes = dstPlanes;
          this.clipIntersection = source.clipIntersection;
          this.clipShadows = source.clipShadows;
          this.shadowSide = source.shadowSide;
          this.colorWrite = source.colorWrite;
          this.precision = source.precision;
          this.polygonOffset = source.polygonOffset;
          this.polygonOffsetFactor = source.polygonOffsetFactor;
          this.polygonOffsetUnits = source.polygonOffsetUnits;
          this.dithering = source.dithering;
          this.alphaTest = source.alphaTest;
          this.alphaHash = source.alphaHash;
          this.alphaToCoverage = source.alphaToCoverage;
          this.premultipliedAlpha = source.premultipliedAlpha;
          this.forceSinglePass = source.forceSinglePass;
          this.visible = source.visible;
          this.toneMapped = source.toneMapped;
          this.userData = JSON.parse(JSON.stringify(source.userData));
          return this;
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        set needsUpdate(value) {
          if (value === true)
            this.version++;
        }
      };
      _colorKeywords = {
        "aliceblue": 15792383,
        "antiquewhite": 16444375,
        "aqua": 65535,
        "aquamarine": 8388564,
        "azure": 15794175,
        "beige": 16119260,
        "bisque": 16770244,
        "black": 0,
        "blanchedalmond": 16772045,
        "blue": 255,
        "blueviolet": 9055202,
        "brown": 10824234,
        "burlywood": 14596231,
        "cadetblue": 6266528,
        "chartreuse": 8388352,
        "chocolate": 13789470,
        "coral": 16744272,
        "cornflowerblue": 6591981,
        "cornsilk": 16775388,
        "crimson": 14423100,
        "cyan": 65535,
        "darkblue": 139,
        "darkcyan": 35723,
        "darkgoldenrod": 12092939,
        "darkgray": 11119017,
        "darkgreen": 25600,
        "darkgrey": 11119017,
        "darkkhaki": 12433259,
        "darkmagenta": 9109643,
        "darkolivegreen": 5597999,
        "darkorange": 16747520,
        "darkorchid": 10040012,
        "darkred": 9109504,
        "darksalmon": 15308410,
        "darkseagreen": 9419919,
        "darkslateblue": 4734347,
        "darkslategray": 3100495,
        "darkslategrey": 3100495,
        "darkturquoise": 52945,
        "darkviolet": 9699539,
        "deeppink": 16716947,
        "deepskyblue": 49151,
        "dimgray": 6908265,
        "dimgrey": 6908265,
        "dodgerblue": 2003199,
        "firebrick": 11674146,
        "floralwhite": 16775920,
        "forestgreen": 2263842,
        "fuchsia": 16711935,
        "gainsboro": 14474460,
        "ghostwhite": 16316671,
        "gold": 16766720,
        "goldenrod": 14329120,
        "gray": 8421504,
        "green": 32768,
        "greenyellow": 11403055,
        "grey": 8421504,
        "honeydew": 15794160,
        "hotpink": 16738740,
        "indianred": 13458524,
        "indigo": 4915330,
        "ivory": 16777200,
        "khaki": 15787660,
        "lavender": 15132410,
        "lavenderblush": 16773365,
        "lawngreen": 8190976,
        "lemonchiffon": 16775885,
        "lightblue": 11393254,
        "lightcoral": 15761536,
        "lightcyan": 14745599,
        "lightgoldenrodyellow": 16448210,
        "lightgray": 13882323,
        "lightgreen": 9498256,
        "lightgrey": 13882323,
        "lightpink": 16758465,
        "lightsalmon": 16752762,
        "lightseagreen": 2142890,
        "lightskyblue": 8900346,
        "lightslategray": 7833753,
        "lightslategrey": 7833753,
        "lightsteelblue": 11584734,
        "lightyellow": 16777184,
        "lime": 65280,
        "limegreen": 3329330,
        "linen": 16445670,
        "magenta": 16711935,
        "maroon": 8388608,
        "mediumaquamarine": 6737322,
        "mediumblue": 205,
        "mediumorchid": 12211667,
        "mediumpurple": 9662683,
        "mediumseagreen": 3978097,
        "mediumslateblue": 8087790,
        "mediumspringgreen": 64154,
        "mediumturquoise": 4772300,
        "mediumvioletred": 13047173,
        "midnightblue": 1644912,
        "mintcream": 16121850,
        "mistyrose": 16770273,
        "moccasin": 16770229,
        "navajowhite": 16768685,
        "navy": 128,
        "oldlace": 16643558,
        "olive": 8421376,
        "olivedrab": 7048739,
        "orange": 16753920,
        "orangered": 16729344,
        "orchid": 14315734,
        "palegoldenrod": 15657130,
        "palegreen": 10025880,
        "paleturquoise": 11529966,
        "palevioletred": 14381203,
        "papayawhip": 16773077,
        "peachpuff": 16767673,
        "peru": 13468991,
        "pink": 16761035,
        "plum": 14524637,
        "powderblue": 11591910,
        "purple": 8388736,
        "rebeccapurple": 6697881,
        "red": 16711680,
        "rosybrown": 12357519,
        "royalblue": 4286945,
        "saddlebrown": 9127187,
        "salmon": 16416882,
        "sandybrown": 16032864,
        "seagreen": 3050327,
        "seashell": 16774638,
        "sienna": 10506797,
        "silver": 12632256,
        "skyblue": 8900331,
        "slateblue": 6970061,
        "slategray": 7372944,
        "slategrey": 7372944,
        "snow": 16775930,
        "springgreen": 65407,
        "steelblue": 4620980,
        "tan": 13808780,
        "teal": 32896,
        "thistle": 14204888,
        "tomato": 16737095,
        "turquoise": 4251856,
        "violet": 15631086,
        "wheat": 16113331,
        "white": 16777215,
        "whitesmoke": 16119285,
        "yellow": 16776960,
        "yellowgreen": 10145074
      };
      _hslA = { h: 0, s: 0, l: 0 };
      _hslB = { h: 0, s: 0, l: 0 };
      Color = class {
        constructor(r, g, b) {
          this.isColor = true;
          this.r = 1;
          this.g = 1;
          this.b = 1;
          return this.set(r, g, b);
        }
        set(r, g, b) {
          if (g === void 0 && b === void 0) {
            const value = r;
            if (value && value.isColor) {
              this.copy(value);
            } else if (typeof value === "number") {
              this.setHex(value);
            } else if (typeof value === "string") {
              this.setStyle(value);
            }
          } else {
            this.setRGB(r, g, b);
          }
          return this;
        }
        setScalar(scalar) {
          this.r = scalar;
          this.g = scalar;
          this.b = scalar;
          return this;
        }
        setHex(hex, colorSpace = SRGBColorSpace) {
          hex = Math.floor(hex);
          this.r = (hex >> 16 & 255) / 255;
          this.g = (hex >> 8 & 255) / 255;
          this.b = (hex & 255) / 255;
          ColorManagement.toWorkingColorSpace(this, colorSpace);
          return this;
        }
        setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
          this.r = r;
          this.g = g;
          this.b = b;
          ColorManagement.toWorkingColorSpace(this, colorSpace);
          return this;
        }
        setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
          h = euclideanModulo(h, 1);
          s = clamp(s, 0, 1);
          l = clamp(l, 0, 1);
          if (s === 0) {
            this.r = this.g = this.b = l;
          } else {
            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
            const q = 2 * l - p;
            this.r = hue2rgb(q, p, h + 1 / 3);
            this.g = hue2rgb(q, p, h);
            this.b = hue2rgb(q, p, h - 1 / 3);
          }
          ColorManagement.toWorkingColorSpace(this, colorSpace);
          return this;
        }
        setStyle(style, colorSpace = SRGBColorSpace) {
          function handleAlpha(string) {
            if (string === void 0)
              return;
            if (parseFloat(string) < 1) {
              console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
            }
          }
          let m;
          if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
            let color;
            const name = m[1];
            const components = m[2];
            switch (name) {
              case "rgb":
              case "rgba":
                if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                  handleAlpha(color[4]);
                  return this.setRGB(
                    Math.min(255, parseInt(color[1], 10)) / 255,
                    Math.min(255, parseInt(color[2], 10)) / 255,
                    Math.min(255, parseInt(color[3], 10)) / 255,
                    colorSpace
                  );
                }
                if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                  handleAlpha(color[4]);
                  return this.setRGB(
                    Math.min(100, parseInt(color[1], 10)) / 100,
                    Math.min(100, parseInt(color[2], 10)) / 100,
                    Math.min(100, parseInt(color[3], 10)) / 100,
                    colorSpace
                  );
                }
                break;
              case "hsl":
              case "hsla":
                if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                  handleAlpha(color[4]);
                  return this.setHSL(
                    parseFloat(color[1]) / 360,
                    parseFloat(color[2]) / 100,
                    parseFloat(color[3]) / 100,
                    colorSpace
                  );
                }
                break;
              default:
                console.warn("THREE.Color: Unknown color model " + style);
            }
          } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
            const hex = m[1];
            const size = hex.length;
            if (size === 3) {
              return this.setRGB(
                parseInt(hex.charAt(0), 16) / 15,
                parseInt(hex.charAt(1), 16) / 15,
                parseInt(hex.charAt(2), 16) / 15,
                colorSpace
              );
            } else if (size === 6) {
              return this.setHex(parseInt(hex, 16), colorSpace);
            } else {
              console.warn("THREE.Color: Invalid hex color " + style);
            }
          } else if (style && style.length > 0) {
            return this.setColorName(style, colorSpace);
          }
          return this;
        }
        setColorName(style, colorSpace = SRGBColorSpace) {
          const hex = _colorKeywords[style.toLowerCase()];
          if (hex !== void 0) {
            this.setHex(hex, colorSpace);
          } else {
            console.warn("THREE.Color: Unknown color " + style);
          }
          return this;
        }
        clone() {
          return new this.constructor(this.r, this.g, this.b);
        }
        copy(color) {
          this.r = color.r;
          this.g = color.g;
          this.b = color.b;
          return this;
        }
        copySRGBToLinear(color) {
          this.r = SRGBToLinear(color.r);
          this.g = SRGBToLinear(color.g);
          this.b = SRGBToLinear(color.b);
          return this;
        }
        copyLinearToSRGB(color) {
          this.r = LinearToSRGB(color.r);
          this.g = LinearToSRGB(color.g);
          this.b = LinearToSRGB(color.b);
          return this;
        }
        convertSRGBToLinear() {
          this.copySRGBToLinear(this);
          return this;
        }
        convertLinearToSRGB() {
          this.copyLinearToSRGB(this);
          return this;
        }
        getHex(colorSpace = SRGBColorSpace) {
          ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
          return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
        }
        getHexString(colorSpace = SRGBColorSpace) {
          return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
        }
        getHSL(target2, colorSpace = ColorManagement.workingColorSpace) {
          ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
          const r = _color.r, g = _color.g, b = _color.b;
          const max = Math.max(r, g, b);
          const min = Math.min(r, g, b);
          let hue, saturation;
          const lightness = (min + max) / 2;
          if (min === max) {
            hue = 0;
            saturation = 0;
          } else {
            const delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch (max) {
              case r:
                hue = (g - b) / delta + (g < b ? 6 : 0);
                break;
              case g:
                hue = (b - r) / delta + 2;
                break;
              case b:
                hue = (r - g) / delta + 4;
                break;
            }
            hue /= 6;
          }
          target2.h = hue;
          target2.s = saturation;
          target2.l = lightness;
          return target2;
        }
        getRGB(target2, colorSpace = ColorManagement.workingColorSpace) {
          ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
          target2.r = _color.r;
          target2.g = _color.g;
          target2.b = _color.b;
          return target2;
        }
        getStyle(colorSpace = SRGBColorSpace) {
          ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
          const r = _color.r, g = _color.g, b = _color.b;
          if (colorSpace !== SRGBColorSpace) {
            return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
          }
          return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
        }
        offsetHSL(h, s, l) {
          this.getHSL(_hslA);
          _hslA.h += h;
          _hslA.s += s;
          _hslA.l += l;
          this.setHSL(_hslA.h, _hslA.s, _hslA.l);
          return this;
        }
        add(color) {
          this.r += color.r;
          this.g += color.g;
          this.b += color.b;
          return this;
        }
        addColors(color1, color2) {
          this.r = color1.r + color2.r;
          this.g = color1.g + color2.g;
          this.b = color1.b + color2.b;
          return this;
        }
        addScalar(s) {
          this.r += s;
          this.g += s;
          this.b += s;
          return this;
        }
        sub(color) {
          this.r = Math.max(0, this.r - color.r);
          this.g = Math.max(0, this.g - color.g);
          this.b = Math.max(0, this.b - color.b);
          return this;
        }
        multiply(color) {
          this.r *= color.r;
          this.g *= color.g;
          this.b *= color.b;
          return this;
        }
        multiplyScalar(s) {
          this.r *= s;
          this.g *= s;
          this.b *= s;
          return this;
        }
        lerp(color, alpha) {
          this.r += (color.r - this.r) * alpha;
          this.g += (color.g - this.g) * alpha;
          this.b += (color.b - this.b) * alpha;
          return this;
        }
        lerpColors(color1, color2, alpha) {
          this.r = color1.r + (color2.r - color1.r) * alpha;
          this.g = color1.g + (color2.g - color1.g) * alpha;
          this.b = color1.b + (color2.b - color1.b) * alpha;
          return this;
        }
        lerpHSL(color, alpha) {
          this.getHSL(_hslA);
          color.getHSL(_hslB);
          const h = lerp(_hslA.h, _hslB.h, alpha);
          const s = lerp(_hslA.s, _hslB.s, alpha);
          const l = lerp(_hslA.l, _hslB.l, alpha);
          this.setHSL(h, s, l);
          return this;
        }
        setFromVector3(v) {
          this.r = v.x;
          this.g = v.y;
          this.b = v.z;
          return this;
        }
        applyMatrix3(m) {
          const r = this.r, g = this.g, b = this.b;
          const e = m.elements;
          this.r = e[0] * r + e[3] * g + e[6] * b;
          this.g = e[1] * r + e[4] * g + e[7] * b;
          this.b = e[2] * r + e[5] * g + e[8] * b;
          return this;
        }
        equals(c) {
          return c.r === this.r && c.g === this.g && c.b === this.b;
        }
        fromArray(array, offset = 0) {
          this.r = array[offset];
          this.g = array[offset + 1];
          this.b = array[offset + 2];
          return this;
        }
        toArray(array = [], offset = 0) {
          array[offset] = this.r;
          array[offset + 1] = this.g;
          array[offset + 2] = this.b;
          return array;
        }
        fromBufferAttribute(attribute, index) {
          this.r = attribute.getX(index);
          this.g = attribute.getY(index);
          this.b = attribute.getZ(index);
          return this;
        }
        toJSON() {
          return this.getHex();
        }
        *[Symbol.iterator]() {
          yield this.r;
          yield this.g;
          yield this.b;
        }
      };
      _color = /* @__PURE__ */ new Color();
      Color.NAMES = _colorKeywords;
      MeshBasicMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshBasicMaterial = true;
          this.type = "MeshBasicMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.lightMap = null;
          this.lightMapIntensity = 1;
          this.aoMap = null;
          this.aoMapIntensity = 1;
          this.specularMap = null;
          this.alphaMap = null;
          this.envMap = null;
          this.combine = MultiplyOperation;
          this.reflectivity = 1;
          this.refractionRatio = 0.98;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.wireframeLinecap = "round";
          this.wireframeLinejoin = "round";
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.lightMap = source.lightMap;
          this.lightMapIntensity = source.lightMapIntensity;
          this.aoMap = source.aoMap;
          this.aoMapIntensity = source.aoMapIntensity;
          this.specularMap = source.specularMap;
          this.alphaMap = source.alphaMap;
          this.envMap = source.envMap;
          this.combine = source.combine;
          this.reflectivity = source.reflectivity;
          this.refractionRatio = source.refractionRatio;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.wireframeLinecap = source.wireframeLinecap;
          this.wireframeLinejoin = source.wireframeLinejoin;
          this.fog = source.fog;
          return this;
        }
      };
      _tables = /* @__PURE__ */ _generateTables();
      DataUtils = {
        toHalfFloat,
        fromHalfFloat
      };
      _vector$8 = /* @__PURE__ */ new Vector3();
      _vector2$1 = /* @__PURE__ */ new Vector2();
      BufferAttribute = class {
        constructor(array, itemSize, normalized = false) {
          if (Array.isArray(array)) {
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          }
          this.isBufferAttribute = true;
          this.name = "";
          this.array = array;
          this.itemSize = itemSize;
          this.count = array !== void 0 ? array.length / itemSize : 0;
          this.normalized = normalized;
          this.usage = StaticDrawUsage;
          this.updateRange = { offset: 0, count: -1 };
          this.gpuType = FloatType;
          this.version = 0;
        }
        onUploadCallback() {
        }
        set needsUpdate(value) {
          if (value === true)
            this.version++;
        }
        setUsage(value) {
          this.usage = value;
          return this;
        }
        copy(source) {
          this.name = source.name;
          this.array = new source.array.constructor(source.array);
          this.itemSize = source.itemSize;
          this.count = source.count;
          this.normalized = source.normalized;
          this.usage = source.usage;
          this.gpuType = source.gpuType;
          return this;
        }
        copyAt(index1, attribute, index2) {
          index1 *= this.itemSize;
          index2 *= attribute.itemSize;
          for (let i = 0, l = this.itemSize; i < l; i++) {
            this.array[index1 + i] = attribute.array[index2 + i];
          }
          return this;
        }
        copyArray(array) {
          this.array.set(array);
          return this;
        }
        applyMatrix3(m) {
          if (this.itemSize === 2) {
            for (let i = 0, l = this.count; i < l; i++) {
              _vector2$1.fromBufferAttribute(this, i);
              _vector2$1.applyMatrix3(m);
              this.setXY(i, _vector2$1.x, _vector2$1.y);
            }
          } else if (this.itemSize === 3) {
            for (let i = 0, l = this.count; i < l; i++) {
              _vector$8.fromBufferAttribute(this, i);
              _vector$8.applyMatrix3(m);
              this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
            }
          }
          return this;
        }
        applyMatrix4(m) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyMatrix4(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
          }
          return this;
        }
        applyNormalMatrix(m) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyNormalMatrix(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
          }
          return this;
        }
        transformDirection(m) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.transformDirection(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
          }
          return this;
        }
        set(value, offset = 0) {
          this.array.set(value, offset);
          return this;
        }
        getComponent(index, component) {
          let value = this.array[index * this.itemSize + component];
          if (this.normalized)
            value = denormalize(value, this.array);
          return value;
        }
        setComponent(index, component, value) {
          if (this.normalized)
            value = normalize(value, this.array);
          this.array[index * this.itemSize + component] = value;
          return this;
        }
        getX(index) {
          let x = this.array[index * this.itemSize];
          if (this.normalized)
            x = denormalize(x, this.array);
          return x;
        }
        setX(index, x) {
          if (this.normalized)
            x = normalize(x, this.array);
          this.array[index * this.itemSize] = x;
          return this;
        }
        getY(index) {
          let y = this.array[index * this.itemSize + 1];
          if (this.normalized)
            y = denormalize(y, this.array);
          return y;
        }
        setY(index, y) {
          if (this.normalized)
            y = normalize(y, this.array);
          this.array[index * this.itemSize + 1] = y;
          return this;
        }
        getZ(index) {
          let z = this.array[index * this.itemSize + 2];
          if (this.normalized)
            z = denormalize(z, this.array);
          return z;
        }
        setZ(index, z) {
          if (this.normalized)
            z = normalize(z, this.array);
          this.array[index * this.itemSize + 2] = z;
          return this;
        }
        getW(index) {
          let w = this.array[index * this.itemSize + 3];
          if (this.normalized)
            w = denormalize(w, this.array);
          return w;
        }
        setW(index, w) {
          if (this.normalized)
            w = normalize(w, this.array);
          this.array[index * this.itemSize + 3] = w;
          return this;
        }
        setXY(index, x, y) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
          }
          this.array[index + 0] = x;
          this.array[index + 1] = y;
          return this;
        }
        setXYZ(index, x, y, z) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
          }
          this.array[index + 0] = x;
          this.array[index + 1] = y;
          this.array[index + 2] = z;
          return this;
        }
        setXYZW(index, x, y, z, w) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
          }
          this.array[index + 0] = x;
          this.array[index + 1] = y;
          this.array[index + 2] = z;
          this.array[index + 3] = w;
          return this;
        }
        onUpload(callback) {
          this.onUploadCallback = callback;
          return this;
        }
        clone() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        }
        toJSON() {
          const data = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized
          };
          if (this.name !== "")
            data.name = this.name;
          if (this.usage !== StaticDrawUsage)
            data.usage = this.usage;
          if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)
            data.updateRange = this.updateRange;
          return data;
        }
      };
      Int8BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Int8Array(array), itemSize, normalized);
        }
      };
      Uint8BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Uint8Array(array), itemSize, normalized);
        }
      };
      Uint8ClampedBufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Uint8ClampedArray(array), itemSize, normalized);
        }
      };
      Int16BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Int16Array(array), itemSize, normalized);
        }
      };
      Uint16BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Uint16Array(array), itemSize, normalized);
        }
      };
      Int32BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Int32Array(array), itemSize, normalized);
        }
      };
      Uint32BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Uint32Array(array), itemSize, normalized);
        }
      };
      Float16BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Uint16Array(array), itemSize, normalized);
          this.isFloat16BufferAttribute = true;
        }
        getX(index) {
          let x = fromHalfFloat(this.array[index * this.itemSize]);
          if (this.normalized)
            x = denormalize(x, this.array);
          return x;
        }
        setX(index, x) {
          if (this.normalized)
            x = normalize(x, this.array);
          this.array[index * this.itemSize] = toHalfFloat(x);
          return this;
        }
        getY(index) {
          let y = fromHalfFloat(this.array[index * this.itemSize + 1]);
          if (this.normalized)
            y = denormalize(y, this.array);
          return y;
        }
        setY(index, y) {
          if (this.normalized)
            y = normalize(y, this.array);
          this.array[index * this.itemSize + 1] = toHalfFloat(y);
          return this;
        }
        getZ(index) {
          let z = fromHalfFloat(this.array[index * this.itemSize + 2]);
          if (this.normalized)
            z = denormalize(z, this.array);
          return z;
        }
        setZ(index, z) {
          if (this.normalized)
            z = normalize(z, this.array);
          this.array[index * this.itemSize + 2] = toHalfFloat(z);
          return this;
        }
        getW(index) {
          let w = fromHalfFloat(this.array[index * this.itemSize + 3]);
          if (this.normalized)
            w = denormalize(w, this.array);
          return w;
        }
        setW(index, w) {
          if (this.normalized)
            w = normalize(w, this.array);
          this.array[index * this.itemSize + 3] = toHalfFloat(w);
          return this;
        }
        setXY(index, x, y) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
          }
          this.array[index + 0] = toHalfFloat(x);
          this.array[index + 1] = toHalfFloat(y);
          return this;
        }
        setXYZ(index, x, y, z) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
          }
          this.array[index + 0] = toHalfFloat(x);
          this.array[index + 1] = toHalfFloat(y);
          this.array[index + 2] = toHalfFloat(z);
          return this;
        }
        setXYZW(index, x, y, z, w) {
          index *= this.itemSize;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
          }
          this.array[index + 0] = toHalfFloat(x);
          this.array[index + 1] = toHalfFloat(y);
          this.array[index + 2] = toHalfFloat(z);
          this.array[index + 3] = toHalfFloat(w);
          return this;
        }
      };
      Float32BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Float32Array(array), itemSize, normalized);
        }
      };
      Float64BufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized) {
          super(new Float64Array(array), itemSize, normalized);
        }
      };
      _id$2 = 0;
      _m1 = /* @__PURE__ */ new Matrix4();
      _obj = /* @__PURE__ */ new Object3D();
      _offset = /* @__PURE__ */ new Vector3();
      _box$1 = /* @__PURE__ */ new Box3();
      _boxMorphTargets = /* @__PURE__ */ new Box3();
      _vector$7 = /* @__PURE__ */ new Vector3();
      BufferGeometry = class _BufferGeometry extends EventDispatcher {
        constructor() {
          super();
          this.isBufferGeometry = true;
          Object.defineProperty(this, "id", { value: _id$2++ });
          this.uuid = generateUUID();
          this.name = "";
          this.type = "BufferGeometry";
          this.index = null;
          this.attributes = {};
          this.morphAttributes = {};
          this.morphTargetsRelative = false;
          this.groups = [];
          this.boundingBox = null;
          this.boundingSphere = null;
          this.drawRange = { start: 0, count: Infinity };
          this.userData = {};
        }
        getIndex() {
          return this.index;
        }
        setIndex(index) {
          if (Array.isArray(index)) {
            this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
          } else {
            this.index = index;
          }
          return this;
        }
        getAttribute(name) {
          return this.attributes[name];
        }
        setAttribute(name, attribute) {
          this.attributes[name] = attribute;
          return this;
        }
        deleteAttribute(name) {
          delete this.attributes[name];
          return this;
        }
        hasAttribute(name) {
          return this.attributes[name] !== void 0;
        }
        addGroup(start, count, materialIndex = 0) {
          this.groups.push({
            start,
            count,
            materialIndex
          });
        }
        clearGroups() {
          this.groups = [];
        }
        setDrawRange(start, count) {
          this.drawRange.start = start;
          this.drawRange.count = count;
        }
        applyMatrix4(matrix) {
          const position3 = this.attributes.position;
          if (position3 !== void 0) {
            position3.applyMatrix4(matrix);
            position3.needsUpdate = true;
          }
          const normal = this.attributes.normal;
          if (normal !== void 0) {
            const normalMatrix = new Matrix3().getNormalMatrix(matrix);
            normal.applyNormalMatrix(normalMatrix);
            normal.needsUpdate = true;
          }
          const tangent = this.attributes.tangent;
          if (tangent !== void 0) {
            tangent.transformDirection(matrix);
            tangent.needsUpdate = true;
          }
          if (this.boundingBox !== null) {
            this.computeBoundingBox();
          }
          if (this.boundingSphere !== null) {
            this.computeBoundingSphere();
          }
          return this;
        }
        applyQuaternion(q) {
          _m1.makeRotationFromQuaternion(q);
          this.applyMatrix4(_m1);
          return this;
        }
        rotateX(angle) {
          _m1.makeRotationX(angle);
          this.applyMatrix4(_m1);
          return this;
        }
        rotateY(angle) {
          _m1.makeRotationY(angle);
          this.applyMatrix4(_m1);
          return this;
        }
        rotateZ(angle) {
          _m1.makeRotationZ(angle);
          this.applyMatrix4(_m1);
          return this;
        }
        translate(x, y, z) {
          _m1.makeTranslation(x, y, z);
          this.applyMatrix4(_m1);
          return this;
        }
        scale(x, y, z) {
          _m1.makeScale(x, y, z);
          this.applyMatrix4(_m1);
          return this;
        }
        lookAt(vector) {
          _obj.lookAt(vector);
          _obj.updateMatrix();
          this.applyMatrix4(_obj.matrix);
          return this;
        }
        center() {
          this.computeBoundingBox();
          this.boundingBox.getCenter(_offset).negate();
          this.translate(_offset.x, _offset.y, _offset.z);
          return this;
        }
        setFromPoints(points) {
          const position3 = [];
          for (let i = 0, l = points.length; i < l; i++) {
            const point = points[i];
            position3.push(point.x, point.y, point.z || 0);
          }
          this.setAttribute("position", new Float32BufferAttribute(position3, 3));
          return this;
        }
        computeBoundingBox() {
          if (this.boundingBox === null) {
            this.boundingBox = new Box3();
          }
          const position3 = this.attributes.position;
          const morphAttributesPosition = this.morphAttributes.position;
          if (position3 && position3.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingBox.set(
              new Vector3(-Infinity, -Infinity, -Infinity),
              new Vector3(Infinity, Infinity, Infinity)
            );
            return;
          }
          if (position3 !== void 0) {
            this.boundingBox.setFromBufferAttribute(position3);
            if (morphAttributesPosition) {
              for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
                const morphAttribute = morphAttributesPosition[i];
                _box$1.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                  _vector$7.addVectors(this.boundingBox.min, _box$1.min);
                  this.boundingBox.expandByPoint(_vector$7);
                  _vector$7.addVectors(this.boundingBox.max, _box$1.max);
                  this.boundingBox.expandByPoint(_vector$7);
                } else {
                  this.boundingBox.expandByPoint(_box$1.min);
                  this.boundingBox.expandByPoint(_box$1.max);
                }
              }
            }
          } else {
            this.boundingBox.makeEmpty();
          }
          if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
          }
        }
        computeBoundingSphere() {
          if (this.boundingSphere === null) {
            this.boundingSphere = new Sphere();
          }
          const position3 = this.attributes.position;
          const morphAttributesPosition = this.morphAttributes.position;
          if (position3 && position3.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingSphere.set(new Vector3(), Infinity);
            return;
          }
          if (position3) {
            const center = this.boundingSphere.center;
            _box$1.setFromBufferAttribute(position3);
            if (morphAttributesPosition) {
              for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
                const morphAttribute = morphAttributesPosition[i];
                _boxMorphTargets.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                  _vector$7.addVectors(_box$1.min, _boxMorphTargets.min);
                  _box$1.expandByPoint(_vector$7);
                  _vector$7.addVectors(_box$1.max, _boxMorphTargets.max);
                  _box$1.expandByPoint(_vector$7);
                } else {
                  _box$1.expandByPoint(_boxMorphTargets.min);
                  _box$1.expandByPoint(_boxMorphTargets.max);
                }
              }
            }
            _box$1.getCenter(center);
            let maxRadiusSq = 0;
            for (let i = 0, il = position3.count; i < il; i++) {
              _vector$7.fromBufferAttribute(position3, i);
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
            }
            if (morphAttributesPosition) {
              for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
                const morphAttribute = morphAttributesPosition[i];
                const morphTargetsRelative = this.morphTargetsRelative;
                for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
                  _vector$7.fromBufferAttribute(morphAttribute, j);
                  if (morphTargetsRelative) {
                    _offset.fromBufferAttribute(position3, j);
                    _vector$7.add(_offset);
                  }
                  maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
                }
              }
            }
            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
            if (isNaN(this.boundingSphere.radius)) {
              console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
            }
          }
        }
        computeTangents() {
          const index = this.index;
          const attributes = this.attributes;
          if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
            console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
            return;
          }
          const indices = index.array;
          const positions = attributes.position.array;
          const normals = attributes.normal.array;
          const uvs = attributes.uv.array;
          const nVertices = positions.length / 3;
          if (this.hasAttribute("tangent") === false) {
            this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
          }
          const tangents = this.getAttribute("tangent").array;
          const tan1 = [], tan2 = [];
          for (let i = 0; i < nVertices; i++) {
            tan1[i] = new Vector3();
            tan2[i] = new Vector3();
          }
          const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
          function handleTriangle(a, b, c) {
            vA.fromArray(positions, a * 3);
            vB.fromArray(positions, b * 3);
            vC.fromArray(positions, c * 3);
            uvA.fromArray(uvs, a * 2);
            uvB.fromArray(uvs, b * 2);
            uvC.fromArray(uvs, c * 2);
            vB.sub(vA);
            vC.sub(vA);
            uvB.sub(uvA);
            uvC.sub(uvA);
            const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
            if (!isFinite(r))
              return;
            sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
            tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);
            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
          }
          let groups = this.groups;
          if (groups.length === 0) {
            groups = [{
              start: 0,
              count: indices.length
            }];
          }
          for (let i = 0, il = groups.length; i < il; ++i) {
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for (let j = start, jl = start + count; j < jl; j += 3) {
              handleTriangle(
                indices[j + 0],
                indices[j + 1],
                indices[j + 2]
              );
            }
          }
          const tmp2 = new Vector3(), tmp22 = new Vector3();
          const n = new Vector3(), n2 = new Vector3();
          function handleVertex(v) {
            n.fromArray(normals, v * 3);
            n2.copy(n);
            const t = tan1[v];
            tmp2.copy(t);
            tmp2.sub(n.multiplyScalar(n.dot(t))).normalize();
            tmp22.crossVectors(n2, t);
            const test = tmp22.dot(tan2[v]);
            const w = test < 0 ? -1 : 1;
            tangents[v * 4] = tmp2.x;
            tangents[v * 4 + 1] = tmp2.y;
            tangents[v * 4 + 2] = tmp2.z;
            tangents[v * 4 + 3] = w;
          }
          for (let i = 0, il = groups.length; i < il; ++i) {
            const group = groups[i];
            const start = group.start;
            const count = group.count;
            for (let j = start, jl = start + count; j < jl; j += 3) {
              handleVertex(indices[j + 0]);
              handleVertex(indices[j + 1]);
              handleVertex(indices[j + 2]);
            }
          }
        }
        computeVertexNormals() {
          const index = this.index;
          const positionAttribute = this.getAttribute("position");
          if (positionAttribute !== void 0) {
            let normalAttribute = this.getAttribute("normal");
            if (normalAttribute === void 0) {
              normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
              this.setAttribute("normal", normalAttribute);
            } else {
              for (let i = 0, il = normalAttribute.count; i < il; i++) {
                normalAttribute.setXYZ(i, 0, 0, 0);
              }
            }
            const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
            const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
            const cb = new Vector3(), ab = new Vector3();
            if (index) {
              for (let i = 0, il = index.count; i < il; i += 3) {
                const vA = index.getX(i + 0);
                const vB = index.getX(i + 1);
                const vC = index.getX(i + 2);
                pA.fromBufferAttribute(positionAttribute, vA);
                pB.fromBufferAttribute(positionAttribute, vB);
                pC.fromBufferAttribute(positionAttribute, vC);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                nA.fromBufferAttribute(normalAttribute, vA);
                nB.fromBufferAttribute(normalAttribute, vB);
                nC.fromBufferAttribute(normalAttribute, vC);
                nA.add(cb);
                nB.add(cb);
                nC.add(cb);
                normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
              }
            } else {
              for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
                pA.fromBufferAttribute(positionAttribute, i + 0);
                pB.fromBufferAttribute(positionAttribute, i + 1);
                pC.fromBufferAttribute(positionAttribute, i + 2);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
              }
            }
            this.normalizeNormals();
            normalAttribute.needsUpdate = true;
          }
        }
        normalizeNormals() {
          const normals = this.attributes.normal;
          for (let i = 0, il = normals.count; i < il; i++) {
            _vector$7.fromBufferAttribute(normals, i);
            _vector$7.normalize();
            normals.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
          }
        }
        toNonIndexed() {
          function convertBufferAttribute(attribute, indices2) {
            const array = attribute.array;
            const itemSize = attribute.itemSize;
            const normalized = attribute.normalized;
            const array2 = new array.constructor(indices2.length * itemSize);
            let index = 0, index2 = 0;
            for (let i = 0, l = indices2.length; i < l; i++) {
              if (attribute.isInterleavedBufferAttribute) {
                index = indices2[i] * attribute.data.stride + attribute.offset;
              } else {
                index = indices2[i] * itemSize;
              }
              for (let j = 0; j < itemSize; j++) {
                array2[index2++] = array[index++];
              }
            }
            return new BufferAttribute(array2, itemSize, normalized);
          }
          if (this.index === null) {
            console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
            return this;
          }
          const geometry2 = new _BufferGeometry();
          const indices = this.index.array;
          const attributes = this.attributes;
          for (const name in attributes) {
            const attribute = attributes[name];
            const newAttribute = convertBufferAttribute(attribute, indices);
            geometry2.setAttribute(name, newAttribute);
          }
          const morphAttributes = this.morphAttributes;
          for (const name in morphAttributes) {
            const morphArray = [];
            const morphAttribute = morphAttributes[name];
            for (let i = 0, il = morphAttribute.length; i < il; i++) {
              const attribute = morphAttribute[i];
              const newAttribute = convertBufferAttribute(attribute, indices);
              morphArray.push(newAttribute);
            }
            geometry2.morphAttributes[name] = morphArray;
          }
          geometry2.morphTargetsRelative = this.morphTargetsRelative;
          const groups = this.groups;
          for (let i = 0, l = groups.length; i < l; i++) {
            const group = groups[i];
            geometry2.addGroup(group.start, group.count, group.materialIndex);
          }
          return geometry2;
        }
        toJSON() {
          const data = {
            metadata: {
              version: 4.6,
              type: "BufferGeometry",
              generator: "BufferGeometry.toJSON"
            }
          };
          data.uuid = this.uuid;
          data.type = this.type;
          if (this.name !== "")
            data.name = this.name;
          if (Object.keys(this.userData).length > 0)
            data.userData = this.userData;
          if (this.parameters !== void 0) {
            const parameters = this.parameters;
            for (const key in parameters) {
              if (parameters[key] !== void 0)
                data[key] = parameters[key];
            }
            return data;
          }
          data.data = { attributes: {} };
          const index = this.index;
          if (index !== null) {
            data.data.index = {
              type: index.array.constructor.name,
              array: Array.prototype.slice.call(index.array)
            };
          }
          const attributes = this.attributes;
          for (const key in attributes) {
            const attribute = attributes[key];
            data.data.attributes[key] = attribute.toJSON(data.data);
          }
          const morphAttributes = {};
          let hasMorphAttributes = false;
          for (const key in this.morphAttributes) {
            const attributeArray = this.morphAttributes[key];
            const array = [];
            for (let i = 0, il = attributeArray.length; i < il; i++) {
              const attribute = attributeArray[i];
              array.push(attribute.toJSON(data.data));
            }
            if (array.length > 0) {
              morphAttributes[key] = array;
              hasMorphAttributes = true;
            }
          }
          if (hasMorphAttributes) {
            data.data.morphAttributes = morphAttributes;
            data.data.morphTargetsRelative = this.morphTargetsRelative;
          }
          const groups = this.groups;
          if (groups.length > 0) {
            data.data.groups = JSON.parse(JSON.stringify(groups));
          }
          const boundingSphere = this.boundingSphere;
          if (boundingSphere !== null) {
            data.data.boundingSphere = {
              center: boundingSphere.center.toArray(),
              radius: boundingSphere.radius
            };
          }
          return data;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(source) {
          this.index = null;
          this.attributes = {};
          this.morphAttributes = {};
          this.groups = [];
          this.boundingBox = null;
          this.boundingSphere = null;
          const data = {};
          this.name = source.name;
          const index = source.index;
          if (index !== null) {
            this.setIndex(index.clone(data));
          }
          const attributes = source.attributes;
          for (const name in attributes) {
            const attribute = attributes[name];
            this.setAttribute(name, attribute.clone(data));
          }
          const morphAttributes = source.morphAttributes;
          for (const name in morphAttributes) {
            const array = [];
            const morphAttribute = morphAttributes[name];
            for (let i = 0, l = morphAttribute.length; i < l; i++) {
              array.push(morphAttribute[i].clone(data));
            }
            this.morphAttributes[name] = array;
          }
          this.morphTargetsRelative = source.morphTargetsRelative;
          const groups = source.groups;
          for (let i = 0, l = groups.length; i < l; i++) {
            const group = groups[i];
            this.addGroup(group.start, group.count, group.materialIndex);
          }
          const boundingBox = source.boundingBox;
          if (boundingBox !== null) {
            this.boundingBox = boundingBox.clone();
          }
          const boundingSphere = source.boundingSphere;
          if (boundingSphere !== null) {
            this.boundingSphere = boundingSphere.clone();
          }
          this.drawRange.start = source.drawRange.start;
          this.drawRange.count = source.drawRange.count;
          this.userData = source.userData;
          return this;
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      };
      _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
      _ray$3 = /* @__PURE__ */ new Ray();
      _sphere$5 = /* @__PURE__ */ new Sphere();
      _sphereHitAt = /* @__PURE__ */ new Vector3();
      _vA$1 = /* @__PURE__ */ new Vector3();
      _vB$1 = /* @__PURE__ */ new Vector3();
      _vC$1 = /* @__PURE__ */ new Vector3();
      _tempA = /* @__PURE__ */ new Vector3();
      _morphA = /* @__PURE__ */ new Vector3();
      _uvA$1 = /* @__PURE__ */ new Vector2();
      _uvB$1 = /* @__PURE__ */ new Vector2();
      _uvC$1 = /* @__PURE__ */ new Vector2();
      _normalA = /* @__PURE__ */ new Vector3();
      _normalB = /* @__PURE__ */ new Vector3();
      _normalC = /* @__PURE__ */ new Vector3();
      _intersectionPoint = /* @__PURE__ */ new Vector3();
      _intersectionPointWorld = /* @__PURE__ */ new Vector3();
      Mesh = class extends Object3D {
        constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
          super();
          this.isMesh = true;
          this.type = "Mesh";
          this.geometry = geometry;
          this.material = material;
          this.updateMorphTargets();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          if (source.morphTargetInfluences !== void 0) {
            this.morphTargetInfluences = source.morphTargetInfluences.slice();
          }
          if (source.morphTargetDictionary !== void 0) {
            this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
          }
          this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
          this.geometry = source.geometry;
          return this;
        }
        updateMorphTargets() {
          const geometry = this.geometry;
          const morphAttributes = geometry.morphAttributes;
          const keys = Object.keys(morphAttributes);
          if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== void 0) {
              this.morphTargetInfluences = [];
              this.morphTargetDictionary = {};
              for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
                const name = morphAttribute[m].name || String(m);
                this.morphTargetInfluences.push(0);
                this.morphTargetDictionary[name] = m;
              }
            }
          }
        }
        getVertexPosition(index, target2) {
          const geometry = this.geometry;
          const position3 = geometry.attributes.position;
          const morphPosition = geometry.morphAttributes.position;
          const morphTargetsRelative = geometry.morphTargetsRelative;
          target2.fromBufferAttribute(position3, index);
          const morphInfluences = this.morphTargetInfluences;
          if (morphPosition && morphInfluences) {
            _morphA.set(0, 0, 0);
            for (let i = 0, il = morphPosition.length; i < il; i++) {
              const influence = morphInfluences[i];
              const morphAttribute = morphPosition[i];
              if (influence === 0)
                continue;
              _tempA.fromBufferAttribute(morphAttribute, index);
              if (morphTargetsRelative) {
                _morphA.addScaledVector(_tempA, influence);
              } else {
                _morphA.addScaledVector(_tempA.sub(target2), influence);
              }
            }
            target2.add(_morphA);
          }
          return target2;
        }
        raycast(raycaster, intersects2) {
          const geometry = this.geometry;
          const material = this.material;
          const matrixWorld = this.matrixWorld;
          if (material === void 0)
            return;
          if (geometry.boundingSphere === null)
            geometry.computeBoundingSphere();
          _sphere$5.copy(geometry.boundingSphere);
          _sphere$5.applyMatrix4(matrixWorld);
          _ray$3.copy(raycaster.ray).recast(raycaster.near);
          if (_sphere$5.containsPoint(_ray$3.origin) === false) {
            if (_ray$3.intersectSphere(_sphere$5, _sphereHitAt) === null)
              return;
            if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2)
              return;
          }
          _inverseMatrix$3.copy(matrixWorld).invert();
          _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
          if (geometry.boundingBox !== null) {
            if (_ray$3.intersectsBox(geometry.boundingBox) === false)
              return;
          }
          this._computeIntersections(raycaster, intersects2, _ray$3);
        }
        _computeIntersections(raycaster, intersects2, rayLocalSpace) {
          let intersection;
          const geometry = this.geometry;
          const material = this.material;
          const index = geometry.index;
          const position3 = geometry.attributes.position;
          const uv = geometry.attributes.uv;
          const uv1 = geometry.attributes.uv1;
          const normal = geometry.attributes.normal;
          const groups = geometry.groups;
          const drawRange = geometry.drawRange;
          if (index !== null) {
            if (Array.isArray(material)) {
              for (let i = 0, il = groups.length; i < il; i++) {
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for (let j = start, jl = end; j < jl; j += 3) {
                  const a = index.getX(j);
                  const b = index.getX(j + 1);
                  const c = index.getX(j + 2);
                  intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                  if (intersection) {
                    intersection.faceIndex = Math.floor(j / 3);
                    intersection.face.materialIndex = group.materialIndex;
                    intersects2.push(intersection);
                  }
                }
              }
            } else {
              const start = Math.max(0, drawRange.start);
              const end = Math.min(index.count, drawRange.start + drawRange.count);
              for (let i = start, il = end; i < il; i += 3) {
                const a = index.getX(i);
                const b = index.getX(i + 1);
                const c = index.getX(i + 2);
                intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(i / 3);
                  intersects2.push(intersection);
                }
              }
            }
          } else if (position3 !== void 0) {
            if (Array.isArray(material)) {
              for (let i = 0, il = groups.length; i < il; i++) {
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                const start = Math.max(group.start, drawRange.start);
                const end = Math.min(position3.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                for (let j = start, jl = end; j < jl; j += 3) {
                  const a = j;
                  const b = j + 1;
                  const c = j + 2;
                  intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                  if (intersection) {
                    intersection.faceIndex = Math.floor(j / 3);
                    intersection.face.materialIndex = group.materialIndex;
                    intersects2.push(intersection);
                  }
                }
              }
            } else {
              const start = Math.max(0, drawRange.start);
              const end = Math.min(position3.count, drawRange.start + drawRange.count);
              for (let i = start, il = end; i < il; i += 3) {
                const a = i;
                const b = i + 1;
                const c = i + 2;
                intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(i / 3);
                  intersects2.push(intersection);
                }
              }
            }
          }
        }
      };
      BoxGeometry = class _BoxGeometry extends BufferGeometry {
        constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
          super();
          this.type = "BoxGeometry";
          this.parameters = {
            width,
            height,
            depth,
            widthSegments,
            heightSegments,
            depthSegments
          };
          const scope = this;
          widthSegments = Math.floor(widthSegments);
          heightSegments = Math.floor(heightSegments);
          depthSegments = Math.floor(depthSegments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          let numberOfVertices = 0;
          let groupStart = 0;
          buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
          buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
          buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
          buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
          buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
          buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
            const segmentWidth = width2 / gridX;
            const segmentHeight = height2 / gridY;
            const widthHalf = width2 / 2;
            const heightHalf = height2 / 2;
            const depthHalf = depth2 / 2;
            const gridX1 = gridX + 1;
            const gridY1 = gridY + 1;
            let vertexCounter = 0;
            let groupCount = 0;
            const vector = new Vector3();
            for (let iy = 0; iy < gridY1; iy++) {
              const y = iy * segmentHeight - heightHalf;
              for (let ix = 0; ix < gridX1; ix++) {
                const x = ix * segmentWidth - widthHalf;
                vector[u] = x * udir;
                vector[v] = y * vdir;
                vector[w] = depthHalf;
                vertices.push(vector.x, vector.y, vector.z);
                vector[u] = 0;
                vector[v] = 0;
                vector[w] = depth2 > 0 ? 1 : -1;
                normals.push(vector.x, vector.y, vector.z);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
                vertexCounter += 1;
              }
            }
            for (let iy = 0; iy < gridY; iy++) {
              for (let ix = 0; ix < gridX; ix++) {
                const a = numberOfVertices + ix + gridX1 * iy;
                const b = numberOfVertices + ix + gridX1 * (iy + 1);
                const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
                const d = numberOfVertices + (ix + 1) + gridX1 * iy;
                indices.push(a, b, d);
                indices.push(b, c, d);
                groupCount += 6;
              }
            }
            scope.addGroup(groupStart, groupCount, materialIndex);
            groupStart += groupCount;
            numberOfVertices += vertexCounter;
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
        }
      };
      UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
      default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
      default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
      ShaderMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isShaderMaterial = true;
          this.type = "ShaderMaterial";
          this.defines = {};
          this.uniforms = {};
          this.uniformsGroups = [];
          this.vertexShader = default_vertex;
          this.fragmentShader = default_fragment;
          this.linewidth = 1;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.fog = false;
          this.lights = false;
          this.clipping = false;
          this.forceSinglePass = true;
          this.extensions = {
            derivatives: false,
            // set to use derivatives
            fragDepth: false,
            // set to use fragment depth values
            drawBuffers: false,
            // set to use draw buffers
            shaderTextureLOD: false
            // set to use shader texture LOD
          };
          this.defaultAttributeValues = {
            "color": [1, 1, 1],
            "uv": [0, 0],
            "uv1": [0, 0]
          };
          this.index0AttributeName = void 0;
          this.uniformsNeedUpdate = false;
          this.glslVersion = null;
          if (parameters !== void 0) {
            this.setValues(parameters);
          }
        }
        copy(source) {
          super.copy(source);
          this.fragmentShader = source.fragmentShader;
          this.vertexShader = source.vertexShader;
          this.uniforms = cloneUniforms(source.uniforms);
          this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
          this.defines = Object.assign({}, source.defines);
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.fog = source.fog;
          this.lights = source.lights;
          this.clipping = source.clipping;
          this.extensions = Object.assign({}, source.extensions);
          this.glslVersion = source.glslVersion;
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.glslVersion = this.glslVersion;
          data.uniforms = {};
          for (const name in this.uniforms) {
            const uniform = this.uniforms[name];
            const value = uniform.value;
            if (value && value.isTexture) {
              data.uniforms[name] = {
                type: "t",
                value: value.toJSON(meta).uuid
              };
            } else if (value && value.isColor) {
              data.uniforms[name] = {
                type: "c",
                value: value.getHex()
              };
            } else if (value && value.isVector2) {
              data.uniforms[name] = {
                type: "v2",
                value: value.toArray()
              };
            } else if (value && value.isVector3) {
              data.uniforms[name] = {
                type: "v3",
                value: value.toArray()
              };
            } else if (value && value.isVector4) {
              data.uniforms[name] = {
                type: "v4",
                value: value.toArray()
              };
            } else if (value && value.isMatrix3) {
              data.uniforms[name] = {
                type: "m3",
                value: value.toArray()
              };
            } else if (value && value.isMatrix4) {
              data.uniforms[name] = {
                type: "m4",
                value: value.toArray()
              };
            } else {
              data.uniforms[name] = {
                value
              };
            }
          }
          if (Object.keys(this.defines).length > 0)
            data.defines = this.defines;
          data.vertexShader = this.vertexShader;
          data.fragmentShader = this.fragmentShader;
          data.lights = this.lights;
          data.clipping = this.clipping;
          const extensions2 = {};
          for (const key in this.extensions) {
            if (this.extensions[key] === true)
              extensions2[key] = true;
          }
          if (Object.keys(extensions2).length > 0)
            data.extensions = extensions2;
          return data;
        }
      };
      Camera = class extends Object3D {
        constructor() {
          super();
          this.isCamera = true;
          this.type = "Camera";
          this.matrixWorldInverse = new Matrix4();
          this.projectionMatrix = new Matrix4();
          this.projectionMatrixInverse = new Matrix4();
          this.coordinateSystem = WebGLCoordinateSystem;
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.matrixWorldInverse.copy(source.matrixWorldInverse);
          this.projectionMatrix.copy(source.projectionMatrix);
          this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
          this.coordinateSystem = source.coordinateSystem;
          return this;
        }
        getWorldDirection(target2) {
          this.updateWorldMatrix(true, false);
          const e = this.matrixWorld.elements;
          return target2.set(-e[8], -e[9], -e[10]).normalize();
        }
        updateMatrixWorld(force) {
          super.updateMatrixWorld(force);
          this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        updateWorldMatrix(updateParents, updateChildren) {
          super.updateWorldMatrix(updateParents, updateChildren);
          this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      PerspectiveCamera = class extends Camera {
        constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
          super();
          this.isPerspectiveCamera = true;
          this.type = "PerspectiveCamera";
          this.fov = fov2;
          this.zoom = 1;
          this.near = near;
          this.far = far;
          this.focus = 10;
          this.aspect = aspect2;
          this.view = null;
          this.filmGauge = 35;
          this.filmOffset = 0;
          this.updateProjectionMatrix();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.fov = source.fov;
          this.zoom = source.zoom;
          this.near = source.near;
          this.far = source.far;
          this.focus = source.focus;
          this.aspect = source.aspect;
          this.view = source.view === null ? null : Object.assign({}, source.view);
          this.filmGauge = source.filmGauge;
          this.filmOffset = source.filmOffset;
          return this;
        }
        /**
         * Sets the FOV by focal length in respect to the current .filmGauge.
         *
         * The default film gauge is 35, so that the focal length can be specified for
         * a 35mm (full frame) camera.
         *
         * Values for focal length and film gauge must have the same unit.
         */
        setFocalLength(focalLength) {
          const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
          this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
          this.updateProjectionMatrix();
        }
        /**
         * Calculates the focal length from the current .fov and .filmGauge.
         */
        getFocalLength() {
          const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
          return 0.5 * this.getFilmHeight() / vExtentSlope;
        }
        getEffectiveFOV() {
          return RAD2DEG * 2 * Math.atan(
            Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
          );
        }
        getFilmWidth() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }
        getFilmHeight() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }
        /**
         * Sets an offset in a larger frustum. This is useful for multi-window or
         * multi-monitor/multi-machine setups.
         *
         * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
         * the monitors are in grid like this
         *
         *   +---+---+---+
         *   | A | B | C |
         *   +---+---+---+
         *   | D | E | F |
         *   +---+---+---+
         *
         * then for each monitor you would call it like this
         *
         *   const w = 1920;
         *   const h = 1080;
         *   const fullWidth = w * 3;
         *   const fullHeight = h * 2;
         *
         *   --A--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
         *   --B--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
         *   --C--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
         *   --D--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
         *   --E--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
         *   --F--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
         *
         *   Note there is no reason monitors have to be the same size or in a grid.
         */
        setViewOffset(fullWidth, fullHeight, x, y, width, height) {
          this.aspect = fullWidth / fullHeight;
          if (this.view === null) {
            this.view = {
              enabled: true,
              fullWidth: 1,
              fullHeight: 1,
              offsetX: 0,
              offsetY: 0,
              width: 1,
              height: 1
            };
          }
          this.view.enabled = true;
          this.view.fullWidth = fullWidth;
          this.view.fullHeight = fullHeight;
          this.view.offsetX = x;
          this.view.offsetY = y;
          this.view.width = width;
          this.view.height = height;
          this.updateProjectionMatrix();
        }
        clearViewOffset() {
          if (this.view !== null) {
            this.view.enabled = false;
          }
          this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const near = this.near;
          let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
          let height = 2 * top;
          let width = this.aspect * height;
          let left = -0.5 * width;
          const view = this.view;
          if (this.view !== null && this.view.enabled) {
            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
            left += view.offsetX * width / fullWidth;
            top -= view.offsetY * height / fullHeight;
            width *= view.width / fullWidth;
            height *= view.height / fullHeight;
          }
          const skew = this.filmOffset;
          if (skew !== 0)
            left += near * skew / this.getFilmWidth();
          this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
          this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.object.fov = this.fov;
          data.object.zoom = this.zoom;
          data.object.near = this.near;
          data.object.far = this.far;
          data.object.focus = this.focus;
          data.object.aspect = this.aspect;
          if (this.view !== null)
            data.object.view = Object.assign({}, this.view);
          data.object.filmGauge = this.filmGauge;
          data.object.filmOffset = this.filmOffset;
          return data;
        }
      };
      fov = -90;
      aspect = 1;
      CubeCamera = class extends Object3D {
        constructor(near, far, renderTarget) {
          super();
          this.type = "CubeCamera";
          this.renderTarget = renderTarget;
          this.coordinateSystem = null;
          const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
          cameraPX.layers = this.layers;
          this.add(cameraPX);
          const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
          cameraNX.layers = this.layers;
          this.add(cameraNX);
          const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
          cameraPY.layers = this.layers;
          this.add(cameraPY);
          const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
          cameraNY.layers = this.layers;
          this.add(cameraNY);
          const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
          cameraPZ.layers = this.layers;
          this.add(cameraPZ);
          const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
          cameraNZ.layers = this.layers;
          this.add(cameraNZ);
        }
        updateCoordinateSystem() {
          const coordinateSystem = this.coordinateSystem;
          const cameras = this.children.concat();
          const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
          for (const camera of cameras)
            this.remove(camera);
          if (coordinateSystem === WebGLCoordinateSystem) {
            cameraPX.up.set(0, 1, 0);
            cameraPX.lookAt(1, 0, 0);
            cameraNX.up.set(0, 1, 0);
            cameraNX.lookAt(-1, 0, 0);
            cameraPY.up.set(0, 0, -1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, 1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, 1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, 1, 0);
            cameraNZ.lookAt(0, 0, -1);
          } else if (coordinateSystem === WebGPUCoordinateSystem) {
            cameraPX.up.set(0, -1, 0);
            cameraPX.lookAt(-1, 0, 0);
            cameraNX.up.set(0, -1, 0);
            cameraNX.lookAt(1, 0, 0);
            cameraPY.up.set(0, 0, 1);
            cameraPY.lookAt(0, 1, 0);
            cameraNY.up.set(0, 0, -1);
            cameraNY.lookAt(0, -1, 0);
            cameraPZ.up.set(0, -1, 0);
            cameraPZ.lookAt(0, 0, 1);
            cameraNZ.up.set(0, -1, 0);
            cameraNZ.lookAt(0, 0, -1);
          } else {
            throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
          }
          for (const camera of cameras) {
            this.add(camera);
            camera.updateMatrixWorld();
          }
        }
        update(renderer, scene) {
          if (this.parent === null)
            this.updateMatrixWorld();
          const renderTarget = this.renderTarget;
          if (this.coordinateSystem !== renderer.coordinateSystem) {
            this.coordinateSystem = renderer.coordinateSystem;
            this.updateCoordinateSystem();
          }
          const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
          const currentRenderTarget = renderer.getRenderTarget();
          const currentXrEnabled = renderer.xr.enabled;
          renderer.xr.enabled = false;
          const generateMipmaps = renderTarget.texture.generateMipmaps;
          renderTarget.texture.generateMipmaps = false;
          renderer.setRenderTarget(renderTarget, 0);
          renderer.render(scene, cameraPX);
          renderer.setRenderTarget(renderTarget, 1);
          renderer.render(scene, cameraNX);
          renderer.setRenderTarget(renderTarget, 2);
          renderer.render(scene, cameraPY);
          renderer.setRenderTarget(renderTarget, 3);
          renderer.render(scene, cameraNY);
          renderer.setRenderTarget(renderTarget, 4);
          renderer.render(scene, cameraPZ);
          renderTarget.texture.generateMipmaps = generateMipmaps;
          renderer.setRenderTarget(renderTarget, 5);
          renderer.render(scene, cameraNZ);
          renderer.setRenderTarget(currentRenderTarget);
          renderer.xr.enabled = currentXrEnabled;
          renderTarget.texture.needsPMREMUpdate = true;
        }
      };
      CubeTexture = class extends Texture {
        constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy, colorSpace) {
          images = images !== void 0 ? images : [];
          mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
          super(images, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy, colorSpace);
          this.isCubeTexture = true;
          this.flipY = false;
        }
        get images() {
          return this.image;
        }
        set images(value) {
          this.image = value;
        }
      };
      WebGLCubeRenderTarget = class extends WebGLRenderTarget {
        constructor(size = 1, options = {}) {
          super(size, size, options);
          this.isWebGLCubeRenderTarget = true;
          const image = { width: size, height: size, depth: 1 };
          const images = [image, image, image, image, image, image];
          if (options.encoding !== void 0) {
            warnOnce("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");
            options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
          }
          this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
          this.texture.isRenderTargetTexture = true;
          this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
          this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
        }
        fromEquirectangularTexture(renderer, texture) {
          this.texture.type = texture.type;
          this.texture.colorSpace = texture.colorSpace;
          this.texture.generateMipmaps = texture.generateMipmaps;
          this.texture.minFilter = texture.minFilter;
          this.texture.magFilter = texture.magFilter;
          const shader = {
            uniforms: {
              tEquirect: { value: null }
            },
            vertexShader: (
              /* glsl */
              `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
            ),
            fragmentShader: (
              /* glsl */
              `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
            )
          };
          const geometry = new BoxGeometry(5, 5, 5);
          const material = new ShaderMaterial({
            name: "CubemapFromEquirect",
            uniforms: cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: BackSide,
            blending: NoBlending
          });
          material.uniforms.tEquirect.value = texture;
          const mesh = new Mesh(geometry, material);
          const currentMinFilter = texture.minFilter;
          if (texture.minFilter === LinearMipmapLinearFilter)
            texture.minFilter = LinearFilter;
          const camera = new CubeCamera(1, 10, this);
          camera.update(renderer, mesh);
          texture.minFilter = currentMinFilter;
          mesh.geometry.dispose();
          mesh.material.dispose();
          return this;
        }
        clear(renderer, color, depth, stencil) {
          const currentRenderTarget = renderer.getRenderTarget();
          for (let i = 0; i < 6; i++) {
            renderer.setRenderTarget(this, i);
            renderer.clear(color, depth, stencil);
          }
          renderer.setRenderTarget(currentRenderTarget);
        }
      };
      _vector1 = /* @__PURE__ */ new Vector3();
      _vector2 = /* @__PURE__ */ new Vector3();
      _normalMatrix = /* @__PURE__ */ new Matrix3();
      Plane = class {
        constructor(normal = new Vector3(1, 0, 0), constant = 0) {
          this.isPlane = true;
          this.normal = normal;
          this.constant = constant;
        }
        set(normal, constant) {
          this.normal.copy(normal);
          this.constant = constant;
          return this;
        }
        setComponents(x, y, z, w) {
          this.normal.set(x, y, z);
          this.constant = w;
          return this;
        }
        setFromNormalAndCoplanarPoint(normal, point) {
          this.normal.copy(normal);
          this.constant = -point.dot(this.normal);
          return this;
        }
        setFromCoplanarPoints(a, b, c) {
          const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
          this.setFromNormalAndCoplanarPoint(normal, a);
          return this;
        }
        copy(plane) {
          this.normal.copy(plane.normal);
          this.constant = plane.constant;
          return this;
        }
        normalize() {
          const inverseNormalLength = 1 / this.normal.length();
          this.normal.multiplyScalar(inverseNormalLength);
          this.constant *= inverseNormalLength;
          return this;
        }
        negate() {
          this.constant *= -1;
          this.normal.negate();
          return this;
        }
        distanceToPoint(point) {
          return this.normal.dot(point) + this.constant;
        }
        distanceToSphere(sphere) {
          return this.distanceToPoint(sphere.center) - sphere.radius;
        }
        projectPoint(point, target2) {
          return target2.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
        }
        intersectLine(line, target2) {
          const direction = line.delta(_vector1);
          const denominator = this.normal.dot(direction);
          if (denominator === 0) {
            if (this.distanceToPoint(line.start) === 0) {
              return target2.copy(line.start);
            }
            return null;
          }
          const t = -(line.start.dot(this.normal) + this.constant) / denominator;
          if (t < 0 || t > 1) {
            return null;
          }
          return target2.copy(line.start).addScaledVector(direction, t);
        }
        intersectsLine(line) {
          const startSign = this.distanceToPoint(line.start);
          const endSign = this.distanceToPoint(line.end);
          return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
        }
        intersectsBox(box) {
          return box.intersectsPlane(this);
        }
        intersectsSphere(sphere) {
          return sphere.intersectsPlane(this);
        }
        coplanarPoint(target2) {
          return target2.copy(this.normal).multiplyScalar(-this.constant);
        }
        applyMatrix4(matrix, optionalNormalMatrix) {
          const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
          const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
          const normal = this.normal.applyMatrix3(normalMatrix).normalize();
          this.constant = -referencePoint.dot(normal);
          return this;
        }
        translate(offset) {
          this.constant -= offset.dot(this.normal);
          return this;
        }
        equals(plane) {
          return plane.normal.equals(this.normal) && plane.constant === this.constant;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      _sphere$4 = /* @__PURE__ */ new Sphere();
      _vector$6 = /* @__PURE__ */ new Vector3();
      Frustum = class {
        constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
          this.planes = [p0, p1, p2, p3, p4, p5];
        }
        set(p0, p1, p2, p3, p4, p5) {
          const planes = this.planes;
          planes[0].copy(p0);
          planes[1].copy(p1);
          planes[2].copy(p2);
          planes[3].copy(p3);
          planes[4].copy(p4);
          planes[5].copy(p5);
          return this;
        }
        copy(frustum) {
          const planes = this.planes;
          for (let i = 0; i < 6; i++) {
            planes[i].copy(frustum.planes[i]);
          }
          return this;
        }
        setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
          const planes = this.planes;
          const me = m.elements;
          const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
          const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
          const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
          const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
          planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
          planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
          planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
          planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
          planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
          if (coordinateSystem === WebGLCoordinateSystem) {
            planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
          } else if (coordinateSystem === WebGPUCoordinateSystem) {
            planes[5].setComponents(me2, me6, me10, me14).normalize();
          } else {
            throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
          }
          return this;
        }
        intersectsObject(object) {
          if (object.boundingSphere !== void 0) {
            if (object.boundingSphere === null)
              object.computeBoundingSphere();
            _sphere$4.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
          } else {
            const geometry = object.geometry;
            if (geometry.boundingSphere === null)
              geometry.computeBoundingSphere();
            _sphere$4.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
          }
          return this.intersectsSphere(_sphere$4);
        }
        intersectsSprite(sprite) {
          _sphere$4.center.set(0, 0, 0);
          _sphere$4.radius = 0.7071067811865476;
          _sphere$4.applyMatrix4(sprite.matrixWorld);
          return this.intersectsSphere(_sphere$4);
        }
        intersectsSphere(sphere) {
          const planes = this.planes;
          const center = sphere.center;
          const negRadius = -sphere.radius;
          for (let i = 0; i < 6; i++) {
            const distance = planes[i].distanceToPoint(center);
            if (distance < negRadius) {
              return false;
            }
          }
          return true;
        }
        intersectsBox(box) {
          const planes = this.planes;
          for (let i = 0; i < 6; i++) {
            const plane = planes[i];
            _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
            _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
            _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
            if (plane.distanceToPoint(_vector$6) < 0) {
              return false;
            }
          }
          return true;
        }
        containsPoint(point) {
          const planes = this.planes;
          for (let i = 0; i < 6; i++) {
            if (planes[i].distanceToPoint(point) < 0) {
              return false;
            }
          }
          return true;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
        constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
          super();
          this.type = "PlaneGeometry";
          this.parameters = {
            width,
            height,
            widthSegments,
            heightSegments
          };
          const width_half = width / 2;
          const height_half = height / 2;
          const gridX = Math.floor(widthSegments);
          const gridY = Math.floor(heightSegments);
          const gridX1 = gridX + 1;
          const gridY1 = gridY + 1;
          const segment_width = width / gridX;
          const segment_height = height / gridY;
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          for (let iy = 0; iy < gridY1; iy++) {
            const y = iy * segment_height - height_half;
            for (let ix = 0; ix < gridX1; ix++) {
              const x = ix * segment_width - width_half;
              vertices.push(x, -y, 0);
              normals.push(0, 0, 1);
              uvs.push(ix / gridX);
              uvs.push(1 - iy / gridY);
            }
          }
          for (let iy = 0; iy < gridY; iy++) {
            for (let ix = 0; ix < gridX; ix++) {
              const a = ix + gridX1 * iy;
              const b = ix + gridX1 * (iy + 1);
              const c = ix + 1 + gridX1 * (iy + 1);
              const d = ix + 1 + gridX1 * iy;
              indices.push(a, b, d);
              indices.push(b, c, d);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
        }
      };
      alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
      alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
      alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
      alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
      alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
      alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
      aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
      aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
      begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
      beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
      bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
      iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
      bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
      clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
      clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
      clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
      clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
      color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
      color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
      color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
      color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
      common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
      cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
      defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
      displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
      displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
      emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
      emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
      colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
      colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
      envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
      envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
      envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
      envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
      envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
      fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
      fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
      fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
      fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
      gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
      lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
      lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
      lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
      lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
      lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
      envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
      lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
      lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
      lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
      lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
      lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	anisotropyV /= material.anisotropy;\n	material.anisotropy = saturate( material.anisotropy );\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";
      lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
      lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
      lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
      lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
      logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
      logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
      logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
      logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
      map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
      map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
      map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
      map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
      metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
      metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
      morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
      morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
      morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
      morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
      normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
      normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
      normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
      normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
      normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
      normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
      clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
      clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
      clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
      iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
      opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
      packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
      premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
      project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
      dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
      dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
      roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
      roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
      shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
      shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
      shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
      shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
      skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
      skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
      skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
      skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
      specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
      specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
      tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
      tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
      transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
      transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
      uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
      uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
      uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
      worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
      vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
      fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
      vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
      fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
      vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
      fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
      vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
      fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
      vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
      fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
      vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
      fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
      vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
      fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
      vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
      fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
      fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
      fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
      vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
      fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
      fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
      vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
      vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
      fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
      ShaderChunk = {
        alphahash_fragment,
        alphahash_pars_fragment,
        alphamap_fragment,
        alphamap_pars_fragment,
        alphatest_fragment,
        alphatest_pars_fragment,
        aomap_fragment,
        aomap_pars_fragment,
        begin_vertex,
        beginnormal_vertex,
        bsdfs,
        iridescence_fragment,
        bumpmap_pars_fragment,
        clipping_planes_fragment,
        clipping_planes_pars_fragment,
        clipping_planes_pars_vertex,
        clipping_planes_vertex,
        color_fragment,
        color_pars_fragment,
        color_pars_vertex,
        color_vertex,
        common,
        cube_uv_reflection_fragment,
        defaultnormal_vertex,
        displacementmap_pars_vertex,
        displacementmap_vertex,
        emissivemap_fragment,
        emissivemap_pars_fragment,
        colorspace_fragment,
        colorspace_pars_fragment,
        envmap_fragment,
        envmap_common_pars_fragment,
        envmap_pars_fragment,
        envmap_pars_vertex,
        envmap_physical_pars_fragment,
        envmap_vertex,
        fog_vertex,
        fog_pars_vertex,
        fog_fragment,
        fog_pars_fragment,
        gradientmap_pars_fragment,
        lightmap_fragment,
        lightmap_pars_fragment,
        lights_lambert_fragment,
        lights_lambert_pars_fragment,
        lights_pars_begin,
        lights_toon_fragment,
        lights_toon_pars_fragment,
        lights_phong_fragment,
        lights_phong_pars_fragment,
        lights_physical_fragment,
        lights_physical_pars_fragment,
        lights_fragment_begin,
        lights_fragment_maps,
        lights_fragment_end,
        logdepthbuf_fragment,
        logdepthbuf_pars_fragment,
        logdepthbuf_pars_vertex,
        logdepthbuf_vertex,
        map_fragment,
        map_pars_fragment,
        map_particle_fragment,
        map_particle_pars_fragment,
        metalnessmap_fragment,
        metalnessmap_pars_fragment,
        morphcolor_vertex,
        morphnormal_vertex,
        morphtarget_pars_vertex,
        morphtarget_vertex,
        normal_fragment_begin,
        normal_fragment_maps,
        normal_pars_fragment,
        normal_pars_vertex,
        normal_vertex,
        normalmap_pars_fragment,
        clearcoat_normal_fragment_begin,
        clearcoat_normal_fragment_maps,
        clearcoat_pars_fragment,
        iridescence_pars_fragment,
        opaque_fragment,
        packing,
        premultiplied_alpha_fragment,
        project_vertex,
        dithering_fragment,
        dithering_pars_fragment,
        roughnessmap_fragment,
        roughnessmap_pars_fragment,
        shadowmap_pars_fragment,
        shadowmap_pars_vertex,
        shadowmap_vertex,
        shadowmask_pars_fragment,
        skinbase_vertex,
        skinning_pars_vertex,
        skinning_vertex,
        skinnormal_vertex,
        specularmap_fragment,
        specularmap_pars_fragment,
        tonemapping_fragment,
        tonemapping_pars_fragment,
        transmission_fragment,
        transmission_pars_fragment,
        uv_pars_fragment,
        uv_pars_vertex,
        uv_vertex,
        worldpos_vertex,
        background_vert: vertex$h,
        background_frag: fragment$h,
        backgroundCube_vert: vertex$g,
        backgroundCube_frag: fragment$g,
        cube_vert: vertex$f,
        cube_frag: fragment$f,
        depth_vert: vertex$e,
        depth_frag: fragment$e,
        distanceRGBA_vert: vertex$d,
        distanceRGBA_frag: fragment$d,
        equirect_vert: vertex$c,
        equirect_frag: fragment$c,
        linedashed_vert: vertex$b,
        linedashed_frag: fragment$b,
        meshbasic_vert: vertex$a,
        meshbasic_frag: fragment$a,
        meshlambert_vert: vertex$9,
        meshlambert_frag: fragment$9,
        meshmatcap_vert: vertex$8,
        meshmatcap_frag: fragment$8,
        meshnormal_vert: vertex$7,
        meshnormal_frag: fragment$7,
        meshphong_vert: vertex$6,
        meshphong_frag: fragment$6,
        meshphysical_vert: vertex$5,
        meshphysical_frag: fragment$5,
        meshtoon_vert: vertex$4,
        meshtoon_frag: fragment$4,
        points_vert: vertex$3,
        points_frag: fragment$3,
        shadow_vert: vertex$2,
        shadow_frag: fragment$2,
        sprite_vert: vertex$1,
        sprite_frag: fragment$1
      };
      UniformsLib = {
        common: {
          diffuse: { value: /* @__PURE__ */ new Color(16777215) },
          opacity: { value: 1 },
          map: { value: null },
          mapTransform: { value: /* @__PURE__ */ new Matrix3() },
          alphaMap: { value: null },
          alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          alphaTest: { value: 0 }
        },
        specularmap: {
          specularMap: { value: null },
          specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        envmap: {
          envMap: { value: null },
          flipEnvMap: { value: -1 },
          reflectivity: { value: 1 },
          // basic, lambert, phong
          ior: { value: 1.5 },
          // physical
          refractionRatio: { value: 0.98 }
          // basic, lambert, phong
        },
        aomap: {
          aoMap: { value: null },
          aoMapIntensity: { value: 1 },
          aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        lightmap: {
          lightMap: { value: null },
          lightMapIntensity: { value: 1 },
          lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        bumpmap: {
          bumpMap: { value: null },
          bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          bumpScale: { value: 1 }
        },
        normalmap: {
          normalMap: { value: null },
          normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
        },
        displacementmap: {
          displacementMap: { value: null },
          displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          displacementScale: { value: 1 },
          displacementBias: { value: 0 }
        },
        emissivemap: {
          emissiveMap: { value: null },
          emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        metalnessmap: {
          metalnessMap: { value: null },
          metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        roughnessmap: {
          roughnessMap: { value: null },
          roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        gradientmap: {
          gradientMap: { value: null }
        },
        fog: {
          fogDensity: { value: 25e-5 },
          fogNear: { value: 1 },
          fogFar: { value: 2e3 },
          fogColor: { value: /* @__PURE__ */ new Color(16777215) }
        },
        lights: {
          ambientLightColor: { value: [] },
          lightProbe: { value: [] },
          directionalLights: { value: [], properties: {
            direction: {},
            color: {}
          } },
          directionalLightShadows: { value: [], properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          } },
          directionalShadowMap: { value: [] },
          directionalShadowMatrix: { value: [] },
          spotLights: { value: [], properties: {
            color: {},
            position: {},
            direction: {},
            distance: {},
            coneCos: {},
            penumbraCos: {},
            decay: {}
          } },
          spotLightShadows: { value: [], properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {}
          } },
          spotLightMap: { value: [] },
          spotShadowMap: { value: [] },
          spotLightMatrix: { value: [] },
          pointLights: { value: [], properties: {
            color: {},
            position: {},
            decay: {},
            distance: {}
          } },
          pointLightShadows: { value: [], properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
            shadowCameraNear: {},
            shadowCameraFar: {}
          } },
          pointShadowMap: { value: [] },
          pointShadowMatrix: { value: [] },
          hemisphereLights: { value: [], properties: {
            direction: {},
            skyColor: {},
            groundColor: {}
          } },
          // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
          rectAreaLights: { value: [], properties: {
            color: {},
            position: {},
            width: {},
            height: {}
          } },
          ltc_1: { value: null },
          ltc_2: { value: null }
        },
        points: {
          diffuse: { value: /* @__PURE__ */ new Color(16777215) },
          opacity: { value: 1 },
          size: { value: 1 },
          scale: { value: 1 },
          map: { value: null },
          alphaMap: { value: null },
          alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          alphaTest: { value: 0 },
          uvTransform: { value: /* @__PURE__ */ new Matrix3() }
        },
        sprite: {
          diffuse: { value: /* @__PURE__ */ new Color(16777215) },
          opacity: { value: 1 },
          center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
          rotation: { value: 0 },
          map: { value: null },
          mapTransform: { value: /* @__PURE__ */ new Matrix3() },
          alphaMap: { value: null },
          alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
          alphaTest: { value: 0 }
        }
      };
      ShaderLib = {
        basic: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.fog
          ]),
          vertexShader: ShaderChunk.meshbasic_vert,
          fragmentShader: ShaderChunk.meshbasic_frag
        },
        lambert: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
              emissive: { value: /* @__PURE__ */ new Color(0) }
            }
          ]),
          vertexShader: ShaderChunk.meshlambert_vert,
          fragmentShader: ShaderChunk.meshlambert_frag
        },
        phong: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
              emissive: { value: /* @__PURE__ */ new Color(0) },
              specular: { value: /* @__PURE__ */ new Color(1118481) },
              shininess: { value: 30 }
            }
          ]),
          vertexShader: ShaderChunk.meshphong_vert,
          fragmentShader: ShaderChunk.meshphong_frag
        },
        standard: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.roughnessmap,
            UniformsLib.metalnessmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
              emissive: { value: /* @__PURE__ */ new Color(0) },
              roughness: { value: 1 },
              metalness: { value: 0 },
              envMapIntensity: { value: 1 }
              // temporary
            }
          ]),
          vertexShader: ShaderChunk.meshphysical_vert,
          fragmentShader: ShaderChunk.meshphysical_frag
        },
        toon: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.gradientmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
              emissive: { value: /* @__PURE__ */ new Color(0) }
            }
          ]),
          vertexShader: ShaderChunk.meshtoon_vert,
          fragmentShader: ShaderChunk.meshtoon_frag
        },
        matcap: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            {
              matcap: { value: null }
            }
          ]),
          vertexShader: ShaderChunk.meshmatcap_vert,
          fragmentShader: ShaderChunk.meshmatcap_frag
        },
        points: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.points,
            UniformsLib.fog
          ]),
          vertexShader: ShaderChunk.points_vert,
          fragmentShader: ShaderChunk.points_frag
        },
        dashed: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.fog,
            {
              scale: { value: 1 },
              dashSize: { value: 1 },
              totalSize: { value: 2 }
            }
          ]),
          vertexShader: ShaderChunk.linedashed_vert,
          fragmentShader: ShaderChunk.linedashed_frag
        },
        depth: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap
          ]),
          vertexShader: ShaderChunk.depth_vert,
          fragmentShader: ShaderChunk.depth_frag
        },
        normal: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            {
              opacity: { value: 1 }
            }
          ]),
          vertexShader: ShaderChunk.meshnormal_vert,
          fragmentShader: ShaderChunk.meshnormal_frag
        },
        sprite: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.sprite,
            UniformsLib.fog
          ]),
          vertexShader: ShaderChunk.sprite_vert,
          fragmentShader: ShaderChunk.sprite_frag
        },
        background: {
          uniforms: {
            uvTransform: { value: /* @__PURE__ */ new Matrix3() },
            t2D: { value: null },
            backgroundIntensity: { value: 1 }
          },
          vertexShader: ShaderChunk.background_vert,
          fragmentShader: ShaderChunk.background_frag
        },
        backgroundCube: {
          uniforms: {
            envMap: { value: null },
            flipEnvMap: { value: -1 },
            backgroundBlurriness: { value: 0 },
            backgroundIntensity: { value: 1 }
          },
          vertexShader: ShaderChunk.backgroundCube_vert,
          fragmentShader: ShaderChunk.backgroundCube_frag
        },
        cube: {
          uniforms: {
            tCube: { value: null },
            tFlip: { value: -1 },
            opacity: { value: 1 }
          },
          vertexShader: ShaderChunk.cube_vert,
          fragmentShader: ShaderChunk.cube_frag
        },
        equirect: {
          uniforms: {
            tEquirect: { value: null }
          },
          vertexShader: ShaderChunk.equirect_vert,
          fragmentShader: ShaderChunk.equirect_frag
        },
        distanceRGBA: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap,
            {
              referencePosition: { value: /* @__PURE__ */ new Vector3() },
              nearDistance: { value: 1 },
              farDistance: { value: 1e3 }
            }
          ]),
          vertexShader: ShaderChunk.distanceRGBA_vert,
          fragmentShader: ShaderChunk.distanceRGBA_frag
        },
        shadow: {
          uniforms: /* @__PURE__ */ mergeUniforms([
            UniformsLib.lights,
            UniformsLib.fog,
            {
              color: { value: /* @__PURE__ */ new Color(0) },
              opacity: { value: 1 }
            }
          ]),
          vertexShader: ShaderChunk.shadow_vert,
          fragmentShader: ShaderChunk.shadow_frag
        }
      };
      ShaderLib.physical = {
        uniforms: /* @__PURE__ */ mergeUniforms([
          ShaderLib.standard.uniforms,
          {
            clearcoat: { value: 0 },
            clearcoatMap: { value: null },
            clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            clearcoatNormalMap: { value: null },
            clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
            clearcoatRoughness: { value: 0 },
            clearcoatRoughnessMap: { value: null },
            clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            iridescence: { value: 0 },
            iridescenceMap: { value: null },
            iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            iridescenceIOR: { value: 1.3 },
            iridescenceThicknessMinimum: { value: 100 },
            iridescenceThicknessMaximum: { value: 400 },
            iridescenceThicknessMap: { value: null },
            iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            sheen: { value: 0 },
            sheenColor: { value: /* @__PURE__ */ new Color(0) },
            sheenColorMap: { value: null },
            sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            sheenRoughness: { value: 1 },
            sheenRoughnessMap: { value: null },
            sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            transmission: { value: 0 },
            transmissionMap: { value: null },
            transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
            transmissionSamplerMap: { value: null },
            thickness: { value: 0 },
            thicknessMap: { value: null },
            thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            attenuationDistance: { value: 0 },
            attenuationColor: { value: /* @__PURE__ */ new Color(0) },
            specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
            specularColorMap: { value: null },
            specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            specularIntensity: { value: 1 },
            specularIntensityMap: { value: null },
            specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
            anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
            anisotropyMap: { value: null },
            anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
          }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
      };
      _rgb = { r: 0, b: 0, g: 0 };
      OrthographicCamera = class extends Camera {
        constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
          super();
          this.isOrthographicCamera = true;
          this.type = "OrthographicCamera";
          this.zoom = 1;
          this.view = null;
          this.left = left;
          this.right = right;
          this.top = top;
          this.bottom = bottom;
          this.near = near;
          this.far = far;
          this.updateProjectionMatrix();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.left = source.left;
          this.right = source.right;
          this.top = source.top;
          this.bottom = source.bottom;
          this.near = source.near;
          this.far = source.far;
          this.zoom = source.zoom;
          this.view = source.view === null ? null : Object.assign({}, source.view);
          return this;
        }
        setViewOffset(fullWidth, fullHeight, x, y, width, height) {
          if (this.view === null) {
            this.view = {
              enabled: true,
              fullWidth: 1,
              fullHeight: 1,
              offsetX: 0,
              offsetY: 0,
              width: 1,
              height: 1
            };
          }
          this.view.enabled = true;
          this.view.fullWidth = fullWidth;
          this.view.fullHeight = fullHeight;
          this.view.offsetX = x;
          this.view.offsetY = y;
          this.view.width = width;
          this.view.height = height;
          this.updateProjectionMatrix();
        }
        clearViewOffset() {
          if (this.view !== null) {
            this.view.enabled = false;
          }
          this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const dx = (this.right - this.left) / (2 * this.zoom);
          const dy = (this.top - this.bottom) / (2 * this.zoom);
          const cx = (this.right + this.left) / 2;
          const cy = (this.top + this.bottom) / 2;
          let left = cx - dx;
          let right = cx + dx;
          let top = cy + dy;
          let bottom = cy - dy;
          if (this.view !== null && this.view.enabled) {
            const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
            const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            left += scaleW * this.view.offsetX;
            right = left + scaleW * this.view.width;
            top -= scaleH * this.view.offsetY;
            bottom = top - scaleH * this.view.height;
          }
          this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
          this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.object.zoom = this.zoom;
          data.object.left = this.left;
          data.object.right = this.right;
          data.object.top = this.top;
          data.object.bottom = this.bottom;
          data.object.near = this.near;
          data.object.far = this.far;
          if (this.view !== null)
            data.object.view = Object.assign({}, this.view);
          return data;
        }
      };
      LOD_MIN = 4;
      EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
      MAX_SAMPLES = 20;
      _flatCamera = /* @__PURE__ */ new OrthographicCamera();
      _clearColor = /* @__PURE__ */ new Color();
      _oldTarget = null;
      PHI = (1 + Math.sqrt(5)) / 2;
      INV_PHI = 1 / PHI;
      _axisDirections = [
        /* @__PURE__ */ new Vector3(1, 1, 1),
        /* @__PURE__ */ new Vector3(-1, 1, 1),
        /* @__PURE__ */ new Vector3(1, 1, -1),
        /* @__PURE__ */ new Vector3(-1, 1, -1),
        /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
        /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
        /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
        /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
        /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
        /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
      ];
      PMREMGenerator = class {
        constructor(renderer) {
          this._renderer = renderer;
          this._pingPongRenderTarget = null;
          this._lodMax = 0;
          this._cubeSize = 0;
          this._lodPlanes = [];
          this._sizeLods = [];
          this._sigmas = [];
          this._blurMaterial = null;
          this._cubemapMaterial = null;
          this._equirectMaterial = null;
          this._compileMaterial(this._blurMaterial);
        }
        /**
         * Generates a PMREM from a supplied Scene, which can be faster than using an
         * image if networking bandwidth is low. Optional sigma specifies a blur radius
         * in radians to be applied to the scene before PMREM generation. Optional near
         * and far planes ensure the scene is rendered in its entirety (the cubeCamera
         * is placed at the origin).
         */
        fromScene(scene, sigma = 0, near = 0.1, far = 100) {
          _oldTarget = this._renderer.getRenderTarget();
          this._setSize(256);
          const cubeUVRenderTarget = this._allocateTargets();
          cubeUVRenderTarget.depthBuffer = true;
          this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
          if (sigma > 0) {
            this._blur(cubeUVRenderTarget, 0, 0, sigma);
          }
          this._applyPMREM(cubeUVRenderTarget);
          this._cleanup(cubeUVRenderTarget);
          return cubeUVRenderTarget;
        }
        /**
         * Generates a PMREM from an equirectangular texture, which can be either LDR
         * or HDR. The ideal input image size is 1k (1024 x 512),
         * as this matches best with the 256 x 256 cubemap output.
         */
        fromEquirectangular(equirectangular, renderTarget = null) {
          return this._fromTexture(equirectangular, renderTarget);
        }
        /**
         * Generates a PMREM from an cubemap texture, which can be either LDR
         * or HDR. The ideal input cube size is 256 x 256,
         * as this matches best with the 256 x 256 cubemap output.
         */
        fromCubemap(cubemap, renderTarget = null) {
          return this._fromTexture(cubemap, renderTarget);
        }
        /**
         * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
         * your texture's network fetch for increased concurrency.
         */
        compileCubemapShader() {
          if (this._cubemapMaterial === null) {
            this._cubemapMaterial = _getCubemapMaterial();
            this._compileMaterial(this._cubemapMaterial);
          }
        }
        /**
         * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
         * your texture's network fetch for increased concurrency.
         */
        compileEquirectangularShader() {
          if (this._equirectMaterial === null) {
            this._equirectMaterial = _getEquirectMaterial();
            this._compileMaterial(this._equirectMaterial);
          }
        }
        /**
         * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
         * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
         * one of them will cause any others to also become unusable.
         */
        dispose() {
          this._dispose();
          if (this._cubemapMaterial !== null)
            this._cubemapMaterial.dispose();
          if (this._equirectMaterial !== null)
            this._equirectMaterial.dispose();
        }
        // private interface
        _setSize(cubeSize) {
          this._lodMax = Math.floor(Math.log2(cubeSize));
          this._cubeSize = Math.pow(2, this._lodMax);
        }
        _dispose() {
          if (this._blurMaterial !== null)
            this._blurMaterial.dispose();
          if (this._pingPongRenderTarget !== null)
            this._pingPongRenderTarget.dispose();
          for (let i = 0; i < this._lodPlanes.length; i++) {
            this._lodPlanes[i].dispose();
          }
        }
        _cleanup(outputTarget) {
          this._renderer.setRenderTarget(_oldTarget);
          outputTarget.scissorTest = false;
          _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
        }
        _fromTexture(texture, renderTarget) {
          if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
            this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
          } else {
            this._setSize(texture.image.width / 4);
          }
          _oldTarget = this._renderer.getRenderTarget();
          const cubeUVRenderTarget = renderTarget || this._allocateTargets();
          this._textureToCubeUV(texture, cubeUVRenderTarget);
          this._applyPMREM(cubeUVRenderTarget);
          this._cleanup(cubeUVRenderTarget);
          return cubeUVRenderTarget;
        }
        _allocateTargets() {
          const width = 3 * Math.max(this._cubeSize, 16 * 7);
          const height = 4 * this._cubeSize;
          const params = {
            magFilter: LinearFilter,
            minFilter: LinearFilter,
            generateMipmaps: false,
            type: HalfFloatType,
            format: RGBAFormat,
            colorSpace: LinearSRGBColorSpace,
            depthBuffer: false
          };
          const cubeUVRenderTarget = _createRenderTarget(width, height, params);
          if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
            if (this._pingPongRenderTarget !== null) {
              this._dispose();
            }
            this._pingPongRenderTarget = _createRenderTarget(width, height, params);
            const { _lodMax } = this;
            ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
            this._blurMaterial = _getBlurShader(_lodMax, width, height);
          }
          return cubeUVRenderTarget;
        }
        _compileMaterial(material) {
          const tmpMesh = new Mesh(this._lodPlanes[0], material);
          this._renderer.compile(tmpMesh, _flatCamera);
        }
        _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
          const fov2 = 90;
          const aspect2 = 1;
          const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
          const upSign = [1, -1, 1, 1, 1, 1];
          const forwardSign = [1, 1, 1, -1, -1, -1];
          const renderer = this._renderer;
          const originalAutoClear = renderer.autoClear;
          const toneMapping = renderer.toneMapping;
          renderer.getClearColor(_clearColor);
          renderer.toneMapping = NoToneMapping;
          renderer.autoClear = false;
          const backgroundMaterial = new MeshBasicMaterial({
            name: "PMREM.Background",
            side: BackSide,
            depthWrite: false,
            depthTest: false
          });
          const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
          let useSolidColor = false;
          const background = scene.background;
          if (background) {
            if (background.isColor) {
              backgroundMaterial.color.copy(background);
              scene.background = null;
              useSolidColor = true;
            }
          } else {
            backgroundMaterial.color.copy(_clearColor);
            useSolidColor = true;
          }
          for (let i = 0; i < 6; i++) {
            const col = i % 3;
            if (col === 0) {
              cubeCamera.up.set(0, upSign[i], 0);
              cubeCamera.lookAt(forwardSign[i], 0, 0);
            } else if (col === 1) {
              cubeCamera.up.set(0, 0, upSign[i]);
              cubeCamera.lookAt(0, forwardSign[i], 0);
            } else {
              cubeCamera.up.set(0, upSign[i], 0);
              cubeCamera.lookAt(0, 0, forwardSign[i]);
            }
            const size = this._cubeSize;
            _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
            renderer.setRenderTarget(cubeUVRenderTarget);
            if (useSolidColor) {
              renderer.render(backgroundBox, cubeCamera);
            }
            renderer.render(scene, cubeCamera);
          }
          backgroundBox.geometry.dispose();
          backgroundBox.material.dispose();
          renderer.toneMapping = toneMapping;
          renderer.autoClear = originalAutoClear;
          scene.background = background;
        }
        _textureToCubeUV(texture, cubeUVRenderTarget) {
          const renderer = this._renderer;
          const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
          if (isCubeTexture) {
            if (this._cubemapMaterial === null) {
              this._cubemapMaterial = _getCubemapMaterial();
            }
            this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
          } else {
            if (this._equirectMaterial === null) {
              this._equirectMaterial = _getEquirectMaterial();
            }
          }
          const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
          const mesh = new Mesh(this._lodPlanes[0], material);
          const uniforms = material.uniforms;
          uniforms["envMap"].value = texture;
          const size = this._cubeSize;
          _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
          renderer.setRenderTarget(cubeUVRenderTarget);
          renderer.render(mesh, _flatCamera);
        }
        _applyPMREM(cubeUVRenderTarget) {
          const renderer = this._renderer;
          const autoClear = renderer.autoClear;
          renderer.autoClear = false;
          for (let i = 1; i < this._lodPlanes.length; i++) {
            const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
            const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
            this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
          }
          renderer.autoClear = autoClear;
        }
        /**
         * This is a two-pass Gaussian blur for a cubemap. Normally this is done
         * vertically and horizontally, but this breaks down on a cube. Here we apply
         * the blur latitudinally (around the poles), and then longitudinally (towards
         * the poles) to approximate the orthogonally-separable blur. It is least
         * accurate at the poles, but still does a decent job.
         */
        _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
          const pingPongRenderTarget = this._pingPongRenderTarget;
          this._halfBlur(
            cubeUVRenderTarget,
            pingPongRenderTarget,
            lodIn,
            lodOut,
            sigma,
            "latitudinal",
            poleAxis
          );
          this._halfBlur(
            pingPongRenderTarget,
            cubeUVRenderTarget,
            lodOut,
            lodOut,
            sigma,
            "longitudinal",
            poleAxis
          );
        }
        _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
          const renderer = this._renderer;
          const blurMaterial = this._blurMaterial;
          if (direction !== "latitudinal" && direction !== "longitudinal") {
            console.error(
              "blur direction must be either latitudinal or longitudinal!"
            );
          }
          const STANDARD_DEVIATIONS = 3;
          const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
          const blurUniforms = blurMaterial.uniforms;
          const pixels = this._sizeLods[lodIn] - 1;
          const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
          const sigmaPixels = sigmaRadians / radiansPerPixel;
          const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
          if (samples > MAX_SAMPLES) {
            console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
          }
          const weights = [];
          let sum = 0;
          for (let i = 0; i < MAX_SAMPLES; ++i) {
            const x2 = i / sigmaPixels;
            const weight = Math.exp(-x2 * x2 / 2);
            weights.push(weight);
            if (i === 0) {
              sum += weight;
            } else if (i < samples) {
              sum += 2 * weight;
            }
          }
          for (let i = 0; i < weights.length; i++) {
            weights[i] = weights[i] / sum;
          }
          blurUniforms["envMap"].value = targetIn.texture;
          blurUniforms["samples"].value = samples;
          blurUniforms["weights"].value = weights;
          blurUniforms["latitudinal"].value = direction === "latitudinal";
          if (poleAxis) {
            blurUniforms["poleAxis"].value = poleAxis;
          }
          const { _lodMax } = this;
          blurUniforms["dTheta"].value = radiansPerPixel;
          blurUniforms["mipInt"].value = _lodMax - lodIn;
          const outputSize = this._sizeLods[lodOut];
          const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
          const y = 4 * (this._cubeSize - outputSize);
          _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
          renderer.setRenderTarget(targetOut);
          renderer.render(blurMesh, _flatCamera);
        }
      };
      emptyTexture = /* @__PURE__ */ new Texture();
      emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
      empty3dTexture = /* @__PURE__ */ new Data3DTexture();
      emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
      arrayCacheF32 = [];
      arrayCacheI32 = [];
      mat4array = new Float32Array(16);
      mat3array = new Float32Array(9);
      mat2array = new Float32Array(4);
      SingleUniform = class {
        constructor(id, activeInfo, addr) {
          this.id = id;
          this.addr = addr;
          this.cache = [];
          this.setValue = getSingularSetter(activeInfo.type);
        }
      };
      PureArrayUniform = class {
        constructor(id, activeInfo, addr) {
          this.id = id;
          this.addr = addr;
          this.cache = [];
          this.size = activeInfo.size;
          this.setValue = getPureArraySetter(activeInfo.type);
        }
      };
      StructuredUniform = class {
        constructor(id) {
          this.id = id;
          this.seq = [];
          this.map = {};
        }
        setValue(gl, value, textures) {
          const seq = this.seq;
          for (let i = 0, n = seq.length; i !== n; ++i) {
            const u = seq[i];
            u.setValue(gl, value[u.id], textures);
          }
        }
      };
      RePathPart = /(\w+)(\])?(\[|\.)?/g;
      WebGLUniforms = class {
        constructor(gl, program) {
          this.seq = [];
          this.map = {};
          const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
          for (let i = 0; i < n; ++i) {
            const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
            parseUniform(info, addr, this);
          }
        }
        setValue(gl, name, value, textures) {
          const u = this.map[name];
          if (u !== void 0)
            u.setValue(gl, value, textures);
        }
        setOptional(gl, object, name) {
          const v = object[name];
          if (v !== void 0)
            this.setValue(gl, name, v);
        }
        static upload(gl, seq, values, textures) {
          for (let i = 0, n = seq.length; i !== n; ++i) {
            const u = seq[i], v = values[u.id];
            if (v.needsUpdate !== false) {
              u.setValue(gl, v.value, textures);
            }
          }
        }
        static seqWithValue(seq, values) {
          const r = [];
          for (let i = 0, n = seq.length; i !== n; ++i) {
            const u = seq[i];
            if (u.id in values)
              r.push(u);
          }
          return r;
        }
      };
      programIdCount = 0;
      includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
      shaderChunkMap = /* @__PURE__ */ new Map([
        ["encodings_fragment", "colorspace_fragment"],
        // @deprecated, r154
        ["encodings_pars_fragment", "colorspace_pars_fragment"],
        // @deprecated, r154
        ["output_fragment", "opaque_fragment"]
        // @deprecated, r154
      ]);
      unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
      _id$1 = 0;
      WebGLShaderCache = class {
        constructor() {
          this.shaderCache = /* @__PURE__ */ new Map();
          this.materialCache = /* @__PURE__ */ new Map();
        }
        update(material) {
          const vertexShader = material.vertexShader;
          const fragmentShader = material.fragmentShader;
          const vertexShaderStage = this._getShaderStage(vertexShader);
          const fragmentShaderStage = this._getShaderStage(fragmentShader);
          const materialShaders = this._getShaderCacheForMaterial(material);
          if (materialShaders.has(vertexShaderStage) === false) {
            materialShaders.add(vertexShaderStage);
            vertexShaderStage.usedTimes++;
          }
          if (materialShaders.has(fragmentShaderStage) === false) {
            materialShaders.add(fragmentShaderStage);
            fragmentShaderStage.usedTimes++;
          }
          return this;
        }
        remove(material) {
          const materialShaders = this.materialCache.get(material);
          for (const shaderStage of materialShaders) {
            shaderStage.usedTimes--;
            if (shaderStage.usedTimes === 0)
              this.shaderCache.delete(shaderStage.code);
          }
          this.materialCache.delete(material);
          return this;
        }
        getVertexShaderID(material) {
          return this._getShaderStage(material.vertexShader).id;
        }
        getFragmentShaderID(material) {
          return this._getShaderStage(material.fragmentShader).id;
        }
        dispose() {
          this.shaderCache.clear();
          this.materialCache.clear();
        }
        _getShaderCacheForMaterial(material) {
          const cache2 = this.materialCache;
          let set = cache2.get(material);
          if (set === void 0) {
            set = /* @__PURE__ */ new Set();
            cache2.set(material, set);
          }
          return set;
        }
        _getShaderStage(code) {
          const cache2 = this.shaderCache;
          let stage = cache2.get(code);
          if (stage === void 0) {
            stage = new WebGLShaderStage(code);
            cache2.set(code, stage);
          }
          return stage;
        }
      };
      WebGLShaderStage = class {
        constructor(code) {
          this.id = _id$1++;
          this.code = code;
          this.usedTimes = 0;
        }
      };
      nextVersion = 0;
      MeshDepthMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshDepthMaterial = true;
          this.type = "MeshDepthMaterial";
          this.depthPacking = BasicDepthPacking;
          this.map = null;
          this.alphaMap = null;
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.depthPacking = source.depthPacking;
          this.map = source.map;
          this.alphaMap = source.alphaMap;
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          return this;
        }
      };
      MeshDistanceMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshDistanceMaterial = true;
          this.type = "MeshDistanceMaterial";
          this.map = null;
          this.alphaMap = null;
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.map = source.map;
          this.alphaMap = source.alphaMap;
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          return this;
        }
      };
      vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
      fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
      LinearTransferFunction = 0;
      SRGBTransferFunction = 1;
      ArrayCamera = class extends PerspectiveCamera {
        constructor(array = []) {
          super();
          this.isArrayCamera = true;
          this.cameras = array;
        }
      };
      Group = class extends Object3D {
        constructor() {
          super();
          this.isGroup = true;
          this.type = "Group";
        }
      };
      _moveEvent = { type: "move" };
      WebXRController = class {
        constructor() {
          this._targetRay = null;
          this._grip = null;
          this._hand = null;
        }
        getHandSpace() {
          if (this._hand === null) {
            this._hand = new Group();
            this._hand.matrixAutoUpdate = false;
            this._hand.visible = false;
            this._hand.joints = {};
            this._hand.inputState = { pinching: false };
          }
          return this._hand;
        }
        getTargetRaySpace() {
          if (this._targetRay === null) {
            this._targetRay = new Group();
            this._targetRay.matrixAutoUpdate = false;
            this._targetRay.visible = false;
            this._targetRay.hasLinearVelocity = false;
            this._targetRay.linearVelocity = new Vector3();
            this._targetRay.hasAngularVelocity = false;
            this._targetRay.angularVelocity = new Vector3();
          }
          return this._targetRay;
        }
        getGripSpace() {
          if (this._grip === null) {
            this._grip = new Group();
            this._grip.matrixAutoUpdate = false;
            this._grip.visible = false;
            this._grip.hasLinearVelocity = false;
            this._grip.linearVelocity = new Vector3();
            this._grip.hasAngularVelocity = false;
            this._grip.angularVelocity = new Vector3();
          }
          return this._grip;
        }
        dispatchEvent(event) {
          if (this._targetRay !== null) {
            this._targetRay.dispatchEvent(event);
          }
          if (this._grip !== null) {
            this._grip.dispatchEvent(event);
          }
          if (this._hand !== null) {
            this._hand.dispatchEvent(event);
          }
          return this;
        }
        connect(inputSource) {
          if (inputSource && inputSource.hand) {
            const hand = this._hand;
            if (hand) {
              for (const inputjoint of inputSource.hand.values()) {
                this._getHandJoint(hand, inputjoint);
              }
            }
          }
          this.dispatchEvent({ type: "connected", data: inputSource });
          return this;
        }
        disconnect(inputSource) {
          this.dispatchEvent({ type: "disconnected", data: inputSource });
          if (this._targetRay !== null) {
            this._targetRay.visible = false;
          }
          if (this._grip !== null) {
            this._grip.visible = false;
          }
          if (this._hand !== null) {
            this._hand.visible = false;
          }
          return this;
        }
        update(inputSource, frame, referenceSpace) {
          let inputPose = null;
          let gripPose = null;
          let handPose = null;
          const targetRay = this._targetRay;
          const grip = this._grip;
          const hand = this._hand;
          if (inputSource && frame.session.visibilityState !== "visible-blurred") {
            if (hand && inputSource.hand) {
              handPose = true;
              for (const inputjoint of inputSource.hand.values()) {
                const jointPose = frame.getJointPose(inputjoint, referenceSpace);
                const joint = this._getHandJoint(hand, inputjoint);
                if (jointPose !== null) {
                  joint.matrix.fromArray(jointPose.transform.matrix);
                  joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                  joint.matrixWorldNeedsUpdate = true;
                  joint.jointRadius = jointPose.radius;
                }
                joint.visible = jointPose !== null;
              }
              const indexTip = hand.joints["index-finger-tip"];
              const thumbTip = hand.joints["thumb-tip"];
              const distance = indexTip.position.distanceTo(thumbTip.position);
              const distanceToPinch = 0.02;
              const threshold = 5e-3;
              if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                hand.inputState.pinching = false;
                this.dispatchEvent({
                  type: "pinchend",
                  handedness: inputSource.handedness,
                  target: this
                });
              } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                hand.inputState.pinching = true;
                this.dispatchEvent({
                  type: "pinchstart",
                  handedness: inputSource.handedness,
                  target: this
                });
              }
            } else {
              if (grip !== null && inputSource.gripSpace) {
                gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
                if (gripPose !== null) {
                  grip.matrix.fromArray(gripPose.transform.matrix);
                  grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                  grip.matrixWorldNeedsUpdate = true;
                  if (gripPose.linearVelocity) {
                    grip.hasLinearVelocity = true;
                    grip.linearVelocity.copy(gripPose.linearVelocity);
                  } else {
                    grip.hasLinearVelocity = false;
                  }
                  if (gripPose.angularVelocity) {
                    grip.hasAngularVelocity = true;
                    grip.angularVelocity.copy(gripPose.angularVelocity);
                  } else {
                    grip.hasAngularVelocity = false;
                  }
                }
              }
            }
            if (targetRay !== null) {
              inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
              if (inputPose === null && gripPose !== null) {
                inputPose = gripPose;
              }
              if (inputPose !== null) {
                targetRay.matrix.fromArray(inputPose.transform.matrix);
                targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                targetRay.matrixWorldNeedsUpdate = true;
                if (inputPose.linearVelocity) {
                  targetRay.hasLinearVelocity = true;
                  targetRay.linearVelocity.copy(inputPose.linearVelocity);
                } else {
                  targetRay.hasLinearVelocity = false;
                }
                if (inputPose.angularVelocity) {
                  targetRay.hasAngularVelocity = true;
                  targetRay.angularVelocity.copy(inputPose.angularVelocity);
                } else {
                  targetRay.hasAngularVelocity = false;
                }
                this.dispatchEvent(_moveEvent);
              }
            }
          }
          if (targetRay !== null) {
            targetRay.visible = inputPose !== null;
          }
          if (grip !== null) {
            grip.visible = gripPose !== null;
          }
          if (hand !== null) {
            hand.visible = handPose !== null;
          }
          return this;
        }
        // private method
        _getHandJoint(hand, inputjoint) {
          if (hand.joints[inputjoint.jointName] === void 0) {
            const joint = new Group();
            joint.matrixAutoUpdate = false;
            joint.visible = false;
            hand.joints[inputjoint.jointName] = joint;
            hand.add(joint);
          }
          return hand.joints[inputjoint.jointName];
        }
      };
      DepthTexture = class extends Texture {
        constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format2) {
          format2 = format2 !== void 0 ? format2 : DepthFormat;
          if (format2 !== DepthFormat && format2 !== DepthStencilFormat) {
            throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
          }
          if (type === void 0 && format2 === DepthFormat)
            type = UnsignedIntType;
          if (type === void 0 && format2 === DepthStencilFormat)
            type = UnsignedInt248Type;
          super(null, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy);
          this.isDepthTexture = true;
          this.image = { width, height };
          this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
          this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
          this.flipY = false;
          this.generateMipmaps = false;
          this.compareFunction = null;
        }
        copy(source) {
          super.copy(source);
          this.compareFunction = source.compareFunction;
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          if (this.compareFunction !== null)
            data.compareFunction = this.compareFunction;
          return data;
        }
      };
      WebXRManager = class extends EventDispatcher {
        constructor(renderer, gl) {
          super();
          const scope = this;
          let session = null;
          let framebufferScaleFactor = 1;
          let referenceSpace = null;
          let referenceSpaceType = "local-floor";
          let foveation = 1;
          let customReferenceSpace = null;
          let pose = null;
          let glBinding = null;
          let glProjLayer = null;
          let glBaseLayer = null;
          let xrFrame = null;
          const attributes = gl.getContextAttributes();
          let initialRenderTarget = null;
          let newRenderTarget = null;
          const controllers = [];
          const controllerInputSources = [];
          const cameraL = new PerspectiveCamera();
          cameraL.layers.enable(1);
          cameraL.viewport = new Vector4();
          const cameraR = new PerspectiveCamera();
          cameraR.layers.enable(2);
          cameraR.viewport = new Vector4();
          const cameras = [cameraL, cameraR];
          const cameraXR = new ArrayCamera();
          cameraXR.layers.enable(1);
          cameraXR.layers.enable(2);
          let _currentDepthNear = null;
          let _currentDepthFar = null;
          this.cameraAutoUpdate = true;
          this.enabled = false;
          this.isPresenting = false;
          this.getController = function(index) {
            let controller = controllers[index];
            if (controller === void 0) {
              controller = new WebXRController();
              controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
          };
          this.getControllerGrip = function(index) {
            let controller = controllers[index];
            if (controller === void 0) {
              controller = new WebXRController();
              controllers[index] = controller;
            }
            return controller.getGripSpace();
          };
          this.getHand = function(index) {
            let controller = controllers[index];
            if (controller === void 0) {
              controller = new WebXRController();
              controllers[index] = controller;
            }
            return controller.getHandSpace();
          };
          function onSessionEvent(event) {
            const controllerIndex = controllerInputSources.indexOf(event.inputSource);
            if (controllerIndex === -1) {
              return;
            }
            const controller = controllers[controllerIndex];
            if (controller !== void 0) {
              controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
              controller.dispatchEvent({ type: event.type, data: event.inputSource });
            }
          }
          function onSessionEnd() {
            session.removeEventListener("select", onSessionEvent);
            session.removeEventListener("selectstart", onSessionEvent);
            session.removeEventListener("selectend", onSessionEvent);
            session.removeEventListener("squeeze", onSessionEvent);
            session.removeEventListener("squeezestart", onSessionEvent);
            session.removeEventListener("squeezeend", onSessionEvent);
            session.removeEventListener("end", onSessionEnd);
            session.removeEventListener("inputsourceschange", onInputSourcesChange);
            for (let i = 0; i < controllers.length; i++) {
              const inputSource = controllerInputSources[i];
              if (inputSource === null)
                continue;
              controllerInputSources[i] = null;
              controllers[i].disconnect(inputSource);
            }
            _currentDepthNear = null;
            _currentDepthFar = null;
            renderer.setRenderTarget(initialRenderTarget);
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            newRenderTarget = null;
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({ type: "sessionend" });
          }
          this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) {
              console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
            }
          };
          this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) {
              console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
            }
          };
          this.getReferenceSpace = function() {
            return customReferenceSpace || referenceSpace;
          };
          this.setReferenceSpace = function(space) {
            customReferenceSpace = space;
          };
          this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
          };
          this.getBinding = function() {
            return glBinding;
          };
          this.getFrame = function() {
            return xrFrame;
          };
          this.getSession = function() {
            return session;
          };
          this.setSession = async function(value) {
            session = value;
            if (session !== null) {
              initialRenderTarget = renderer.getRenderTarget();
              session.addEventListener("select", onSessionEvent);
              session.addEventListener("selectstart", onSessionEvent);
              session.addEventListener("selectend", onSessionEvent);
              session.addEventListener("squeeze", onSessionEvent);
              session.addEventListener("squeezestart", onSessionEvent);
              session.addEventListener("squeezeend", onSessionEvent);
              session.addEventListener("end", onSessionEnd);
              session.addEventListener("inputsourceschange", onInputSourcesChange);
              if (attributes.xrCompatible !== true) {
                await gl.makeXRCompatible();
              }
              if (session.renderState.layers === void 0 || renderer.capabilities.isWebGL2 === false) {
                const layerInit = {
                  antialias: session.renderState.layers === void 0 ? attributes.antialias : true,
                  alpha: true,
                  depth: attributes.depth,
                  stencil: attributes.stencil,
                  framebufferScaleFactor
                };
                glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                session.updateRenderState({ baseLayer: glBaseLayer });
                newRenderTarget = new WebGLRenderTarget(
                  glBaseLayer.framebufferWidth,
                  glBaseLayer.framebufferHeight,
                  {
                    format: RGBAFormat,
                    type: UnsignedByteType,
                    colorSpace: renderer.outputColorSpace,
                    stencilBuffer: attributes.stencil
                  }
                );
              } else {
                let depthFormat = null;
                let depthType = null;
                let glDepthFormat = null;
                if (attributes.depth) {
                  glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
                  depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
                  depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
                }
                const projectionlayerInit = {
                  colorFormat: gl.RGBA8,
                  depthFormat: glDepthFormat,
                  scaleFactor: framebufferScaleFactor
                };
                glBinding = new XRWebGLBinding(session, gl);
                glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                session.updateRenderState({ layers: [glProjLayer] });
                newRenderTarget = new WebGLRenderTarget(
                  glProjLayer.textureWidth,
                  glProjLayer.textureHeight,
                  {
                    format: RGBAFormat,
                    type: UnsignedByteType,
                    depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                    stencilBuffer: attributes.stencil,
                    colorSpace: renderer.outputColorSpace,
                    samples: attributes.antialias ? 4 : 0
                  }
                );
                const renderTargetProperties = renderer.properties.get(newRenderTarget);
                renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
              }
              newRenderTarget.isXRRenderTarget = true;
              this.setFoveation(foveation);
              customReferenceSpace = null;
              referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
              animation.setContext(session);
              animation.start();
              scope.isPresenting = true;
              scope.dispatchEvent({ type: "sessionstart" });
            }
          };
          this.getEnvironmentBlendMode = function() {
            if (session !== null) {
              return session.environmentBlendMode;
            }
          };
          function onInputSourcesChange(event) {
            for (let i = 0; i < event.removed.length; i++) {
              const inputSource = event.removed[i];
              const index = controllerInputSources.indexOf(inputSource);
              if (index >= 0) {
                controllerInputSources[index] = null;
                controllers[index].disconnect(inputSource);
              }
            }
            for (let i = 0; i < event.added.length; i++) {
              const inputSource = event.added[i];
              let controllerIndex = controllerInputSources.indexOf(inputSource);
              if (controllerIndex === -1) {
                for (let i2 = 0; i2 < controllers.length; i2++) {
                  if (i2 >= controllerInputSources.length) {
                    controllerInputSources.push(inputSource);
                    controllerIndex = i2;
                    break;
                  } else if (controllerInputSources[i2] === null) {
                    controllerInputSources[i2] = inputSource;
                    controllerIndex = i2;
                    break;
                  }
                }
                if (controllerIndex === -1)
                  break;
              }
              const controller = controllers[controllerIndex];
              if (controller) {
                controller.connect(inputSource);
              }
            }
          }
          const cameraLPos = new Vector3();
          const cameraRPos = new Vector3();
          function setProjectionFromUnion(camera, cameraL2, cameraR2) {
            cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
            const ipd = cameraLPos.distanceTo(cameraRPos);
            const projL = cameraL2.projectionMatrix.elements;
            const projR = cameraR2.projectionMatrix.elements;
            const near = projL[14] / (projL[10] - 1);
            const far = projL[14] / (projL[10] + 1);
            const topFov = (projL[9] + 1) / projL[5];
            const bottomFov = (projL[9] - 1) / projL[5];
            const leftFov = (projL[8] - 1) / projL[0];
            const rightFov = (projR[8] + 1) / projR[0];
            const left = near * leftFov;
            const right = near * rightFov;
            const zOffset = ipd / (-leftFov + rightFov);
            const xOffset = zOffset * -leftFov;
            cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            const near2 = near + zOffset;
            const far2 = far + zOffset;
            const left2 = left - xOffset;
            const right2 = right + (ipd - xOffset);
            const top2 = topFov * far / far2 * near2;
            const bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
          }
          function updateCamera(camera, parent) {
            if (parent === null) {
              camera.matrixWorld.copy(camera.matrix);
            } else {
              camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            }
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
          }
          this.updateCamera = function(camera) {
            if (session === null)
              return;
            cameraXR.near = cameraR.near = cameraL.near = camera.near;
            cameraXR.far = cameraR.far = cameraL.far = camera.far;
            if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
              session.updateRenderState({
                depthNear: cameraXR.near,
                depthFar: cameraXR.far
              });
              _currentDepthNear = cameraXR.near;
              _currentDepthFar = cameraXR.far;
            }
            const parent = camera.parent;
            const cameras2 = cameraXR.cameras;
            updateCamera(cameraXR, parent);
            for (let i = 0; i < cameras2.length; i++) {
              updateCamera(cameras2[i], parent);
            }
            if (cameras2.length === 2) {
              setProjectionFromUnion(cameraXR, cameraL, cameraR);
            } else {
              cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
            }
            updateUserCamera(camera, cameraXR, parent);
          };
          function updateUserCamera(camera, cameraXR2, parent) {
            if (parent === null) {
              camera.matrix.copy(cameraXR2.matrixWorld);
            } else {
              camera.matrix.copy(parent.matrixWorld);
              camera.matrix.invert();
              camera.matrix.multiply(cameraXR2.matrixWorld);
            }
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.updateMatrixWorld(true);
            camera.projectionMatrix.copy(cameraXR2.projectionMatrix);
            camera.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
            if (camera.isPerspectiveCamera) {
              camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
              camera.zoom = 1;
            }
          }
          this.getCamera = function() {
            return cameraXR;
          };
          this.getFoveation = function() {
            if (glProjLayer === null && glBaseLayer === null) {
              return void 0;
            }
            return foveation;
          };
          this.setFoveation = function(value) {
            foveation = value;
            if (glProjLayer !== null) {
              glProjLayer.fixedFoveation = value;
            }
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
              glBaseLayer.fixedFoveation = value;
            }
          };
          let onAnimationFrameCallback = null;
          function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
              const views = pose.views;
              if (glBaseLayer !== null) {
                renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
                renderer.setRenderTarget(newRenderTarget);
              }
              let cameraXRNeedsUpdate = false;
              if (views.length !== cameraXR.cameras.length) {
                cameraXR.cameras.length = 0;
                cameraXRNeedsUpdate = true;
              }
              for (let i = 0; i < views.length; i++) {
                const view = views[i];
                let viewport = null;
                if (glBaseLayer !== null) {
                  viewport = glBaseLayer.getViewport(view);
                } else {
                  const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                  viewport = glSubImage.viewport;
                  if (i === 0) {
                    renderer.setRenderTargetTextures(
                      newRenderTarget,
                      glSubImage.colorTexture,
                      glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
                    );
                    renderer.setRenderTarget(newRenderTarget);
                  }
                }
                let camera = cameras[i];
                if (camera === void 0) {
                  camera = new PerspectiveCamera();
                  camera.layers.enable(i);
                  camera.viewport = new Vector4();
                  cameras[i] = camera;
                }
                camera.matrix.fromArray(view.transform.matrix);
                camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
                camera.projectionMatrix.fromArray(view.projectionMatrix);
                camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
                camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                if (i === 0) {
                  cameraXR.matrix.copy(camera.matrix);
                  cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
                }
                if (cameraXRNeedsUpdate === true) {
                  cameraXR.cameras.push(camera);
                }
              }
            }
            for (let i = 0; i < controllers.length; i++) {
              const inputSource = controllerInputSources[i];
              const controller = controllers[i];
              if (inputSource !== null && controller !== void 0) {
                controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
              }
            }
            if (onAnimationFrameCallback)
              onAnimationFrameCallback(time, frame);
            if (frame.detectedPlanes) {
              scope.dispatchEvent({ type: "planesdetected", data: frame });
            }
            xrFrame = null;
          }
          const animation = new WebGLAnimation();
          animation.setAnimationLoop(onAnimationFrame);
          this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
          };
          this.dispose = function() {
          };
        }
      };
      WebGLRenderer = class {
        constructor(parameters = {}) {
          const {
            canvas = createCanvasElement(),
            context = null,
            depth = true,
            stencil = true,
            alpha = false,
            antialias = false,
            premultipliedAlpha = true,
            preserveDrawingBuffer = false,
            powerPreference = "default",
            failIfMajorPerformanceCaveat = false
          } = parameters;
          this.isWebGLRenderer = true;
          let _alpha;
          if (context !== null) {
            _alpha = context.getContextAttributes().alpha;
          } else {
            _alpha = alpha;
          }
          const uintClearColor = new Uint32Array(4);
          const intClearColor = new Int32Array(4);
          let currentRenderList = null;
          let currentRenderState = null;
          const renderListStack = [];
          const renderStateStack = [];
          this.domElement = canvas;
          this.debug = {
            /**
             * Enables error checking and reporting when shader programs are being compiled
             * @type {boolean}
             */
            checkShaderErrors: true,
            /**
             * Callback for custom error reporting.
             * @type {?Function}
             */
            onShaderError: null
          };
          this.autoClear = true;
          this.autoClearColor = true;
          this.autoClearDepth = true;
          this.autoClearStencil = true;
          this.sortObjects = true;
          this.clippingPlanes = [];
          this.localClippingEnabled = false;
          this.outputColorSpace = SRGBColorSpace;
          this._useLegacyLights = false;
          this.toneMapping = NoToneMapping;
          this.toneMappingExposure = 1;
          const _this = this;
          let _isContextLost = false;
          let _currentActiveCubeFace = 0;
          let _currentActiveMipmapLevel = 0;
          let _currentRenderTarget = null;
          let _currentMaterialId = -1;
          let _currentCamera = null;
          const _currentViewport = new Vector4();
          const _currentScissor = new Vector4();
          let _currentScissorTest = null;
          const _currentClearColor = new Color(0);
          let _currentClearAlpha = 0;
          let _width = canvas.width;
          let _height = canvas.height;
          let _pixelRatio = 1;
          let _opaqueSort = null;
          let _transparentSort = null;
          const _viewport = new Vector4(0, 0, _width, _height);
          const _scissor = new Vector4(0, 0, _width, _height);
          let _scissorTest = false;
          const _frustum = new Frustum();
          let _clippingEnabled = false;
          let _localClippingEnabled = false;
          let _transmissionRenderTarget = null;
          const _projScreenMatrix2 = new Matrix4();
          const _vector22 = new Vector2();
          const _vector32 = new Vector3();
          const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
          function getTargetPixelRatio() {
            return _currentRenderTarget === null ? _pixelRatio : 1;
          }
          let _gl = context;
          function getContext(contextNames, contextAttributes) {
            for (let i = 0; i < contextNames.length; i++) {
              const contextName = contextNames[i];
              const context2 = canvas.getContext(contextName, contextAttributes);
              if (context2 !== null)
                return context2;
            }
            return null;
          }
          try {
            const contextAttributes = {
              alpha: true,
              depth,
              stencil,
              antialias,
              premultipliedAlpha,
              preserveDrawingBuffer,
              powerPreference,
              failIfMajorPerformanceCaveat
            };
            if ("setAttribute" in canvas)
              canvas.setAttribute("data-engine", `three.js r${REVISION}`);
            canvas.addEventListener("webglcontextlost", onContextLost, false);
            canvas.addEventListener("webglcontextrestored", onContextRestore, false);
            canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
            if (_gl === null) {
              const contextNames = ["webgl2", "webgl", "experimental-webgl"];
              if (_this.isWebGL1Renderer === true) {
                contextNames.shift();
              }
              _gl = getContext(contextNames, contextAttributes);
              if (_gl === null) {
                if (getContext(contextNames)) {
                  throw new Error("Error creating WebGL context with your selected attributes.");
                } else {
                  throw new Error("Error creating WebGL context.");
                }
              }
            }
            if (typeof WebGLRenderingContext !== "undefined" && _gl instanceof WebGLRenderingContext) {
              console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.");
            }
            if (_gl.getShaderPrecisionFormat === void 0) {
              _gl.getShaderPrecisionFormat = function() {
                return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
              };
            }
          } catch (error) {
            console.error("THREE.WebGLRenderer: " + error.message);
            throw error;
          }
          let extensions2, capabilities, state, info;
          let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
          let programCache, materials, renderLists, renderStates, clipping, shadowMap;
          let background, morphtargets, bufferRenderer, indexedBufferRenderer;
          let utils, bindingStates, uniformsGroups;
          function initGLContext() {
            extensions2 = new WebGLExtensions(_gl);
            capabilities = new WebGLCapabilities(_gl, extensions2, parameters);
            extensions2.init(capabilities);
            utils = new WebGLUtils(_gl, extensions2, capabilities);
            state = new WebGLState(_gl, extensions2, capabilities);
            info = new WebGLInfo(_gl);
            properties = new WebGLProperties();
            textures = new WebGLTextures(_gl, extensions2, state, properties, capabilities, utils, info);
            cubemaps = new WebGLCubeMaps(_this);
            cubeuvmaps = new WebGLCubeUVMaps(_this);
            attributes = new WebGLAttributes(_gl, capabilities);
            bindingStates = new WebGLBindingStates(_gl, extensions2, attributes, capabilities);
            geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
            objects = new WebGLObjects(_gl, geometries, attributes, info);
            morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
            clipping = new WebGLClipping(properties);
            programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions2, capabilities, bindingStates, clipping);
            materials = new WebGLMaterials(_this, properties);
            renderLists = new WebGLRenderLists();
            renderStates = new WebGLRenderStates(extensions2, capabilities);
            background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
            shadowMap = new WebGLShadowMap(_this, objects, capabilities);
            uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
            bufferRenderer = new WebGLBufferRenderer(_gl, extensions2, info, capabilities);
            indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions2, info, capabilities);
            info.programs = programCache.programs;
            _this.capabilities = capabilities;
            _this.extensions = extensions2;
            _this.properties = properties;
            _this.renderLists = renderLists;
            _this.shadowMap = shadowMap;
            _this.state = state;
            _this.info = info;
          }
          initGLContext();
          const xr = new WebXRManager(_this, _gl);
          this.xr = xr;
          this.getContext = function() {
            return _gl;
          };
          this.getContextAttributes = function() {
            return _gl.getContextAttributes();
          };
          this.forceContextLoss = function() {
            const extension = extensions2.get("WEBGL_lose_context");
            if (extension)
              extension.loseContext();
          };
          this.forceContextRestore = function() {
            const extension = extensions2.get("WEBGL_lose_context");
            if (extension)
              extension.restoreContext();
          };
          this.getPixelRatio = function() {
            return _pixelRatio;
          };
          this.setPixelRatio = function(value) {
            if (value === void 0)
              return;
            _pixelRatio = value;
            this.setSize(_width, _height, false);
          };
          this.getSize = function(target2) {
            return target2.set(_width, _height);
          };
          this.setSize = function(width, height, updateStyle = true) {
            if (xr.isPresenting) {
              console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
              return;
            }
            _width = width;
            _height = height;
            canvas.width = Math.floor(width * _pixelRatio);
            canvas.height = Math.floor(height * _pixelRatio);
            if (updateStyle === true) {
              canvas.style.width = width + "px";
              canvas.style.height = height + "px";
            }
            this.setViewport(0, 0, width, height);
          };
          this.getDrawingBufferSize = function(target2) {
            return target2.set(_width * _pixelRatio, _height * _pixelRatio).floor();
          };
          this.setDrawingBufferSize = function(width, height, pixelRatio) {
            _width = width;
            _height = height;
            _pixelRatio = pixelRatio;
            canvas.width = Math.floor(width * pixelRatio);
            canvas.height = Math.floor(height * pixelRatio);
            this.setViewport(0, 0, width, height);
          };
          this.getCurrentViewport = function(target2) {
            return target2.copy(_currentViewport);
          };
          this.getViewport = function(target2) {
            return target2.copy(_viewport);
          };
          this.setViewport = function(x, y, width, height) {
            if (x.isVector4) {
              _viewport.set(x.x, x.y, x.z, x.w);
            } else {
              _viewport.set(x, y, width, height);
            }
            state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
          };
          this.getScissor = function(target2) {
            return target2.copy(_scissor);
          };
          this.setScissor = function(x, y, width, height) {
            if (x.isVector4) {
              _scissor.set(x.x, x.y, x.z, x.w);
            } else {
              _scissor.set(x, y, width, height);
            }
            state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
          };
          this.getScissorTest = function() {
            return _scissorTest;
          };
          this.setScissorTest = function(boolean) {
            state.setScissorTest(_scissorTest = boolean);
          };
          this.setOpaqueSort = function(method) {
            _opaqueSort = method;
          };
          this.setTransparentSort = function(method) {
            _transparentSort = method;
          };
          this.getClearColor = function(target2) {
            return target2.copy(background.getClearColor());
          };
          this.setClearColor = function() {
            background.setClearColor.apply(background, arguments);
          };
          this.getClearAlpha = function() {
            return background.getClearAlpha();
          };
          this.setClearAlpha = function() {
            background.setClearAlpha.apply(background, arguments);
          };
          this.clear = function(color = true, depth2 = true, stencil2 = true) {
            let bits = 0;
            if (color) {
              let isIntegerFormat = false;
              if (_currentRenderTarget !== null) {
                const targetFormat = _currentRenderTarget.texture.format;
                isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
              }
              if (isIntegerFormat) {
                const targetType = _currentRenderTarget.texture.type;
                const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
                const clearColor = background.getClearColor();
                const a = background.getClearAlpha();
                const r = clearColor.r;
                const g = clearColor.g;
                const b = clearColor.b;
                if (isUnsignedType) {
                  uintClearColor[0] = r;
                  uintClearColor[1] = g;
                  uintClearColor[2] = b;
                  uintClearColor[3] = a;
                  _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
                } else {
                  intClearColor[0] = r;
                  intClearColor[1] = g;
                  intClearColor[2] = b;
                  intClearColor[3] = a;
                  _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
                }
              } else {
                bits |= _gl.COLOR_BUFFER_BIT;
              }
            }
            if (depth2)
              bits |= _gl.DEPTH_BUFFER_BIT;
            if (stencil2)
              bits |= _gl.STENCIL_BUFFER_BIT;
            _gl.clear(bits);
          };
          this.clearColor = function() {
            this.clear(true, false, false);
          };
          this.clearDepth = function() {
            this.clear(false, true, false);
          };
          this.clearStencil = function() {
            this.clear(false, false, true);
          };
          this.dispose = function() {
            canvas.removeEventListener("webglcontextlost", onContextLost, false);
            canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
            canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
            renderLists.dispose();
            renderStates.dispose();
            properties.dispose();
            cubemaps.dispose();
            cubeuvmaps.dispose();
            objects.dispose();
            bindingStates.dispose();
            uniformsGroups.dispose();
            programCache.dispose();
            xr.dispose();
            xr.removeEventListener("sessionstart", onXRSessionStart);
            xr.removeEventListener("sessionend", onXRSessionEnd);
            if (_transmissionRenderTarget) {
              _transmissionRenderTarget.dispose();
              _transmissionRenderTarget = null;
            }
            animation.stop();
          };
          function onContextLost(event) {
            event.preventDefault();
            console.log("THREE.WebGLRenderer: Context Lost.");
            _isContextLost = true;
          }
          function onContextRestore() {
            console.log("THREE.WebGLRenderer: Context Restored.");
            _isContextLost = false;
            const infoAutoReset = info.autoReset;
            const shadowMapEnabled = shadowMap.enabled;
            const shadowMapAutoUpdate = shadowMap.autoUpdate;
            const shadowMapNeedsUpdate = shadowMap.needsUpdate;
            const shadowMapType = shadowMap.type;
            initGLContext();
            info.autoReset = infoAutoReset;
            shadowMap.enabled = shadowMapEnabled;
            shadowMap.autoUpdate = shadowMapAutoUpdate;
            shadowMap.needsUpdate = shadowMapNeedsUpdate;
            shadowMap.type = shadowMapType;
          }
          function onContextCreationError(event) {
            console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
          }
          function onMaterialDispose(event) {
            const material = event.target;
            material.removeEventListener("dispose", onMaterialDispose);
            deallocateMaterial(material);
          }
          function deallocateMaterial(material) {
            releaseMaterialProgramReferences(material);
            properties.remove(material);
          }
          function releaseMaterialProgramReferences(material) {
            const programs = properties.get(material).programs;
            if (programs !== void 0) {
              programs.forEach(function(program) {
                programCache.releaseProgram(program);
              });
              if (material.isShaderMaterial) {
                programCache.releaseShaderCache(material);
              }
            }
          }
          this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
            if (scene === null)
              scene = _emptyScene;
            const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
            const program = setProgram(camera, scene, geometry, material, object);
            state.setMaterial(material, frontFaceCW);
            let index = geometry.index;
            let rangeFactor = 1;
            if (material.wireframe === true) {
              index = geometries.getWireframeAttribute(geometry);
              if (index === void 0)
                return;
              rangeFactor = 2;
            }
            const drawRange = geometry.drawRange;
            const position3 = geometry.attributes.position;
            let drawStart = drawRange.start * rangeFactor;
            let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
            if (group !== null) {
              drawStart = Math.max(drawStart, group.start * rangeFactor);
              drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
            }
            if (index !== null) {
              drawStart = Math.max(drawStart, 0);
              drawEnd = Math.min(drawEnd, index.count);
            } else if (position3 !== void 0 && position3 !== null) {
              drawStart = Math.max(drawStart, 0);
              drawEnd = Math.min(drawEnd, position3.count);
            }
            const drawCount = drawEnd - drawStart;
            if (drawCount < 0 || drawCount === Infinity)
              return;
            bindingStates.setup(object, material, program, geometry, index);
            let attribute;
            let renderer = bufferRenderer;
            if (index !== null) {
              attribute = attributes.get(index);
              renderer = indexedBufferRenderer;
              renderer.setIndex(attribute);
            }
            if (object.isMesh) {
              if (material.wireframe === true) {
                state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                renderer.setMode(_gl.LINES);
              } else {
                renderer.setMode(_gl.TRIANGLES);
              }
            } else if (object.isLine) {
              let lineWidth = material.linewidth;
              if (lineWidth === void 0)
                lineWidth = 1;
              state.setLineWidth(lineWidth * getTargetPixelRatio());
              if (object.isLineSegments) {
                renderer.setMode(_gl.LINES);
              } else if (object.isLineLoop) {
                renderer.setMode(_gl.LINE_LOOP);
              } else {
                renderer.setMode(_gl.LINE_STRIP);
              }
            } else if (object.isPoints) {
              renderer.setMode(_gl.POINTS);
            } else if (object.isSprite) {
              renderer.setMode(_gl.TRIANGLES);
            }
            if (object.isInstancedMesh) {
              renderer.renderInstances(drawStart, drawCount, object.count);
            } else if (geometry.isInstancedBufferGeometry) {
              const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
              const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
              renderer.renderInstances(drawStart, drawCount, instanceCount);
            } else {
              renderer.render(drawStart, drawCount);
            }
          };
          this.compile = function(scene, camera) {
            function prepare(material, scene2, object) {
              if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
                material.side = BackSide;
                material.needsUpdate = true;
                getProgram(material, scene2, object);
                material.side = FrontSide;
                material.needsUpdate = true;
                getProgram(material, scene2, object);
                material.side = DoubleSide;
              } else {
                getProgram(material, scene2, object);
              }
            }
            currentRenderState = renderStates.get(scene);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            scene.traverseVisible(function(object) {
              if (object.isLight && object.layers.test(camera.layers)) {
                currentRenderState.pushLight(object);
                if (object.castShadow) {
                  currentRenderState.pushShadow(object);
                }
              }
            });
            currentRenderState.setupLights(_this._useLegacyLights);
            scene.traverse(function(object) {
              const material = object.material;
              if (material) {
                if (Array.isArray(material)) {
                  for (let i = 0; i < material.length; i++) {
                    const material2 = material[i];
                    prepare(material2, scene, object);
                  }
                } else {
                  prepare(material, scene, object);
                }
              }
            });
            renderStateStack.pop();
            currentRenderState = null;
          };
          let onAnimationFrameCallback = null;
          function onAnimationFrame(time) {
            if (onAnimationFrameCallback)
              onAnimationFrameCallback(time);
          }
          function onXRSessionStart() {
            animation.stop();
          }
          function onXRSessionEnd() {
            animation.start();
          }
          const animation = new WebGLAnimation();
          animation.setAnimationLoop(onAnimationFrame);
          if (typeof self !== "undefined")
            animation.setContext(self);
          this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
            xr.setAnimationLoop(callback);
            callback === null ? animation.stop() : animation.start();
          };
          xr.addEventListener("sessionstart", onXRSessionStart);
          xr.addEventListener("sessionend", onXRSessionEnd);
          this.render = function(scene, camera) {
            if (camera !== void 0 && camera.isCamera !== true) {
              console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
              return;
            }
            if (_isContextLost === true)
              return;
            if (scene.matrixWorldAutoUpdate === true)
              scene.updateMatrixWorld();
            if (camera.parent === null && camera.matrixWorldAutoUpdate === true)
              camera.updateMatrixWorld();
            if (xr.enabled === true && xr.isPresenting === true) {
              if (xr.cameraAutoUpdate === true)
                xr.updateCamera(camera);
              camera = xr.getCamera();
            }
            if (scene.isScene === true)
              scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
            currentRenderState = renderStates.get(scene, renderStateStack.length);
            currentRenderState.init();
            renderStateStack.push(currentRenderState);
            _projScreenMatrix2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
            _frustum.setFromProjectionMatrix(_projScreenMatrix2);
            _localClippingEnabled = this.localClippingEnabled;
            _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
            currentRenderList = renderLists.get(scene, renderListStack.length);
            currentRenderList.init();
            renderListStack.push(currentRenderList);
            projectObject(scene, camera, 0, _this.sortObjects);
            currentRenderList.finish();
            if (_this.sortObjects === true) {
              currentRenderList.sort(_opaqueSort, _transparentSort);
            }
            this.info.render.frame++;
            if (_clippingEnabled === true)
              clipping.beginShadows();
            const shadowsArray = currentRenderState.state.shadowsArray;
            shadowMap.render(shadowsArray, scene, camera);
            if (_clippingEnabled === true)
              clipping.endShadows();
            if (this.info.autoReset === true)
              this.info.reset();
            background.render(currentRenderList, scene);
            currentRenderState.setupLights(_this._useLegacyLights);
            if (camera.isArrayCamera) {
              const cameras = camera.cameras;
              for (let i = 0, l = cameras.length; i < l; i++) {
                const camera2 = cameras[i];
                renderScene(currentRenderList, scene, camera2, camera2.viewport);
              }
            } else {
              renderScene(currentRenderList, scene, camera);
            }
            if (_currentRenderTarget !== null) {
              textures.updateMultisampleRenderTarget(_currentRenderTarget);
              textures.updateRenderTargetMipmap(_currentRenderTarget);
            }
            if (scene.isScene === true)
              scene.onAfterRender(_this, scene, camera);
            bindingStates.resetDefaultState();
            _currentMaterialId = -1;
            _currentCamera = null;
            renderStateStack.pop();
            if (renderStateStack.length > 0) {
              currentRenderState = renderStateStack[renderStateStack.length - 1];
            } else {
              currentRenderState = null;
            }
            renderListStack.pop();
            if (renderListStack.length > 0) {
              currentRenderList = renderListStack[renderListStack.length - 1];
            } else {
              currentRenderList = null;
            }
          };
          function projectObject(object, camera, groupOrder, sortObjects) {
            if (object.visible === false)
              return;
            const visible = object.layers.test(camera.layers);
            if (visible) {
              if (object.isGroup) {
                groupOrder = object.renderOrder;
              } else if (object.isLOD) {
                if (object.autoUpdate === true)
                  object.update(camera);
              } else if (object.isLight) {
                currentRenderState.pushLight(object);
                if (object.castShadow) {
                  currentRenderState.pushShadow(object);
                }
              } else if (object.isSprite) {
                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                  if (sortObjects) {
                    _vector32.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
                  }
                  const geometry = objects.update(object);
                  const material = object.material;
                  if (material.visible) {
                    currentRenderList.push(object, geometry, material, groupOrder, _vector32.z, null);
                  }
                }
              } else if (object.isMesh || object.isLine || object.isPoints) {
                if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                  const geometry = objects.update(object);
                  const material = object.material;
                  if (sortObjects) {
                    if (object.boundingSphere !== void 0) {
                      if (object.boundingSphere === null)
                        object.computeBoundingSphere();
                      _vector32.copy(object.boundingSphere.center);
                    } else {
                      if (geometry.boundingSphere === null)
                        geometry.computeBoundingSphere();
                      _vector32.copy(geometry.boundingSphere.center);
                    }
                    _vector32.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
                  }
                  if (Array.isArray(material)) {
                    const groups = geometry.groups;
                    for (let i = 0, l = groups.length; i < l; i++) {
                      const group = groups[i];
                      const groupMaterial = material[group.materialIndex];
                      if (groupMaterial && groupMaterial.visible) {
                        currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector32.z, group);
                      }
                    }
                  } else if (material.visible) {
                    currentRenderList.push(object, geometry, material, groupOrder, _vector32.z, null);
                  }
                }
              }
            }
            const children = object.children;
            for (let i = 0, l = children.length; i < l; i++) {
              projectObject(children[i], camera, groupOrder, sortObjects);
            }
          }
          function renderScene(currentRenderList2, scene, camera, viewport) {
            const opaqueObjects = currentRenderList2.opaque;
            const transmissiveObjects = currentRenderList2.transmissive;
            const transparentObjects = currentRenderList2.transparent;
            currentRenderState.setupLightsView(camera);
            if (_clippingEnabled === true)
              clipping.setGlobalState(_this.clippingPlanes, camera);
            if (transmissiveObjects.length > 0)
              renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
            if (viewport)
              state.viewport(_currentViewport.copy(viewport));
            if (opaqueObjects.length > 0)
              renderObjects(opaqueObjects, scene, camera);
            if (transmissiveObjects.length > 0)
              renderObjects(transmissiveObjects, scene, camera);
            if (transparentObjects.length > 0)
              renderObjects(transparentObjects, scene, camera);
            state.buffers.depth.setTest(true);
            state.buffers.depth.setMask(true);
            state.buffers.color.setMask(true);
            state.setPolygonOffset(false);
          }
          function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
            const isWebGL2 = capabilities.isWebGL2;
            if (_transmissionRenderTarget === null) {
              _transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
                generateMipmaps: true,
                type: extensions2.has("EXT_color_buffer_half_float") ? HalfFloatType : UnsignedByteType,
                minFilter: LinearMipmapLinearFilter,
                samples: isWebGL2 ? 4 : 0
              });
            }
            _this.getDrawingBufferSize(_vector22);
            if (isWebGL2) {
              _transmissionRenderTarget.setSize(_vector22.x, _vector22.y);
            } else {
              _transmissionRenderTarget.setSize(floorPowerOfTwo(_vector22.x), floorPowerOfTwo(_vector22.y));
            }
            const currentRenderTarget = _this.getRenderTarget();
            _this.setRenderTarget(_transmissionRenderTarget);
            _this.getClearColor(_currentClearColor);
            _currentClearAlpha = _this.getClearAlpha();
            if (_currentClearAlpha < 1)
              _this.setClearColor(16777215, 0.5);
            _this.clear();
            const currentToneMapping = _this.toneMapping;
            _this.toneMapping = NoToneMapping;
            renderObjects(opaqueObjects, scene, camera);
            textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
            textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            let renderTargetNeedsUpdate = false;
            for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
              const renderItem = transmissiveObjects[i];
              const object = renderItem.object;
              const geometry = renderItem.geometry;
              const material = renderItem.material;
              const group = renderItem.group;
              if (material.side === DoubleSide && object.layers.test(camera.layers)) {
                const currentSide = material.side;
                material.side = BackSide;
                material.needsUpdate = true;
                renderObject(object, scene, camera, geometry, material, group);
                material.side = currentSide;
                material.needsUpdate = true;
                renderTargetNeedsUpdate = true;
              }
            }
            if (renderTargetNeedsUpdate === true) {
              textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
              textures.updateRenderTargetMipmap(_transmissionRenderTarget);
            }
            _this.setRenderTarget(currentRenderTarget);
            _this.setClearColor(_currentClearColor, _currentClearAlpha);
            _this.toneMapping = currentToneMapping;
          }
          function renderObjects(renderList, scene, camera) {
            const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
            for (let i = 0, l = renderList.length; i < l; i++) {
              const renderItem = renderList[i];
              const object = renderItem.object;
              const geometry = renderItem.geometry;
              const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
              const group = renderItem.group;
              if (object.layers.test(camera.layers)) {
                renderObject(object, scene, camera, geometry, material, group);
              }
            }
          }
          function renderObject(object, scene, camera, geometry, material, group) {
            object.onBeforeRender(_this, scene, camera, geometry, material, group);
            object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
            object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
            material.onBeforeRender(_this, scene, camera, geometry, object, group);
            if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
              material.side = BackSide;
              material.needsUpdate = true;
              _this.renderBufferDirect(camera, scene, geometry, material, object, group);
              material.side = FrontSide;
              material.needsUpdate = true;
              _this.renderBufferDirect(camera, scene, geometry, material, object, group);
              material.side = DoubleSide;
            } else {
              _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            }
            object.onAfterRender(_this, scene, camera, geometry, material, group);
          }
          function getProgram(material, scene, object) {
            if (scene.isScene !== true)
              scene = _emptyScene;
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            const shadowsArray = currentRenderState.state.shadowsArray;
            const lightsStateVersion = lights.state.version;
            const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
            const programCacheKey = programCache.getProgramCacheKey(parameters2);
            let programs = materialProperties.programs;
            materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
            materialProperties.fog = scene.fog;
            materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
            if (programs === void 0) {
              material.addEventListener("dispose", onMaterialDispose);
              programs = /* @__PURE__ */ new Map();
              materialProperties.programs = programs;
            }
            let program = programs.get(programCacheKey);
            if (program !== void 0) {
              if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                updateCommonMaterialProperties(material, parameters2);
                return program;
              }
            } else {
              parameters2.uniforms = programCache.getUniforms(material);
              material.onBuild(object, parameters2, _this);
              material.onBeforeCompile(parameters2, _this);
              program = programCache.acquireProgram(parameters2, programCacheKey);
              programs.set(programCacheKey, program);
              materialProperties.uniforms = parameters2.uniforms;
            }
            const uniforms = materialProperties.uniforms;
            if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
              uniforms.clippingPlanes = clipping.uniform;
            }
            updateCommonMaterialProperties(material, parameters2);
            materialProperties.needsLights = materialNeedsLights(material);
            materialProperties.lightsStateVersion = lightsStateVersion;
            if (materialProperties.needsLights) {
              uniforms.ambientLightColor.value = lights.state.ambient;
              uniforms.lightProbe.value = lights.state.probe;
              uniforms.directionalLights.value = lights.state.directional;
              uniforms.directionalLightShadows.value = lights.state.directionalShadow;
              uniforms.spotLights.value = lights.state.spot;
              uniforms.spotLightShadows.value = lights.state.spotShadow;
              uniforms.rectAreaLights.value = lights.state.rectArea;
              uniforms.ltc_1.value = lights.state.rectAreaLTC1;
              uniforms.ltc_2.value = lights.state.rectAreaLTC2;
              uniforms.pointLights.value = lights.state.point;
              uniforms.pointLightShadows.value = lights.state.pointShadow;
              uniforms.hemisphereLights.value = lights.state.hemi;
              uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
              uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
              uniforms.spotShadowMap.value = lights.state.spotShadowMap;
              uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
              uniforms.spotLightMap.value = lights.state.spotLightMap;
              uniforms.pointShadowMap.value = lights.state.pointShadowMap;
              uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
            }
            const progUniforms = program.getUniforms();
            const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
            materialProperties.currentProgram = program;
            materialProperties.uniformsList = uniformsList;
            return program;
          }
          function updateCommonMaterialProperties(material, parameters2) {
            const materialProperties = properties.get(material);
            materialProperties.outputColorSpace = parameters2.outputColorSpace;
            materialProperties.instancing = parameters2.instancing;
            materialProperties.instancingColor = parameters2.instancingColor;
            materialProperties.skinning = parameters2.skinning;
            materialProperties.morphTargets = parameters2.morphTargets;
            materialProperties.morphNormals = parameters2.morphNormals;
            materialProperties.morphColors = parameters2.morphColors;
            materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
            materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
            materialProperties.numIntersection = parameters2.numClipIntersection;
            materialProperties.vertexAlphas = parameters2.vertexAlphas;
            materialProperties.vertexTangents = parameters2.vertexTangents;
            materialProperties.toneMapping = parameters2.toneMapping;
          }
          function setProgram(camera, scene, geometry, material, object) {
            if (scene.isScene !== true)
              scene = _emptyScene;
            textures.resetTextureUnits();
            const fog = scene.fog;
            const environment = material.isMeshStandardMaterial ? scene.environment : null;
            const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
            const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
            const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
            const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
            const morphTargets = !!geometry.morphAttributes.position;
            const morphNormals = !!geometry.morphAttributes.normal;
            const morphColors = !!geometry.morphAttributes.color;
            let toneMapping = NoToneMapping;
            if (material.toneMapped) {
              if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
                toneMapping = _this.toneMapping;
              }
            }
            const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
            const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
            const materialProperties = properties.get(material);
            const lights = currentRenderState.state.lights;
            if (_clippingEnabled === true) {
              if (_localClippingEnabled === true || camera !== _currentCamera) {
                const useCache = camera === _currentCamera && material.id === _currentMaterialId;
                clipping.setState(material, camera, useCache);
              }
            }
            let needsProgramChange = false;
            if (material.version === materialProperties.__version) {
              if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
                needsProgramChange = true;
              } else if (materialProperties.outputColorSpace !== colorSpace) {
                needsProgramChange = true;
              } else if (object.isInstancedMesh && materialProperties.instancing === false) {
                needsProgramChange = true;
              } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
                needsProgramChange = true;
              } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
                needsProgramChange = true;
              } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
                needsProgramChange = true;
              } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {
                needsProgramChange = true;
              } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {
                needsProgramChange = true;
              } else if (materialProperties.envMap !== envMap) {
                needsProgramChange = true;
              } else if (material.fog === true && materialProperties.fog !== fog) {
                needsProgramChange = true;
              } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
                needsProgramChange = true;
              } else if (materialProperties.vertexAlphas !== vertexAlphas) {
                needsProgramChange = true;
              } else if (materialProperties.vertexTangents !== vertexTangents) {
                needsProgramChange = true;
              } else if (materialProperties.morphTargets !== morphTargets) {
                needsProgramChange = true;
              } else if (materialProperties.morphNormals !== morphNormals) {
                needsProgramChange = true;
              } else if (materialProperties.morphColors !== morphColors) {
                needsProgramChange = true;
              } else if (materialProperties.toneMapping !== toneMapping) {
                needsProgramChange = true;
              } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
                needsProgramChange = true;
              }
            } else {
              needsProgramChange = true;
              materialProperties.__version = material.version;
            }
            let program = materialProperties.currentProgram;
            if (needsProgramChange === true) {
              program = getProgram(material, scene, object);
            }
            let refreshProgram = false;
            let refreshMaterial = false;
            let refreshLights = false;
            const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
            if (state.useProgram(program.program)) {
              refreshProgram = true;
              refreshMaterial = true;
              refreshLights = true;
            }
            if (material.id !== _currentMaterialId) {
              _currentMaterialId = material.id;
              refreshMaterial = true;
            }
            if (refreshProgram || _currentCamera !== camera) {
              p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
              p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
              const uCamPos = p_uniforms.map.cameraPosition;
              if (uCamPos !== void 0) {
                uCamPos.setValue(_gl, _vector32.setFromMatrixPosition(camera.matrixWorld));
              }
              if (capabilities.logarithmicDepthBuffer) {
                p_uniforms.setValue(
                  _gl,
                  "logDepthBufFC",
                  2 / (Math.log(camera.far + 1) / Math.LN2)
                );
              }
              if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
                p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
              }
              if (_currentCamera !== camera) {
                _currentCamera = camera;
                refreshMaterial = true;
                refreshLights = true;
              }
            }
            if (object.isSkinnedMesh) {
              p_uniforms.setOptional(_gl, object, "bindMatrix");
              p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
              const skeleton = object.skeleton;
              if (skeleton) {
                if (capabilities.floatVertexTextures) {
                  if (skeleton.boneTexture === null)
                    skeleton.computeBoneTexture();
                  p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
                  p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
                } else {
                  console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
                }
              }
            }
            const morphAttributes = geometry.morphAttributes;
            if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0 && capabilities.isWebGL2 === true) {
              morphtargets.update(object, geometry, program);
            }
            if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
              materialProperties.receiveShadow = object.receiveShadow;
              p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
            }
            if (material.isMeshGouraudMaterial && material.envMap !== null) {
              m_uniforms.envMap.value = envMap;
              m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            }
            if (refreshMaterial) {
              p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
              if (materialProperties.needsLights) {
                markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
              }
              if (fog && material.fog === true) {
                materials.refreshFogUniforms(m_uniforms, fog);
              }
              materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
              WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
            }
            if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
              WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
              material.uniformsNeedUpdate = false;
            }
            if (material.isSpriteMaterial) {
              p_uniforms.setValue(_gl, "center", object.center);
            }
            p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
            p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
            p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
            if (material.isShaderMaterial || material.isRawShaderMaterial) {
              const groups = material.uniformsGroups;
              for (let i = 0, l = groups.length; i < l; i++) {
                if (capabilities.isWebGL2) {
                  const group = groups[i];
                  uniformsGroups.update(group, program);
                  uniformsGroups.bind(group, program);
                } else {
                  console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
                }
              }
            }
            return program;
          }
          function markUniformsLightsNeedsUpdate(uniforms, value) {
            uniforms.ambientLightColor.needsUpdate = value;
            uniforms.lightProbe.needsUpdate = value;
            uniforms.directionalLights.needsUpdate = value;
            uniforms.directionalLightShadows.needsUpdate = value;
            uniforms.pointLights.needsUpdate = value;
            uniforms.pointLightShadows.needsUpdate = value;
            uniforms.spotLights.needsUpdate = value;
            uniforms.spotLightShadows.needsUpdate = value;
            uniforms.rectAreaLights.needsUpdate = value;
            uniforms.hemisphereLights.needsUpdate = value;
          }
          function materialNeedsLights(material) {
            return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
          }
          this.getActiveCubeFace = function() {
            return _currentActiveCubeFace;
          };
          this.getActiveMipmapLevel = function() {
            return _currentActiveMipmapLevel;
          };
          this.getRenderTarget = function() {
            return _currentRenderTarget;
          };
          this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
            properties.get(renderTarget.texture).__webglTexture = colorTexture;
            properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__hasExternalTextures = true;
            if (renderTargetProperties.__hasExternalTextures) {
              renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
              if (!renderTargetProperties.__autoAllocateDepthBuffer) {
                if (extensions2.has("WEBGL_multisampled_render_to_texture") === true) {
                  console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
                  renderTargetProperties.__useRenderToTexture = false;
                }
              }
            }
          };
          this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
            const renderTargetProperties = properties.get(renderTarget);
            renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
            renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
          };
          this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
            _currentRenderTarget = renderTarget;
            _currentActiveCubeFace = activeCubeFace;
            _currentActiveMipmapLevel = activeMipmapLevel;
            let useDefaultFramebuffer = true;
            let framebuffer = null;
            let isCube = false;
            let isRenderTarget3D = false;
            if (renderTarget) {
              const renderTargetProperties = properties.get(renderTarget);
              if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
                state.bindFramebuffer(_gl.FRAMEBUFFER, null);
                useDefaultFramebuffer = false;
              } else if (renderTargetProperties.__webglFramebuffer === void 0) {
                textures.setupRenderTarget(renderTarget);
              } else if (renderTargetProperties.__hasExternalTextures) {
                textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
              }
              const texture = renderTarget.texture;
              if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
                isRenderTarget3D = true;
              }
              const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
              if (renderTarget.isWebGLCubeRenderTarget) {
                if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
                  framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
                } else {
                  framebuffer = __webglFramebuffer[activeCubeFace];
                }
                isCube = true;
              } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
                framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
              } else {
                if (Array.isArray(__webglFramebuffer)) {
                  framebuffer = __webglFramebuffer[activeMipmapLevel];
                } else {
                  framebuffer = __webglFramebuffer;
                }
              }
              _currentViewport.copy(renderTarget.viewport);
              _currentScissor.copy(renderTarget.scissor);
              _currentScissorTest = renderTarget.scissorTest;
            } else {
              _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
              _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
              _currentScissorTest = _scissorTest;
            }
            const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
              state.drawBuffers(renderTarget, framebuffer);
            }
            state.viewport(_currentViewport);
            state.scissor(_currentScissor);
            state.setScissorTest(_currentScissorTest);
            if (isCube) {
              const textureProperties = properties.get(renderTarget.texture);
              _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
            } else if (isRenderTarget3D) {
              const textureProperties = properties.get(renderTarget.texture);
              const layer = activeCubeFace || 0;
              _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
            }
            _currentMaterialId = -1;
          };
          this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer2, activeCubeFaceIndex) {
            if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
              return;
            }
            let framebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
              framebuffer = framebuffer[activeCubeFaceIndex];
            }
            if (framebuffer) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
              try {
                const texture = renderTarget.texture;
                const textureFormat = texture.format;
                const textureType = texture.type;
                if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                  console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                  return;
                }
                const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions2.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions2.has("EXT_color_buffer_float"));
                if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
                !(textureType === FloatType && (capabilities.isWebGL2 || extensions2.has("OES_texture_float") || extensions2.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
                !halfFloatSupportedByExt) {
                  console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                  return;
                }
                if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
                  _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer2);
                }
              } finally {
                const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
              }
            }
          };
          this.copyFramebufferToTexture = function(position3, texture, level = 0) {
            const levelScale = Math.pow(2, -level);
            const width = Math.floor(texture.image.width * levelScale);
            const height = Math.floor(texture.image.height * levelScale);
            textures.setTexture2D(texture, 0);
            _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position3.x, position3.y, width, height);
            state.unbindTexture();
          };
          this.copyTextureToTexture = function(position3, srcTexture, dstTexture, level = 0) {
            const width = srcTexture.image.width;
            const height = srcTexture.image.height;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            textures.setTexture2D(dstTexture, 0);
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            if (srcTexture.isDataTexture) {
              _gl.texSubImage2D(_gl.TEXTURE_2D, level, position3.x, position3.y, width, height, glFormat, glType, srcTexture.image.data);
            } else {
              if (srcTexture.isCompressedTexture) {
                _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position3.x, position3.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
              } else {
                _gl.texSubImage2D(_gl.TEXTURE_2D, level, position3.x, position3.y, glFormat, glType, srcTexture.image);
              }
            }
            if (level === 0 && dstTexture.generateMipmaps)
              _gl.generateMipmap(_gl.TEXTURE_2D);
            state.unbindTexture();
          };
          this.copyTextureToTexture3D = function(sourceBox, position3, srcTexture, dstTexture, level = 0) {
            if (_this.isWebGL1Renderer) {
              console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
              return;
            }
            const width = sourceBox.max.x - sourceBox.min.x + 1;
            const height = sourceBox.max.y - sourceBox.min.y + 1;
            const depth2 = sourceBox.max.z - sourceBox.min.z + 1;
            const glFormat = utils.convert(dstTexture.format);
            const glType = utils.convert(dstTexture.type);
            let glTarget;
            if (dstTexture.isData3DTexture) {
              textures.setTexture3D(dstTexture, 0);
              glTarget = _gl.TEXTURE_3D;
            } else if (dstTexture.isDataArrayTexture) {
              textures.setTexture2DArray(dstTexture, 0);
              glTarget = _gl.TEXTURE_2D_ARRAY;
            } else {
              console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
              return;
            }
            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
            const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
            const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
            const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
            const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
            const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
            const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
            if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
              _gl.texSubImage3D(glTarget, level, position3.x, position3.y, position3.z, width, height, depth2, glFormat, glType, image.data);
            } else {
              if (srcTexture.isCompressedArrayTexture) {
                console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
                _gl.compressedTexSubImage3D(glTarget, level, position3.x, position3.y, position3.z, width, height, depth2, glFormat, image.data);
              } else {
                _gl.texSubImage3D(glTarget, level, position3.x, position3.y, position3.z, width, height, depth2, glFormat, glType, image);
              }
            }
            _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
            _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
            _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
            _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
            _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
            if (level === 0 && dstTexture.generateMipmaps)
              _gl.generateMipmap(glTarget);
            state.unbindTexture();
          };
          this.initTexture = function(texture) {
            if (texture.isCubeTexture) {
              textures.setTextureCube(texture, 0);
            } else if (texture.isData3DTexture) {
              textures.setTexture3D(texture, 0);
            } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
              textures.setTexture2DArray(texture, 0);
            } else {
              textures.setTexture2D(texture, 0);
            }
            state.unbindTexture();
          };
          this.resetState = function() {
            _currentActiveCubeFace = 0;
            _currentActiveMipmapLevel = 0;
            _currentRenderTarget = null;
            state.reset();
            bindingStates.reset();
          };
          if (typeof __THREE_DEVTOOLS__ !== "undefined") {
            __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
          }
        }
        get coordinateSystem() {
          return WebGLCoordinateSystem;
        }
        get physicallyCorrectLights() {
          console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
          return !this.useLegacyLights;
        }
        set physicallyCorrectLights(value) {
          console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
          this.useLegacyLights = !value;
        }
        get outputEncoding() {
          console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
          return this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
        }
        set outputEncoding(encoding) {
          console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
          this.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;
        }
        get useLegacyLights() {
          console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
          return this._useLegacyLights;
        }
        set useLegacyLights(value) {
          console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");
          this._useLegacyLights = value;
        }
      };
      WebGL1Renderer = class extends WebGLRenderer {
      };
      WebGL1Renderer.prototype.isWebGL1Renderer = true;
      FogExp2 = class _FogExp2 {
        constructor(color, density = 25e-5) {
          this.isFogExp2 = true;
          this.name = "";
          this.color = new Color(color);
          this.density = density;
        }
        clone() {
          return new _FogExp2(this.color, this.density);
        }
        toJSON() {
          return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
          };
        }
      };
      Fog = class _Fog {
        constructor(color, near = 1, far = 1e3) {
          this.isFog = true;
          this.name = "";
          this.color = new Color(color);
          this.near = near;
          this.far = far;
        }
        clone() {
          return new _Fog(this.color, this.near, this.far);
        }
        toJSON() {
          return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
          };
        }
      };
      Scene = class extends Object3D {
        constructor() {
          super();
          this.isScene = true;
          this.type = "Scene";
          this.background = null;
          this.environment = null;
          this.fog = null;
          this.backgroundBlurriness = 0;
          this.backgroundIntensity = 1;
          this.overrideMaterial = null;
          if (typeof __THREE_DEVTOOLS__ !== "undefined") {
            __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
          }
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          if (source.background !== null)
            this.background = source.background.clone();
          if (source.environment !== null)
            this.environment = source.environment.clone();
          if (source.fog !== null)
            this.fog = source.fog.clone();
          this.backgroundBlurriness = source.backgroundBlurriness;
          this.backgroundIntensity = source.backgroundIntensity;
          if (source.overrideMaterial !== null)
            this.overrideMaterial = source.overrideMaterial.clone();
          this.matrixAutoUpdate = source.matrixAutoUpdate;
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          if (this.fog !== null)
            data.object.fog = this.fog.toJSON();
          if (this.backgroundBlurriness > 0)
            data.object.backgroundBlurriness = this.backgroundBlurriness;
          if (this.backgroundIntensity !== 1)
            data.object.backgroundIntensity = this.backgroundIntensity;
          return data;
        }
      };
      InterleavedBuffer = class {
        constructor(array, stride) {
          this.isInterleavedBuffer = true;
          this.array = array;
          this.stride = stride;
          this.count = array !== void 0 ? array.length / stride : 0;
          this.usage = StaticDrawUsage;
          this.updateRange = { offset: 0, count: -1 };
          this.version = 0;
          this.uuid = generateUUID();
        }
        onUploadCallback() {
        }
        set needsUpdate(value) {
          if (value === true)
            this.version++;
        }
        setUsage(value) {
          this.usage = value;
          return this;
        }
        copy(source) {
          this.array = new source.array.constructor(source.array);
          this.count = source.count;
          this.stride = source.stride;
          this.usage = source.usage;
          return this;
        }
        copyAt(index1, attribute, index2) {
          index1 *= this.stride;
          index2 *= attribute.stride;
          for (let i = 0, l = this.stride; i < l; i++) {
            this.array[index1 + i] = attribute.array[index2 + i];
          }
          return this;
        }
        set(value, offset = 0) {
          this.array.set(value, offset);
          return this;
        }
        clone(data) {
          if (data.arrayBuffers === void 0) {
            data.arrayBuffers = {};
          }
          if (this.array.buffer._uuid === void 0) {
            this.array.buffer._uuid = generateUUID();
          }
          if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
            data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
          }
          const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
          const ib = new this.constructor(array, this.stride);
          ib.setUsage(this.usage);
          return ib;
        }
        onUpload(callback) {
          this.onUploadCallback = callback;
          return this;
        }
        toJSON(data) {
          if (data.arrayBuffers === void 0) {
            data.arrayBuffers = {};
          }
          if (this.array.buffer._uuid === void 0) {
            this.array.buffer._uuid = generateUUID();
          }
          if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
            data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
          }
          return {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
          };
        }
      };
      _vector$5 = /* @__PURE__ */ new Vector3();
      InterleavedBufferAttribute = class _InterleavedBufferAttribute {
        constructor(interleavedBuffer, itemSize, offset, normalized = false) {
          this.isInterleavedBufferAttribute = true;
          this.name = "";
          this.data = interleavedBuffer;
          this.itemSize = itemSize;
          this.offset = offset;
          this.normalized = normalized;
        }
        get count() {
          return this.data.count;
        }
        get array() {
          return this.data.array;
        }
        set needsUpdate(value) {
          this.data.needsUpdate = value;
        }
        applyMatrix4(m) {
          for (let i = 0, l = this.data.count; i < l; i++) {
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.applyMatrix4(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
          }
          return this;
        }
        applyNormalMatrix(m) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.applyNormalMatrix(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
          }
          return this;
        }
        transformDirection(m) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$5.fromBufferAttribute(this, i);
            _vector$5.transformDirection(m);
            this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
          }
          return this;
        }
        setX(index, x) {
          if (this.normalized)
            x = normalize(x, this.array);
          this.data.array[index * this.data.stride + this.offset] = x;
          return this;
        }
        setY(index, y) {
          if (this.normalized)
            y = normalize(y, this.array);
          this.data.array[index * this.data.stride + this.offset + 1] = y;
          return this;
        }
        setZ(index, z) {
          if (this.normalized)
            z = normalize(z, this.array);
          this.data.array[index * this.data.stride + this.offset + 2] = z;
          return this;
        }
        setW(index, w) {
          if (this.normalized)
            w = normalize(w, this.array);
          this.data.array[index * this.data.stride + this.offset + 3] = w;
          return this;
        }
        getX(index) {
          let x = this.data.array[index * this.data.stride + this.offset];
          if (this.normalized)
            x = denormalize(x, this.array);
          return x;
        }
        getY(index) {
          let y = this.data.array[index * this.data.stride + this.offset + 1];
          if (this.normalized)
            y = denormalize(y, this.array);
          return y;
        }
        getZ(index) {
          let z = this.data.array[index * this.data.stride + this.offset + 2];
          if (this.normalized)
            z = denormalize(z, this.array);
          return z;
        }
        getW(index) {
          let w = this.data.array[index * this.data.stride + this.offset + 3];
          if (this.normalized)
            w = denormalize(w, this.array);
          return w;
        }
        setXY(index, x, y) {
          index = index * this.data.stride + this.offset;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
          }
          this.data.array[index + 0] = x;
          this.data.array[index + 1] = y;
          return this;
        }
        setXYZ(index, x, y, z) {
          index = index * this.data.stride + this.offset;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
          }
          this.data.array[index + 0] = x;
          this.data.array[index + 1] = y;
          this.data.array[index + 2] = z;
          return this;
        }
        setXYZW(index, x, y, z, w) {
          index = index * this.data.stride + this.offset;
          if (this.normalized) {
            x = normalize(x, this.array);
            y = normalize(y, this.array);
            z = normalize(z, this.array);
            w = normalize(w, this.array);
          }
          this.data.array[index + 0] = x;
          this.data.array[index + 1] = y;
          this.data.array[index + 2] = z;
          this.data.array[index + 3] = w;
          return this;
        }
        clone(data) {
          if (data === void 0) {
            console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for (let i = 0; i < this.count; i++) {
              const index = i * this.data.stride + this.offset;
              for (let j = 0; j < this.itemSize; j++) {
                array.push(this.data.array[index + j]);
              }
            }
            return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
          } else {
            if (data.interleavedBuffers === void 0) {
              data.interleavedBuffers = {};
            }
            if (data.interleavedBuffers[this.data.uuid] === void 0) {
              data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
            }
            return new _InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
          }
        }
        toJSON(data) {
          if (data === void 0) {
            console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
            const array = [];
            for (let i = 0; i < this.count; i++) {
              const index = i * this.data.stride + this.offset;
              for (let j = 0; j < this.itemSize; j++) {
                array.push(this.data.array[index + j]);
              }
            }
            return {
              itemSize: this.itemSize,
              type: this.array.constructor.name,
              array,
              normalized: this.normalized
            };
          } else {
            if (data.interleavedBuffers === void 0) {
              data.interleavedBuffers = {};
            }
            if (data.interleavedBuffers[this.data.uuid] === void 0) {
              data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
            }
            return {
              isInterleavedBufferAttribute: true,
              itemSize: this.itemSize,
              data: this.data.uuid,
              offset: this.offset,
              normalized: this.normalized
            };
          }
        }
      };
      SpriteMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isSpriteMaterial = true;
          this.type = "SpriteMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.alphaMap = null;
          this.rotation = 0;
          this.sizeAttenuation = true;
          this.transparent = true;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.alphaMap = source.alphaMap;
          this.rotation = source.rotation;
          this.sizeAttenuation = source.sizeAttenuation;
          this.fog = source.fog;
          return this;
        }
      };
      _intersectPoint = /* @__PURE__ */ new Vector3();
      _worldScale = /* @__PURE__ */ new Vector3();
      _mvPosition = /* @__PURE__ */ new Vector3();
      _alignedPosition = /* @__PURE__ */ new Vector2();
      _rotatedPosition = /* @__PURE__ */ new Vector2();
      _viewWorldMatrix = /* @__PURE__ */ new Matrix4();
      _vA = /* @__PURE__ */ new Vector3();
      _vB = /* @__PURE__ */ new Vector3();
      _vC = /* @__PURE__ */ new Vector3();
      _uvA = /* @__PURE__ */ new Vector2();
      _uvB = /* @__PURE__ */ new Vector2();
      _uvC = /* @__PURE__ */ new Vector2();
      Sprite = class extends Object3D {
        constructor(material) {
          super();
          this.isSprite = true;
          this.type = "Sprite";
          if (_geometry === void 0) {
            _geometry = new BufferGeometry();
            const float32Array = new Float32Array([
              -0.5,
              -0.5,
              0,
              0,
              0,
              0.5,
              -0.5,
              0,
              1,
              0,
              0.5,
              0.5,
              0,
              1,
              1,
              -0.5,
              0.5,
              0,
              0,
              1
            ]);
            const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
            _geometry.setIndex([0, 1, 2, 0, 2, 3]);
            _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
            _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
          }
          this.geometry = _geometry;
          this.material = material !== void 0 ? material : new SpriteMaterial();
          this.center = new Vector2(0.5, 0.5);
        }
        raycast(raycaster, intersects2) {
          if (raycaster.camera === null) {
            console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
          }
          _worldScale.setFromMatrixScale(this.matrixWorld);
          _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
          this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
          _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
          if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
            _worldScale.multiplyScalar(-_mvPosition.z);
          }
          const rotation = this.material.rotation;
          let sin, cos;
          if (rotation !== 0) {
            cos = Math.cos(rotation);
            sin = Math.sin(rotation);
          }
          const center = this.center;
          transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
          transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
          transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
          _uvA.set(0, 0);
          _uvB.set(1, 0);
          _uvC.set(1, 1);
          let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
          if (intersect === null) {
            transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
            _uvB.set(0, 1);
            intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
            if (intersect === null) {
              return;
            }
          }
          const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
          if (distance < raycaster.near || distance > raycaster.far)
            return;
          intersects2.push({
            distance,
            point: _intersectPoint.clone(),
            uv: Triangle.getInterpolation(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
            face: null,
            object: this
          });
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          if (source.center !== void 0)
            this.center.copy(source.center);
          this.material = source.material;
          return this;
        }
      };
      _v1$2 = /* @__PURE__ */ new Vector3();
      _v2$1 = /* @__PURE__ */ new Vector3();
      LOD = class extends Object3D {
        constructor() {
          super();
          this._currentLevel = 0;
          this.type = "LOD";
          Object.defineProperties(this, {
            levels: {
              enumerable: true,
              value: []
            },
            isLOD: {
              value: true
            }
          });
          this.autoUpdate = true;
        }
        copy(source) {
          super.copy(source, false);
          const levels = source.levels;
          for (let i = 0, l = levels.length; i < l; i++) {
            const level = levels[i];
            this.addLevel(level.object.clone(), level.distance, level.hysteresis);
          }
          this.autoUpdate = source.autoUpdate;
          return this;
        }
        addLevel(object, distance = 0, hysteresis = 0) {
          distance = Math.abs(distance);
          const levels = this.levels;
          let l;
          for (l = 0; l < levels.length; l++) {
            if (distance < levels[l].distance) {
              break;
            }
          }
          levels.splice(l, 0, { distance, hysteresis, object });
          this.add(object);
          return this;
        }
        getCurrentLevel() {
          return this._currentLevel;
        }
        getObjectForDistance(distance) {
          const levels = this.levels;
          if (levels.length > 0) {
            let i, l;
            for (i = 1, l = levels.length; i < l; i++) {
              let levelDistance = levels[i].distance;
              if (levels[i].object.visible) {
                levelDistance -= levelDistance * levels[i].hysteresis;
              }
              if (distance < levelDistance) {
                break;
              }
            }
            return levels[i - 1].object;
          }
          return null;
        }
        raycast(raycaster, intersects2) {
          const levels = this.levels;
          if (levels.length > 0) {
            _v1$2.setFromMatrixPosition(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(_v1$2);
            this.getObjectForDistance(distance).raycast(raycaster, intersects2);
          }
        }
        update(camera) {
          const levels = this.levels;
          if (levels.length > 1) {
            _v1$2.setFromMatrixPosition(camera.matrixWorld);
            _v2$1.setFromMatrixPosition(this.matrixWorld);
            const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
            levels[0].object.visible = true;
            let i, l;
            for (i = 1, l = levels.length; i < l; i++) {
              let levelDistance = levels[i].distance;
              if (levels[i].object.visible) {
                levelDistance -= levelDistance * levels[i].hysteresis;
              }
              if (distance >= levelDistance) {
                levels[i - 1].object.visible = false;
                levels[i].object.visible = true;
              } else {
                break;
              }
            }
            this._currentLevel = i - 1;
            for (; i < l; i++) {
              levels[i].object.visible = false;
            }
          }
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          if (this.autoUpdate === false)
            data.object.autoUpdate = false;
          data.object.levels = [];
          const levels = this.levels;
          for (let i = 0, l = levels.length; i < l; i++) {
            const level = levels[i];
            data.object.levels.push({
              object: level.object.uuid,
              distance: level.distance,
              hysteresis: level.hysteresis
            });
          }
          return data;
        }
      };
      _basePosition = /* @__PURE__ */ new Vector3();
      _skinIndex = /* @__PURE__ */ new Vector4();
      _skinWeight = /* @__PURE__ */ new Vector4();
      _vector3 = /* @__PURE__ */ new Vector3();
      _matrix4 = /* @__PURE__ */ new Matrix4();
      _vertex = /* @__PURE__ */ new Vector3();
      _sphere$3 = /* @__PURE__ */ new Sphere();
      _inverseMatrix$2 = /* @__PURE__ */ new Matrix4();
      _ray$2 = /* @__PURE__ */ new Ray();
      SkinnedMesh = class extends Mesh {
        constructor(geometry, material) {
          super(geometry, material);
          this.isSkinnedMesh = true;
          this.type = "SkinnedMesh";
          this.bindMode = "attached";
          this.bindMatrix = new Matrix4();
          this.bindMatrixInverse = new Matrix4();
          this.boundingBox = null;
          this.boundingSphere = null;
        }
        computeBoundingBox() {
          const geometry = this.geometry;
          if (this.boundingBox === null) {
            this.boundingBox = new Box3();
          }
          this.boundingBox.makeEmpty();
          const positionAttribute = geometry.getAttribute("position");
          for (let i = 0; i < positionAttribute.count; i++) {
            _vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, _vertex);
            this.boundingBox.expandByPoint(_vertex);
          }
        }
        computeBoundingSphere() {
          const geometry = this.geometry;
          if (this.boundingSphere === null) {
            this.boundingSphere = new Sphere();
          }
          this.boundingSphere.makeEmpty();
          const positionAttribute = geometry.getAttribute("position");
          for (let i = 0; i < positionAttribute.count; i++) {
            _vertex.fromBufferAttribute(positionAttribute, i);
            this.applyBoneTransform(i, _vertex);
            this.boundingSphere.expandByPoint(_vertex);
          }
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.bindMode = source.bindMode;
          this.bindMatrix.copy(source.bindMatrix);
          this.bindMatrixInverse.copy(source.bindMatrixInverse);
          this.skeleton = source.skeleton;
          if (source.boundingBox !== null)
            this.boundingBox = source.boundingBox.clone();
          if (source.boundingSphere !== null)
            this.boundingSphere = source.boundingSphere.clone();
          return this;
        }
        raycast(raycaster, intersects2) {
          const material = this.material;
          const matrixWorld = this.matrixWorld;
          if (material === void 0)
            return;
          if (this.boundingSphere === null)
            this.computeBoundingSphere();
          _sphere$3.copy(this.boundingSphere);
          _sphere$3.applyMatrix4(matrixWorld);
          if (raycaster.ray.intersectsSphere(_sphere$3) === false)
            return;
          _inverseMatrix$2.copy(matrixWorld).invert();
          _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
          if (this.boundingBox !== null) {
            if (_ray$2.intersectsBox(this.boundingBox) === false)
              return;
          }
          this._computeIntersections(raycaster, intersects2, _ray$2);
        }
        getVertexPosition(index, target2) {
          super.getVertexPosition(index, target2);
          this.applyBoneTransform(index, target2);
          return target2;
        }
        bind(skeleton, bindMatrix) {
          this.skeleton = skeleton;
          if (bindMatrix === void 0) {
            this.updateMatrixWorld(true);
            this.skeleton.calculateInverses();
            bindMatrix = this.matrixWorld;
          }
          this.bindMatrix.copy(bindMatrix);
          this.bindMatrixInverse.copy(bindMatrix).invert();
        }
        pose() {
          this.skeleton.pose();
        }
        normalizeSkinWeights() {
          const vector = new Vector4();
          const skinWeight = this.geometry.attributes.skinWeight;
          for (let i = 0, l = skinWeight.count; i < l; i++) {
            vector.fromBufferAttribute(skinWeight, i);
            const scale = 1 / vector.manhattanLength();
            if (scale !== Infinity) {
              vector.multiplyScalar(scale);
            } else {
              vector.set(1, 0, 0, 0);
            }
            skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
          }
        }
        updateMatrixWorld(force) {
          super.updateMatrixWorld(force);
          if (this.bindMode === "attached") {
            this.bindMatrixInverse.copy(this.matrixWorld).invert();
          } else if (this.bindMode === "detached") {
            this.bindMatrixInverse.copy(this.bindMatrix).invert();
          } else {
            console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
          }
        }
        applyBoneTransform(index, vector) {
          const skeleton = this.skeleton;
          const geometry = this.geometry;
          _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
          _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
          _basePosition.copy(vector).applyMatrix4(this.bindMatrix);
          vector.set(0, 0, 0);
          for (let i = 0; i < 4; i++) {
            const weight = _skinWeight.getComponent(i);
            if (weight !== 0) {
              const boneIndex = _skinIndex.getComponent(i);
              _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
              vector.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);
            }
          }
          return vector.applyMatrix4(this.bindMatrixInverse);
        }
        boneTransform(index, vector) {
          console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.");
          return this.applyBoneTransform(index, vector);
        }
      };
      Bone = class extends Object3D {
        constructor() {
          super();
          this.isBone = true;
          this.type = "Bone";
        }
      };
      DataTexture = class extends Texture {
        constructor(data = null, width = 1, height = 1, format2, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
          super(null, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy, colorSpace);
          this.isDataTexture = true;
          this.image = { data, width, height };
          this.generateMipmaps = false;
          this.flipY = false;
          this.unpackAlignment = 1;
        }
      };
      _offsetMatrix = /* @__PURE__ */ new Matrix4();
      _identityMatrix = /* @__PURE__ */ new Matrix4();
      Skeleton = class _Skeleton {
        constructor(bones = [], boneInverses = []) {
          this.uuid = generateUUID();
          this.bones = bones.slice(0);
          this.boneInverses = boneInverses;
          this.boneMatrices = null;
          this.boneTexture = null;
          this.boneTextureSize = 0;
          this.init();
        }
        init() {
          const bones = this.bones;
          const boneInverses = this.boneInverses;
          this.boneMatrices = new Float32Array(bones.length * 16);
          if (boneInverses.length === 0) {
            this.calculateInverses();
          } else {
            if (bones.length !== boneInverses.length) {
              console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
              this.boneInverses = [];
              for (let i = 0, il = this.bones.length; i < il; i++) {
                this.boneInverses.push(new Matrix4());
              }
            }
          }
        }
        calculateInverses() {
          this.boneInverses.length = 0;
          for (let i = 0, il = this.bones.length; i < il; i++) {
            const inverse = new Matrix4();
            if (this.bones[i]) {
              inverse.copy(this.bones[i].matrixWorld).invert();
            }
            this.boneInverses.push(inverse);
          }
        }
        pose() {
          for (let i = 0, il = this.bones.length; i < il; i++) {
            const bone = this.bones[i];
            if (bone) {
              bone.matrixWorld.copy(this.boneInverses[i]).invert();
            }
          }
          for (let i = 0, il = this.bones.length; i < il; i++) {
            const bone = this.bones[i];
            if (bone) {
              if (bone.parent && bone.parent.isBone) {
                bone.matrix.copy(bone.parent.matrixWorld).invert();
                bone.matrix.multiply(bone.matrixWorld);
              } else {
                bone.matrix.copy(bone.matrixWorld);
              }
              bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
            }
          }
        }
        update() {
          const bones = this.bones;
          const boneInverses = this.boneInverses;
          const boneMatrices = this.boneMatrices;
          const boneTexture = this.boneTexture;
          for (let i = 0, il = bones.length; i < il; i++) {
            const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
            _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
            _offsetMatrix.toArray(boneMatrices, i * 16);
          }
          if (boneTexture !== null) {
            boneTexture.needsUpdate = true;
          }
        }
        clone() {
          return new _Skeleton(this.bones, this.boneInverses);
        }
        computeBoneTexture() {
          let size = Math.sqrt(this.bones.length * 4);
          size = ceilPowerOfTwo(size);
          size = Math.max(size, 4);
          const boneMatrices = new Float32Array(size * size * 4);
          boneMatrices.set(this.boneMatrices);
          const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
          boneTexture.needsUpdate = true;
          this.boneMatrices = boneMatrices;
          this.boneTexture = boneTexture;
          this.boneTextureSize = size;
          return this;
        }
        getBoneByName(name) {
          for (let i = 0, il = this.bones.length; i < il; i++) {
            const bone = this.bones[i];
            if (bone.name === name) {
              return bone;
            }
          }
          return void 0;
        }
        dispose() {
          if (this.boneTexture !== null) {
            this.boneTexture.dispose();
            this.boneTexture = null;
          }
        }
        fromJSON(json, bones) {
          this.uuid = json.uuid;
          for (let i = 0, l = json.bones.length; i < l; i++) {
            const uuid = json.bones[i];
            let bone = bones[uuid];
            if (bone === void 0) {
              console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
              bone = new Bone();
            }
            this.bones.push(bone);
            this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
          }
          this.init();
          return this;
        }
        toJSON() {
          const data = {
            metadata: {
              version: 4.6,
              type: "Skeleton",
              generator: "Skeleton.toJSON"
            },
            bones: [],
            boneInverses: []
          };
          data.uuid = this.uuid;
          const bones = this.bones;
          const boneInverses = this.boneInverses;
          for (let i = 0, l = bones.length; i < l; i++) {
            const bone = bones[i];
            data.bones.push(bone.uuid);
            const boneInverse = boneInverses[i];
            data.boneInverses.push(boneInverse.toArray());
          }
          return data;
        }
      };
      InstancedBufferAttribute = class extends BufferAttribute {
        constructor(array, itemSize, normalized, meshPerAttribute = 1) {
          super(array, itemSize, normalized);
          this.isInstancedBufferAttribute = true;
          this.meshPerAttribute = meshPerAttribute;
        }
        copy(source) {
          super.copy(source);
          this.meshPerAttribute = source.meshPerAttribute;
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.meshPerAttribute = this.meshPerAttribute;
          data.isInstancedBufferAttribute = true;
          return data;
        }
      };
      _instanceLocalMatrix = /* @__PURE__ */ new Matrix4();
      _instanceWorldMatrix = /* @__PURE__ */ new Matrix4();
      _instanceIntersects = [];
      _box3 = /* @__PURE__ */ new Box3();
      _identity = /* @__PURE__ */ new Matrix4();
      _mesh = /* @__PURE__ */ new Mesh();
      _sphere$2 = /* @__PURE__ */ new Sphere();
      InstancedMesh = class extends Mesh {
        constructor(geometry, material, count) {
          super(geometry, material);
          this.isInstancedMesh = true;
          this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
          this.instanceColor = null;
          this.count = count;
          this.boundingBox = null;
          this.boundingSphere = null;
          for (let i = 0; i < count; i++) {
            this.setMatrixAt(i, _identity);
          }
        }
        computeBoundingBox() {
          const geometry = this.geometry;
          const count = this.count;
          if (this.boundingBox === null) {
            this.boundingBox = new Box3();
          }
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }
          this.boundingBox.makeEmpty();
          for (let i = 0; i < count; i++) {
            this.getMatrixAt(i, _instanceLocalMatrix);
            _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);
            this.boundingBox.union(_box3);
          }
        }
        computeBoundingSphere() {
          const geometry = this.geometry;
          const count = this.count;
          if (this.boundingSphere === null) {
            this.boundingSphere = new Sphere();
          }
          if (geometry.boundingSphere === null) {
            geometry.computeBoundingSphere();
          }
          this.boundingSphere.makeEmpty();
          for (let i = 0; i < count; i++) {
            this.getMatrixAt(i, _instanceLocalMatrix);
            _sphere$2.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);
            this.boundingSphere.union(_sphere$2);
          }
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.instanceMatrix.copy(source.instanceMatrix);
          if (source.instanceColor !== null)
            this.instanceColor = source.instanceColor.clone();
          this.count = source.count;
          if (source.boundingBox !== null)
            this.boundingBox = source.boundingBox.clone();
          if (source.boundingSphere !== null)
            this.boundingSphere = source.boundingSphere.clone();
          return this;
        }
        getColorAt(index, color) {
          color.fromArray(this.instanceColor.array, index * 3);
        }
        getMatrixAt(index, matrix) {
          matrix.fromArray(this.instanceMatrix.array, index * 16);
        }
        raycast(raycaster, intersects2) {
          const matrixWorld = this.matrixWorld;
          const raycastTimes = this.count;
          _mesh.geometry = this.geometry;
          _mesh.material = this.material;
          if (_mesh.material === void 0)
            return;
          if (this.boundingSphere === null)
            this.computeBoundingSphere();
          _sphere$2.copy(this.boundingSphere);
          _sphere$2.applyMatrix4(matrixWorld);
          if (raycaster.ray.intersectsSphere(_sphere$2) === false)
            return;
          for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
            this.getMatrixAt(instanceId, _instanceLocalMatrix);
            _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
            _mesh.matrixWorld = _instanceWorldMatrix;
            _mesh.raycast(raycaster, _instanceIntersects);
            for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
              const intersect = _instanceIntersects[i];
              intersect.instanceId = instanceId;
              intersect.object = this;
              intersects2.push(intersect);
            }
            _instanceIntersects.length = 0;
          }
        }
        setColorAt(index, color) {
          if (this.instanceColor === null) {
            this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
          }
          color.toArray(this.instanceColor.array, index * 3);
        }
        setMatrixAt(index, matrix) {
          matrix.toArray(this.instanceMatrix.array, index * 16);
        }
        updateMorphTargets() {
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      };
      LineBasicMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isLineBasicMaterial = true;
          this.type = "LineBasicMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.linewidth = 1;
          this.linecap = "round";
          this.linejoin = "round";
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.linewidth = source.linewidth;
          this.linecap = source.linecap;
          this.linejoin = source.linejoin;
          this.fog = source.fog;
          return this;
        }
      };
      _start$1 = /* @__PURE__ */ new Vector3();
      _end$1 = /* @__PURE__ */ new Vector3();
      _inverseMatrix$1 = /* @__PURE__ */ new Matrix4();
      _ray$1 = /* @__PURE__ */ new Ray();
      _sphere$1 = /* @__PURE__ */ new Sphere();
      Line = class extends Object3D {
        constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
          super();
          this.isLine = true;
          this.type = "Line";
          this.geometry = geometry;
          this.material = material;
          this.updateMorphTargets();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
          this.geometry = source.geometry;
          return this;
        }
        computeLineDistances() {
          const geometry = this.geometry;
          if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [0];
            for (let i = 1, l = positionAttribute.count; i < l; i++) {
              _start$1.fromBufferAttribute(positionAttribute, i - 1);
              _end$1.fromBufferAttribute(positionAttribute, i);
              lineDistances[i] = lineDistances[i - 1];
              lineDistances[i] += _start$1.distanceTo(_end$1);
            }
            geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
          } else {
            console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          }
          return this;
        }
        raycast(raycaster, intersects2) {
          const geometry = this.geometry;
          const matrixWorld = this.matrixWorld;
          const threshold = raycaster.params.Line.threshold;
          const drawRange = geometry.drawRange;
          if (geometry.boundingSphere === null)
            geometry.computeBoundingSphere();
          _sphere$1.copy(geometry.boundingSphere);
          _sphere$1.applyMatrix4(matrixWorld);
          _sphere$1.radius += threshold;
          if (raycaster.ray.intersectsSphere(_sphere$1) === false)
            return;
          _inverseMatrix$1.copy(matrixWorld).invert();
          _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
          const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
          const localThresholdSq = localThreshold * localThreshold;
          const vStart = new Vector3();
          const vEnd = new Vector3();
          const interSegment = new Vector3();
          const interRay = new Vector3();
          const step = this.isLineSegments ? 2 : 1;
          const index = geometry.index;
          const attributes = geometry.attributes;
          const positionAttribute = attributes.position;
          if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, l = end - 1; i < l; i += step) {
              const a = index.getX(i);
              const b = index.getX(i + 1);
              vStart.fromBufferAttribute(positionAttribute, a);
              vEnd.fromBufferAttribute(positionAttribute, b);
              const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
              if (distSq > localThresholdSq)
                continue;
              interRay.applyMatrix4(this.matrixWorld);
              const distance = raycaster.ray.origin.distanceTo(interRay);
              if (distance < raycaster.near || distance > raycaster.far)
                continue;
              intersects2.push({
                distance,
                // What do we want? intersection point on the ray or on the segment??
                // point: raycaster.ray.at( distance ),
                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                index: i,
                face: null,
                faceIndex: null,
                object: this
              });
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for (let i = start, l = end - 1; i < l; i += step) {
              vStart.fromBufferAttribute(positionAttribute, i);
              vEnd.fromBufferAttribute(positionAttribute, i + 1);
              const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
              if (distSq > localThresholdSq)
                continue;
              interRay.applyMatrix4(this.matrixWorld);
              const distance = raycaster.ray.origin.distanceTo(interRay);
              if (distance < raycaster.near || distance > raycaster.far)
                continue;
              intersects2.push({
                distance,
                // What do we want? intersection point on the ray or on the segment??
                // point: raycaster.ray.at( distance ),
                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                index: i,
                face: null,
                faceIndex: null,
                object: this
              });
            }
          }
        }
        updateMorphTargets() {
          const geometry = this.geometry;
          const morphAttributes = geometry.morphAttributes;
          const keys = Object.keys(morphAttributes);
          if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== void 0) {
              this.morphTargetInfluences = [];
              this.morphTargetDictionary = {};
              for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
                const name = morphAttribute[m].name || String(m);
                this.morphTargetInfluences.push(0);
                this.morphTargetDictionary[name] = m;
              }
            }
          }
        }
      };
      _start = /* @__PURE__ */ new Vector3();
      _end = /* @__PURE__ */ new Vector3();
      LineSegments = class extends Line {
        constructor(geometry, material) {
          super(geometry, material);
          this.isLineSegments = true;
          this.type = "LineSegments";
        }
        computeLineDistances() {
          const geometry = this.geometry;
          if (geometry.index === null) {
            const positionAttribute = geometry.attributes.position;
            const lineDistances = [];
            for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
              _start.fromBufferAttribute(positionAttribute, i);
              _end.fromBufferAttribute(positionAttribute, i + 1);
              lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
              lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
            }
            geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
          } else {
            console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
          }
          return this;
        }
      };
      LineLoop = class extends Line {
        constructor(geometry, material) {
          super(geometry, material);
          this.isLineLoop = true;
          this.type = "LineLoop";
        }
      };
      PointsMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isPointsMaterial = true;
          this.type = "PointsMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.alphaMap = null;
          this.size = 1;
          this.sizeAttenuation = true;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.alphaMap = source.alphaMap;
          this.size = source.size;
          this.sizeAttenuation = source.sizeAttenuation;
          this.fog = source.fog;
          return this;
        }
      };
      _inverseMatrix = /* @__PURE__ */ new Matrix4();
      _ray = /* @__PURE__ */ new Ray();
      _sphere = /* @__PURE__ */ new Sphere();
      _position$2 = /* @__PURE__ */ new Vector3();
      Points = class extends Object3D {
        constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
          super();
          this.isPoints = true;
          this.type = "Points";
          this.geometry = geometry;
          this.material = material;
          this.updateMorphTargets();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
          this.geometry = source.geometry;
          return this;
        }
        raycast(raycaster, intersects2) {
          const geometry = this.geometry;
          const matrixWorld = this.matrixWorld;
          const threshold = raycaster.params.Points.threshold;
          const drawRange = geometry.drawRange;
          if (geometry.boundingSphere === null)
            geometry.computeBoundingSphere();
          _sphere.copy(geometry.boundingSphere);
          _sphere.applyMatrix4(matrixWorld);
          _sphere.radius += threshold;
          if (raycaster.ray.intersectsSphere(_sphere) === false)
            return;
          _inverseMatrix.copy(matrixWorld).invert();
          _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
          const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
          const localThresholdSq = localThreshold * localThreshold;
          const index = geometry.index;
          const attributes = geometry.attributes;
          const positionAttribute = attributes.position;
          if (index !== null) {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i++) {
              const a = index.getX(i);
              _position$2.fromBufferAttribute(positionAttribute, a);
              testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects2, this);
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
            for (let i = start, l = end; i < l; i++) {
              _position$2.fromBufferAttribute(positionAttribute, i);
              testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
            }
          }
        }
        updateMorphTargets() {
          const geometry = this.geometry;
          const morphAttributes = geometry.morphAttributes;
          const keys = Object.keys(morphAttributes);
          if (keys.length > 0) {
            const morphAttribute = morphAttributes[keys[0]];
            if (morphAttribute !== void 0) {
              this.morphTargetInfluences = [];
              this.morphTargetDictionary = {};
              for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
                const name = morphAttribute[m].name || String(m);
                this.morphTargetInfluences.push(0);
                this.morphTargetDictionary[name] = m;
              }
            }
          }
        }
      };
      VideoTexture = class extends Texture {
        constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy) {
          super(video, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy);
          this.isVideoTexture = true;
          this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
          this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
          this.generateMipmaps = false;
          const scope = this;
          function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
          }
          if ("requestVideoFrameCallback" in video) {
            video.requestVideoFrameCallback(updateVideo);
          }
        }
        clone() {
          return new this.constructor(this.image).copy(this);
        }
        update() {
          const video = this.image;
          const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
          if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
            this.needsUpdate = true;
          }
        }
      };
      FramebufferTexture = class extends Texture {
        constructor(width, height) {
          super({ width, height });
          this.isFramebufferTexture = true;
          this.magFilter = NearestFilter;
          this.minFilter = NearestFilter;
          this.generateMipmaps = false;
          this.needsUpdate = true;
        }
      };
      CompressedTexture = class extends Texture {
        constructor(mipmaps, width, height, format2, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace) {
          super(null, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy, colorSpace);
          this.isCompressedTexture = true;
          this.image = { width, height };
          this.mipmaps = mipmaps;
          this.flipY = false;
          this.generateMipmaps = false;
        }
      };
      CompressedArrayTexture = class extends CompressedTexture {
        constructor(mipmaps, width, height, depth, format2, type) {
          super(mipmaps, width, height, format2, type);
          this.isCompressedArrayTexture = true;
          this.image.depth = depth;
          this.wrapR = ClampToEdgeWrapping;
        }
      };
      CompressedCubeTexture = class extends CompressedTexture {
        constructor(images, format2, type) {
          super(void 0, images[0].width, images[0].height, format2, type, CubeReflectionMapping);
          this.isCompressedCubeTexture = true;
          this.isCubeTexture = true;
          this.image = images;
        }
      };
      CanvasTexture = class extends Texture {
        constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy) {
          super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format2, type, anisotropy);
          this.isCanvasTexture = true;
          this.needsUpdate = true;
        }
      };
      Curve = class {
        constructor() {
          this.type = "Curve";
          this.arcLengthDivisions = 200;
        }
        // Virtual base class method to overwrite and implement in subclasses
        //	- t [0 .. 1]
        getPoint() {
          console.warn("THREE.Curve: .getPoint() not implemented.");
          return null;
        }
        // Get point at relative position in curve according to arc length
        // - u [0 .. 1]
        getPointAt(u, optionalTarget) {
          const t = this.getUtoTmapping(u);
          return this.getPoint(t, optionalTarget);
        }
        // Get sequence of points using getPoint( t )
        getPoints(divisions = 5) {
          const points = [];
          for (let d = 0; d <= divisions; d++) {
            points.push(this.getPoint(d / divisions));
          }
          return points;
        }
        // Get sequence of points using getPointAt( u )
        getSpacedPoints(divisions = 5) {
          const points = [];
          for (let d = 0; d <= divisions; d++) {
            points.push(this.getPointAt(d / divisions));
          }
          return points;
        }
        // Get total curve arc length
        getLength() {
          const lengths = this.getLengths();
          return lengths[lengths.length - 1];
        }
        // Get list of cumulative segment lengths
        getLengths(divisions = this.arcLengthDivisions) {
          if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
            return this.cacheArcLengths;
          }
          this.needsUpdate = false;
          const cache2 = [];
          let current, last = this.getPoint(0);
          let sum = 0;
          cache2.push(0);
          for (let p = 1; p <= divisions; p++) {
            current = this.getPoint(p / divisions);
            sum += current.distanceTo(last);
            cache2.push(sum);
            last = current;
          }
          this.cacheArcLengths = cache2;
          return cache2;
        }
        updateArcLengths() {
          this.needsUpdate = true;
          this.getLengths();
        }
        // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
        getUtoTmapping(u, distance) {
          const arcLengths = this.getLengths();
          let i = 0;
          const il = arcLengths.length;
          let targetArcLength;
          if (distance) {
            targetArcLength = distance;
          } else {
            targetArcLength = u * arcLengths[il - 1];
          }
          let low = 0, high = il - 1, comparison;
          while (low <= high) {
            i = Math.floor(low + (high - low) / 2);
            comparison = arcLengths[i] - targetArcLength;
            if (comparison < 0) {
              low = i + 1;
            } else if (comparison > 0) {
              high = i - 1;
            } else {
              high = i;
              break;
            }
          }
          i = high;
          if (arcLengths[i] === targetArcLength) {
            return i / (il - 1);
          }
          const lengthBefore = arcLengths[i];
          const lengthAfter = arcLengths[i + 1];
          const segmentLength = lengthAfter - lengthBefore;
          const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
          const t = (i + segmentFraction) / (il - 1);
          return t;
        }
        // Returns a unit vector tangent at t
        // In case any sub curve does not implement its tangent derivation,
        // 2 points a small delta apart will be used to find its gradient
        // which seems to give a reasonable approximation
        getTangent(t, optionalTarget) {
          const delta = 1e-4;
          let t1 = t - delta;
          let t2 = t + delta;
          if (t1 < 0)
            t1 = 0;
          if (t2 > 1)
            t2 = 1;
          const pt1 = this.getPoint(t1);
          const pt2 = this.getPoint(t2);
          const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
          tangent.copy(pt2).sub(pt1).normalize();
          return tangent;
        }
        getTangentAt(u, optionalTarget) {
          const t = this.getUtoTmapping(u);
          return this.getTangent(t, optionalTarget);
        }
        computeFrenetFrames(segments, closed) {
          const normal = new Vector3();
          const tangents = [];
          const normals = [];
          const binormals = [];
          const vec = new Vector3();
          const mat = new Matrix4();
          for (let i = 0; i <= segments; i++) {
            const u = i / segments;
            tangents[i] = this.getTangentAt(u, new Vector3());
          }
          normals[0] = new Vector3();
          binormals[0] = new Vector3();
          let min = Number.MAX_VALUE;
          const tx = Math.abs(tangents[0].x);
          const ty = Math.abs(tangents[0].y);
          const tz = Math.abs(tangents[0].z);
          if (tx <= min) {
            min = tx;
            normal.set(1, 0, 0);
          }
          if (ty <= min) {
            min = ty;
            normal.set(0, 1, 0);
          }
          if (tz <= min) {
            normal.set(0, 0, 1);
          }
          vec.crossVectors(tangents[0], normal).normalize();
          normals[0].crossVectors(tangents[0], vec);
          binormals[0].crossVectors(tangents[0], normals[0]);
          for (let i = 1; i <= segments; i++) {
            normals[i] = normals[i - 1].clone();
            binormals[i] = binormals[i - 1].clone();
            vec.crossVectors(tangents[i - 1], tangents[i]);
            if (vec.length() > Number.EPSILON) {
              vec.normalize();
              const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
              normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
            }
            binormals[i].crossVectors(tangents[i], normals[i]);
          }
          if (closed === true) {
            let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
            theta /= segments;
            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
              theta = -theta;
            }
            for (let i = 1; i <= segments; i++) {
              normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
              binormals[i].crossVectors(tangents[i], normals[i]);
            }
          }
          return {
            tangents,
            normals,
            binormals
          };
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(source) {
          this.arcLengthDivisions = source.arcLengthDivisions;
          return this;
        }
        toJSON() {
          const data = {
            metadata: {
              version: 4.6,
              type: "Curve",
              generator: "Curve.toJSON"
            }
          };
          data.arcLengthDivisions = this.arcLengthDivisions;
          data.type = this.type;
          return data;
        }
        fromJSON(json) {
          this.arcLengthDivisions = json.arcLengthDivisions;
          return this;
        }
      };
      EllipseCurve = class extends Curve {
        constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
          super();
          this.isEllipseCurve = true;
          this.type = "EllipseCurve";
          this.aX = aX;
          this.aY = aY;
          this.xRadius = xRadius;
          this.yRadius = yRadius;
          this.aStartAngle = aStartAngle;
          this.aEndAngle = aEndAngle;
          this.aClockwise = aClockwise;
          this.aRotation = aRotation;
        }
        getPoint(t, optionalTarget) {
          const point = optionalTarget || new Vector2();
          const twoPi = Math.PI * 2;
          let deltaAngle = this.aEndAngle - this.aStartAngle;
          const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
          while (deltaAngle < 0)
            deltaAngle += twoPi;
          while (deltaAngle > twoPi)
            deltaAngle -= twoPi;
          if (deltaAngle < Number.EPSILON) {
            if (samePoints) {
              deltaAngle = 0;
            } else {
              deltaAngle = twoPi;
            }
          }
          if (this.aClockwise === true && !samePoints) {
            if (deltaAngle === twoPi) {
              deltaAngle = -twoPi;
            } else {
              deltaAngle = deltaAngle - twoPi;
            }
          }
          const angle = this.aStartAngle + t * deltaAngle;
          let x = this.aX + this.xRadius * Math.cos(angle);
          let y = this.aY + this.yRadius * Math.sin(angle);
          if (this.aRotation !== 0) {
            const cos = Math.cos(this.aRotation);
            const sin = Math.sin(this.aRotation);
            const tx = x - this.aX;
            const ty = y - this.aY;
            x = tx * cos - ty * sin + this.aX;
            y = tx * sin + ty * cos + this.aY;
          }
          return point.set(x, y);
        }
        copy(source) {
          super.copy(source);
          this.aX = source.aX;
          this.aY = source.aY;
          this.xRadius = source.xRadius;
          this.yRadius = source.yRadius;
          this.aStartAngle = source.aStartAngle;
          this.aEndAngle = source.aEndAngle;
          this.aClockwise = source.aClockwise;
          this.aRotation = source.aRotation;
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.aX = this.aX;
          data.aY = this.aY;
          data.xRadius = this.xRadius;
          data.yRadius = this.yRadius;
          data.aStartAngle = this.aStartAngle;
          data.aEndAngle = this.aEndAngle;
          data.aClockwise = this.aClockwise;
          data.aRotation = this.aRotation;
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.aX = json.aX;
          this.aY = json.aY;
          this.xRadius = json.xRadius;
          this.yRadius = json.yRadius;
          this.aStartAngle = json.aStartAngle;
          this.aEndAngle = json.aEndAngle;
          this.aClockwise = json.aClockwise;
          this.aRotation = json.aRotation;
          return this;
        }
      };
      ArcCurve = class extends EllipseCurve {
        constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
          super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
          this.isArcCurve = true;
          this.type = "ArcCurve";
        }
      };
      tmp = /* @__PURE__ */ new Vector3();
      px = /* @__PURE__ */ new CubicPoly();
      py = /* @__PURE__ */ new CubicPoly();
      pz = /* @__PURE__ */ new CubicPoly();
      CatmullRomCurve3 = class extends Curve {
        constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
          super();
          this.isCatmullRomCurve3 = true;
          this.type = "CatmullRomCurve3";
          this.points = points;
          this.closed = closed;
          this.curveType = curveType;
          this.tension = tension;
        }
        getPoint(t, optionalTarget = new Vector3()) {
          const point = optionalTarget;
          const points = this.points;
          const l = points.length;
          const p = (l - (this.closed ? 0 : 1)) * t;
          let intPoint = Math.floor(p);
          let weight = p - intPoint;
          if (this.closed) {
            intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
          } else if (weight === 0 && intPoint === l - 1) {
            intPoint = l - 2;
            weight = 1;
          }
          let p0, p3;
          if (this.closed || intPoint > 0) {
            p0 = points[(intPoint - 1) % l];
          } else {
            tmp.subVectors(points[0], points[1]).add(points[0]);
            p0 = tmp;
          }
          const p1 = points[intPoint % l];
          const p2 = points[(intPoint + 1) % l];
          if (this.closed || intPoint + 2 < l) {
            p3 = points[(intPoint + 2) % l];
          } else {
            tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
            p3 = tmp;
          }
          if (this.curveType === "centripetal" || this.curveType === "chordal") {
            const pow = this.curveType === "chordal" ? 0.5 : 0.25;
            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            if (dt1 < 1e-4)
              dt1 = 1;
            if (dt0 < 1e-4)
              dt0 = dt1;
            if (dt2 < 1e-4)
              dt2 = dt1;
            px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
            py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
            pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
          } else if (this.curveType === "catmullrom") {
            px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
            py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
            pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
          }
          point.set(
            px.calc(weight),
            py.calc(weight),
            pz.calc(weight)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.points = [];
          for (let i = 0, l = source.points.length; i < l; i++) {
            const point = source.points[i];
            this.points.push(point.clone());
          }
          this.closed = source.closed;
          this.curveType = source.curveType;
          this.tension = source.tension;
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.points = [];
          for (let i = 0, l = this.points.length; i < l; i++) {
            const point = this.points[i];
            data.points.push(point.toArray());
          }
          data.closed = this.closed;
          data.curveType = this.curveType;
          data.tension = this.tension;
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.points = [];
          for (let i = 0, l = json.points.length; i < l; i++) {
            const point = json.points[i];
            this.points.push(new Vector3().fromArray(point));
          }
          this.closed = json.closed;
          this.curveType = json.curveType;
          this.tension = json.tension;
          return this;
        }
      };
      CubicBezierCurve = class extends Curve {
        constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
          super();
          this.isCubicBezierCurve = true;
          this.type = "CubicBezierCurve";
          this.v0 = v0;
          this.v1 = v1;
          this.v2 = v2;
          this.v3 = v3;
        }
        getPoint(t, optionalTarget = new Vector2()) {
          const point = optionalTarget;
          const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
          point.set(
            CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
            CubicBezier(t, v0.y, v1.y, v2.y, v3.y)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.v0.copy(source.v0);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          this.v3.copy(source.v3);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v0 = this.v0.toArray();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          data.v3 = this.v3.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v0.fromArray(json.v0);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          this.v3.fromArray(json.v3);
          return this;
        }
      };
      CubicBezierCurve3 = class extends Curve {
        constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
          super();
          this.isCubicBezierCurve3 = true;
          this.type = "CubicBezierCurve3";
          this.v0 = v0;
          this.v1 = v1;
          this.v2 = v2;
          this.v3 = v3;
        }
        getPoint(t, optionalTarget = new Vector3()) {
          const point = optionalTarget;
          const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
          point.set(
            CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
            CubicBezier(t, v0.y, v1.y, v2.y, v3.y),
            CubicBezier(t, v0.z, v1.z, v2.z, v3.z)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.v0.copy(source.v0);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          this.v3.copy(source.v3);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v0 = this.v0.toArray();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          data.v3 = this.v3.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v0.fromArray(json.v0);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          this.v3.fromArray(json.v3);
          return this;
        }
      };
      LineCurve = class extends Curve {
        constructor(v1 = new Vector2(), v2 = new Vector2()) {
          super();
          this.isLineCurve = true;
          this.type = "LineCurve";
          this.v1 = v1;
          this.v2 = v2;
        }
        getPoint(t, optionalTarget = new Vector2()) {
          const point = optionalTarget;
          if (t === 1) {
            point.copy(this.v2);
          } else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
          }
          return point;
        }
        // Line curve is linear, so we can overwrite default getPointAt
        getPointAt(u, optionalTarget) {
          return this.getPoint(u, optionalTarget);
        }
        getTangent(t, optionalTarget = new Vector2()) {
          return optionalTarget.subVectors(this.v2, this.v1).normalize();
        }
        getTangentAt(u, optionalTarget) {
          return this.getTangent(u, optionalTarget);
        }
        copy(source) {
          super.copy(source);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          return this;
        }
      };
      LineCurve3 = class extends Curve {
        constructor(v1 = new Vector3(), v2 = new Vector3()) {
          super();
          this.isLineCurve3 = true;
          this.type = "LineCurve3";
          this.v1 = v1;
          this.v2 = v2;
        }
        getPoint(t, optionalTarget = new Vector3()) {
          const point = optionalTarget;
          if (t === 1) {
            point.copy(this.v2);
          } else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
          }
          return point;
        }
        // Line curve is linear, so we can overwrite default getPointAt
        getPointAt(u, optionalTarget) {
          return this.getPoint(u, optionalTarget);
        }
        getTangent(t, optionalTarget = new Vector3()) {
          return optionalTarget.subVectors(this.v2, this.v1).normalize();
        }
        getTangentAt(u, optionalTarget) {
          return this.getTangent(u, optionalTarget);
        }
        copy(source) {
          super.copy(source);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          return this;
        }
      };
      QuadraticBezierCurve = class extends Curve {
        constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
          super();
          this.isQuadraticBezierCurve = true;
          this.type = "QuadraticBezierCurve";
          this.v0 = v0;
          this.v1 = v1;
          this.v2 = v2;
        }
        getPoint(t, optionalTarget = new Vector2()) {
          const point = optionalTarget;
          const v0 = this.v0, v1 = this.v1, v2 = this.v2;
          point.set(
            QuadraticBezier(t, v0.x, v1.x, v2.x),
            QuadraticBezier(t, v0.y, v1.y, v2.y)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.v0.copy(source.v0);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v0 = this.v0.toArray();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v0.fromArray(json.v0);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          return this;
        }
      };
      QuadraticBezierCurve3 = class extends Curve {
        constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
          super();
          this.isQuadraticBezierCurve3 = true;
          this.type = "QuadraticBezierCurve3";
          this.v0 = v0;
          this.v1 = v1;
          this.v2 = v2;
        }
        getPoint(t, optionalTarget = new Vector3()) {
          const point = optionalTarget;
          const v0 = this.v0, v1 = this.v1, v2 = this.v2;
          point.set(
            QuadraticBezier(t, v0.x, v1.x, v2.x),
            QuadraticBezier(t, v0.y, v1.y, v2.y),
            QuadraticBezier(t, v0.z, v1.z, v2.z)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.v0.copy(source.v0);
          this.v1.copy(source.v1);
          this.v2.copy(source.v2);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.v0 = this.v0.toArray();
          data.v1 = this.v1.toArray();
          data.v2 = this.v2.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.v0.fromArray(json.v0);
          this.v1.fromArray(json.v1);
          this.v2.fromArray(json.v2);
          return this;
        }
      };
      SplineCurve = class extends Curve {
        constructor(points = []) {
          super();
          this.isSplineCurve = true;
          this.type = "SplineCurve";
          this.points = points;
        }
        getPoint(t, optionalTarget = new Vector2()) {
          const point = optionalTarget;
          const points = this.points;
          const p = (points.length - 1) * t;
          const intPoint = Math.floor(p);
          const weight = p - intPoint;
          const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
          const p1 = points[intPoint];
          const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
          const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
          point.set(
            CatmullRom(weight, p0.x, p1.x, p2.x, p3.x),
            CatmullRom(weight, p0.y, p1.y, p2.y, p3.y)
          );
          return point;
        }
        copy(source) {
          super.copy(source);
          this.points = [];
          for (let i = 0, l = source.points.length; i < l; i++) {
            const point = source.points[i];
            this.points.push(point.clone());
          }
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.points = [];
          for (let i = 0, l = this.points.length; i < l; i++) {
            const point = this.points[i];
            data.points.push(point.toArray());
          }
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.points = [];
          for (let i = 0, l = json.points.length; i < l; i++) {
            const point = json.points[i];
            this.points.push(new Vector2().fromArray(point));
          }
          return this;
        }
      };
      Curves = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        ArcCurve,
        CatmullRomCurve3,
        CubicBezierCurve,
        CubicBezierCurve3,
        EllipseCurve,
        LineCurve,
        LineCurve3,
        QuadraticBezierCurve,
        QuadraticBezierCurve3,
        SplineCurve
      });
      CurvePath = class extends Curve {
        constructor() {
          super();
          this.type = "CurvePath";
          this.curves = [];
          this.autoClose = false;
        }
        add(curve) {
          this.curves.push(curve);
        }
        closePath() {
          const startPoint = this.curves[0].getPoint(0);
          const endPoint = this.curves[this.curves.length - 1].getPoint(1);
          if (!startPoint.equals(endPoint)) {
            this.curves.push(new LineCurve(endPoint, startPoint));
          }
        }
        // To get accurate point with reference to
        // entire path distance at time t,
        // following has to be done:
        // 1. Length of each sub path have to be known
        // 2. Locate and identify type of curve
        // 3. Get t for the curve
        // 4. Return curve.getPointAt(t')
        getPoint(t, optionalTarget) {
          const d = t * this.getLength();
          const curveLengths = this.getCurveLengths();
          let i = 0;
          while (i < curveLengths.length) {
            if (curveLengths[i] >= d) {
              const diff = curveLengths[i] - d;
              const curve = this.curves[i];
              const segmentLength = curve.getLength();
              const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
              return curve.getPointAt(u, optionalTarget);
            }
            i++;
          }
          return null;
        }
        // We cannot use the default THREE.Curve getPoint() with getLength() because in
        // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
        // getPoint() depends on getLength
        getLength() {
          const lens = this.getCurveLengths();
          return lens[lens.length - 1];
        }
        // cacheLengths must be recalculated.
        updateArcLengths() {
          this.needsUpdate = true;
          this.cacheLengths = null;
          this.getCurveLengths();
        }
        // Compute lengths and cache them
        // We cannot overwrite getLengths() because UtoT mapping uses it.
        getCurveLengths() {
          if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
            return this.cacheLengths;
          }
          const lengths = [];
          let sums = 0;
          for (let i = 0, l = this.curves.length; i < l; i++) {
            sums += this.curves[i].getLength();
            lengths.push(sums);
          }
          this.cacheLengths = lengths;
          return lengths;
        }
        getSpacedPoints(divisions = 40) {
          const points = [];
          for (let i = 0; i <= divisions; i++) {
            points.push(this.getPoint(i / divisions));
          }
          if (this.autoClose) {
            points.push(points[0]);
          }
          return points;
        }
        getPoints(divisions = 12) {
          const points = [];
          let last;
          for (let i = 0, curves = this.curves; i < curves.length; i++) {
            const curve = curves[i];
            const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
            const pts = curve.getPoints(resolution);
            for (let j = 0; j < pts.length; j++) {
              const point = pts[j];
              if (last && last.equals(point))
                continue;
              points.push(point);
              last = point;
            }
          }
          if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
            points.push(points[0]);
          }
          return points;
        }
        copy(source) {
          super.copy(source);
          this.curves = [];
          for (let i = 0, l = source.curves.length; i < l; i++) {
            const curve = source.curves[i];
            this.curves.push(curve.clone());
          }
          this.autoClose = source.autoClose;
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.autoClose = this.autoClose;
          data.curves = [];
          for (let i = 0, l = this.curves.length; i < l; i++) {
            const curve = this.curves[i];
            data.curves.push(curve.toJSON());
          }
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.autoClose = json.autoClose;
          this.curves = [];
          for (let i = 0, l = json.curves.length; i < l; i++) {
            const curve = json.curves[i];
            this.curves.push(new Curves[curve.type]().fromJSON(curve));
          }
          return this;
        }
      };
      Path = class extends CurvePath {
        constructor(points) {
          super();
          this.type = "Path";
          this.currentPoint = new Vector2();
          if (points) {
            this.setFromPoints(points);
          }
        }
        setFromPoints(points) {
          this.moveTo(points[0].x, points[0].y);
          for (let i = 1, l = points.length; i < l; i++) {
            this.lineTo(points[i].x, points[i].y);
          }
          return this;
        }
        moveTo(x, y) {
          this.currentPoint.set(x, y);
          return this;
        }
        lineTo(x, y) {
          const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
          this.curves.push(curve);
          this.currentPoint.set(x, y);
          return this;
        }
        quadraticCurveTo(aCPx, aCPy, aX, aY) {
          const curve = new QuadraticBezierCurve(
            this.currentPoint.clone(),
            new Vector2(aCPx, aCPy),
            new Vector2(aX, aY)
          );
          this.curves.push(curve);
          this.currentPoint.set(aX, aY);
          return this;
        }
        bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
          const curve = new CubicBezierCurve(
            this.currentPoint.clone(),
            new Vector2(aCP1x, aCP1y),
            new Vector2(aCP2x, aCP2y),
            new Vector2(aX, aY)
          );
          this.curves.push(curve);
          this.currentPoint.set(aX, aY);
          return this;
        }
        splineThru(pts) {
          const npts = [this.currentPoint.clone()].concat(pts);
          const curve = new SplineCurve(npts);
          this.curves.push(curve);
          this.currentPoint.copy(pts[pts.length - 1]);
          return this;
        }
        arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
          const x0 = this.currentPoint.x;
          const y0 = this.currentPoint.y;
          this.absarc(
            aX + x0,
            aY + y0,
            aRadius,
            aStartAngle,
            aEndAngle,
            aClockwise
          );
          return this;
        }
        absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
          this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
          return this;
        }
        ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
          const x0 = this.currentPoint.x;
          const y0 = this.currentPoint.y;
          this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
          return this;
        }
        absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
          const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
          if (this.curves.length > 0) {
            const firstPoint = curve.getPoint(0);
            if (!firstPoint.equals(this.currentPoint)) {
              this.lineTo(firstPoint.x, firstPoint.y);
            }
          }
          this.curves.push(curve);
          const lastPoint = curve.getPoint(1);
          this.currentPoint.copy(lastPoint);
          return this;
        }
        copy(source) {
          super.copy(source);
          this.currentPoint.copy(source.currentPoint);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.currentPoint = this.currentPoint.toArray();
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.currentPoint.fromArray(json.currentPoint);
          return this;
        }
      };
      LatheGeometry = class _LatheGeometry extends BufferGeometry {
        constructor(points = [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
          super();
          this.type = "LatheGeometry";
          this.parameters = {
            points,
            segments,
            phiStart,
            phiLength
          };
          segments = Math.floor(segments);
          phiLength = clamp(phiLength, 0, Math.PI * 2);
          const indices = [];
          const vertices = [];
          const uvs = [];
          const initNormals = [];
          const normals = [];
          const inverseSegments = 1 / segments;
          const vertex2 = new Vector3();
          const uv = new Vector2();
          const normal = new Vector3();
          const curNormal = new Vector3();
          const prevNormal = new Vector3();
          let dx = 0;
          let dy = 0;
          for (let j = 0; j <= points.length - 1; j++) {
            switch (j) {
              case 0:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                prevNormal.copy(normal);
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                break;
              case points.length - 1:
                initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
                break;
              default:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                curNormal.copy(normal);
                normal.x += prevNormal.x;
                normal.y += prevNormal.y;
                normal.z += prevNormal.z;
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                prevNormal.copy(curNormal);
            }
          }
          for (let i = 0; i <= segments; i++) {
            const phi = phiStart + i * inverseSegments * phiLength;
            const sin = Math.sin(phi);
            const cos = Math.cos(phi);
            for (let j = 0; j <= points.length - 1; j++) {
              vertex2.x = points[j].x * sin;
              vertex2.y = points[j].y;
              vertex2.z = points[j].x * cos;
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              uv.x = i / segments;
              uv.y = j / (points.length - 1);
              uvs.push(uv.x, uv.y);
              const x = initNormals[3 * j + 0] * sin;
              const y = initNormals[3 * j + 1];
              const z = initNormals[3 * j + 0] * cos;
              normals.push(x, y, z);
            }
          }
          for (let i = 0; i < segments; i++) {
            for (let j = 0; j < points.length - 1; j++) {
              const base2 = j + i * points.length;
              const a = base2;
              const b = base2 + points.length;
              const c = base2 + points.length + 1;
              const d = base2 + 1;
              indices.push(a, b, d);
              indices.push(c, d, b);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
        }
      };
      CapsuleGeometry = class _CapsuleGeometry extends LatheGeometry {
        constructor(radius = 1, length2 = 1, capSegments = 4, radialSegments = 8) {
          const path = new Path();
          path.absarc(0, -length2 / 2, radius, Math.PI * 1.5, 0);
          path.absarc(0, length2 / 2, radius, 0, Math.PI * 0.5);
          super(path.getPoints(capSegments), radialSegments);
          this.type = "CapsuleGeometry";
          this.parameters = {
            radius,
            length: length2,
            capSegments,
            radialSegments
          };
        }
        static fromJSON(data) {
          return new _CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
        }
      };
      CircleGeometry = class _CircleGeometry extends BufferGeometry {
        constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
          super();
          this.type = "CircleGeometry";
          this.parameters = {
            radius,
            segments,
            thetaStart,
            thetaLength
          };
          segments = Math.max(3, segments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          const vertex2 = new Vector3();
          const uv = new Vector2();
          vertices.push(0, 0, 0);
          normals.push(0, 0, 1);
          uvs.push(0.5, 0.5);
          for (let s = 0, i = 3; s <= segments; s++, i += 3) {
            const segment = thetaStart + s / segments * thetaLength;
            vertex2.x = radius * Math.cos(segment);
            vertex2.y = radius * Math.sin(segment);
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normals.push(0, 0, 1);
            uv.x = (vertices[i] / radius + 1) / 2;
            uv.y = (vertices[i + 1] / radius + 1) / 2;
            uvs.push(uv.x, uv.y);
          }
          for (let i = 1; i <= segments; i++) {
            indices.push(i, i + 1, 0);
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
        }
      };
      CylinderGeometry = class _CylinderGeometry extends BufferGeometry {
        constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
          super();
          this.type = "CylinderGeometry";
          this.parameters = {
            radiusTop,
            radiusBottom,
            height,
            radialSegments,
            heightSegments,
            openEnded,
            thetaStart,
            thetaLength
          };
          const scope = this;
          radialSegments = Math.floor(radialSegments);
          heightSegments = Math.floor(heightSegments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          let index = 0;
          const indexArray = [];
          const halfHeight = height / 2;
          let groupStart = 0;
          generateTorso();
          if (openEnded === false) {
            if (radiusTop > 0)
              generateCap(true);
            if (radiusBottom > 0)
              generateCap(false);
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          function generateTorso() {
            const normal = new Vector3();
            const vertex2 = new Vector3();
            let groupCount = 0;
            const slope = (radiusBottom - radiusTop) / height;
            for (let y = 0; y <= heightSegments; y++) {
              const indexRow = [];
              const v = y / heightSegments;
              const radius = v * (radiusBottom - radiusTop) + radiusTop;
              for (let x = 0; x <= radialSegments; x++) {
                const u = x / radialSegments;
                const theta = u * thetaLength + thetaStart;
                const sinTheta = Math.sin(theta);
                const cosTheta = Math.cos(theta);
                vertex2.x = radius * sinTheta;
                vertex2.y = -v * height + halfHeight;
                vertex2.z = radius * cosTheta;
                vertices.push(vertex2.x, vertex2.y, vertex2.z);
                normal.set(sinTheta, slope, cosTheta).normalize();
                normals.push(normal.x, normal.y, normal.z);
                uvs.push(u, 1 - v);
                indexRow.push(index++);
              }
              indexArray.push(indexRow);
            }
            for (let x = 0; x < radialSegments; x++) {
              for (let y = 0; y < heightSegments; y++) {
                const a = indexArray[y][x];
                const b = indexArray[y + 1][x];
                const c = indexArray[y + 1][x + 1];
                const d = indexArray[y][x + 1];
                indices.push(a, b, d);
                indices.push(b, c, d);
                groupCount += 6;
              }
            }
            scope.addGroup(groupStart, groupCount, 0);
            groupStart += groupCount;
          }
          function generateCap(top) {
            const centerIndexStart = index;
            const uv = new Vector2();
            const vertex2 = new Vector3();
            let groupCount = 0;
            const radius = top === true ? radiusTop : radiusBottom;
            const sign2 = top === true ? 1 : -1;
            for (let x = 1; x <= radialSegments; x++) {
              vertices.push(0, halfHeight * sign2, 0);
              normals.push(0, sign2, 0);
              uvs.push(0.5, 0.5);
              index++;
            }
            const centerIndexEnd = index;
            for (let x = 0; x <= radialSegments; x++) {
              const u = x / radialSegments;
              const theta = u * thetaLength + thetaStart;
              const cosTheta = Math.cos(theta);
              const sinTheta = Math.sin(theta);
              vertex2.x = radius * sinTheta;
              vertex2.y = halfHeight * sign2;
              vertex2.z = radius * cosTheta;
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              normals.push(0, sign2, 0);
              uv.x = cosTheta * 0.5 + 0.5;
              uv.y = sinTheta * 0.5 * sign2 + 0.5;
              uvs.push(uv.x, uv.y);
              index++;
            }
            for (let x = 0; x < radialSegments; x++) {
              const c = centerIndexStart + x;
              const i = centerIndexEnd + x;
              if (top === true) {
                indices.push(i, i + 1, c);
              } else {
                indices.push(i + 1, i, c);
              }
              groupCount += 3;
            }
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            groupStart += groupCount;
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
        }
      };
      ConeGeometry = class _ConeGeometry extends CylinderGeometry {
        constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
          super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
          this.type = "ConeGeometry";
          this.parameters = {
            radius,
            height,
            radialSegments,
            heightSegments,
            openEnded,
            thetaStart,
            thetaLength
          };
        }
        static fromJSON(data) {
          return new _ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
        }
      };
      PolyhedronGeometry = class _PolyhedronGeometry extends BufferGeometry {
        constructor(vertices = [], indices = [], radius = 1, detail = 0) {
          super();
          this.type = "PolyhedronGeometry";
          this.parameters = {
            vertices,
            indices,
            radius,
            detail
          };
          const vertexBuffer = [];
          const uvBuffer = [];
          subdivide(detail);
          applyRadius(radius);
          generateUVs();
          this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
          this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
          if (detail === 0) {
            this.computeVertexNormals();
          } else {
            this.normalizeNormals();
          }
          function subdivide(detail2) {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            for (let i = 0; i < indices.length; i += 3) {
              getVertexByIndex(indices[i + 0], a);
              getVertexByIndex(indices[i + 1], b);
              getVertexByIndex(indices[i + 2], c);
              subdivideFace(a, b, c, detail2);
            }
          }
          function subdivideFace(a, b, c, detail2) {
            const cols = detail2 + 1;
            const v = [];
            for (let i = 0; i <= cols; i++) {
              v[i] = [];
              const aj = a.clone().lerp(c, i / cols);
              const bj = b.clone().lerp(c, i / cols);
              const rows = cols - i;
              for (let j = 0; j <= rows; j++) {
                if (j === 0 && i === cols) {
                  v[i][j] = aj;
                } else {
                  v[i][j] = aj.clone().lerp(bj, j / rows);
                }
              }
            }
            for (let i = 0; i < cols; i++) {
              for (let j = 0; j < 2 * (cols - i) - 1; j++) {
                const k = Math.floor(j / 2);
                if (j % 2 === 0) {
                  pushVertex(v[i][k + 1]);
                  pushVertex(v[i + 1][k]);
                  pushVertex(v[i][k]);
                } else {
                  pushVertex(v[i][k + 1]);
                  pushVertex(v[i + 1][k + 1]);
                  pushVertex(v[i + 1][k]);
                }
              }
            }
          }
          function applyRadius(radius2) {
            const vertex2 = new Vector3();
            for (let i = 0; i < vertexBuffer.length; i += 3) {
              vertex2.x = vertexBuffer[i + 0];
              vertex2.y = vertexBuffer[i + 1];
              vertex2.z = vertexBuffer[i + 2];
              vertex2.normalize().multiplyScalar(radius2);
              vertexBuffer[i + 0] = vertex2.x;
              vertexBuffer[i + 1] = vertex2.y;
              vertexBuffer[i + 2] = vertex2.z;
            }
          }
          function generateUVs() {
            const vertex2 = new Vector3();
            for (let i = 0; i < vertexBuffer.length; i += 3) {
              vertex2.x = vertexBuffer[i + 0];
              vertex2.y = vertexBuffer[i + 1];
              vertex2.z = vertexBuffer[i + 2];
              const u = azimuth(vertex2) / 2 / Math.PI + 0.5;
              const v = inclination(vertex2) / Math.PI + 0.5;
              uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
          }
          function correctSeam() {
            for (let i = 0; i < uvBuffer.length; i += 6) {
              const x0 = uvBuffer[i + 0];
              const x1 = uvBuffer[i + 2];
              const x2 = uvBuffer[i + 4];
              const max = Math.max(x0, x1, x2);
              const min = Math.min(x0, x1, x2);
              if (max > 0.9 && min < 0.1) {
                if (x0 < 0.2)
                  uvBuffer[i + 0] += 1;
                if (x1 < 0.2)
                  uvBuffer[i + 2] += 1;
                if (x2 < 0.2)
                  uvBuffer[i + 4] += 1;
              }
            }
          }
          function pushVertex(vertex2) {
            vertexBuffer.push(vertex2.x, vertex2.y, vertex2.z);
          }
          function getVertexByIndex(index, vertex2) {
            const stride = index * 3;
            vertex2.x = vertices[stride + 0];
            vertex2.y = vertices[stride + 1];
            vertex2.z = vertices[stride + 2];
          }
          function correctUVs() {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            const centroid = new Vector3();
            const uvA = new Vector2();
            const uvB = new Vector2();
            const uvC = new Vector2();
            for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
              a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
              b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
              c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
              uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
              uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
              uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
              centroid.copy(a).add(b).add(c).divideScalar(3);
              const azi = azimuth(centroid);
              correctUV(uvA, j + 0, a, azi);
              correctUV(uvB, j + 2, b, azi);
              correctUV(uvC, j + 4, c, azi);
            }
          }
          function correctUV(uv, stride, vector, azimuth2) {
            if (azimuth2 < 0 && uv.x === 1) {
              uvBuffer[stride] = uv.x - 1;
            }
            if (vector.x === 0 && vector.z === 0) {
              uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
            }
          }
          function azimuth(vector) {
            return Math.atan2(vector.z, -vector.x);
          }
          function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
        }
      };
      DodecahedronGeometry = class _DodecahedronGeometry extends PolyhedronGeometry {
        constructor(radius = 1, detail = 0) {
          const t = (1 + Math.sqrt(5)) / 2;
          const r = 1 / t;
          const vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
          ];
          const indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
          ];
          super(vertices, indices, radius, detail);
          this.type = "DodecahedronGeometry";
          this.parameters = {
            radius,
            detail
          };
        }
        static fromJSON(data) {
          return new _DodecahedronGeometry(data.radius, data.detail);
        }
      };
      _v0 = /* @__PURE__ */ new Vector3();
      _v1$1 = /* @__PURE__ */ new Vector3();
      _normal = /* @__PURE__ */ new Vector3();
      _triangle = /* @__PURE__ */ new Triangle();
      EdgesGeometry = class extends BufferGeometry {
        constructor(geometry = null, thresholdAngle = 1) {
          super();
          this.type = "EdgesGeometry";
          this.parameters = {
            geometry,
            thresholdAngle
          };
          if (geometry !== null) {
            const precisionPoints = 4;
            const precision = Math.pow(10, precisionPoints);
            const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
            const indexAttr = geometry.getIndex();
            const positionAttr = geometry.getAttribute("position");
            const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            const indexArr = [0, 0, 0];
            const vertKeys = ["a", "b", "c"];
            const hashes = new Array(3);
            const edgeData = {};
            const vertices = [];
            for (let i = 0; i < indexCount; i += 3) {
              if (indexAttr) {
                indexArr[0] = indexAttr.getX(i);
                indexArr[1] = indexAttr.getX(i + 1);
                indexArr[2] = indexAttr.getX(i + 2);
              } else {
                indexArr[0] = i;
                indexArr[1] = i + 1;
                indexArr[2] = i + 2;
              }
              const { a, b, c } = _triangle;
              a.fromBufferAttribute(positionAttr, indexArr[0]);
              b.fromBufferAttribute(positionAttr, indexArr[1]);
              c.fromBufferAttribute(positionAttr, indexArr[2]);
              _triangle.getNormal(_normal);
              hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
              hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
              hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
              if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
                continue;
              }
              for (let j = 0; j < 3; j++) {
                const jNext = (j + 1) % 3;
                const vecHash0 = hashes[j];
                const vecHash1 = hashes[jNext];
                const v0 = _triangle[vertKeys[j]];
                const v1 = _triangle[vertKeys[jNext]];
                const hash = `${vecHash0}_${vecHash1}`;
                const reverseHash = `${vecHash1}_${vecHash0}`;
                if (reverseHash in edgeData && edgeData[reverseHash]) {
                  if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                    vertices.push(v0.x, v0.y, v0.z);
                    vertices.push(v1.x, v1.y, v1.z);
                  }
                  edgeData[reverseHash] = null;
                } else if (!(hash in edgeData)) {
                  edgeData[hash] = {
                    index0: indexArr[j],
                    index1: indexArr[jNext],
                    normal: _normal.clone()
                  };
                }
              }
            }
            for (const key in edgeData) {
              if (edgeData[key]) {
                const { index0, index1 } = edgeData[key];
                _v0.fromBufferAttribute(positionAttr, index0);
                _v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push(_v0.x, _v0.y, _v0.z);
                vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
              }
            }
            this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
      };
      Shape = class extends Path {
        constructor(points) {
          super(points);
          this.uuid = generateUUID();
          this.type = "Shape";
          this.holes = [];
        }
        getPointsHoles(divisions) {
          const holesPts = [];
          for (let i = 0, l = this.holes.length; i < l; i++) {
            holesPts[i] = this.holes[i].getPoints(divisions);
          }
          return holesPts;
        }
        // get points of shape and holes (keypoints based on segments parameter)
        extractPoints(divisions) {
          return {
            shape: this.getPoints(divisions),
            holes: this.getPointsHoles(divisions)
          };
        }
        copy(source) {
          super.copy(source);
          this.holes = [];
          for (let i = 0, l = source.holes.length; i < l; i++) {
            const hole = source.holes[i];
            this.holes.push(hole.clone());
          }
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.uuid = this.uuid;
          data.holes = [];
          for (let i = 0, l = this.holes.length; i < l; i++) {
            const hole = this.holes[i];
            data.holes.push(hole.toJSON());
          }
          return data;
        }
        fromJSON(json) {
          super.fromJSON(json);
          this.uuid = json.uuid;
          this.holes = [];
          for (let i = 0, l = json.holes.length; i < l; i++) {
            const hole = json.holes[i];
            this.holes.push(new Path().fromJSON(hole));
          }
          return this;
        }
      };
      Earcut = {
        triangulate: function(data, holeIndices, dim = 2) {
          const hasHoles = holeIndices && holeIndices.length;
          const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
          let outerNode = linkedList(data, 0, outerLen, dim, true);
          const triangles = [];
          if (!outerNode || outerNode.next === outerNode.prev)
            return triangles;
          let minX, minY, maxX, maxY, x, y, invSize;
          if (hasHoles)
            outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
          if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for (let i = dim; i < outerLen; i += dim) {
              x = data[i];
              y = data[i + 1];
              if (x < minX)
                minX = x;
              if (y < minY)
                minY = y;
              if (x > maxX)
                maxX = x;
              if (y > maxY)
                maxY = y;
            }
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 32767 / invSize : 0;
          }
          earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
          return triangles;
        }
      };
      ShapeUtils = class _ShapeUtils {
        // calculate area of the contour polygon
        static area(contour) {
          const n = contour.length;
          let a = 0;
          for (let p = n - 1, q = 0; q < n; p = q++) {
            a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
          }
          return a * 0.5;
        }
        static isClockWise(pts) {
          return _ShapeUtils.area(pts) < 0;
        }
        static triangulateShape(contour, holes) {
          const vertices = [];
          const holeIndices = [];
          const faces = [];
          removeDupEndPts(contour);
          addContour(vertices, contour);
          let holeIndex = contour.length;
          holes.forEach(removeDupEndPts);
          for (let i = 0; i < holes.length; i++) {
            holeIndices.push(holeIndex);
            holeIndex += holes[i].length;
            addContour(vertices, holes[i]);
          }
          const triangles = Earcut.triangulate(vertices, holeIndices);
          for (let i = 0; i < triangles.length; i += 3) {
            faces.push(triangles.slice(i, i + 3));
          }
          return faces;
        }
      };
      ExtrudeGeometry = class _ExtrudeGeometry extends BufferGeometry {
        constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
          super();
          this.type = "ExtrudeGeometry";
          this.parameters = {
            shapes,
            options
          };
          shapes = Array.isArray(shapes) ? shapes : [shapes];
          const scope = this;
          const verticesArray = [];
          const uvArray = [];
          for (let i = 0, l = shapes.length; i < l; i++) {
            const shape = shapes[i];
            addShape(shape);
          }
          this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
          this.computeVertexNormals();
          function addShape(shape) {
            const placeholder = [];
            const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
            const steps = options.steps !== void 0 ? options.steps : 1;
            const depth = options.depth !== void 0 ? options.depth : 1;
            let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
            let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
            let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
            let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
            let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
            const extrudePath = options.extrudePath;
            const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
            let extrudePts, extrudeByPath = false;
            let splineTube, binormal, normal, position22;
            if (extrudePath) {
              extrudePts = extrudePath.getSpacedPoints(steps);
              extrudeByPath = true;
              bevelEnabled = false;
              splineTube = extrudePath.computeFrenetFrames(steps, false);
              binormal = new Vector3();
              normal = new Vector3();
              position22 = new Vector3();
            }
            if (!bevelEnabled) {
              bevelSegments = 0;
              bevelThickness = 0;
              bevelSize = 0;
              bevelOffset = 0;
            }
            const shapePoints = shape.extractPoints(curveSegments);
            let vertices = shapePoints.shape;
            const holes = shapePoints.holes;
            const reverse = !ShapeUtils.isClockWise(vertices);
            if (reverse) {
              vertices = vertices.reverse();
              for (let h = 0, hl = holes.length; h < hl; h++) {
                const ahole = holes[h];
                if (ShapeUtils.isClockWise(ahole)) {
                  holes[h] = ahole.reverse();
                }
              }
            }
            const faces = ShapeUtils.triangulateShape(vertices, holes);
            const contour = vertices;
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              vertices = vertices.concat(ahole);
            }
            function scalePt2(pt, vec, size) {
              if (!vec)
                console.error("THREE.ExtrudeGeometry: vec does not exist");
              return pt.clone().addScaledVector(vec, size);
            }
            const vlen = vertices.length, flen = faces.length;
            function getBevelVec(inPt, inPrev, inNext) {
              let v_trans_x, v_trans_y, shrink_by;
              const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
              const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
              const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
              const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
              if (Math.abs(collinear0) > Number.EPSILON) {
                const v_prev_len = Math.sqrt(v_prev_lensq);
                const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                const ptNextShift_x = inNext.x - v_next_y / v_next_len;
                const ptNextShift_y = inNext.y + v_next_x / v_next_len;
                const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                if (v_trans_lensq <= 2) {
                  return new Vector2(v_trans_x, v_trans_y);
                } else {
                  shrink_by = Math.sqrt(v_trans_lensq / 2);
                }
              } else {
                let direction_eq = false;
                if (v_prev_x > Number.EPSILON) {
                  if (v_next_x > Number.EPSILON) {
                    direction_eq = true;
                  }
                } else {
                  if (v_prev_x < -Number.EPSILON) {
                    if (v_next_x < -Number.EPSILON) {
                      direction_eq = true;
                    }
                  } else {
                    if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                      direction_eq = true;
                    }
                  }
                }
                if (direction_eq) {
                  v_trans_x = -v_prev_y;
                  v_trans_y = v_prev_x;
                  shrink_by = Math.sqrt(v_prev_lensq);
                } else {
                  v_trans_x = v_prev_x;
                  v_trans_y = v_prev_y;
                  shrink_by = Math.sqrt(v_prev_lensq / 2);
                }
              }
              return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            const contourMovements = [];
            for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
              if (j === il)
                j = 0;
              if (k === il)
                k = 0;
              contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
            }
            const holesMovements = [];
            let oneHoleMovements, verticesMovements = contourMovements.concat();
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              oneHoleMovements = [];
              for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
                if (j === il)
                  j = 0;
                if (k === il)
                  k = 0;
                oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
              }
              holesMovements.push(oneHoleMovements);
              verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            for (let b = 0; b < bevelSegments; b++) {
              const t = b / bevelSegments;
              const z = bevelThickness * Math.cos(t * Math.PI / 2);
              const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
              for (let i = 0, il = contour.length; i < il; i++) {
                const vert = scalePt2(contour[i], contourMovements[i], bs2);
                v(vert.x, vert.y, -z);
              }
              for (let h = 0, hl = holes.length; h < hl; h++) {
                const ahole = holes[h];
                oneHoleMovements = holesMovements[h];
                for (let i = 0, il = ahole.length; i < il; i++) {
                  const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                  v(vert.x, vert.y, -z);
                }
              }
            }
            const bs = bevelSize + bevelOffset;
            for (let i = 0; i < vlen; i++) {
              const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
              if (!extrudeByPath) {
                v(vert.x, vert.y, 0);
              } else {
                normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                position22.copy(extrudePts[0]).add(normal).add(binormal);
                v(position22.x, position22.y, position22.z);
              }
            }
            for (let s = 1; s <= steps; s++) {
              for (let i = 0; i < vlen; i++) {
                const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
                if (!extrudeByPath) {
                  v(vert.x, vert.y, depth / steps * s);
                } else {
                  normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                  binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                  position22.copy(extrudePts[s]).add(normal).add(binormal);
                  v(position22.x, position22.y, position22.z);
                }
              }
            }
            for (let b = bevelSegments - 1; b >= 0; b--) {
              const t = b / bevelSegments;
              const z = bevelThickness * Math.cos(t * Math.PI / 2);
              const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
              for (let i = 0, il = contour.length; i < il; i++) {
                const vert = scalePt2(contour[i], contourMovements[i], bs2);
                v(vert.x, vert.y, depth + z);
              }
              for (let h = 0, hl = holes.length; h < hl; h++) {
                const ahole = holes[h];
                oneHoleMovements = holesMovements[h];
                for (let i = 0, il = ahole.length; i < il; i++) {
                  const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                  if (!extrudeByPath) {
                    v(vert.x, vert.y, depth + z);
                  } else {
                    v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                  }
                }
              }
            }
            buildLidFaces();
            buildSideFaces();
            function buildLidFaces() {
              const start = verticesArray.length / 3;
              if (bevelEnabled) {
                let layer = 0;
                let offset = vlen * layer;
                for (let i = 0; i < flen; i++) {
                  const face = faces[i];
                  f3(face[2] + offset, face[1] + offset, face[0] + offset);
                }
                layer = steps + bevelSegments * 2;
                offset = vlen * layer;
                for (let i = 0; i < flen; i++) {
                  const face = faces[i];
                  f3(face[0] + offset, face[1] + offset, face[2] + offset);
                }
              } else {
                for (let i = 0; i < flen; i++) {
                  const face = faces[i];
                  f3(face[2], face[1], face[0]);
                }
                for (let i = 0; i < flen; i++) {
                  const face = faces[i];
                  f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
                }
              }
              scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            function buildSideFaces() {
              const start = verticesArray.length / 3;
              let layeroffset = 0;
              sidewalls(contour, layeroffset);
              layeroffset += contour.length;
              for (let h = 0, hl = holes.length; h < hl; h++) {
                const ahole = holes[h];
                sidewalls(ahole, layeroffset);
                layeroffset += ahole.length;
              }
              scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour2, layeroffset) {
              let i = contour2.length;
              while (--i >= 0) {
                const j = i;
                let k = i - 1;
                if (k < 0)
                  k = contour2.length - 1;
                for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
                  const slen1 = vlen * s;
                  const slen2 = vlen * (s + 1);
                  const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                  f4(a, b, c, d);
                }
              }
            }
            function v(x, y, z) {
              placeholder.push(x);
              placeholder.push(y);
              placeholder.push(z);
            }
            function f3(a, b, c) {
              addVertex(a);
              addVertex(b);
              addVertex(c);
              const nextIndex = verticesArray.length / 3;
              const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
              addUV(uvs[0]);
              addUV(uvs[1]);
              addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
              addVertex(a);
              addVertex(b);
              addVertex(d);
              addVertex(b);
              addVertex(c);
              addVertex(d);
              const nextIndex = verticesArray.length / 3;
              const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
              addUV(uvs[0]);
              addUV(uvs[1]);
              addUV(uvs[3]);
              addUV(uvs[1]);
              addUV(uvs[2]);
              addUV(uvs[3]);
            }
            function addVertex(index) {
              verticesArray.push(placeholder[index * 3 + 0]);
              verticesArray.push(placeholder[index * 3 + 1]);
              verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
              uvArray.push(vector2.x);
              uvArray.push(vector2.y);
            }
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          const shapes = this.parameters.shapes;
          const options = this.parameters.options;
          return toJSON$1(shapes, options, data);
        }
        static fromJSON(data, shapes) {
          const geometryShapes = [];
          for (let j = 0, jl = data.shapes.length; j < jl; j++) {
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
          }
          const extrudePath = data.options.extrudePath;
          if (extrudePath !== void 0) {
            data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
          }
          return new _ExtrudeGeometry(geometryShapes, data.options);
        }
      };
      WorldUVGenerator = {
        generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
          const a_x = vertices[indexA * 3];
          const a_y = vertices[indexA * 3 + 1];
          const b_x = vertices[indexB * 3];
          const b_y = vertices[indexB * 3 + 1];
          const c_x = vertices[indexC * 3];
          const c_y = vertices[indexC * 3 + 1];
          return [
            new Vector2(a_x, a_y),
            new Vector2(b_x, b_y),
            new Vector2(c_x, c_y)
          ];
        },
        generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
          const a_x = vertices[indexA * 3];
          const a_y = vertices[indexA * 3 + 1];
          const a_z = vertices[indexA * 3 + 2];
          const b_x = vertices[indexB * 3];
          const b_y = vertices[indexB * 3 + 1];
          const b_z = vertices[indexB * 3 + 2];
          const c_x = vertices[indexC * 3];
          const c_y = vertices[indexC * 3 + 1];
          const c_z = vertices[indexC * 3 + 2];
          const d_x = vertices[indexD * 3];
          const d_y = vertices[indexD * 3 + 1];
          const d_z = vertices[indexD * 3 + 2];
          if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
            return [
              new Vector2(a_x, 1 - a_z),
              new Vector2(b_x, 1 - b_z),
              new Vector2(c_x, 1 - c_z),
              new Vector2(d_x, 1 - d_z)
            ];
          } else {
            return [
              new Vector2(a_y, 1 - a_z),
              new Vector2(b_y, 1 - b_z),
              new Vector2(c_y, 1 - c_z),
              new Vector2(d_y, 1 - d_z)
            ];
          }
        }
      };
      IcosahedronGeometry = class _IcosahedronGeometry extends PolyhedronGeometry {
        constructor(radius = 1, detail = 0) {
          const t = (1 + Math.sqrt(5)) / 2;
          const vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
          ];
          const indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
          ];
          super(vertices, indices, radius, detail);
          this.type = "IcosahedronGeometry";
          this.parameters = {
            radius,
            detail
          };
        }
        static fromJSON(data) {
          return new _IcosahedronGeometry(data.radius, data.detail);
        }
      };
      OctahedronGeometry = class _OctahedronGeometry extends PolyhedronGeometry {
        constructor(radius = 1, detail = 0) {
          const vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
          ];
          const indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
          ];
          super(vertices, indices, radius, detail);
          this.type = "OctahedronGeometry";
          this.parameters = {
            radius,
            detail
          };
        }
        static fromJSON(data) {
          return new _OctahedronGeometry(data.radius, data.detail);
        }
      };
      RingGeometry = class _RingGeometry extends BufferGeometry {
        constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
          super();
          this.type = "RingGeometry";
          this.parameters = {
            innerRadius,
            outerRadius,
            thetaSegments,
            phiSegments,
            thetaStart,
            thetaLength
          };
          thetaSegments = Math.max(3, thetaSegments);
          phiSegments = Math.max(1, phiSegments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          let radius = innerRadius;
          const radiusStep = (outerRadius - innerRadius) / phiSegments;
          const vertex2 = new Vector3();
          const uv = new Vector2();
          for (let j = 0; j <= phiSegments; j++) {
            for (let i = 0; i <= thetaSegments; i++) {
              const segment = thetaStart + i / thetaSegments * thetaLength;
              vertex2.x = radius * Math.cos(segment);
              vertex2.y = radius * Math.sin(segment);
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              normals.push(0, 0, 1);
              uv.x = (vertex2.x / outerRadius + 1) / 2;
              uv.y = (vertex2.y / outerRadius + 1) / 2;
              uvs.push(uv.x, uv.y);
            }
            radius += radiusStep;
          }
          for (let j = 0; j < phiSegments; j++) {
            const thetaSegmentLevel = j * (thetaSegments + 1);
            for (let i = 0; i < thetaSegments; i++) {
              const segment = i + thetaSegmentLevel;
              const a = segment;
              const b = segment + thetaSegments + 1;
              const c = segment + thetaSegments + 2;
              const d = segment + 1;
              indices.push(a, b, d);
              indices.push(b, c, d);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
        }
      };
      ShapeGeometry = class _ShapeGeometry extends BufferGeometry {
        constructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
          super();
          this.type = "ShapeGeometry";
          this.parameters = {
            shapes,
            curveSegments
          };
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          let groupStart = 0;
          let groupCount = 0;
          if (Array.isArray(shapes) === false) {
            addShape(shapes);
          } else {
            for (let i = 0; i < shapes.length; i++) {
              addShape(shapes[i]);
              this.addGroup(groupStart, groupCount, i);
              groupStart += groupCount;
              groupCount = 0;
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          function addShape(shape) {
            const indexOffset = vertices.length / 3;
            const points = shape.extractPoints(curveSegments);
            let shapeVertices = points.shape;
            const shapeHoles = points.holes;
            if (ShapeUtils.isClockWise(shapeVertices) === false) {
              shapeVertices = shapeVertices.reverse();
            }
            for (let i = 0, l = shapeHoles.length; i < l; i++) {
              const shapeHole = shapeHoles[i];
              if (ShapeUtils.isClockWise(shapeHole) === true) {
                shapeHoles[i] = shapeHole.reverse();
              }
            }
            const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
            for (let i = 0, l = shapeHoles.length; i < l; i++) {
              const shapeHole = shapeHoles[i];
              shapeVertices = shapeVertices.concat(shapeHole);
            }
            for (let i = 0, l = shapeVertices.length; i < l; i++) {
              const vertex2 = shapeVertices[i];
              vertices.push(vertex2.x, vertex2.y, 0);
              normals.push(0, 0, 1);
              uvs.push(vertex2.x, vertex2.y);
            }
            for (let i = 0, l = faces.length; i < l; i++) {
              const face = faces[i];
              const a = face[0] + indexOffset;
              const b = face[1] + indexOffset;
              const c = face[2] + indexOffset;
              indices.push(a, b, c);
              groupCount += 3;
            }
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          const shapes = this.parameters.shapes;
          return toJSON(shapes, data);
        }
        static fromJSON(data, shapes) {
          const geometryShapes = [];
          for (let j = 0, jl = data.shapes.length; j < jl; j++) {
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
          }
          return new _ShapeGeometry(geometryShapes, data.curveSegments);
        }
      };
      SphereGeometry = class _SphereGeometry extends BufferGeometry {
        constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
          super();
          this.type = "SphereGeometry";
          this.parameters = {
            radius,
            widthSegments,
            heightSegments,
            phiStart,
            phiLength,
            thetaStart,
            thetaLength
          };
          widthSegments = Math.max(3, Math.floor(widthSegments));
          heightSegments = Math.max(2, Math.floor(heightSegments));
          const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
          let index = 0;
          const grid = [];
          const vertex2 = new Vector3();
          const normal = new Vector3();
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          for (let iy = 0; iy <= heightSegments; iy++) {
            const verticesRow = [];
            const v = iy / heightSegments;
            let uOffset = 0;
            if (iy === 0 && thetaStart === 0) {
              uOffset = 0.5 / widthSegments;
            } else if (iy === heightSegments && thetaEnd === Math.PI) {
              uOffset = -0.5 / widthSegments;
            }
            for (let ix = 0; ix <= widthSegments; ix++) {
              const u = ix / widthSegments;
              vertex2.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
              vertex2.y = radius * Math.cos(thetaStart + v * thetaLength);
              vertex2.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              normal.copy(vertex2).normalize();
              normals.push(normal.x, normal.y, normal.z);
              uvs.push(u + uOffset, 1 - v);
              verticesRow.push(index++);
            }
            grid.push(verticesRow);
          }
          for (let iy = 0; iy < heightSegments; iy++) {
            for (let ix = 0; ix < widthSegments; ix++) {
              const a = grid[iy][ix + 1];
              const b = grid[iy][ix];
              const c = grid[iy + 1][ix];
              const d = grid[iy + 1][ix + 1];
              if (iy !== 0 || thetaStart > 0)
                indices.push(a, b, d);
              if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
                indices.push(b, c, d);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
        }
      };
      TetrahedronGeometry = class _TetrahedronGeometry extends PolyhedronGeometry {
        constructor(radius = 1, detail = 0) {
          const vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
          ];
          const indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
          ];
          super(vertices, indices, radius, detail);
          this.type = "TetrahedronGeometry";
          this.parameters = {
            radius,
            detail
          };
        }
        static fromJSON(data) {
          return new _TetrahedronGeometry(data.radius, data.detail);
        }
      };
      TorusGeometry = class _TorusGeometry extends BufferGeometry {
        constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
          super();
          this.type = "TorusGeometry";
          this.parameters = {
            radius,
            tube,
            radialSegments,
            tubularSegments,
            arc
          };
          radialSegments = Math.floor(radialSegments);
          tubularSegments = Math.floor(tubularSegments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          const center = new Vector3();
          const vertex2 = new Vector3();
          const normal = new Vector3();
          for (let j = 0; j <= radialSegments; j++) {
            for (let i = 0; i <= tubularSegments; i++) {
              const u = i / tubularSegments * arc;
              const v = j / radialSegments * Math.PI * 2;
              vertex2.x = (radius + tube * Math.cos(v)) * Math.cos(u);
              vertex2.y = (radius + tube * Math.cos(v)) * Math.sin(u);
              vertex2.z = tube * Math.sin(v);
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              center.x = radius * Math.cos(u);
              center.y = radius * Math.sin(u);
              normal.subVectors(vertex2, center).normalize();
              normals.push(normal.x, normal.y, normal.z);
              uvs.push(i / tubularSegments);
              uvs.push(j / radialSegments);
            }
          }
          for (let j = 1; j <= radialSegments; j++) {
            for (let i = 1; i <= tubularSegments; i++) {
              const a = (tubularSegments + 1) * j + i - 1;
              const b = (tubularSegments + 1) * (j - 1) + i - 1;
              const c = (tubularSegments + 1) * (j - 1) + i;
              const d = (tubularSegments + 1) * j + i;
              indices.push(a, b, d);
              indices.push(b, c, d);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
        }
      };
      TorusKnotGeometry = class _TorusKnotGeometry extends BufferGeometry {
        constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
          super();
          this.type = "TorusKnotGeometry";
          this.parameters = {
            radius,
            tube,
            tubularSegments,
            radialSegments,
            p,
            q
          };
          tubularSegments = Math.floor(tubularSegments);
          radialSegments = Math.floor(radialSegments);
          const indices = [];
          const vertices = [];
          const normals = [];
          const uvs = [];
          const vertex2 = new Vector3();
          const normal = new Vector3();
          const P1 = new Vector3();
          const P2 = new Vector3();
          const B = new Vector3();
          const T = new Vector3();
          const N = new Vector3();
          for (let i = 0; i <= tubularSegments; ++i) {
            const u = i / tubularSegments * p * Math.PI * 2;
            calculatePositionOnCurve(u, p, q, radius, P1);
            calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            B.normalize();
            N.normalize();
            for (let j = 0; j <= radialSegments; ++j) {
              const v = j / radialSegments * Math.PI * 2;
              const cx = -tube * Math.cos(v);
              const cy = tube * Math.sin(v);
              vertex2.x = P1.x + (cx * N.x + cy * B.x);
              vertex2.y = P1.y + (cx * N.y + cy * B.y);
              vertex2.z = P1.z + (cx * N.z + cy * B.z);
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              normal.subVectors(vertex2, P1).normalize();
              normals.push(normal.x, normal.y, normal.z);
              uvs.push(i / tubularSegments);
              uvs.push(j / radialSegments);
            }
          }
          for (let j = 1; j <= tubularSegments; j++) {
            for (let i = 1; i <= radialSegments; i++) {
              const a = (radialSegments + 1) * (j - 1) + (i - 1);
              const b = (radialSegments + 1) * j + (i - 1);
              const c = (radialSegments + 1) * j + i;
              const d = (radialSegments + 1) * (j - 1) + i;
              indices.push(a, b, d);
              indices.push(b, c, d);
            }
          }
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          function calculatePositionOnCurve(u, p2, q2, radius2, position3) {
            const cu = Math.cos(u);
            const su = Math.sin(u);
            const quOverP = q2 / p2 * u;
            const cs = Math.cos(quOverP);
            position3.x = radius2 * (2 + cs) * 0.5 * cu;
            position3.y = radius2 * (2 + cs) * su * 0.5;
            position3.z = radius2 * Math.sin(quOverP) * 0.5;
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        static fromJSON(data) {
          return new _TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
        }
      };
      TubeGeometry = class _TubeGeometry extends BufferGeometry {
        constructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
          super();
          this.type = "TubeGeometry";
          this.parameters = {
            path,
            tubularSegments,
            radius,
            radialSegments,
            closed
          };
          const frames = path.computeFrenetFrames(tubularSegments, closed);
          this.tangents = frames.tangents;
          this.normals = frames.normals;
          this.binormals = frames.binormals;
          const vertex2 = new Vector3();
          const normal = new Vector3();
          const uv = new Vector2();
          let P = new Vector3();
          const vertices = [];
          const normals = [];
          const uvs = [];
          const indices = [];
          generateBufferData();
          this.setIndex(indices);
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
          this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
          function generateBufferData() {
            for (let i = 0; i < tubularSegments; i++) {
              generateSegment(i);
            }
            generateSegment(closed === false ? tubularSegments : 0);
            generateUVs();
            generateIndices();
          }
          function generateSegment(i) {
            P = path.getPointAt(i / tubularSegments, P);
            const N = frames.normals[i];
            const B = frames.binormals[i];
            for (let j = 0; j <= radialSegments; j++) {
              const v = j / radialSegments * Math.PI * 2;
              const sin = Math.sin(v);
              const cos = -Math.cos(v);
              normal.x = cos * N.x + sin * B.x;
              normal.y = cos * N.y + sin * B.y;
              normal.z = cos * N.z + sin * B.z;
              normal.normalize();
              normals.push(normal.x, normal.y, normal.z);
              vertex2.x = P.x + radius * normal.x;
              vertex2.y = P.y + radius * normal.y;
              vertex2.z = P.z + radius * normal.z;
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
            }
          }
          function generateIndices() {
            for (let j = 1; j <= tubularSegments; j++) {
              for (let i = 1; i <= radialSegments; i++) {
                const a = (radialSegments + 1) * (j - 1) + (i - 1);
                const b = (radialSegments + 1) * j + (i - 1);
                const c = (radialSegments + 1) * j + i;
                const d = (radialSegments + 1) * (j - 1) + i;
                indices.push(a, b, d);
                indices.push(b, c, d);
              }
            }
          }
          function generateUVs() {
            for (let i = 0; i <= tubularSegments; i++) {
              for (let j = 0; j <= radialSegments; j++) {
                uv.x = i / tubularSegments;
                uv.y = j / radialSegments;
                uvs.push(uv.x, uv.y);
              }
            }
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.path = this.parameters.path.toJSON();
          return data;
        }
        static fromJSON(data) {
          return new _TubeGeometry(
            new Curves[data.path.type]().fromJSON(data.path),
            data.tubularSegments,
            data.radius,
            data.radialSegments,
            data.closed
          );
        }
      };
      WireframeGeometry = class extends BufferGeometry {
        constructor(geometry = null) {
          super();
          this.type = "WireframeGeometry";
          this.parameters = {
            geometry
          };
          if (geometry !== null) {
            const vertices = [];
            const edges = /* @__PURE__ */ new Set();
            const start = new Vector3();
            const end = new Vector3();
            if (geometry.index !== null) {
              const position3 = geometry.attributes.position;
              const indices = geometry.index;
              let groups = geometry.groups;
              if (groups.length === 0) {
                groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
              }
              for (let o = 0, ol = groups.length; o < ol; ++o) {
                const group = groups[o];
                const groupStart = group.start;
                const groupCount = group.count;
                for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
                  for (let j = 0; j < 3; j++) {
                    const index1 = indices.getX(i + j);
                    const index2 = indices.getX(i + (j + 1) % 3);
                    start.fromBufferAttribute(position3, index1);
                    end.fromBufferAttribute(position3, index2);
                    if (isUniqueEdge(start, end, edges) === true) {
                      vertices.push(start.x, start.y, start.z);
                      vertices.push(end.x, end.y, end.z);
                    }
                  }
                }
              }
            } else {
              const position3 = geometry.attributes.position;
              for (let i = 0, l = position3.count / 3; i < l; i++) {
                for (let j = 0; j < 3; j++) {
                  const index1 = 3 * i + j;
                  const index2 = 3 * i + (j + 1) % 3;
                  start.fromBufferAttribute(position3, index1);
                  end.fromBufferAttribute(position3, index2);
                  if (isUniqueEdge(start, end, edges) === true) {
                    vertices.push(start.x, start.y, start.z);
                    vertices.push(end.x, end.y, end.z);
                  }
                }
              }
            }
            this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          }
        }
        copy(source) {
          super.copy(source);
          this.parameters = Object.assign({}, source.parameters);
          return this;
        }
      };
      Geometries = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        BoxGeometry,
        CapsuleGeometry,
        CircleGeometry,
        ConeGeometry,
        CylinderGeometry,
        DodecahedronGeometry,
        EdgesGeometry,
        ExtrudeGeometry,
        IcosahedronGeometry,
        LatheGeometry,
        OctahedronGeometry,
        PlaneGeometry,
        PolyhedronGeometry,
        RingGeometry,
        ShapeGeometry,
        SphereGeometry,
        TetrahedronGeometry,
        TorusGeometry,
        TorusKnotGeometry,
        TubeGeometry,
        WireframeGeometry
      });
      ShadowMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isShadowMaterial = true;
          this.type = "ShadowMaterial";
          this.color = new Color(0);
          this.transparent = true;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.fog = source.fog;
          return this;
        }
      };
      RawShaderMaterial = class extends ShaderMaterial {
        constructor(parameters) {
          super(parameters);
          this.isRawShaderMaterial = true;
          this.type = "RawShaderMaterial";
        }
      };
      MeshStandardMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshStandardMaterial = true;
          this.defines = { "STANDARD": "" };
          this.type = "MeshStandardMaterial";
          this.color = new Color(16777215);
          this.roughness = 1;
          this.metalness = 0;
          this.map = null;
          this.lightMap = null;
          this.lightMapIntensity = 1;
          this.aoMap = null;
          this.aoMapIntensity = 1;
          this.emissive = new Color(0);
          this.emissiveIntensity = 1;
          this.emissiveMap = null;
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.roughnessMap = null;
          this.metalnessMap = null;
          this.alphaMap = null;
          this.envMap = null;
          this.envMapIntensity = 1;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.wireframeLinecap = "round";
          this.wireframeLinejoin = "round";
          this.flatShading = false;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.defines = { "STANDARD": "" };
          this.color.copy(source.color);
          this.roughness = source.roughness;
          this.metalness = source.metalness;
          this.map = source.map;
          this.lightMap = source.lightMap;
          this.lightMapIntensity = source.lightMapIntensity;
          this.aoMap = source.aoMap;
          this.aoMapIntensity = source.aoMapIntensity;
          this.emissive.copy(source.emissive);
          this.emissiveMap = source.emissiveMap;
          this.emissiveIntensity = source.emissiveIntensity;
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.roughnessMap = source.roughnessMap;
          this.metalnessMap = source.metalnessMap;
          this.alphaMap = source.alphaMap;
          this.envMap = source.envMap;
          this.envMapIntensity = source.envMapIntensity;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.wireframeLinecap = source.wireframeLinecap;
          this.wireframeLinejoin = source.wireframeLinejoin;
          this.flatShading = source.flatShading;
          this.fog = source.fog;
          return this;
        }
      };
      MeshPhysicalMaterial = class extends MeshStandardMaterial {
        constructor(parameters) {
          super();
          this.isMeshPhysicalMaterial = true;
          this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
          };
          this.type = "MeshPhysicalMaterial";
          this.anisotropyRotation = 0;
          this.anisotropyMap = null;
          this.clearcoatMap = null;
          this.clearcoatRoughness = 0;
          this.clearcoatRoughnessMap = null;
          this.clearcoatNormalScale = new Vector2(1, 1);
          this.clearcoatNormalMap = null;
          this.ior = 1.5;
          Object.defineProperty(this, "reflectivity", {
            get: function() {
              return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(reflectivity) {
              this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
          });
          this.iridescenceMap = null;
          this.iridescenceIOR = 1.3;
          this.iridescenceThicknessRange = [100, 400];
          this.iridescenceThicknessMap = null;
          this.sheenColor = new Color(0);
          this.sheenColorMap = null;
          this.sheenRoughness = 1;
          this.sheenRoughnessMap = null;
          this.transmissionMap = null;
          this.thickness = 0;
          this.thicknessMap = null;
          this.attenuationDistance = Infinity;
          this.attenuationColor = new Color(1, 1, 1);
          this.specularIntensity = 1;
          this.specularIntensityMap = null;
          this.specularColor = new Color(1, 1, 1);
          this.specularColorMap = null;
          this._anisotropy = 0;
          this._clearcoat = 0;
          this._iridescence = 0;
          this._sheen = 0;
          this._transmission = 0;
          this.setValues(parameters);
        }
        get anisotropy() {
          return this._anisotropy;
        }
        set anisotropy(value) {
          if (this._anisotropy > 0 !== value > 0) {
            this.version++;
          }
          this._anisotropy = value;
        }
        get clearcoat() {
          return this._clearcoat;
        }
        set clearcoat(value) {
          if (this._clearcoat > 0 !== value > 0) {
            this.version++;
          }
          this._clearcoat = value;
        }
        get iridescence() {
          return this._iridescence;
        }
        set iridescence(value) {
          if (this._iridescence > 0 !== value > 0) {
            this.version++;
          }
          this._iridescence = value;
        }
        get sheen() {
          return this._sheen;
        }
        set sheen(value) {
          if (this._sheen > 0 !== value > 0) {
            this.version++;
          }
          this._sheen = value;
        }
        get transmission() {
          return this._transmission;
        }
        set transmission(value) {
          if (this._transmission > 0 !== value > 0) {
            this.version++;
          }
          this._transmission = value;
        }
        copy(source) {
          super.copy(source);
          this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
          };
          this.anisotropy = source.anisotropy;
          this.anisotropyRotation = source.anisotropyRotation;
          this.anisotropyMap = source.anisotropyMap;
          this.clearcoat = source.clearcoat;
          this.clearcoatMap = source.clearcoatMap;
          this.clearcoatRoughness = source.clearcoatRoughness;
          this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
          this.clearcoatNormalMap = source.clearcoatNormalMap;
          this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
          this.ior = source.ior;
          this.iridescence = source.iridescence;
          this.iridescenceMap = source.iridescenceMap;
          this.iridescenceIOR = source.iridescenceIOR;
          this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
          this.iridescenceThicknessMap = source.iridescenceThicknessMap;
          this.sheen = source.sheen;
          this.sheenColor.copy(source.sheenColor);
          this.sheenColorMap = source.sheenColorMap;
          this.sheenRoughness = source.sheenRoughness;
          this.sheenRoughnessMap = source.sheenRoughnessMap;
          this.transmission = source.transmission;
          this.transmissionMap = source.transmissionMap;
          this.thickness = source.thickness;
          this.thicknessMap = source.thicknessMap;
          this.attenuationDistance = source.attenuationDistance;
          this.attenuationColor.copy(source.attenuationColor);
          this.specularIntensity = source.specularIntensity;
          this.specularIntensityMap = source.specularIntensityMap;
          this.specularColor.copy(source.specularColor);
          this.specularColorMap = source.specularColorMap;
          return this;
        }
      };
      MeshPhongMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshPhongMaterial = true;
          this.type = "MeshPhongMaterial";
          this.color = new Color(16777215);
          this.specular = new Color(1118481);
          this.shininess = 30;
          this.map = null;
          this.lightMap = null;
          this.lightMapIntensity = 1;
          this.aoMap = null;
          this.aoMapIntensity = 1;
          this.emissive = new Color(0);
          this.emissiveIntensity = 1;
          this.emissiveMap = null;
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.specularMap = null;
          this.alphaMap = null;
          this.envMap = null;
          this.combine = MultiplyOperation;
          this.reflectivity = 1;
          this.refractionRatio = 0.98;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.wireframeLinecap = "round";
          this.wireframeLinejoin = "round";
          this.flatShading = false;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.specular.copy(source.specular);
          this.shininess = source.shininess;
          this.map = source.map;
          this.lightMap = source.lightMap;
          this.lightMapIntensity = source.lightMapIntensity;
          this.aoMap = source.aoMap;
          this.aoMapIntensity = source.aoMapIntensity;
          this.emissive.copy(source.emissive);
          this.emissiveMap = source.emissiveMap;
          this.emissiveIntensity = source.emissiveIntensity;
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.specularMap = source.specularMap;
          this.alphaMap = source.alphaMap;
          this.envMap = source.envMap;
          this.combine = source.combine;
          this.reflectivity = source.reflectivity;
          this.refractionRatio = source.refractionRatio;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.wireframeLinecap = source.wireframeLinecap;
          this.wireframeLinejoin = source.wireframeLinejoin;
          this.flatShading = source.flatShading;
          this.fog = source.fog;
          return this;
        }
      };
      MeshToonMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshToonMaterial = true;
          this.defines = { "TOON": "" };
          this.type = "MeshToonMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.gradientMap = null;
          this.lightMap = null;
          this.lightMapIntensity = 1;
          this.aoMap = null;
          this.aoMapIntensity = 1;
          this.emissive = new Color(0);
          this.emissiveIntensity = 1;
          this.emissiveMap = null;
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.alphaMap = null;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.wireframeLinecap = "round";
          this.wireframeLinejoin = "round";
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.gradientMap = source.gradientMap;
          this.lightMap = source.lightMap;
          this.lightMapIntensity = source.lightMapIntensity;
          this.aoMap = source.aoMap;
          this.aoMapIntensity = source.aoMapIntensity;
          this.emissive.copy(source.emissive);
          this.emissiveMap = source.emissiveMap;
          this.emissiveIntensity = source.emissiveIntensity;
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.alphaMap = source.alphaMap;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.wireframeLinecap = source.wireframeLinecap;
          this.wireframeLinejoin = source.wireframeLinejoin;
          this.fog = source.fog;
          return this;
        }
      };
      MeshNormalMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshNormalMaterial = true;
          this.type = "MeshNormalMaterial";
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.flatShading = false;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.flatShading = source.flatShading;
          return this;
        }
      };
      MeshLambertMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshLambertMaterial = true;
          this.type = "MeshLambertMaterial";
          this.color = new Color(16777215);
          this.map = null;
          this.lightMap = null;
          this.lightMapIntensity = 1;
          this.aoMap = null;
          this.aoMapIntensity = 1;
          this.emissive = new Color(0);
          this.emissiveIntensity = 1;
          this.emissiveMap = null;
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.specularMap = null;
          this.alphaMap = null;
          this.envMap = null;
          this.combine = MultiplyOperation;
          this.reflectivity = 1;
          this.refractionRatio = 0.98;
          this.wireframe = false;
          this.wireframeLinewidth = 1;
          this.wireframeLinecap = "round";
          this.wireframeLinejoin = "round";
          this.flatShading = false;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.color.copy(source.color);
          this.map = source.map;
          this.lightMap = source.lightMap;
          this.lightMapIntensity = source.lightMapIntensity;
          this.aoMap = source.aoMap;
          this.aoMapIntensity = source.aoMapIntensity;
          this.emissive.copy(source.emissive);
          this.emissiveMap = source.emissiveMap;
          this.emissiveIntensity = source.emissiveIntensity;
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.specularMap = source.specularMap;
          this.alphaMap = source.alphaMap;
          this.envMap = source.envMap;
          this.combine = source.combine;
          this.reflectivity = source.reflectivity;
          this.refractionRatio = source.refractionRatio;
          this.wireframe = source.wireframe;
          this.wireframeLinewidth = source.wireframeLinewidth;
          this.wireframeLinecap = source.wireframeLinecap;
          this.wireframeLinejoin = source.wireframeLinejoin;
          this.flatShading = source.flatShading;
          this.fog = source.fog;
          return this;
        }
      };
      MeshMatcapMaterial = class extends Material {
        constructor(parameters) {
          super();
          this.isMeshMatcapMaterial = true;
          this.defines = { "MATCAP": "" };
          this.type = "MeshMatcapMaterial";
          this.color = new Color(16777215);
          this.matcap = null;
          this.map = null;
          this.bumpMap = null;
          this.bumpScale = 1;
          this.normalMap = null;
          this.normalMapType = TangentSpaceNormalMap;
          this.normalScale = new Vector2(1, 1);
          this.displacementMap = null;
          this.displacementScale = 1;
          this.displacementBias = 0;
          this.alphaMap = null;
          this.flatShading = false;
          this.fog = true;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.defines = { "MATCAP": "" };
          this.color.copy(source.color);
          this.matcap = source.matcap;
          this.map = source.map;
          this.bumpMap = source.bumpMap;
          this.bumpScale = source.bumpScale;
          this.normalMap = source.normalMap;
          this.normalMapType = source.normalMapType;
          this.normalScale.copy(source.normalScale);
          this.displacementMap = source.displacementMap;
          this.displacementScale = source.displacementScale;
          this.displacementBias = source.displacementBias;
          this.alphaMap = source.alphaMap;
          this.flatShading = source.flatShading;
          this.fog = source.fog;
          return this;
        }
      };
      LineDashedMaterial = class extends LineBasicMaterial {
        constructor(parameters) {
          super();
          this.isLineDashedMaterial = true;
          this.type = "LineDashedMaterial";
          this.scale = 1;
          this.dashSize = 3;
          this.gapSize = 1;
          this.setValues(parameters);
        }
        copy(source) {
          super.copy(source);
          this.scale = source.scale;
          this.dashSize = source.dashSize;
          this.gapSize = source.gapSize;
          return this;
        }
      };
      AnimationUtils = {
        arraySlice,
        convertArray,
        isTypedArray,
        getKeyframeOrder,
        sortedArray,
        flattenJSON,
        subclip,
        makeClipAdditive
      };
      Interpolant = class {
        constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
          this.parameterPositions = parameterPositions;
          this._cachedIndex = 0;
          this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
          this.sampleValues = sampleValues;
          this.valueSize = sampleSize;
          this.settings = null;
          this.DefaultSettings_ = {};
        }
        evaluate(t) {
          const pp = this.parameterPositions;
          let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
          validate_interval: {
            seek: {
              let right;
              linear_scan: {
                forward_scan:
                  if (!(t < t1)) {
                    for (let giveUpAt = i1 + 2; ; ) {
                      if (t1 === void 0) {
                        if (t < t0)
                          break forward_scan;
                        i1 = pp.length;
                        this._cachedIndex = i1;
                        return this.copySampleValue_(i1 - 1);
                      }
                      if (i1 === giveUpAt)
                        break;
                      t0 = t1;
                      t1 = pp[++i1];
                      if (t < t1) {
                        break seek;
                      }
                    }
                    right = pp.length;
                    break linear_scan;
                  }
                if (!(t >= t0)) {
                  const t1global = pp[1];
                  if (t < t1global) {
                    i1 = 2;
                    t0 = t1global;
                  }
                  for (let giveUpAt = i1 - 2; ; ) {
                    if (t0 === void 0) {
                      this._cachedIndex = 0;
                      return this.copySampleValue_(0);
                    }
                    if (i1 === giveUpAt)
                      break;
                    t1 = t0;
                    t0 = pp[--i1 - 1];
                    if (t >= t0) {
                      break seek;
                    }
                  }
                  right = i1;
                  i1 = 0;
                  break linear_scan;
                }
                break validate_interval;
              }
              while (i1 < right) {
                const mid = i1 + right >>> 1;
                if (t < pp[mid]) {
                  right = mid;
                } else {
                  i1 = mid + 1;
                }
              }
              t1 = pp[i1];
              t0 = pp[i1 - 1];
              if (t0 === void 0) {
                this._cachedIndex = 0;
                return this.copySampleValue_(0);
              }
              if (t1 === void 0) {
                i1 = pp.length;
                this._cachedIndex = i1;
                return this.copySampleValue_(i1 - 1);
              }
            }
            this._cachedIndex = i1;
            this.intervalChanged_(i1, t0, t1);
          }
          return this.interpolate_(i1, t0, t, t1);
        }
        getSettings_() {
          return this.settings || this.DefaultSettings_;
        }
        copySampleValue_(index) {
          const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
          for (let i = 0; i !== stride; ++i) {
            result[i] = values[offset + i];
          }
          return result;
        }
        // Template methods for derived classes:
        interpolate_() {
          throw new Error("call to abstract method");
        }
        intervalChanged_() {
        }
      };
      CubicInterpolant = class extends Interpolant {
        constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
          super(parameterPositions, sampleValues, sampleSize, resultBuffer);
          this._weightPrev = -0;
          this._offsetPrev = -0;
          this._weightNext = -0;
          this._offsetNext = -0;
          this.DefaultSettings_ = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
          };
        }
        intervalChanged_(i1, t0, t1) {
          const pp = this.parameterPositions;
          let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
          if (tPrev === void 0) {
            switch (this.getSettings_().endingStart) {
              case ZeroSlopeEnding:
                iPrev = i1;
                tPrev = 2 * t0 - t1;
                break;
              case WrapAroundEnding:
                iPrev = pp.length - 2;
                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                break;
              default:
                iPrev = i1;
                tPrev = t1;
            }
          }
          if (tNext === void 0) {
            switch (this.getSettings_().endingEnd) {
              case ZeroSlopeEnding:
                iNext = i1;
                tNext = 2 * t1 - t0;
                break;
              case WrapAroundEnding:
                iNext = 1;
                tNext = t1 + pp[1] - pp[0];
                break;
              default:
                iNext = i1 - 1;
                tNext = t0;
            }
          }
          const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
          this._weightPrev = halfDt / (t0 - tPrev);
          this._weightNext = halfDt / (tNext - t1);
          this._offsetPrev = iPrev * stride;
          this._offsetNext = iNext * stride;
        }
        interpolate_(i1, t0, t, t1) {
          const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
          const sP = -wP * ppp + 2 * wP * pp - wP * p;
          const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
          const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
          const sN = wN * ppp - wN * pp;
          for (let i = 0; i !== stride; ++i) {
            result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
          }
          return result;
        }
      };
      LinearInterpolant = class extends Interpolant {
        constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
          super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        }
        interpolate_(i1, t0, t, t1) {
          const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
          for (let i = 0; i !== stride; ++i) {
            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
          }
          return result;
        }
      };
      DiscreteInterpolant = class extends Interpolant {
        constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
          super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        }
        interpolate_(i1) {
          return this.copySampleValue_(i1 - 1);
        }
      };
      KeyframeTrack = class {
        constructor(name, times, values, interpolation) {
          if (name === void 0)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
          if (times === void 0 || times.length === 0)
            throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
          this.name = name;
          this.times = convertArray(times, this.TimeBufferType);
          this.values = convertArray(values, this.ValueBufferType);
          this.setInterpolation(interpolation || this.DefaultInterpolation);
        }
        // Serialization (in static context, because of constructor invocation
        // and automatic invocation of .toJSON):
        static toJSON(track) {
          const trackType = track.constructor;
          let json;
          if (trackType.toJSON !== this.toJSON) {
            json = trackType.toJSON(track);
          } else {
            json = {
              "name": track.name,
              "times": convertArray(track.times, Array),
              "values": convertArray(track.values, Array)
            };
            const interpolation = track.getInterpolation();
            if (interpolation !== track.DefaultInterpolation) {
              json.interpolation = interpolation;
            }
          }
          json.type = track.ValueTypeName;
          return json;
        }
        InterpolantFactoryMethodDiscrete(result) {
          return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
        }
        InterpolantFactoryMethodLinear(result) {
          return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
        }
        InterpolantFactoryMethodSmooth(result) {
          return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
        }
        setInterpolation(interpolation) {
          let factoryMethod;
          switch (interpolation) {
            case InterpolateDiscrete:
              factoryMethod = this.InterpolantFactoryMethodDiscrete;
              break;
            case InterpolateLinear:
              factoryMethod = this.InterpolantFactoryMethodLinear;
              break;
            case InterpolateSmooth:
              factoryMethod = this.InterpolantFactoryMethodSmooth;
              break;
          }
          if (factoryMethod === void 0) {
            const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (this.createInterpolant === void 0) {
              if (interpolation !== this.DefaultInterpolation) {
                this.setInterpolation(this.DefaultInterpolation);
              } else {
                throw new Error(message);
              }
            }
            console.warn("THREE.KeyframeTrack:", message);
            return this;
          }
          this.createInterpolant = factoryMethod;
          return this;
        }
        getInterpolation() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return InterpolateDiscrete;
            case this.InterpolantFactoryMethodLinear:
              return InterpolateLinear;
            case this.InterpolantFactoryMethodSmooth:
              return InterpolateSmooth;
          }
        }
        getValueSize() {
          return this.values.length / this.times.length;
        }
        // move all keyframes either forwards or backwards in time
        shift(timeOffset) {
          if (timeOffset !== 0) {
            const times = this.times;
            for (let i = 0, n = times.length; i !== n; ++i) {
              times[i] += timeOffset;
            }
          }
          return this;
        }
        // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
        scale(timeScale) {
          if (timeScale !== 1) {
            const times = this.times;
            for (let i = 0, n = times.length; i !== n; ++i) {
              times[i] *= timeScale;
            }
          }
          return this;
        }
        // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
        // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
        trim(startTime, endTime) {
          const times = this.times, nKeys = times.length;
          let from2 = 0, to = nKeys - 1;
          while (from2 !== nKeys && times[from2] < startTime) {
            ++from2;
          }
          while (to !== -1 && times[to] > endTime) {
            --to;
          }
          ++to;
          if (from2 !== 0 || to !== nKeys) {
            if (from2 >= to) {
              to = Math.max(to, 1);
              from2 = to - 1;
            }
            const stride = this.getValueSize();
            this.times = arraySlice(times, from2, to);
            this.values = arraySlice(this.values, from2 * stride, to * stride);
          }
          return this;
        }
        // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
        validate() {
          let valid = true;
          const valueSize = this.getValueSize();
          if (valueSize - Math.floor(valueSize) !== 0) {
            console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
            valid = false;
          }
          const times = this.times, values = this.values, nKeys = times.length;
          if (nKeys === 0) {
            console.error("THREE.KeyframeTrack: Track is empty.", this);
            valid = false;
          }
          let prevTime = null;
          for (let i = 0; i !== nKeys; i++) {
            const currTime = times[i];
            if (typeof currTime === "number" && isNaN(currTime)) {
              console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
              valid = false;
              break;
            }
            if (prevTime !== null && prevTime > currTime) {
              console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
              valid = false;
              break;
            }
            prevTime = currTime;
          }
          if (values !== void 0) {
            if (isTypedArray(values)) {
              for (let i = 0, n = values.length; i !== n; ++i) {
                const value = values[i];
                if (isNaN(value)) {
                  console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                  valid = false;
                  break;
                }
              }
            }
          }
          return valid;
        }
        // removes equivalent sequential keys as common in morph target sequences
        // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
        optimize() {
          const times = arraySlice(this.times), values = arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
          let writeIndex = 1;
          for (let i = 1; i < lastIndex; ++i) {
            let keep = false;
            const time = times[i];
            const timeNext = times[i + 1];
            if (time !== timeNext && (i !== 1 || time !== times[0])) {
              if (!smoothInterpolation) {
                const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
                for (let j = 0; j !== stride; ++j) {
                  const value = values[offset + j];
                  if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                    keep = true;
                    break;
                  }
                }
              } else {
                keep = true;
              }
            }
            if (keep) {
              if (i !== writeIndex) {
                times[writeIndex] = times[i];
                const readOffset = i * stride, writeOffset = writeIndex * stride;
                for (let j = 0; j !== stride; ++j) {
                  values[writeOffset + j] = values[readOffset + j];
                }
              }
              ++writeIndex;
            }
          }
          if (lastIndex > 0) {
            times[writeIndex] = times[lastIndex];
            for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
            ++writeIndex;
          }
          if (writeIndex !== times.length) {
            this.times = arraySlice(times, 0, writeIndex);
            this.values = arraySlice(values, 0, writeIndex * stride);
          } else {
            this.times = times;
            this.values = values;
          }
          return this;
        }
        clone() {
          const times = arraySlice(this.times, 0);
          const values = arraySlice(this.values, 0);
          const TypedKeyframeTrack = this.constructor;
          const track = new TypedKeyframeTrack(this.name, times, values);
          track.createInterpolant = this.createInterpolant;
          return track;
        }
      };
      KeyframeTrack.prototype.TimeBufferType = Float32Array;
      KeyframeTrack.prototype.ValueBufferType = Float32Array;
      KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
      BooleanKeyframeTrack = class extends KeyframeTrack {
      };
      BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
      BooleanKeyframeTrack.prototype.ValueBufferType = Array;
      BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
      BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
      BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
      ColorKeyframeTrack = class extends KeyframeTrack {
      };
      ColorKeyframeTrack.prototype.ValueTypeName = "color";
      NumberKeyframeTrack = class extends KeyframeTrack {
      };
      NumberKeyframeTrack.prototype.ValueTypeName = "number";
      QuaternionLinearInterpolant = class extends Interpolant {
        constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
          super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        }
        interpolate_(i1, t0, t, t1) {
          const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
          let offset = i1 * stride;
          for (let end = offset + stride; offset !== end; offset += 4) {
            Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
          }
          return result;
        }
      };
      QuaternionKeyframeTrack = class extends KeyframeTrack {
        InterpolantFactoryMethodLinear(result) {
          return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
        }
      };
      QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
      QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
      QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
      StringKeyframeTrack = class extends KeyframeTrack {
      };
      StringKeyframeTrack.prototype.ValueTypeName = "string";
      StringKeyframeTrack.prototype.ValueBufferType = Array;
      StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
      StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
      StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
      VectorKeyframeTrack = class extends KeyframeTrack {
      };
      VectorKeyframeTrack.prototype.ValueTypeName = "vector";
      AnimationClip = class {
        constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
          this.name = name;
          this.tracks = tracks;
          this.duration = duration;
          this.blendMode = blendMode;
          this.uuid = generateUUID();
          if (this.duration < 0) {
            this.resetDuration();
          }
        }
        static parse(json) {
          const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
          for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
            tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
          }
          const clip = new this(json.name, json.duration, tracks, json.blendMode);
          clip.uuid = json.uuid;
          return clip;
        }
        static toJSON(clip) {
          const tracks = [], clipTracks = clip.tracks;
          const json = {
            "name": clip.name,
            "duration": clip.duration,
            "tracks": tracks,
            "uuid": clip.uuid,
            "blendMode": clip.blendMode
          };
          for (let i = 0, n = clipTracks.length; i !== n; ++i) {
            tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
          }
          return json;
        }
        static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
          const numMorphTargets = morphTargetSequence.length;
          const tracks = [];
          for (let i = 0; i < numMorphTargets; i++) {
            let times = [];
            let values = [];
            times.push(
              (i + numMorphTargets - 1) % numMorphTargets,
              i,
              (i + 1) % numMorphTargets
            );
            values.push(0, 1, 0);
            const order = getKeyframeOrder(times);
            times = sortedArray(times, 1, order);
            values = sortedArray(values, 1, order);
            if (!noLoop && times[0] === 0) {
              times.push(numMorphTargets);
              values.push(values[0]);
            }
            tracks.push(
              new NumberKeyframeTrack(
                ".morphTargetInfluences[" + morphTargetSequence[i].name + "]",
                times,
                values
              ).scale(1 / fps)
            );
          }
          return new this(name, -1, tracks);
        }
        static findByName(objectOrClipArray, name) {
          let clipArray = objectOrClipArray;
          if (!Array.isArray(objectOrClipArray)) {
            const o = objectOrClipArray;
            clipArray = o.geometry && o.geometry.animations || o.animations;
          }
          for (let i = 0; i < clipArray.length; i++) {
            if (clipArray[i].name === name) {
              return clipArray[i];
            }
          }
          return null;
        }
        static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
          const animationToMorphTargets = {};
          const pattern = /^([\w-]*?)([\d]+)$/;
          for (let i = 0, il = morphTargets.length; i < il; i++) {
            const morphTarget = morphTargets[i];
            const parts = morphTarget.name.match(pattern);
            if (parts && parts.length > 1) {
              const name = parts[1];
              let animationMorphTargets = animationToMorphTargets[name];
              if (!animationMorphTargets) {
                animationToMorphTargets[name] = animationMorphTargets = [];
              }
              animationMorphTargets.push(morphTarget);
            }
          }
          const clips = [];
          for (const name in animationToMorphTargets) {
            clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
          }
          return clips;
        }
        // parse the animation.hierarchy format
        static parseAnimation(animation, bones) {
          if (!animation) {
            console.error("THREE.AnimationClip: No animation in JSONLoader data.");
            return null;
          }
          const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
            if (animationKeys.length !== 0) {
              const times = [];
              const values = [];
              flattenJSON(animationKeys, times, values, propertyName);
              if (times.length !== 0) {
                destTracks.push(new trackType(trackName, times, values));
              }
            }
          };
          const tracks = [];
          const clipName = animation.name || "default";
          const fps = animation.fps || 30;
          const blendMode = animation.blendMode;
          let duration = animation.length || -1;
          const hierarchyTracks = animation.hierarchy || [];
          for (let h = 0; h < hierarchyTracks.length; h++) {
            const animationKeys = hierarchyTracks[h].keys;
            if (!animationKeys || animationKeys.length === 0)
              continue;
            if (animationKeys[0].morphTargets) {
              const morphTargetNames = {};
              let k;
              for (k = 0; k < animationKeys.length; k++) {
                if (animationKeys[k].morphTargets) {
                  for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
                    morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                  }
                }
              }
              for (const morphTargetName in morphTargetNames) {
                const times = [];
                const values = [];
                for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
                  const animationKey = animationKeys[k];
                  times.push(animationKey.time);
                  values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                }
                tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
              }
              duration = morphTargetNames.length * fps;
            } else {
              const boneName = ".bones[" + bones[h].name + "]";
              addNonemptyTrack(
                VectorKeyframeTrack,
                boneName + ".position",
                animationKeys,
                "pos",
                tracks
              );
              addNonemptyTrack(
                QuaternionKeyframeTrack,
                boneName + ".quaternion",
                animationKeys,
                "rot",
                tracks
              );
              addNonemptyTrack(
                VectorKeyframeTrack,
                boneName + ".scale",
                animationKeys,
                "scl",
                tracks
              );
            }
          }
          if (tracks.length === 0) {
            return null;
          }
          const clip = new this(clipName, duration, tracks, blendMode);
          return clip;
        }
        resetDuration() {
          const tracks = this.tracks;
          let duration = 0;
          for (let i = 0, n = tracks.length; i !== n; ++i) {
            const track = this.tracks[i];
            duration = Math.max(duration, track.times[track.times.length - 1]);
          }
          this.duration = duration;
          return this;
        }
        trim() {
          for (let i = 0; i < this.tracks.length; i++) {
            this.tracks[i].trim(0, this.duration);
          }
          return this;
        }
        validate() {
          let valid = true;
          for (let i = 0; i < this.tracks.length; i++) {
            valid = valid && this.tracks[i].validate();
          }
          return valid;
        }
        optimize() {
          for (let i = 0; i < this.tracks.length; i++) {
            this.tracks[i].optimize();
          }
          return this;
        }
        clone() {
          const tracks = [];
          for (let i = 0; i < this.tracks.length; i++) {
            tracks.push(this.tracks[i].clone());
          }
          return new this.constructor(this.name, this.duration, tracks, this.blendMode);
        }
        toJSON() {
          return this.constructor.toJSON(this);
        }
      };
      Cache = {
        enabled: false,
        files: {},
        add: function(key, file) {
          if (this.enabled === false)
            return;
          this.files[key] = file;
        },
        get: function(key) {
          if (this.enabled === false)
            return;
          return this.files[key];
        },
        remove: function(key) {
          delete this.files[key];
        },
        clear: function() {
          this.files = {};
        }
      };
      LoadingManager = class {
        constructor(onLoad, onProgress, onError) {
          const scope = this;
          let isLoading = false;
          let itemsLoaded = 0;
          let itemsTotal = 0;
          let urlModifier = void 0;
          const handlers = [];
          this.onStart = void 0;
          this.onLoad = onLoad;
          this.onProgress = onProgress;
          this.onError = onError;
          this.itemStart = function(url) {
            itemsTotal++;
            if (isLoading === false) {
              if (scope.onStart !== void 0) {
                scope.onStart(url, itemsLoaded, itemsTotal);
              }
            }
            isLoading = true;
          };
          this.itemEnd = function(url) {
            itemsLoaded++;
            if (scope.onProgress !== void 0) {
              scope.onProgress(url, itemsLoaded, itemsTotal);
            }
            if (itemsLoaded === itemsTotal) {
              isLoading = false;
              if (scope.onLoad !== void 0) {
                scope.onLoad();
              }
            }
          };
          this.itemError = function(url) {
            if (scope.onError !== void 0) {
              scope.onError(url);
            }
          };
          this.resolveURL = function(url) {
            if (urlModifier) {
              return urlModifier(url);
            }
            return url;
          };
          this.setURLModifier = function(transform) {
            urlModifier = transform;
            return this;
          };
          this.addHandler = function(regex, loader) {
            handlers.push(regex, loader);
            return this;
          };
          this.removeHandler = function(regex) {
            const index = handlers.indexOf(regex);
            if (index !== -1) {
              handlers.splice(index, 2);
            }
            return this;
          };
          this.getHandler = function(file) {
            for (let i = 0, l = handlers.length; i < l; i += 2) {
              const regex = handlers[i];
              const loader = handlers[i + 1];
              if (regex.global)
                regex.lastIndex = 0;
              if (regex.test(file)) {
                return loader;
              }
            }
            return null;
          };
        }
      };
      DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
      Loader = class {
        constructor(manager) {
          this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
          this.crossOrigin = "anonymous";
          this.withCredentials = false;
          this.path = "";
          this.resourcePath = "";
          this.requestHeader = {};
        }
        load() {
        }
        loadAsync(url, onProgress) {
          const scope = this;
          return new Promise(function(resolve, reject) {
            scope.load(url, resolve, onProgress, reject);
          });
        }
        parse() {
        }
        setCrossOrigin(crossOrigin) {
          this.crossOrigin = crossOrigin;
          return this;
        }
        setWithCredentials(value) {
          this.withCredentials = value;
          return this;
        }
        setPath(path) {
          this.path = path;
          return this;
        }
        setResourcePath(resourcePath) {
          this.resourcePath = resourcePath;
          return this;
        }
        setRequestHeader(requestHeader) {
          this.requestHeader = requestHeader;
          return this;
        }
      };
      Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
      loading = {};
      HttpError = class extends Error {
        constructor(message, response) {
          super(message);
          this.response = response;
        }
      };
      FileLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          if (url === void 0)
            url = "";
          if (this.path !== void 0)
            url = this.path + url;
          url = this.manager.resolveURL(url);
          const cached = Cache.get(url);
          if (cached !== void 0) {
            this.manager.itemStart(url);
            setTimeout(() => {
              if (onLoad)
                onLoad(cached);
              this.manager.itemEnd(url);
            }, 0);
            return cached;
          }
          if (loading[url] !== void 0) {
            loading[url].push({
              onLoad,
              onProgress,
              onError
            });
            return;
          }
          loading[url] = [];
          loading[url].push({
            onLoad,
            onProgress,
            onError
          });
          const req = new Request(url, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? "include" : "same-origin"
            // An abort controller could be added within a future PR
          });
          const mimeType = this.mimeType;
          const responseType = this.responseType;
          fetch(req).then((response) => {
            if (response.status === 200 || response.status === 0) {
              if (response.status === 0) {
                console.warn("THREE.FileLoader: HTTP Status 0 received.");
              }
              if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
                return response;
              }
              const callbacks = loading[url];
              const reader = response.body.getReader();
              const contentLength = response.headers.get("Content-Length") || response.headers.get("X-File-Size");
              const total = contentLength ? parseInt(contentLength) : 0;
              const lengthComputable = total !== 0;
              let loaded = 0;
              const stream = new ReadableStream({
                start(controller) {
                  readData();
                  function readData() {
                    reader.read().then(({ done, value }) => {
                      if (done) {
                        controller.close();
                      } else {
                        loaded += value.byteLength;
                        const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                        for (let i = 0, il = callbacks.length; i < il; i++) {
                          const callback = callbacks[i];
                          if (callback.onProgress)
                            callback.onProgress(event);
                        }
                        controller.enqueue(value);
                        readData();
                      }
                    });
                  }
                }
              });
              return new Response(stream);
            } else {
              throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
            }
          }).then((response) => {
            switch (responseType) {
              case "arraybuffer":
                return response.arrayBuffer();
              case "blob":
                return response.blob();
              case "document":
                return response.text().then((text) => {
                  const parser = new DOMParser();
                  return parser.parseFromString(text, mimeType);
                });
              case "json":
                return response.json();
              default:
                if (mimeType === void 0) {
                  return response.text();
                } else {
                  const re = /charset="?([^;"\s]*)"?/i;
                  const exec = re.exec(mimeType);
                  const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
                  const decoder2 = new TextDecoder(label);
                  return response.arrayBuffer().then((ab) => decoder2.decode(ab));
                }
            }
          }).then((data) => {
            Cache.add(url, data);
            const callbacks = loading[url];
            delete loading[url];
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onLoad)
                callback.onLoad(data);
            }
          }).catch((err) => {
            const callbacks = loading[url];
            if (callbacks === void 0) {
              this.manager.itemError(url);
              throw err;
            }
            delete loading[url];
            for (let i = 0, il = callbacks.length; i < il; i++) {
              const callback = callbacks[i];
              if (callback.onError)
                callback.onError(err);
            }
            this.manager.itemError(url);
          }).finally(() => {
            this.manager.itemEnd(url);
          });
          this.manager.itemStart(url);
        }
        setResponseType(value) {
          this.responseType = value;
          return this;
        }
        setMimeType(value) {
          this.mimeType = value;
          return this;
        }
      };
      AnimationLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const loader = new FileLoader(this.manager);
          loader.setPath(this.path);
          loader.setRequestHeader(this.requestHeader);
          loader.setWithCredentials(this.withCredentials);
          loader.load(url, function(text) {
            try {
              onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
              if (onError) {
                onError(e);
              } else {
                console.error(e);
              }
              scope.manager.itemError(url);
            }
          }, onProgress, onError);
        }
        parse(json) {
          const animations = [];
          for (let i = 0; i < json.length; i++) {
            const clip = AnimationClip.parse(json[i]);
            animations.push(clip);
          }
          return animations;
        }
      };
      CompressedTextureLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const images = [];
          const texture = new CompressedTexture();
          const loader = new FileLoader(this.manager);
          loader.setPath(this.path);
          loader.setResponseType("arraybuffer");
          loader.setRequestHeader(this.requestHeader);
          loader.setWithCredentials(scope.withCredentials);
          let loaded = 0;
          function loadTexture(i) {
            loader.load(url[i], function(buffer2) {
              const texDatas = scope.parse(buffer2, true);
              images[i] = {
                width: texDatas.width,
                height: texDatas.height,
                format: texDatas.format,
                mipmaps: texDatas.mipmaps
              };
              loaded += 1;
              if (loaded === 6) {
                if (texDatas.mipmapCount === 1)
                  texture.minFilter = LinearFilter;
                texture.image = images;
                texture.format = texDatas.format;
                texture.needsUpdate = true;
                if (onLoad)
                  onLoad(texture);
              }
            }, onProgress, onError);
          }
          if (Array.isArray(url)) {
            for (let i = 0, il = url.length; i < il; ++i) {
              loadTexture(i);
            }
          } else {
            loader.load(url, function(buffer2) {
              const texDatas = scope.parse(buffer2, true);
              if (texDatas.isCubemap) {
                const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                for (let f = 0; f < faces; f++) {
                  images[f] = { mipmaps: [] };
                  for (let i = 0; i < texDatas.mipmapCount; i++) {
                    images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                    images[f].format = texDatas.format;
                    images[f].width = texDatas.width;
                    images[f].height = texDatas.height;
                  }
                }
                texture.image = images;
              } else {
                texture.image.width = texDatas.width;
                texture.image.height = texDatas.height;
                texture.mipmaps = texDatas.mipmaps;
              }
              if (texDatas.mipmapCount === 1) {
                texture.minFilter = LinearFilter;
              }
              texture.format = texDatas.format;
              texture.needsUpdate = true;
              if (onLoad)
                onLoad(texture);
            }, onProgress, onError);
          }
          return texture;
        }
      };
      ImageLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          if (this.path !== void 0)
            url = this.path + url;
          url = this.manager.resolveURL(url);
          const scope = this;
          const cached = Cache.get(url);
          if (cached !== void 0) {
            scope.manager.itemStart(url);
            setTimeout(function() {
              if (onLoad)
                onLoad(cached);
              scope.manager.itemEnd(url);
            }, 0);
            return cached;
          }
          const image = createElementNS("img");
          function onImageLoad() {
            removeEventListeners();
            Cache.add(url, this);
            if (onLoad)
              onLoad(this);
            scope.manager.itemEnd(url);
          }
          function onImageError(event) {
            removeEventListeners();
            if (onError)
              onError(event);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          }
          function removeEventListeners() {
            image.removeEventListener("load", onImageLoad, false);
            image.removeEventListener("error", onImageError, false);
          }
          image.addEventListener("load", onImageLoad, false);
          image.addEventListener("error", onImageError, false);
          if (url.slice(0, 5) !== "data:") {
            if (this.crossOrigin !== void 0)
              image.crossOrigin = this.crossOrigin;
          }
          scope.manager.itemStart(url);
          image.src = url;
          return image;
        }
      };
      CubeTextureLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(urls, onLoad, onProgress, onError) {
          const texture = new CubeTexture();
          texture.colorSpace = SRGBColorSpace;
          const loader = new ImageLoader(this.manager);
          loader.setCrossOrigin(this.crossOrigin);
          loader.setPath(this.path);
          let loaded = 0;
          function loadTexture(i) {
            loader.load(urls[i], function(image) {
              texture.images[i] = image;
              loaded++;
              if (loaded === 6) {
                texture.needsUpdate = true;
                if (onLoad)
                  onLoad(texture);
              }
            }, void 0, onError);
          }
          for (let i = 0; i < urls.length; ++i) {
            loadTexture(i);
          }
          return texture;
        }
      };
      DataTextureLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const texture = new DataTexture();
          const loader = new FileLoader(this.manager);
          loader.setResponseType("arraybuffer");
          loader.setRequestHeader(this.requestHeader);
          loader.setPath(this.path);
          loader.setWithCredentials(scope.withCredentials);
          loader.load(url, function(buffer2) {
            let texData;
            try {
              texData = scope.parse(buffer2);
            } catch (error) {
              if (onError !== void 0) {
                onError(error);
              } else {
                console.error(error);
                return;
              }
            }
            if (texData.image !== void 0) {
              texture.image = texData.image;
            } else if (texData.data !== void 0) {
              texture.image.width = texData.width;
              texture.image.height = texData.height;
              texture.image.data = texData.data;
            }
            texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping;
            texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping;
            texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
            texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
            texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
            if (texData.colorSpace !== void 0) {
              texture.colorSpace = texData.colorSpace;
            } else if (texData.encoding !== void 0) {
              texture.encoding = texData.encoding;
            }
            if (texData.flipY !== void 0) {
              texture.flipY = texData.flipY;
            }
            if (texData.format !== void 0) {
              texture.format = texData.format;
            }
            if (texData.type !== void 0) {
              texture.type = texData.type;
            }
            if (texData.mipmaps !== void 0) {
              texture.mipmaps = texData.mipmaps;
              texture.minFilter = LinearMipmapLinearFilter;
            }
            if (texData.mipmapCount === 1) {
              texture.minFilter = LinearFilter;
            }
            if (texData.generateMipmaps !== void 0) {
              texture.generateMipmaps = texData.generateMipmaps;
            }
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture, texData);
          }, onProgress, onError);
          return texture;
        }
      };
      TextureLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const texture = new Texture();
          const loader = new ImageLoader(this.manager);
          loader.setCrossOrigin(this.crossOrigin);
          loader.setPath(this.path);
          loader.load(url, function(image) {
            texture.image = image;
            texture.needsUpdate = true;
            if (onLoad !== void 0) {
              onLoad(texture);
            }
          }, onProgress, onError);
          return texture;
        }
      };
      Light = class extends Object3D {
        constructor(color, intensity = 1) {
          super();
          this.isLight = true;
          this.type = "Light";
          this.color = new Color(color);
          this.intensity = intensity;
        }
        dispose() {
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.color.copy(source.color);
          this.intensity = source.intensity;
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.object.color = this.color.getHex();
          data.object.intensity = this.intensity;
          if (this.groundColor !== void 0)
            data.object.groundColor = this.groundColor.getHex();
          if (this.distance !== void 0)
            data.object.distance = this.distance;
          if (this.angle !== void 0)
            data.object.angle = this.angle;
          if (this.decay !== void 0)
            data.object.decay = this.decay;
          if (this.penumbra !== void 0)
            data.object.penumbra = this.penumbra;
          if (this.shadow !== void 0)
            data.object.shadow = this.shadow.toJSON();
          return data;
        }
      };
      HemisphereLight = class extends Light {
        constructor(skyColor, groundColor, intensity) {
          super(skyColor, intensity);
          this.isHemisphereLight = true;
          this.type = "HemisphereLight";
          this.position.copy(Object3D.DEFAULT_UP);
          this.updateMatrix();
          this.groundColor = new Color(groundColor);
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.groundColor.copy(source.groundColor);
          return this;
        }
      };
      _projScreenMatrix$1 = /* @__PURE__ */ new Matrix4();
      _lightPositionWorld$1 = /* @__PURE__ */ new Vector3();
      _lookTarget$1 = /* @__PURE__ */ new Vector3();
      LightShadow = class {
        constructor(camera) {
          this.camera = camera;
          this.bias = 0;
          this.normalBias = 0;
          this.radius = 1;
          this.blurSamples = 8;
          this.mapSize = new Vector2(512, 512);
          this.map = null;
          this.mapPass = null;
          this.matrix = new Matrix4();
          this.autoUpdate = true;
          this.needsUpdate = false;
          this._frustum = new Frustum();
          this._frameExtents = new Vector2(1, 1);
          this._viewportCount = 1;
          this._viewports = [
            new Vector4(0, 0, 1, 1)
          ];
        }
        getViewportCount() {
          return this._viewportCount;
        }
        getFrustum() {
          return this._frustum;
        }
        updateMatrices(light) {
          const shadowCamera = this.camera;
          const shadowMatrix = this.matrix;
          _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
          shadowCamera.position.copy(_lightPositionWorld$1);
          _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
          shadowCamera.lookAt(_lookTarget$1);
          shadowCamera.updateMatrixWorld();
          _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
          this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
          shadowMatrix.set(
            0.5,
            0,
            0,
            0.5,
            0,
            0.5,
            0,
            0.5,
            0,
            0,
            0.5,
            0.5,
            0,
            0,
            0,
            1
          );
          shadowMatrix.multiply(_projScreenMatrix$1);
        }
        getViewport(viewportIndex) {
          return this._viewports[viewportIndex];
        }
        getFrameExtents() {
          return this._frameExtents;
        }
        dispose() {
          if (this.map) {
            this.map.dispose();
          }
          if (this.mapPass) {
            this.mapPass.dispose();
          }
        }
        copy(source) {
          this.camera = source.camera.clone();
          this.bias = source.bias;
          this.radius = source.radius;
          this.mapSize.copy(source.mapSize);
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        toJSON() {
          const object = {};
          if (this.bias !== 0)
            object.bias = this.bias;
          if (this.normalBias !== 0)
            object.normalBias = this.normalBias;
          if (this.radius !== 1)
            object.radius = this.radius;
          if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
            object.mapSize = this.mapSize.toArray();
          object.camera = this.camera.toJSON(false).object;
          delete object.camera.matrix;
          return object;
        }
      };
      SpotLightShadow = class extends LightShadow {
        constructor() {
          super(new PerspectiveCamera(50, 1, 0.5, 500));
          this.isSpotLightShadow = true;
          this.focus = 1;
        }
        updateMatrices(light) {
          const camera = this.camera;
          const fov2 = RAD2DEG * 2 * light.angle * this.focus;
          const aspect2 = this.mapSize.width / this.mapSize.height;
          const far = light.distance || camera.far;
          if (fov2 !== camera.fov || aspect2 !== camera.aspect || far !== camera.far) {
            camera.fov = fov2;
            camera.aspect = aspect2;
            camera.far = far;
            camera.updateProjectionMatrix();
          }
          super.updateMatrices(light);
        }
        copy(source) {
          super.copy(source);
          this.focus = source.focus;
          return this;
        }
      };
      SpotLight = class extends Light {
        constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2) {
          super(color, intensity);
          this.isSpotLight = true;
          this.type = "SpotLight";
          this.position.copy(Object3D.DEFAULT_UP);
          this.updateMatrix();
          this.target = new Object3D();
          this.distance = distance;
          this.angle = angle;
          this.penumbra = penumbra;
          this.decay = decay;
          this.map = null;
          this.shadow = new SpotLightShadow();
        }
        get power() {
          return this.intensity * Math.PI;
        }
        set power(power) {
          this.intensity = power / Math.PI;
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.distance = source.distance;
          this.angle = source.angle;
          this.penumbra = source.penumbra;
          this.decay = source.decay;
          this.target = source.target.clone();
          this.shadow = source.shadow.clone();
          return this;
        }
      };
      _projScreenMatrix = /* @__PURE__ */ new Matrix4();
      _lightPositionWorld = /* @__PURE__ */ new Vector3();
      _lookTarget = /* @__PURE__ */ new Vector3();
      PointLightShadow = class extends LightShadow {
        constructor() {
          super(new PerspectiveCamera(90, 1, 0.5, 500));
          this.isPointLightShadow = true;
          this._frameExtents = new Vector2(4, 2);
          this._viewportCount = 6;
          this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new Vector4(2, 1, 1, 1),
            // negative X
            new Vector4(0, 1, 1, 1),
            // positive Z
            new Vector4(3, 1, 1, 1),
            // negative Z
            new Vector4(1, 1, 1, 1),
            // positive Y
            new Vector4(3, 0, 1, 1),
            // negative Y
            new Vector4(1, 0, 1, 1)
          ];
          this._cubeDirections = [
            new Vector3(1, 0, 0),
            new Vector3(-1, 0, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1),
            new Vector3(0, 1, 0),
            new Vector3(0, -1, 0)
          ];
          this._cubeUps = [
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1)
          ];
        }
        updateMatrices(light, viewportIndex = 0) {
          const camera = this.camera;
          const shadowMatrix = this.matrix;
          const far = light.distance || camera.far;
          if (far !== camera.far) {
            camera.far = far;
            camera.updateProjectionMatrix();
          }
          _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
          camera.position.copy(_lightPositionWorld);
          _lookTarget.copy(camera.position);
          _lookTarget.add(this._cubeDirections[viewportIndex]);
          camera.up.copy(this._cubeUps[viewportIndex]);
          camera.lookAt(_lookTarget);
          camera.updateMatrixWorld();
          shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
          _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
          this._frustum.setFromProjectionMatrix(_projScreenMatrix);
        }
      };
      PointLight = class extends Light {
        constructor(color, intensity, distance = 0, decay = 2) {
          super(color, intensity);
          this.isPointLight = true;
          this.type = "PointLight";
          this.distance = distance;
          this.decay = decay;
          this.shadow = new PointLightShadow();
        }
        get power() {
          return this.intensity * 4 * Math.PI;
        }
        set power(power) {
          this.intensity = power / (4 * Math.PI);
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.distance = source.distance;
          this.decay = source.decay;
          this.shadow = source.shadow.clone();
          return this;
        }
      };
      DirectionalLightShadow = class extends LightShadow {
        constructor() {
          super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
          this.isDirectionalLightShadow = true;
        }
      };
      DirectionalLight = class extends Light {
        constructor(color, intensity) {
          super(color, intensity);
          this.isDirectionalLight = true;
          this.type = "DirectionalLight";
          this.position.copy(Object3D.DEFAULT_UP);
          this.updateMatrix();
          this.target = new Object3D();
          this.shadow = new DirectionalLightShadow();
        }
        dispose() {
          this.shadow.dispose();
        }
        copy(source) {
          super.copy(source);
          this.target = source.target.clone();
          this.shadow = source.shadow.clone();
          return this;
        }
      };
      AmbientLight = class extends Light {
        constructor(color, intensity) {
          super(color, intensity);
          this.isAmbientLight = true;
          this.type = "AmbientLight";
        }
      };
      RectAreaLight = class extends Light {
        constructor(color, intensity, width = 10, height = 10) {
          super(color, intensity);
          this.isRectAreaLight = true;
          this.type = "RectAreaLight";
          this.width = width;
          this.height = height;
        }
        get power() {
          return this.intensity * this.width * this.height * Math.PI;
        }
        set power(power) {
          this.intensity = power / (this.width * this.height * Math.PI);
        }
        copy(source) {
          super.copy(source);
          this.width = source.width;
          this.height = source.height;
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.object.width = this.width;
          data.object.height = this.height;
          return data;
        }
      };
      SphericalHarmonics3 = class {
        constructor() {
          this.isSphericalHarmonics3 = true;
          this.coefficients = [];
          for (let i = 0; i < 9; i++) {
            this.coefficients.push(new Vector3());
          }
        }
        set(coefficients) {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].copy(coefficients[i]);
          }
          return this;
        }
        zero() {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].set(0, 0, 0);
          }
          return this;
        }
        // get the radiance in the direction of the normal
        // target is a Vector3
        getAt(normal, target2) {
          const x = normal.x, y = normal.y, z = normal.z;
          const coeff = this.coefficients;
          target2.copy(coeff[0]).multiplyScalar(0.282095);
          target2.addScaledVector(coeff[1], 0.488603 * y);
          target2.addScaledVector(coeff[2], 0.488603 * z);
          target2.addScaledVector(coeff[3], 0.488603 * x);
          target2.addScaledVector(coeff[4], 1.092548 * (x * y));
          target2.addScaledVector(coeff[5], 1.092548 * (y * z));
          target2.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
          target2.addScaledVector(coeff[7], 1.092548 * (x * z));
          target2.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
          return target2;
        }
        // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
        // target is a Vector3
        // https://graphics.stanford.edu/papers/envmap/envmap.pdf
        getIrradianceAt(normal, target2) {
          const x = normal.x, y = normal.y, z = normal.z;
          const coeff = this.coefficients;
          target2.copy(coeff[0]).multiplyScalar(0.886227);
          target2.addScaledVector(coeff[1], 2 * 0.511664 * y);
          target2.addScaledVector(coeff[2], 2 * 0.511664 * z);
          target2.addScaledVector(coeff[3], 2 * 0.511664 * x);
          target2.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
          target2.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
          target2.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
          target2.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
          target2.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
          return target2;
        }
        add(sh) {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].add(sh.coefficients[i]);
          }
          return this;
        }
        addScaledSH(sh, s) {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].addScaledVector(sh.coefficients[i], s);
          }
          return this;
        }
        scale(s) {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].multiplyScalar(s);
          }
          return this;
        }
        lerp(sh, alpha) {
          for (let i = 0; i < 9; i++) {
            this.coefficients[i].lerp(sh.coefficients[i], alpha);
          }
          return this;
        }
        equals(sh) {
          for (let i = 0; i < 9; i++) {
            if (!this.coefficients[i].equals(sh.coefficients[i])) {
              return false;
            }
          }
          return true;
        }
        copy(sh) {
          return this.set(sh.coefficients);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        fromArray(array, offset = 0) {
          const coefficients = this.coefficients;
          for (let i = 0; i < 9; i++) {
            coefficients[i].fromArray(array, offset + i * 3);
          }
          return this;
        }
        toArray(array = [], offset = 0) {
          const coefficients = this.coefficients;
          for (let i = 0; i < 9; i++) {
            coefficients[i].toArray(array, offset + i * 3);
          }
          return array;
        }
        // evaluate the basis functions
        // shBasis is an Array[ 9 ]
        static getBasisAt(normal, shBasis) {
          const x = normal.x, y = normal.y, z = normal.z;
          shBasis[0] = 0.282095;
          shBasis[1] = 0.488603 * y;
          shBasis[2] = 0.488603 * z;
          shBasis[3] = 0.488603 * x;
          shBasis[4] = 1.092548 * x * y;
          shBasis[5] = 1.092548 * y * z;
          shBasis[6] = 0.315392 * (3 * z * z - 1);
          shBasis[7] = 1.092548 * x * z;
          shBasis[8] = 0.546274 * (x * x - y * y);
        }
      };
      LightProbe = class extends Light {
        constructor(sh = new SphericalHarmonics3(), intensity = 1) {
          super(void 0, intensity);
          this.isLightProbe = true;
          this.sh = sh;
        }
        copy(source) {
          super.copy(source);
          this.sh.copy(source.sh);
          return this;
        }
        fromJSON(json) {
          this.intensity = json.intensity;
          this.sh.fromArray(json.sh);
          return this;
        }
        toJSON(meta) {
          const data = super.toJSON(meta);
          data.object.sh = this.sh.toArray();
          return data;
        }
      };
      MaterialLoader = class _MaterialLoader extends Loader {
        constructor(manager) {
          super(manager);
          this.textures = {};
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const loader = new FileLoader(scope.manager);
          loader.setPath(scope.path);
          loader.setRequestHeader(scope.requestHeader);
          loader.setWithCredentials(scope.withCredentials);
          loader.load(url, function(text) {
            try {
              onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
              if (onError) {
                onError(e);
              } else {
                console.error(e);
              }
              scope.manager.itemError(url);
            }
          }, onProgress, onError);
        }
        parse(json) {
          const textures = this.textures;
          function getTexture(name) {
            if (textures[name] === void 0) {
              console.warn("THREE.MaterialLoader: Undefined texture", name);
            }
            return textures[name];
          }
          const material = _MaterialLoader.createMaterialFromType(json.type);
          if (json.uuid !== void 0)
            material.uuid = json.uuid;
          if (json.name !== void 0)
            material.name = json.name;
          if (json.color !== void 0 && material.color !== void 0)
            material.color.setHex(json.color);
          if (json.roughness !== void 0)
            material.roughness = json.roughness;
          if (json.metalness !== void 0)
            material.metalness = json.metalness;
          if (json.sheen !== void 0)
            material.sheen = json.sheen;
          if (json.sheenColor !== void 0)
            material.sheenColor = new Color().setHex(json.sheenColor);
          if (json.sheenRoughness !== void 0)
            material.sheenRoughness = json.sheenRoughness;
          if (json.emissive !== void 0 && material.emissive !== void 0)
            material.emissive.setHex(json.emissive);
          if (json.specular !== void 0 && material.specular !== void 0)
            material.specular.setHex(json.specular);
          if (json.specularIntensity !== void 0)
            material.specularIntensity = json.specularIntensity;
          if (json.specularColor !== void 0 && material.specularColor !== void 0)
            material.specularColor.setHex(json.specularColor);
          if (json.shininess !== void 0)
            material.shininess = json.shininess;
          if (json.clearcoat !== void 0)
            material.clearcoat = json.clearcoat;
          if (json.clearcoatRoughness !== void 0)
            material.clearcoatRoughness = json.clearcoatRoughness;
          if (json.iridescence !== void 0)
            material.iridescence = json.iridescence;
          if (json.iridescenceIOR !== void 0)
            material.iridescenceIOR = json.iridescenceIOR;
          if (json.iridescenceThicknessRange !== void 0)
            material.iridescenceThicknessRange = json.iridescenceThicknessRange;
          if (json.transmission !== void 0)
            material.transmission = json.transmission;
          if (json.thickness !== void 0)
            material.thickness = json.thickness;
          if (json.attenuationDistance !== void 0)
            material.attenuationDistance = json.attenuationDistance;
          if (json.attenuationColor !== void 0 && material.attenuationColor !== void 0)
            material.attenuationColor.setHex(json.attenuationColor);
          if (json.anisotropy !== void 0)
            material.anisotropy = json.anisotropy;
          if (json.anisotropyRotation !== void 0)
            material.anisotropyRotation = json.anisotropyRotation;
          if (json.fog !== void 0)
            material.fog = json.fog;
          if (json.flatShading !== void 0)
            material.flatShading = json.flatShading;
          if (json.blending !== void 0)
            material.blending = json.blending;
          if (json.combine !== void 0)
            material.combine = json.combine;
          if (json.side !== void 0)
            material.side = json.side;
          if (json.shadowSide !== void 0)
            material.shadowSide = json.shadowSide;
          if (json.opacity !== void 0)
            material.opacity = json.opacity;
          if (json.transparent !== void 0)
            material.transparent = json.transparent;
          if (json.alphaTest !== void 0)
            material.alphaTest = json.alphaTest;
          if (json.alphaHash !== void 0)
            material.alphaHash = json.alphaHash;
          if (json.depthTest !== void 0)
            material.depthTest = json.depthTest;
          if (json.depthWrite !== void 0)
            material.depthWrite = json.depthWrite;
          if (json.colorWrite !== void 0)
            material.colorWrite = json.colorWrite;
          if (json.stencilWrite !== void 0)
            material.stencilWrite = json.stencilWrite;
          if (json.stencilWriteMask !== void 0)
            material.stencilWriteMask = json.stencilWriteMask;
          if (json.stencilFunc !== void 0)
            material.stencilFunc = json.stencilFunc;
          if (json.stencilRef !== void 0)
            material.stencilRef = json.stencilRef;
          if (json.stencilFuncMask !== void 0)
            material.stencilFuncMask = json.stencilFuncMask;
          if (json.stencilFail !== void 0)
            material.stencilFail = json.stencilFail;
          if (json.stencilZFail !== void 0)
            material.stencilZFail = json.stencilZFail;
          if (json.stencilZPass !== void 0)
            material.stencilZPass = json.stencilZPass;
          if (json.wireframe !== void 0)
            material.wireframe = json.wireframe;
          if (json.wireframeLinewidth !== void 0)
            material.wireframeLinewidth = json.wireframeLinewidth;
          if (json.wireframeLinecap !== void 0)
            material.wireframeLinecap = json.wireframeLinecap;
          if (json.wireframeLinejoin !== void 0)
            material.wireframeLinejoin = json.wireframeLinejoin;
          if (json.rotation !== void 0)
            material.rotation = json.rotation;
          if (json.linewidth !== 1)
            material.linewidth = json.linewidth;
          if (json.dashSize !== void 0)
            material.dashSize = json.dashSize;
          if (json.gapSize !== void 0)
            material.gapSize = json.gapSize;
          if (json.scale !== void 0)
            material.scale = json.scale;
          if (json.polygonOffset !== void 0)
            material.polygonOffset = json.polygonOffset;
          if (json.polygonOffsetFactor !== void 0)
            material.polygonOffsetFactor = json.polygonOffsetFactor;
          if (json.polygonOffsetUnits !== void 0)
            material.polygonOffsetUnits = json.polygonOffsetUnits;
          if (json.dithering !== void 0)
            material.dithering = json.dithering;
          if (json.alphaToCoverage !== void 0)
            material.alphaToCoverage = json.alphaToCoverage;
          if (json.premultipliedAlpha !== void 0)
            material.premultipliedAlpha = json.premultipliedAlpha;
          if (json.forceSinglePass !== void 0)
            material.forceSinglePass = json.forceSinglePass;
          if (json.visible !== void 0)
            material.visible = json.visible;
          if (json.toneMapped !== void 0)
            material.toneMapped = json.toneMapped;
          if (json.userData !== void 0)
            material.userData = json.userData;
          if (json.vertexColors !== void 0) {
            if (typeof json.vertexColors === "number") {
              material.vertexColors = json.vertexColors > 0 ? true : false;
            } else {
              material.vertexColors = json.vertexColors;
            }
          }
          if (json.uniforms !== void 0) {
            for (const name in json.uniforms) {
              const uniform = json.uniforms[name];
              material.uniforms[name] = {};
              switch (uniform.type) {
                case "t":
                  material.uniforms[name].value = getTexture(uniform.value);
                  break;
                case "c":
                  material.uniforms[name].value = new Color().setHex(uniform.value);
                  break;
                case "v2":
                  material.uniforms[name].value = new Vector2().fromArray(uniform.value);
                  break;
                case "v3":
                  material.uniforms[name].value = new Vector3().fromArray(uniform.value);
                  break;
                case "v4":
                  material.uniforms[name].value = new Vector4().fromArray(uniform.value);
                  break;
                case "m3":
                  material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
                  break;
                case "m4":
                  material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
                  break;
                default:
                  material.uniforms[name].value = uniform.value;
              }
            }
          }
          if (json.defines !== void 0)
            material.defines = json.defines;
          if (json.vertexShader !== void 0)
            material.vertexShader = json.vertexShader;
          if (json.fragmentShader !== void 0)
            material.fragmentShader = json.fragmentShader;
          if (json.glslVersion !== void 0)
            material.glslVersion = json.glslVersion;
          if (json.extensions !== void 0) {
            for (const key in json.extensions) {
              material.extensions[key] = json.extensions[key];
            }
          }
          if (json.lights !== void 0)
            material.lights = json.lights;
          if (json.clipping !== void 0)
            material.clipping = json.clipping;
          if (json.size !== void 0)
            material.size = json.size;
          if (json.sizeAttenuation !== void 0)
            material.sizeAttenuation = json.sizeAttenuation;
          if (json.map !== void 0)
            material.map = getTexture(json.map);
          if (json.matcap !== void 0)
            material.matcap = getTexture(json.matcap);
          if (json.alphaMap !== void 0)
            material.alphaMap = getTexture(json.alphaMap);
          if (json.bumpMap !== void 0)
            material.bumpMap = getTexture(json.bumpMap);
          if (json.bumpScale !== void 0)
            material.bumpScale = json.bumpScale;
          if (json.normalMap !== void 0)
            material.normalMap = getTexture(json.normalMap);
          if (json.normalMapType !== void 0)
            material.normalMapType = json.normalMapType;
          if (json.normalScale !== void 0) {
            let normalScale = json.normalScale;
            if (Array.isArray(normalScale) === false) {
              normalScale = [normalScale, normalScale];
            }
            material.normalScale = new Vector2().fromArray(normalScale);
          }
          if (json.displacementMap !== void 0)
            material.displacementMap = getTexture(json.displacementMap);
          if (json.displacementScale !== void 0)
            material.displacementScale = json.displacementScale;
          if (json.displacementBias !== void 0)
            material.displacementBias = json.displacementBias;
          if (json.roughnessMap !== void 0)
            material.roughnessMap = getTexture(json.roughnessMap);
          if (json.metalnessMap !== void 0)
            material.metalnessMap = getTexture(json.metalnessMap);
          if (json.emissiveMap !== void 0)
            material.emissiveMap = getTexture(json.emissiveMap);
          if (json.emissiveIntensity !== void 0)
            material.emissiveIntensity = json.emissiveIntensity;
          if (json.specularMap !== void 0)
            material.specularMap = getTexture(json.specularMap);
          if (json.specularIntensityMap !== void 0)
            material.specularIntensityMap = getTexture(json.specularIntensityMap);
          if (json.specularColorMap !== void 0)
            material.specularColorMap = getTexture(json.specularColorMap);
          if (json.envMap !== void 0)
            material.envMap = getTexture(json.envMap);
          if (json.envMapIntensity !== void 0)
            material.envMapIntensity = json.envMapIntensity;
          if (json.reflectivity !== void 0)
            material.reflectivity = json.reflectivity;
          if (json.refractionRatio !== void 0)
            material.refractionRatio = json.refractionRatio;
          if (json.lightMap !== void 0)
            material.lightMap = getTexture(json.lightMap);
          if (json.lightMapIntensity !== void 0)
            material.lightMapIntensity = json.lightMapIntensity;
          if (json.aoMap !== void 0)
            material.aoMap = getTexture(json.aoMap);
          if (json.aoMapIntensity !== void 0)
            material.aoMapIntensity = json.aoMapIntensity;
          if (json.gradientMap !== void 0)
            material.gradientMap = getTexture(json.gradientMap);
          if (json.clearcoatMap !== void 0)
            material.clearcoatMap = getTexture(json.clearcoatMap);
          if (json.clearcoatRoughnessMap !== void 0)
            material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
          if (json.clearcoatNormalMap !== void 0)
            material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
          if (json.clearcoatNormalScale !== void 0)
            material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
          if (json.iridescenceMap !== void 0)
            material.iridescenceMap = getTexture(json.iridescenceMap);
          if (json.iridescenceThicknessMap !== void 0)
            material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);
          if (json.transmissionMap !== void 0)
            material.transmissionMap = getTexture(json.transmissionMap);
          if (json.thicknessMap !== void 0)
            material.thicknessMap = getTexture(json.thicknessMap);
          if (json.anisotropyMap !== void 0)
            material.anisotropyMap = getTexture(json.anisotropyMap);
          if (json.sheenColorMap !== void 0)
            material.sheenColorMap = getTexture(json.sheenColorMap);
          if (json.sheenRoughnessMap !== void 0)
            material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
          return material;
        }
        setTextures(value) {
          this.textures = value;
          return this;
        }
        static createMaterialFromType(type) {
          const materialLib = {
            ShadowMaterial,
            SpriteMaterial,
            RawShaderMaterial,
            ShaderMaterial,
            PointsMaterial,
            MeshPhysicalMaterial,
            MeshStandardMaterial,
            MeshPhongMaterial,
            MeshToonMaterial,
            MeshNormalMaterial,
            MeshLambertMaterial,
            MeshDepthMaterial,
            MeshDistanceMaterial,
            MeshBasicMaterial,
            MeshMatcapMaterial,
            LineDashedMaterial,
            LineBasicMaterial,
            Material
          };
          return new materialLib[type]();
        }
      };
      LoaderUtils = class {
        static decodeText(array) {
          if (typeof TextDecoder !== "undefined") {
            return new TextDecoder().decode(array);
          }
          let s = "";
          for (let i = 0, il = array.length; i < il; i++) {
            s += String.fromCharCode(array[i]);
          }
          try {
            return decodeURIComponent(escape(s));
          } catch (e) {
            return s;
          }
        }
        static extractUrlBase(url) {
          const index = url.lastIndexOf("/");
          if (index === -1)
            return "./";
          return url.slice(0, index + 1);
        }
        static resolveURL(url, path) {
          if (typeof url !== "string" || url === "")
            return "";
          if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
            path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
          }
          if (/^(https?:)?\/\//i.test(url))
            return url;
          if (/^data:.*,.*$/i.test(url))
            return url;
          if (/^blob:.*$/i.test(url))
            return url;
          return path + url;
        }
      };
      InstancedBufferGeometry = class extends BufferGeometry {
        constructor() {
          super();
          this.isInstancedBufferGeometry = true;
          this.type = "InstancedBufferGeometry";
          this.instanceCount = Infinity;
        }
        copy(source) {
          super.copy(source);
          this.instanceCount = source.instanceCount;
          return this;
        }
        toJSON() {
          const data = super.toJSON();
          data.instanceCount = this.instanceCount;
          data.isInstancedBufferGeometry = true;
          return data;
        }
      };
      BufferGeometryLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const loader = new FileLoader(scope.manager);
          loader.setPath(scope.path);
          loader.setRequestHeader(scope.requestHeader);
          loader.setWithCredentials(scope.withCredentials);
          loader.load(url, function(text) {
            try {
              onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
              if (onError) {
                onError(e);
              } else {
                console.error(e);
              }
              scope.manager.itemError(url);
            }
          }, onProgress, onError);
        }
        parse(json) {
          const interleavedBufferMap = {};
          const arrayBufferMap = {};
          function getInterleavedBuffer(json2, uuid) {
            if (interleavedBufferMap[uuid] !== void 0)
              return interleavedBufferMap[uuid];
            const interleavedBuffers = json2.interleavedBuffers;
            const interleavedBuffer = interleavedBuffers[uuid];
            const buffer2 = getArrayBuffer(json2, interleavedBuffer.buffer);
            const array = getTypedArray(interleavedBuffer.type, buffer2);
            const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
            ib.uuid = interleavedBuffer.uuid;
            interleavedBufferMap[uuid] = ib;
            return ib;
          }
          function getArrayBuffer(json2, uuid) {
            if (arrayBufferMap[uuid] !== void 0)
              return arrayBufferMap[uuid];
            const arrayBuffers = json2.arrayBuffers;
            const arrayBuffer = arrayBuffers[uuid];
            const ab = new Uint32Array(arrayBuffer).buffer;
            arrayBufferMap[uuid] = ab;
            return ab;
          }
          const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
          const index = json.data.index;
          if (index !== void 0) {
            const typedArray = getTypedArray(index.type, index.array);
            geometry.setIndex(new BufferAttribute(typedArray, 1));
          }
          const attributes = json.data.attributes;
          for (const key in attributes) {
            const attribute = attributes[key];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
              const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
              bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
              const typedArray = getTypedArray(attribute.type, attribute.array);
              const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
              bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== void 0)
              bufferAttribute.name = attribute.name;
            if (attribute.usage !== void 0)
              bufferAttribute.setUsage(attribute.usage);
            if (attribute.updateRange !== void 0) {
              bufferAttribute.updateRange.offset = attribute.updateRange.offset;
              bufferAttribute.updateRange.count = attribute.updateRange.count;
            }
            geometry.setAttribute(key, bufferAttribute);
          }
          const morphAttributes = json.data.morphAttributes;
          if (morphAttributes) {
            for (const key in morphAttributes) {
              const attributeArray = morphAttributes[key];
              const array = [];
              for (let i = 0, il = attributeArray.length; i < il; i++) {
                const attribute = attributeArray[i];
                let bufferAttribute;
                if (attribute.isInterleavedBufferAttribute) {
                  const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                  bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                  const typedArray = getTypedArray(attribute.type, attribute.array);
                  bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
                }
                if (attribute.name !== void 0)
                  bufferAttribute.name = attribute.name;
                array.push(bufferAttribute);
              }
              geometry.morphAttributes[key] = array;
            }
          }
          const morphTargetsRelative = json.data.morphTargetsRelative;
          if (morphTargetsRelative) {
            geometry.morphTargetsRelative = true;
          }
          const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
          if (groups !== void 0) {
            for (let i = 0, n = groups.length; i !== n; ++i) {
              const group = groups[i];
              geometry.addGroup(group.start, group.count, group.materialIndex);
            }
          }
          const boundingSphere = json.data.boundingSphere;
          if (boundingSphere !== void 0) {
            const center = new Vector3();
            if (boundingSphere.center !== void 0) {
              center.fromArray(boundingSphere.center);
            }
            geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
          }
          if (json.name)
            geometry.name = json.name;
          if (json.userData)
            geometry.userData = json.userData;
          return geometry;
        }
      };
      ObjectLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
          this.resourcePath = this.resourcePath || path;
          const loader = new FileLoader(this.manager);
          loader.setPath(this.path);
          loader.setRequestHeader(this.requestHeader);
          loader.setWithCredentials(this.withCredentials);
          loader.load(url, function(text) {
            let json = null;
            try {
              json = JSON.parse(text);
            } catch (error) {
              if (onError !== void 0)
                onError(error);
              console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
              return;
            }
            const metadata = json.metadata;
            if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
              if (onError !== void 0)
                onError(new Error("THREE.ObjectLoader: Can't load " + url));
              console.error("THREE.ObjectLoader: Can't load " + url);
              return;
            }
            scope.parse(json, onLoad);
          }, onProgress, onError);
        }
        async loadAsync(url, onProgress) {
          const scope = this;
          const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
          this.resourcePath = this.resourcePath || path;
          const loader = new FileLoader(this.manager);
          loader.setPath(this.path);
          loader.setRequestHeader(this.requestHeader);
          loader.setWithCredentials(this.withCredentials);
          const text = await loader.loadAsync(url, onProgress);
          const json = JSON.parse(text);
          const metadata = json.metadata;
          if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
            throw new Error("THREE.ObjectLoader: Can't load " + url);
          }
          return await scope.parseAsync(json);
        }
        parse(json, onLoad) {
          const animations = this.parseAnimations(json.animations);
          const shapes = this.parseShapes(json.shapes);
          const geometries = this.parseGeometries(json.geometries, shapes);
          const images = this.parseImages(json.images, function() {
            if (onLoad !== void 0)
              onLoad(object);
          });
          const textures = this.parseTextures(json.textures, images);
          const materials = this.parseMaterials(json.materials, textures);
          const object = this.parseObject(json.object, geometries, materials, textures, animations);
          const skeletons = this.parseSkeletons(json.skeletons, object);
          this.bindSkeletons(object, skeletons);
          if (onLoad !== void 0) {
            let hasImages = false;
            for (const uuid in images) {
              if (images[uuid].data instanceof HTMLImageElement) {
                hasImages = true;
                break;
              }
            }
            if (hasImages === false)
              onLoad(object);
          }
          return object;
        }
        async parseAsync(json) {
          const animations = this.parseAnimations(json.animations);
          const shapes = this.parseShapes(json.shapes);
          const geometries = this.parseGeometries(json.geometries, shapes);
          const images = await this.parseImagesAsync(json.images);
          const textures = this.parseTextures(json.textures, images);
          const materials = this.parseMaterials(json.materials, textures);
          const object = this.parseObject(json.object, geometries, materials, textures, animations);
          const skeletons = this.parseSkeletons(json.skeletons, object);
          this.bindSkeletons(object, skeletons);
          return object;
        }
        parseShapes(json) {
          const shapes = {};
          if (json !== void 0) {
            for (let i = 0, l = json.length; i < l; i++) {
              const shape = new Shape().fromJSON(json[i]);
              shapes[shape.uuid] = shape;
            }
          }
          return shapes;
        }
        parseSkeletons(json, object) {
          const skeletons = {};
          const bones = {};
          object.traverse(function(child) {
            if (child.isBone)
              bones[child.uuid] = child;
          });
          if (json !== void 0) {
            for (let i = 0, l = json.length; i < l; i++) {
              const skeleton = new Skeleton().fromJSON(json[i], bones);
              skeletons[skeleton.uuid] = skeleton;
            }
          }
          return skeletons;
        }
        parseGeometries(json, shapes) {
          const geometries = {};
          if (json !== void 0) {
            const bufferGeometryLoader = new BufferGeometryLoader();
            for (let i = 0, l = json.length; i < l; i++) {
              let geometry;
              const data = json[i];
              switch (data.type) {
                case "BufferGeometry":
                case "InstancedBufferGeometry":
                  geometry = bufferGeometryLoader.parse(data);
                  break;
                default:
                  if (data.type in Geometries) {
                    geometry = Geometries[data.type].fromJSON(data, shapes);
                  } else {
                    console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                  }
              }
              geometry.uuid = data.uuid;
              if (data.name !== void 0)
                geometry.name = data.name;
              if (data.userData !== void 0)
                geometry.userData = data.userData;
              geometries[data.uuid] = geometry;
            }
          }
          return geometries;
        }
        parseMaterials(json, textures) {
          const cache2 = {};
          const materials = {};
          if (json !== void 0) {
            const loader = new MaterialLoader();
            loader.setTextures(textures);
            for (let i = 0, l = json.length; i < l; i++) {
              const data = json[i];
              if (cache2[data.uuid] === void 0) {
                cache2[data.uuid] = loader.parse(data);
              }
              materials[data.uuid] = cache2[data.uuid];
            }
          }
          return materials;
        }
        parseAnimations(json) {
          const animations = {};
          if (json !== void 0) {
            for (let i = 0; i < json.length; i++) {
              const data = json[i];
              const clip = AnimationClip.parse(data);
              animations[clip.uuid] = clip;
            }
          }
          return animations;
        }
        parseImages(json, onLoad) {
          const scope = this;
          const images = {};
          let loader;
          function loadImage(url) {
            scope.manager.itemStart(url);
            return loader.load(url, function() {
              scope.manager.itemEnd(url);
            }, void 0, function() {
              scope.manager.itemError(url);
              scope.manager.itemEnd(url);
            });
          }
          function deserializeImage(image) {
            if (typeof image === "string") {
              const url = image;
              const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
              return loadImage(path);
            } else {
              if (image.data) {
                return {
                  data: getTypedArray(image.type, image.data),
                  width: image.width,
                  height: image.height
                };
              } else {
                return null;
              }
            }
          }
          if (json !== void 0 && json.length > 0) {
            const manager = new LoadingManager(onLoad);
            loader = new ImageLoader(manager);
            loader.setCrossOrigin(this.crossOrigin);
            for (let i = 0, il = json.length; i < il; i++) {
              const image = json[i];
              const url = image.url;
              if (Array.isArray(url)) {
                const imageArray = [];
                for (let j = 0, jl = url.length; j < jl; j++) {
                  const currentUrl = url[j];
                  const deserializedImage = deserializeImage(currentUrl);
                  if (deserializedImage !== null) {
                    if (deserializedImage instanceof HTMLImageElement) {
                      imageArray.push(deserializedImage);
                    } else {
                      imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                    }
                  }
                }
                images[image.uuid] = new Source(imageArray);
              } else {
                const deserializedImage = deserializeImage(image.url);
                images[image.uuid] = new Source(deserializedImage);
              }
            }
          }
          return images;
        }
        async parseImagesAsync(json) {
          const scope = this;
          const images = {};
          let loader;
          async function deserializeImage(image) {
            if (typeof image === "string") {
              const url = image;
              const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
              return await loader.loadAsync(path);
            } else {
              if (image.data) {
                return {
                  data: getTypedArray(image.type, image.data),
                  width: image.width,
                  height: image.height
                };
              } else {
                return null;
              }
            }
          }
          if (json !== void 0 && json.length > 0) {
            loader = new ImageLoader(this.manager);
            loader.setCrossOrigin(this.crossOrigin);
            for (let i = 0, il = json.length; i < il; i++) {
              const image = json[i];
              const url = image.url;
              if (Array.isArray(url)) {
                const imageArray = [];
                for (let j = 0, jl = url.length; j < jl; j++) {
                  const currentUrl = url[j];
                  const deserializedImage = await deserializeImage(currentUrl);
                  if (deserializedImage !== null) {
                    if (deserializedImage instanceof HTMLImageElement) {
                      imageArray.push(deserializedImage);
                    } else {
                      imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                    }
                  }
                }
                images[image.uuid] = new Source(imageArray);
              } else {
                const deserializedImage = await deserializeImage(image.url);
                images[image.uuid] = new Source(deserializedImage);
              }
            }
          }
          return images;
        }
        parseTextures(json, images) {
          function parseConstant(value, type) {
            if (typeof value === "number")
              return value;
            console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
            return type[value];
          }
          const textures = {};
          if (json !== void 0) {
            for (let i = 0, l = json.length; i < l; i++) {
              const data = json[i];
              if (data.image === void 0) {
                console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
              }
              if (images[data.image] === void 0) {
                console.warn("THREE.ObjectLoader: Undefined image", data.image);
              }
              const source = images[data.image];
              const image = source.data;
              let texture;
              if (Array.isArray(image)) {
                texture = new CubeTexture();
                if (image.length === 6)
                  texture.needsUpdate = true;
              } else {
                if (image && image.data) {
                  texture = new DataTexture();
                } else {
                  texture = new Texture();
                }
                if (image)
                  texture.needsUpdate = true;
              }
              texture.source = source;
              texture.uuid = data.uuid;
              if (data.name !== void 0)
                texture.name = data.name;
              if (data.mapping !== void 0)
                texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
              if (data.channel !== void 0)
                texture.channel = data.channel;
              if (data.offset !== void 0)
                texture.offset.fromArray(data.offset);
              if (data.repeat !== void 0)
                texture.repeat.fromArray(data.repeat);
              if (data.center !== void 0)
                texture.center.fromArray(data.center);
              if (data.rotation !== void 0)
                texture.rotation = data.rotation;
              if (data.wrap !== void 0) {
                texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
                texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
              }
              if (data.format !== void 0)
                texture.format = data.format;
              if (data.internalFormat !== void 0)
                texture.internalFormat = data.internalFormat;
              if (data.type !== void 0)
                texture.type = data.type;
              if (data.colorSpace !== void 0)
                texture.colorSpace = data.colorSpace;
              if (data.encoding !== void 0)
                texture.encoding = data.encoding;
              if (data.minFilter !== void 0)
                texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
              if (data.magFilter !== void 0)
                texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
              if (data.anisotropy !== void 0)
                texture.anisotropy = data.anisotropy;
              if (data.flipY !== void 0)
                texture.flipY = data.flipY;
              if (data.generateMipmaps !== void 0)
                texture.generateMipmaps = data.generateMipmaps;
              if (data.premultiplyAlpha !== void 0)
                texture.premultiplyAlpha = data.premultiplyAlpha;
              if (data.unpackAlignment !== void 0)
                texture.unpackAlignment = data.unpackAlignment;
              if (data.compareFunction !== void 0)
                texture.compareFunction = data.compareFunction;
              if (data.userData !== void 0)
                texture.userData = data.userData;
              textures[data.uuid] = texture;
            }
          }
          return textures;
        }
        parseObject(data, geometries, materials, textures, animations) {
          let object;
          function getGeometry(name) {
            if (geometries[name] === void 0) {
              console.warn("THREE.ObjectLoader: Undefined geometry", name);
            }
            return geometries[name];
          }
          function getMaterial(name) {
            if (name === void 0)
              return void 0;
            if (Array.isArray(name)) {
              const array = [];
              for (let i = 0, l = name.length; i < l; i++) {
                const uuid = name[i];
                if (materials[uuid] === void 0) {
                  console.warn("THREE.ObjectLoader: Undefined material", uuid);
                }
                array.push(materials[uuid]);
              }
              return array;
            }
            if (materials[name] === void 0) {
              console.warn("THREE.ObjectLoader: Undefined material", name);
            }
            return materials[name];
          }
          function getTexture(uuid) {
            if (textures[uuid] === void 0) {
              console.warn("THREE.ObjectLoader: Undefined texture", uuid);
            }
            return textures[uuid];
          }
          let geometry, material;
          switch (data.type) {
            case "Scene":
              object = new Scene();
              if (data.background !== void 0) {
                if (Number.isInteger(data.background)) {
                  object.background = new Color(data.background);
                } else {
                  object.background = getTexture(data.background);
                }
              }
              if (data.environment !== void 0) {
                object.environment = getTexture(data.environment);
              }
              if (data.fog !== void 0) {
                if (data.fog.type === "Fog") {
                  object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
                } else if (data.fog.type === "FogExp2") {
                  object.fog = new FogExp2(data.fog.color, data.fog.density);
                }
              }
              if (data.backgroundBlurriness !== void 0)
                object.backgroundBlurriness = data.backgroundBlurriness;
              if (data.backgroundIntensity !== void 0)
                object.backgroundIntensity = data.backgroundIntensity;
              break;
            case "PerspectiveCamera":
              object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
              if (data.focus !== void 0)
                object.focus = data.focus;
              if (data.zoom !== void 0)
                object.zoom = data.zoom;
              if (data.filmGauge !== void 0)
                object.filmGauge = data.filmGauge;
              if (data.filmOffset !== void 0)
                object.filmOffset = data.filmOffset;
              if (data.view !== void 0)
                object.view = Object.assign({}, data.view);
              break;
            case "OrthographicCamera":
              object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
              if (data.zoom !== void 0)
                object.zoom = data.zoom;
              if (data.view !== void 0)
                object.view = Object.assign({}, data.view);
              break;
            case "AmbientLight":
              object = new AmbientLight(data.color, data.intensity);
              break;
            case "DirectionalLight":
              object = new DirectionalLight(data.color, data.intensity);
              break;
            case "PointLight":
              object = new PointLight(data.color, data.intensity, data.distance, data.decay);
              break;
            case "RectAreaLight":
              object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
              break;
            case "SpotLight":
              object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
              break;
            case "HemisphereLight":
              object = new HemisphereLight(data.color, data.groundColor, data.intensity);
              break;
            case "LightProbe":
              object = new LightProbe().fromJSON(data);
              break;
            case "SkinnedMesh":
              geometry = getGeometry(data.geometry);
              material = getMaterial(data.material);
              object = new SkinnedMesh(geometry, material);
              if (data.bindMode !== void 0)
                object.bindMode = data.bindMode;
              if (data.bindMatrix !== void 0)
                object.bindMatrix.fromArray(data.bindMatrix);
              if (data.skeleton !== void 0)
                object.skeleton = data.skeleton;
              break;
            case "Mesh":
              geometry = getGeometry(data.geometry);
              material = getMaterial(data.material);
              object = new Mesh(geometry, material);
              break;
            case "InstancedMesh":
              geometry = getGeometry(data.geometry);
              material = getMaterial(data.material);
              const count = data.count;
              const instanceMatrix = data.instanceMatrix;
              const instanceColor = data.instanceColor;
              object = new InstancedMesh(geometry, material, count);
              object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
              if (instanceColor !== void 0)
                object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
              break;
            case "LOD":
              object = new LOD();
              break;
            case "Line":
              object = new Line(getGeometry(data.geometry), getMaterial(data.material));
              break;
            case "LineLoop":
              object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
              break;
            case "LineSegments":
              object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
              break;
            case "PointCloud":
            case "Points":
              object = new Points(getGeometry(data.geometry), getMaterial(data.material));
              break;
            case "Sprite":
              object = new Sprite(getMaterial(data.material));
              break;
            case "Group":
              object = new Group();
              break;
            case "Bone":
              object = new Bone();
              break;
            default:
              object = new Object3D();
          }
          object.uuid = data.uuid;
          if (data.name !== void 0)
            object.name = data.name;
          if (data.matrix !== void 0) {
            object.matrix.fromArray(data.matrix);
            if (data.matrixAutoUpdate !== void 0)
              object.matrixAutoUpdate = data.matrixAutoUpdate;
            if (object.matrixAutoUpdate)
              object.matrix.decompose(object.position, object.quaternion, object.scale);
          } else {
            if (data.position !== void 0)
              object.position.fromArray(data.position);
            if (data.rotation !== void 0)
              object.rotation.fromArray(data.rotation);
            if (data.quaternion !== void 0)
              object.quaternion.fromArray(data.quaternion);
            if (data.scale !== void 0)
              object.scale.fromArray(data.scale);
          }
          if (data.up !== void 0)
            object.up.fromArray(data.up);
          if (data.castShadow !== void 0)
            object.castShadow = data.castShadow;
          if (data.receiveShadow !== void 0)
            object.receiveShadow = data.receiveShadow;
          if (data.shadow) {
            if (data.shadow.bias !== void 0)
              object.shadow.bias = data.shadow.bias;
            if (data.shadow.normalBias !== void 0)
              object.shadow.normalBias = data.shadow.normalBias;
            if (data.shadow.radius !== void 0)
              object.shadow.radius = data.shadow.radius;
            if (data.shadow.mapSize !== void 0)
              object.shadow.mapSize.fromArray(data.shadow.mapSize);
            if (data.shadow.camera !== void 0)
              object.shadow.camera = this.parseObject(data.shadow.camera);
          }
          if (data.visible !== void 0)
            object.visible = data.visible;
          if (data.frustumCulled !== void 0)
            object.frustumCulled = data.frustumCulled;
          if (data.renderOrder !== void 0)
            object.renderOrder = data.renderOrder;
          if (data.userData !== void 0)
            object.userData = data.userData;
          if (data.layers !== void 0)
            object.layers.mask = data.layers;
          if (data.children !== void 0) {
            const children = data.children;
            for (let i = 0; i < children.length; i++) {
              object.add(this.parseObject(children[i], geometries, materials, textures, animations));
            }
          }
          if (data.animations !== void 0) {
            const objectAnimations = data.animations;
            for (let i = 0; i < objectAnimations.length; i++) {
              const uuid = objectAnimations[i];
              object.animations.push(animations[uuid]);
            }
          }
          if (data.type === "LOD") {
            if (data.autoUpdate !== void 0)
              object.autoUpdate = data.autoUpdate;
            const levels = data.levels;
            for (let l = 0; l < levels.length; l++) {
              const level = levels[l];
              const child = object.getObjectByProperty("uuid", level.object);
              if (child !== void 0) {
                object.addLevel(child, level.distance, level.hysteresis);
              }
            }
          }
          return object;
        }
        bindSkeletons(object, skeletons) {
          if (Object.keys(skeletons).length === 0)
            return;
          object.traverse(function(child) {
            if (child.isSkinnedMesh === true && child.skeleton !== void 0) {
              const skeleton = skeletons[child.skeleton];
              if (skeleton === void 0) {
                console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
              } else {
                child.bind(skeleton, child.bindMatrix);
              }
            }
          });
        }
      };
      TEXTURE_MAPPING = {
        UVMapping,
        CubeReflectionMapping,
        CubeRefractionMapping,
        EquirectangularReflectionMapping,
        EquirectangularRefractionMapping,
        CubeUVReflectionMapping
      };
      TEXTURE_WRAPPING = {
        RepeatWrapping,
        ClampToEdgeWrapping,
        MirroredRepeatWrapping
      };
      TEXTURE_FILTER = {
        NearestFilter,
        NearestMipmapNearestFilter,
        NearestMipmapLinearFilter,
        LinearFilter,
        LinearMipmapNearestFilter,
        LinearMipmapLinearFilter
      };
      ImageBitmapLoader = class extends Loader {
        constructor(manager) {
          super(manager);
          this.isImageBitmapLoader = true;
          if (typeof createImageBitmap === "undefined") {
            console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
          }
          if (typeof fetch === "undefined") {
            console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
          }
          this.options = { premultiplyAlpha: "none" };
        }
        setOptions(options) {
          this.options = options;
          return this;
        }
        load(url, onLoad, onProgress, onError) {
          if (url === void 0)
            url = "";
          if (this.path !== void 0)
            url = this.path + url;
          url = this.manager.resolveURL(url);
          const scope = this;
          const cached = Cache.get(url);
          if (cached !== void 0) {
            scope.manager.itemStart(url);
            setTimeout(function() {
              if (onLoad)
                onLoad(cached);
              scope.manager.itemEnd(url);
            }, 0);
            return cached;
          }
          const fetchOptions = {};
          fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
          fetchOptions.headers = this.requestHeader;
          fetch(url, fetchOptions).then(function(res) {
            return res.blob();
          }).then(function(blob) {
            return createImageBitmap(blob, Object.assign(scope.options, { colorSpaceConversion: "none" }));
          }).then(function(imageBitmap) {
            Cache.add(url, imageBitmap);
            if (onLoad)
              onLoad(imageBitmap);
            scope.manager.itemEnd(url);
          }).catch(function(e) {
            if (onError)
              onError(e);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          });
          scope.manager.itemStart(url);
        }
      };
      AudioContext = class {
        static getContext() {
          if (_context === void 0) {
            _context = new (window.AudioContext || window.webkitAudioContext)();
          }
          return _context;
        }
        static setContext(value) {
          _context = value;
        }
      };
      AudioLoader = class extends Loader {
        constructor(manager) {
          super(manager);
        }
        load(url, onLoad, onProgress, onError) {
          const scope = this;
          const loader = new FileLoader(this.manager);
          loader.setResponseType("arraybuffer");
          loader.setPath(this.path);
          loader.setRequestHeader(this.requestHeader);
          loader.setWithCredentials(this.withCredentials);
          loader.load(url, function(buffer2) {
            try {
              const bufferCopy = buffer2.slice(0);
              const context = AudioContext.getContext();
              context.decodeAudioData(bufferCopy, function(audioBuffer) {
                onLoad(audioBuffer);
              }, handleError);
            } catch (e) {
              handleError(e);
            }
          }, onProgress, onError);
          function handleError(e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }
      };
      HemisphereLightProbe = class extends LightProbe {
        constructor(skyColor, groundColor, intensity = 1) {
          super(void 0, intensity);
          this.isHemisphereLightProbe = true;
          const color1 = new Color().set(skyColor);
          const color2 = new Color().set(groundColor);
          const sky = new Vector3(color1.r, color1.g, color1.b);
          const ground = new Vector3(color2.r, color2.g, color2.b);
          const c0 = Math.sqrt(Math.PI);
          const c1 = c0 * Math.sqrt(0.75);
          this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
          this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
        }
      };
      AmbientLightProbe = class extends LightProbe {
        constructor(color, intensity = 1) {
          super(void 0, intensity);
          this.isAmbientLightProbe = true;
          const color1 = new Color().set(color);
          this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
        }
      };
      _eyeRight = /* @__PURE__ */ new Matrix4();
      _eyeLeft = /* @__PURE__ */ new Matrix4();
      _projectionMatrix = /* @__PURE__ */ new Matrix4();
      StereoCamera = class {
        constructor() {
          this.type = "StereoCamera";
          this.aspect = 1;
          this.eyeSep = 0.064;
          this.cameraL = new PerspectiveCamera();
          this.cameraL.layers.enable(1);
          this.cameraL.matrixAutoUpdate = false;
          this.cameraR = new PerspectiveCamera();
          this.cameraR.layers.enable(2);
          this.cameraR.matrixAutoUpdate = false;
          this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
          };
        }
        update(camera) {
          const cache2 = this._cache;
          const needsUpdate = cache2.focus !== camera.focus || cache2.fov !== camera.fov || cache2.aspect !== camera.aspect * this.aspect || cache2.near !== camera.near || cache2.far !== camera.far || cache2.zoom !== camera.zoom || cache2.eyeSep !== this.eyeSep;
          if (needsUpdate) {
            cache2.focus = camera.focus;
            cache2.fov = camera.fov;
            cache2.aspect = camera.aspect * this.aspect;
            cache2.near = camera.near;
            cache2.far = camera.far;
            cache2.zoom = camera.zoom;
            cache2.eyeSep = this.eyeSep;
            _projectionMatrix.copy(camera.projectionMatrix);
            const eyeSepHalf = cache2.eyeSep / 2;
            const eyeSepOnProjection = eyeSepHalf * cache2.near / cache2.focus;
            const ymax = cache2.near * Math.tan(DEG2RAD * cache2.fov * 0.5) / cache2.zoom;
            let xmin, xmax;
            _eyeLeft.elements[12] = -eyeSepHalf;
            _eyeRight.elements[12] = eyeSepHalf;
            xmin = -ymax * cache2.aspect + eyeSepOnProjection;
            xmax = ymax * cache2.aspect + eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache2.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraL.projectionMatrix.copy(_projectionMatrix);
            xmin = -ymax * cache2.aspect - eyeSepOnProjection;
            xmax = ymax * cache2.aspect - eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache2.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraR.projectionMatrix.copy(_projectionMatrix);
          }
          this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
          this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
        }
      };
      Clock = class {
        constructor(autoStart = true) {
          this.autoStart = autoStart;
          this.startTime = 0;
          this.oldTime = 0;
          this.elapsedTime = 0;
          this.running = false;
        }
        start() {
          this.startTime = now();
          this.oldTime = this.startTime;
          this.elapsedTime = 0;
          this.running = true;
        }
        stop() {
          this.getElapsedTime();
          this.running = false;
          this.autoStart = false;
        }
        getElapsedTime() {
          this.getDelta();
          return this.elapsedTime;
        }
        getDelta() {
          let diff = 0;
          if (this.autoStart && !this.running) {
            this.start();
            return 0;
          }
          if (this.running) {
            const newTime = now();
            diff = (newTime - this.oldTime) / 1e3;
            this.oldTime = newTime;
            this.elapsedTime += diff;
          }
          return diff;
        }
      };
      _position$1 = /* @__PURE__ */ new Vector3();
      _quaternion$1 = /* @__PURE__ */ new Quaternion();
      _scale$1 = /* @__PURE__ */ new Vector3();
      _orientation$1 = /* @__PURE__ */ new Vector3();
      AudioListener = class extends Object3D {
        constructor() {
          super();
          this.type = "AudioListener";
          this.context = AudioContext.getContext();
          this.gain = this.context.createGain();
          this.gain.connect(this.context.destination);
          this.filter = null;
          this.timeDelta = 0;
          this._clock = new Clock();
        }
        getInput() {
          return this.gain;
        }
        removeFilter() {
          if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
            this.gain.connect(this.context.destination);
            this.filter = null;
          }
          return this;
        }
        getFilter() {
          return this.filter;
        }
        setFilter(value) {
          if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
          } else {
            this.gain.disconnect(this.context.destination);
          }
          this.filter = value;
          this.gain.connect(this.filter);
          this.filter.connect(this.context.destination);
          return this;
        }
        getMasterVolume() {
          return this.gain.gain.value;
        }
        setMasterVolume(value) {
          this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
          return this;
        }
        updateMatrixWorld(force) {
          super.updateMatrixWorld(force);
          const listener = this.context.listener;
          const up = this.up;
          this.timeDelta = this._clock.getDelta();
          this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
          _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
          if (listener.positionX) {
            const endTime = this.context.currentTime + this.timeDelta;
            listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
            listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
            listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
            listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
            listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
            listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
            listener.upX.linearRampToValueAtTime(up.x, endTime);
            listener.upY.linearRampToValueAtTime(up.y, endTime);
            listener.upZ.linearRampToValueAtTime(up.z, endTime);
          } else {
            listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
            listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
          }
        }
      };
      Audio = class extends Object3D {
        constructor(listener) {
          super();
          this.type = "Audio";
          this.listener = listener;
          this.context = listener.context;
          this.gain = this.context.createGain();
          this.gain.connect(listener.getInput());
          this.autoplay = false;
          this.buffer = null;
          this.detune = 0;
          this.loop = false;
          this.loopStart = 0;
          this.loopEnd = 0;
          this.offset = 0;
          this.duration = void 0;
          this.playbackRate = 1;
          this.isPlaying = false;
          this.hasPlaybackControl = true;
          this.source = null;
          this.sourceType = "empty";
          this._startedAt = 0;
          this._progress = 0;
          this._connected = false;
          this.filters = [];
        }
        getOutput() {
          return this.gain;
        }
        setNodeSource(audioNode) {
          this.hasPlaybackControl = false;
          this.sourceType = "audioNode";
          this.source = audioNode;
          this.connect();
          return this;
        }
        setMediaElementSource(mediaElement) {
          this.hasPlaybackControl = false;
          this.sourceType = "mediaNode";
          this.source = this.context.createMediaElementSource(mediaElement);
          this.connect();
          return this;
        }
        setMediaStreamSource(mediaStream) {
          this.hasPlaybackControl = false;
          this.sourceType = "mediaStreamNode";
          this.source = this.context.createMediaStreamSource(mediaStream);
          this.connect();
          return this;
        }
        setBuffer(audioBuffer) {
          this.buffer = audioBuffer;
          this.sourceType = "buffer";
          if (this.autoplay)
            this.play();
          return this;
        }
        play(delay = 0) {
          if (this.isPlaying === true) {
            console.warn("THREE.Audio: Audio is already playing.");
            return;
          }
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
          }
          this._startedAt = this.context.currentTime + delay;
          const source = this.context.createBufferSource();
          source.buffer = this.buffer;
          source.loop = this.loop;
          source.loopStart = this.loopStart;
          source.loopEnd = this.loopEnd;
          source.onended = this.onEnded.bind(this);
          source.start(this._startedAt, this._progress + this.offset, this.duration);
          this.isPlaying = true;
          this.source = source;
          this.setDetune(this.detune);
          this.setPlaybackRate(this.playbackRate);
          return this.connect();
        }
        pause() {
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
          }
          if (this.isPlaying === true) {
            this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
            if (this.loop === true) {
              this._progress = this._progress % (this.duration || this.buffer.duration);
            }
            this.source.stop();
            this.source.onended = null;
            this.isPlaying = false;
          }
          return this;
        }
        stop() {
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
          }
          this._progress = 0;
          if (this.source !== null) {
            this.source.stop();
            this.source.onended = null;
          }
          this.isPlaying = false;
          return this;
        }
        connect() {
          if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for (let i = 1, l = this.filters.length; i < l; i++) {
              this.filters[i - 1].connect(this.filters[i]);
            }
            this.filters[this.filters.length - 1].connect(this.getOutput());
          } else {
            this.source.connect(this.getOutput());
          }
          this._connected = true;
          return this;
        }
        disconnect() {
          if (this._connected === false) {
            return;
          }
          if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for (let i = 1, l = this.filters.length; i < l; i++) {
              this.filters[i - 1].disconnect(this.filters[i]);
            }
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
          } else {
            this.source.disconnect(this.getOutput());
          }
          this._connected = false;
          return this;
        }
        getFilters() {
          return this.filters;
        }
        setFilters(value) {
          if (!value)
            value = [];
          if (this._connected === true) {
            this.disconnect();
            this.filters = value.slice();
            this.connect();
          } else {
            this.filters = value.slice();
          }
          return this;
        }
        setDetune(value) {
          this.detune = value;
          if (this.source.detune === void 0)
            return;
          if (this.isPlaying === true) {
            this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
          }
          return this;
        }
        getDetune() {
          return this.detune;
        }
        getFilter() {
          return this.getFilters()[0];
        }
        setFilter(filter) {
          return this.setFilters(filter ? [filter] : []);
        }
        setPlaybackRate(value) {
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
          }
          this.playbackRate = value;
          if (this.isPlaying === true) {
            this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
          }
          return this;
        }
        getPlaybackRate() {
          return this.playbackRate;
        }
        onEnded() {
          this.isPlaying = false;
        }
        getLoop() {
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return false;
          }
          return this.loop;
        }
        setLoop(value) {
          if (this.hasPlaybackControl === false) {
            console.warn("THREE.Audio: this Audio has no playback control.");
            return;
          }
          this.loop = value;
          if (this.isPlaying === true) {
            this.source.loop = this.loop;
          }
          return this;
        }
        setLoopStart(value) {
          this.loopStart = value;
          return this;
        }
        setLoopEnd(value) {
          this.loopEnd = value;
          return this;
        }
        getVolume() {
          return this.gain.gain.value;
        }
        setVolume(value) {
          this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
          return this;
        }
      };
      _position = /* @__PURE__ */ new Vector3();
      _quaternion = /* @__PURE__ */ new Quaternion();
      _scale = /* @__PURE__ */ new Vector3();
      _orientation = /* @__PURE__ */ new Vector3();
      PositionalAudio = class extends Audio {
        constructor(listener) {
          super(listener);
          this.panner = this.context.createPanner();
          this.panner.panningModel = "HRTF";
          this.panner.connect(this.gain);
        }
        connect() {
          super.connect();
          this.panner.connect(this.gain);
        }
        disconnect() {
          super.disconnect();
          this.panner.disconnect(this.gain);
        }
        getOutput() {
          return this.panner;
        }
        getRefDistance() {
          return this.panner.refDistance;
        }
        setRefDistance(value) {
          this.panner.refDistance = value;
          return this;
        }
        getRolloffFactor() {
          return this.panner.rolloffFactor;
        }
        setRolloffFactor(value) {
          this.panner.rolloffFactor = value;
          return this;
        }
        getDistanceModel() {
          return this.panner.distanceModel;
        }
        setDistanceModel(value) {
          this.panner.distanceModel = value;
          return this;
        }
        getMaxDistance() {
          return this.panner.maxDistance;
        }
        setMaxDistance(value) {
          this.panner.maxDistance = value;
          return this;
        }
        setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
          this.panner.coneInnerAngle = coneInnerAngle;
          this.panner.coneOuterAngle = coneOuterAngle;
          this.panner.coneOuterGain = coneOuterGain;
          return this;
        }
        updateMatrixWorld(force) {
          super.updateMatrixWorld(force);
          if (this.hasPlaybackControl === true && this.isPlaying === false)
            return;
          this.matrixWorld.decompose(_position, _quaternion, _scale);
          _orientation.set(0, 0, 1).applyQuaternion(_quaternion);
          const panner = this.panner;
          if (panner.positionX) {
            const endTime = this.context.currentTime + this.listener.timeDelta;
            panner.positionX.linearRampToValueAtTime(_position.x, endTime);
            panner.positionY.linearRampToValueAtTime(_position.y, endTime);
            panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
            panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
            panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
            panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
          } else {
            panner.setPosition(_position.x, _position.y, _position.z);
            panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
          }
        }
      };
      AudioAnalyser = class {
        constructor(audio, fftSize = 2048) {
          this.analyser = audio.context.createAnalyser();
          this.analyser.fftSize = fftSize;
          this.data = new Uint8Array(this.analyser.frequencyBinCount);
          audio.getOutput().connect(this.analyser);
        }
        getFrequencyData() {
          this.analyser.getByteFrequencyData(this.data);
          return this.data;
        }
        getAverageFrequency() {
          let value = 0;
          const data = this.getFrequencyData();
          for (let i = 0; i < data.length; i++) {
            value += data[i];
          }
          return value / data.length;
        }
      };
      PropertyMixer = class {
        constructor(binding, typeName, valueSize) {
          this.binding = binding;
          this.valueSize = valueSize;
          let mixFunction, mixFunctionAdditive, setIdentity;
          switch (typeName) {
            case "quaternion":
              mixFunction = this._slerp;
              mixFunctionAdditive = this._slerpAdditive;
              setIdentity = this._setAdditiveIdentityQuaternion;
              this.buffer = new Float64Array(valueSize * 6);
              this._workIndex = 5;
              break;
            case "string":
            case "bool":
              mixFunction = this._select;
              mixFunctionAdditive = this._select;
              setIdentity = this._setAdditiveIdentityOther;
              this.buffer = new Array(valueSize * 5);
              break;
            default:
              mixFunction = this._lerp;
              mixFunctionAdditive = this._lerpAdditive;
              setIdentity = this._setAdditiveIdentityNumeric;
              this.buffer = new Float64Array(valueSize * 5);
          }
          this._mixBufferRegion = mixFunction;
          this._mixBufferRegionAdditive = mixFunctionAdditive;
          this._setIdentity = setIdentity;
          this._origIndex = 3;
          this._addIndex = 4;
          this.cumulativeWeight = 0;
          this.cumulativeWeightAdditive = 0;
          this.useCount = 0;
          this.referenceCount = 0;
        }
        // accumulate data in the 'incoming' region into 'accu<i>'
        accumulate(accuIndex, weight) {
          const buffer2 = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
          let currentWeight = this.cumulativeWeight;
          if (currentWeight === 0) {
            for (let i = 0; i !== stride; ++i) {
              buffer2[offset + i] = buffer2[i];
            }
            currentWeight = weight;
          } else {
            currentWeight += weight;
            const mix = weight / currentWeight;
            this._mixBufferRegion(buffer2, offset, 0, mix, stride);
          }
          this.cumulativeWeight = currentWeight;
        }
        // accumulate data in the 'incoming' region into 'add'
        accumulateAdditive(weight) {
          const buffer2 = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
          if (this.cumulativeWeightAdditive === 0) {
            this._setIdentity();
          }
          this._mixBufferRegionAdditive(buffer2, offset, 0, weight, stride);
          this.cumulativeWeightAdditive += weight;
        }
        // apply the state of 'accu<i>' to the binding when accus differ
        apply(accuIndex) {
          const stride = this.valueSize, buffer2 = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
          this.cumulativeWeight = 0;
          this.cumulativeWeightAdditive = 0;
          if (weight < 1) {
            const originalValueOffset = stride * this._origIndex;
            this._mixBufferRegion(
              buffer2,
              offset,
              originalValueOffset,
              1 - weight,
              stride
            );
          }
          if (weightAdditive > 0) {
            this._mixBufferRegionAdditive(buffer2, offset, this._addIndex * stride, 1, stride);
          }
          for (let i = stride, e = stride + stride; i !== e; ++i) {
            if (buffer2[i] !== buffer2[i + stride]) {
              binding.setValue(buffer2, offset);
              break;
            }
          }
        }
        // remember the state of the bound property and copy it to both accus
        saveOriginalState() {
          const binding = this.binding;
          const buffer2 = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
          binding.getValue(buffer2, originalValueOffset);
          for (let i = stride, e = originalValueOffset; i !== e; ++i) {
            buffer2[i] = buffer2[originalValueOffset + i % stride];
          }
          this._setIdentity();
          this.cumulativeWeight = 0;
          this.cumulativeWeightAdditive = 0;
        }
        // apply the state previously taken via 'saveOriginalState' to the binding
        restoreOriginalState() {
          const originalValueOffset = this.valueSize * 3;
          this.binding.setValue(this.buffer, originalValueOffset);
        }
        _setAdditiveIdentityNumeric() {
          const startIndex = this._addIndex * this.valueSize;
          const endIndex = startIndex + this.valueSize;
          for (let i = startIndex; i < endIndex; i++) {
            this.buffer[i] = 0;
          }
        }
        _setAdditiveIdentityQuaternion() {
          this._setAdditiveIdentityNumeric();
          this.buffer[this._addIndex * this.valueSize + 3] = 1;
        }
        _setAdditiveIdentityOther() {
          const startIndex = this._origIndex * this.valueSize;
          const targetIndex = this._addIndex * this.valueSize;
          for (let i = 0; i < this.valueSize; i++) {
            this.buffer[targetIndex + i] = this.buffer[startIndex + i];
          }
        }
        // mix functions
        _select(buffer2, dstOffset, srcOffset, t, stride) {
          if (t >= 0.5) {
            for (let i = 0; i !== stride; ++i) {
              buffer2[dstOffset + i] = buffer2[srcOffset + i];
            }
          }
        }
        _slerp(buffer2, dstOffset, srcOffset, t) {
          Quaternion.slerpFlat(buffer2, dstOffset, buffer2, dstOffset, buffer2, srcOffset, t);
        }
        _slerpAdditive(buffer2, dstOffset, srcOffset, t, stride) {
          const workOffset = this._workIndex * stride;
          Quaternion.multiplyQuaternionsFlat(buffer2, workOffset, buffer2, dstOffset, buffer2, srcOffset);
          Quaternion.slerpFlat(buffer2, dstOffset, buffer2, dstOffset, buffer2, workOffset, t);
        }
        _lerp(buffer2, dstOffset, srcOffset, t, stride) {
          const s = 1 - t;
          for (let i = 0; i !== stride; ++i) {
            const j = dstOffset + i;
            buffer2[j] = buffer2[j] * s + buffer2[srcOffset + i] * t;
          }
        }
        _lerpAdditive(buffer2, dstOffset, srcOffset, t, stride) {
          for (let i = 0; i !== stride; ++i) {
            const j = dstOffset + i;
            buffer2[j] = buffer2[j] + buffer2[srcOffset + i] * t;
          }
        }
      };
      _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
      _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
      _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
      _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
      _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
      _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
      _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
      _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
      _trackRe = new RegExp(
        "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
      );
      _supportedObjectNames = ["material", "materials", "bones", "map"];
      Composite = class {
        constructor(targetGroup, path, optionalParsedPath) {
          const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
          this._targetGroup = targetGroup;
          this._bindings = targetGroup.subscribe_(path, parsedPath);
        }
        getValue(array, offset) {
          this.bind();
          const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
          if (binding !== void 0)
            binding.getValue(array, offset);
        }
        setValue(array, offset) {
          const bindings = this._bindings;
          for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
            bindings[i].setValue(array, offset);
          }
        }
        bind() {
          const bindings = this._bindings;
          for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
            bindings[i].bind();
          }
        }
        unbind() {
          const bindings = this._bindings;
          for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
            bindings[i].unbind();
          }
        }
      };
      PropertyBinding = class _PropertyBinding {
        constructor(rootNode, path, parsedPath) {
          this.path = path;
          this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
          this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
          this.rootNode = rootNode;
          this.getValue = this._getValue_unbound;
          this.setValue = this._setValue_unbound;
        }
        static create(root, path, parsedPath) {
          if (!(root && root.isAnimationObjectGroup)) {
            return new _PropertyBinding(root, path, parsedPath);
          } else {
            return new _PropertyBinding.Composite(root, path, parsedPath);
          }
        }
        /**
         * Replaces spaces with underscores and removes unsupported characters from
         * node names, to ensure compatibility with parseTrackName().
         *
         * @param {string} name Node name to be sanitized.
         * @return {string}
         */
        static sanitizeNodeName(name) {
          return name.replace(/\s/g, "_").replace(_reservedRe, "");
        }
        static parseTrackName(trackName) {
          const matches = _trackRe.exec(trackName);
          if (matches === null) {
            throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
          }
          const results = {
            // directoryName: matches[ 1 ], // (tschw) currently unused
            nodeName: matches[2],
            objectName: matches[3],
            objectIndex: matches[4],
            propertyName: matches[5],
            // required
            propertyIndex: matches[6]
          };
          const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
          if (lastDot !== void 0 && lastDot !== -1) {
            const objectName = results.nodeName.substring(lastDot + 1);
            if (_supportedObjectNames.indexOf(objectName) !== -1) {
              results.nodeName = results.nodeName.substring(0, lastDot);
              results.objectName = objectName;
            }
          }
          if (results.propertyName === null || results.propertyName.length === 0) {
            throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
          }
          return results;
        }
        static findNode(root, nodeName) {
          if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
            return root;
          }
          if (root.skeleton) {
            const bone = root.skeleton.getBoneByName(nodeName);
            if (bone !== void 0) {
              return bone;
            }
          }
          if (root.children) {
            const searchNodeSubtree = function(children) {
              for (let i = 0; i < children.length; i++) {
                const childNode = children[i];
                if (childNode.name === nodeName || childNode.uuid === nodeName) {
                  return childNode;
                }
                const result = searchNodeSubtree(childNode.children);
                if (result)
                  return result;
              }
              return null;
            };
            const subTreeNode = searchNodeSubtree(root.children);
            if (subTreeNode) {
              return subTreeNode;
            }
          }
          return null;
        }
        // these are used to "bind" a nonexistent property
        _getValue_unavailable() {
        }
        _setValue_unavailable() {
        }
        // Getters
        _getValue_direct(buffer2, offset) {
          buffer2[offset] = this.targetObject[this.propertyName];
        }
        _getValue_array(buffer2, offset) {
          const source = this.resolvedProperty;
          for (let i = 0, n = source.length; i !== n; ++i) {
            buffer2[offset++] = source[i];
          }
        }
        _getValue_arrayElement(buffer2, offset) {
          buffer2[offset] = this.resolvedProperty[this.propertyIndex];
        }
        _getValue_toArray(buffer2, offset) {
          this.resolvedProperty.toArray(buffer2, offset);
        }
        // Direct
        _setValue_direct(buffer2, offset) {
          this.targetObject[this.propertyName] = buffer2[offset];
        }
        _setValue_direct_setNeedsUpdate(buffer2, offset) {
          this.targetObject[this.propertyName] = buffer2[offset];
          this.targetObject.needsUpdate = true;
        }
        _setValue_direct_setMatrixWorldNeedsUpdate(buffer2, offset) {
          this.targetObject[this.propertyName] = buffer2[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
        // EntireArray
        _setValue_array(buffer2, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer2[offset++];
          }
        }
        _setValue_array_setNeedsUpdate(buffer2, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer2[offset++];
          }
          this.targetObject.needsUpdate = true;
        }
        _setValue_array_setMatrixWorldNeedsUpdate(buffer2, offset) {
          const dest = this.resolvedProperty;
          for (let i = 0, n = dest.length; i !== n; ++i) {
            dest[i] = buffer2[offset++];
          }
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
        // ArrayElement
        _setValue_arrayElement(buffer2, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer2[offset];
        }
        _setValue_arrayElement_setNeedsUpdate(buffer2, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer2[offset];
          this.targetObject.needsUpdate = true;
        }
        _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer2, offset) {
          this.resolvedProperty[this.propertyIndex] = buffer2[offset];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
        // HasToFromArray
        _setValue_fromArray(buffer2, offset) {
          this.resolvedProperty.fromArray(buffer2, offset);
        }
        _setValue_fromArray_setNeedsUpdate(buffer2, offset) {
          this.resolvedProperty.fromArray(buffer2, offset);
          this.targetObject.needsUpdate = true;
        }
        _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer2, offset) {
          this.resolvedProperty.fromArray(buffer2, offset);
          this.targetObject.matrixWorldNeedsUpdate = true;
        }
        _getValue_unbound(targetArray, offset) {
          this.bind();
          this.getValue(targetArray, offset);
        }
        _setValue_unbound(sourceArray, offset) {
          this.bind();
          this.setValue(sourceArray, offset);
        }
        // create getter / setter pair for a property in the scene graph
        bind() {
          let targetObject = this.node;
          const parsedPath = this.parsedPath;
          const objectName = parsedPath.objectName;
          const propertyName = parsedPath.propertyName;
          let propertyIndex = parsedPath.propertyIndex;
          if (!targetObject) {
            targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
            this.node = targetObject;
          }
          this.getValue = this._getValue_unavailable;
          this.setValue = this._setValue_unavailable;
          if (!targetObject) {
            console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
            return;
          }
          if (objectName) {
            let objectIndex = parsedPath.objectIndex;
            switch (objectName) {
              case "materials":
                if (!targetObject.material) {
                  console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                  return;
                }
                if (!targetObject.material.materials) {
                  console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                  return;
                }
                targetObject = targetObject.material.materials;
                break;
              case "bones":
                if (!targetObject.skeleton) {
                  console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                  return;
                }
                targetObject = targetObject.skeleton.bones;
                for (let i = 0; i < targetObject.length; i++) {
                  if (targetObject[i].name === objectIndex) {
                    objectIndex = i;
                    break;
                  }
                }
                break;
              case "map":
                if ("map" in targetObject) {
                  targetObject = targetObject.map;
                  break;
                }
                if (!targetObject.material) {
                  console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                  return;
                }
                if (!targetObject.material.map) {
                  console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                  return;
                }
                targetObject = targetObject.material.map;
                break;
              default:
                if (targetObject[objectName] === void 0) {
                  console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                  return;
                }
                targetObject = targetObject[objectName];
            }
            if (objectIndex !== void 0) {
              if (targetObject[objectIndex] === void 0) {
                console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
                return;
              }
              targetObject = targetObject[objectIndex];
            }
          }
          const nodeProperty = targetObject[propertyName];
          if (nodeProperty === void 0) {
            const nodeName = parsedPath.nodeName;
            console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
            return;
          }
          let versioning = this.Versioning.None;
          this.targetObject = targetObject;
          if (targetObject.needsUpdate !== void 0) {
            versioning = this.Versioning.NeedsUpdate;
          } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
            versioning = this.Versioning.MatrixWorldNeedsUpdate;
          }
          let bindingType = this.BindingType.Direct;
          if (propertyIndex !== void 0) {
            if (propertyName === "morphTargetInfluences") {
              if (!targetObject.geometry) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                return;
              }
              if (!targetObject.geometry.morphAttributes) {
                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                return;
              }
              if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
                propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
              }
            }
            bindingType = this.BindingType.ArrayElement;
            this.resolvedProperty = nodeProperty;
            this.propertyIndex = propertyIndex;
          } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
            bindingType = this.BindingType.HasFromToArray;
            this.resolvedProperty = nodeProperty;
          } else if (Array.isArray(nodeProperty)) {
            bindingType = this.BindingType.EntireArray;
            this.resolvedProperty = nodeProperty;
          } else {
            this.propertyName = propertyName;
          }
          this.getValue = this.GetterByBindingType[bindingType];
          this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
        }
        unbind() {
          this.node = null;
          this.getValue = this._getValue_unbound;
          this.setValue = this._setValue_unbound;
        }
      };
      PropertyBinding.Composite = Composite;
      PropertyBinding.prototype.BindingType = {
        Direct: 0,
        EntireArray: 1,
        ArrayElement: 2,
        HasFromToArray: 3
      };
      PropertyBinding.prototype.Versioning = {
        None: 0,
        NeedsUpdate: 1,
        MatrixWorldNeedsUpdate: 2
      };
      PropertyBinding.prototype.GetterByBindingType = [
        PropertyBinding.prototype._getValue_direct,
        PropertyBinding.prototype._getValue_array,
        PropertyBinding.prototype._getValue_arrayElement,
        PropertyBinding.prototype._getValue_toArray
      ];
      PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
        [
          // Direct
          PropertyBinding.prototype._setValue_direct,
          PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
          PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
        ],
        [
          // EntireArray
          PropertyBinding.prototype._setValue_array,
          PropertyBinding.prototype._setValue_array_setNeedsUpdate,
          PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
        ],
        [
          // ArrayElement
          PropertyBinding.prototype._setValue_arrayElement,
          PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
          PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
        ],
        [
          // HasToFromArray
          PropertyBinding.prototype._setValue_fromArray,
          PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
          PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
        ]
      ];
      AnimationObjectGroup = class {
        constructor() {
          this.isAnimationObjectGroup = true;
          this.uuid = generateUUID();
          this._objects = Array.prototype.slice.call(arguments);
          this.nCachedObjects_ = 0;
          const indices = {};
          this._indicesByUUID = indices;
          for (let i = 0, n = arguments.length; i !== n; ++i) {
            indices[arguments[i].uuid] = i;
          }
          this._paths = [];
          this._parsedPaths = [];
          this._bindings = [];
          this._bindingsIndicesByPath = {};
          const scope = this;
          this.stats = {
            objects: {
              get total() {
                return scope._objects.length;
              },
              get inUse() {
                return this.total - scope.nCachedObjects_;
              }
            },
            get bindingsPerObject() {
              return scope._bindings.length;
            }
          };
        }
        add() {
          const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
          let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
          for (let i = 0, n = arguments.length; i !== n; ++i) {
            const object = arguments[i], uuid = object.uuid;
            let index = indicesByUUID[uuid];
            if (index === void 0) {
              index = nObjects++;
              indicesByUUID[uuid] = index;
              objects.push(object);
              for (let j = 0, m = nBindings; j !== m; ++j) {
                bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
              }
            } else if (index < nCachedObjects) {
              knownObject = objects[index];
              const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
              indicesByUUID[lastCachedObject.uuid] = index;
              objects[index] = lastCachedObject;
              indicesByUUID[uuid] = firstActiveIndex;
              objects[firstActiveIndex] = object;
              for (let j = 0, m = nBindings; j !== m; ++j) {
                const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
                let binding = bindingsForPath[index];
                bindingsForPath[index] = lastCached;
                if (binding === void 0) {
                  binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
                }
                bindingsForPath[firstActiveIndex] = binding;
              }
            } else if (objects[index] !== knownObject) {
              console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
            }
          }
          this.nCachedObjects_ = nCachedObjects;
        }
        remove() {
          const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
          let nCachedObjects = this.nCachedObjects_;
          for (let i = 0, n = arguments.length; i !== n; ++i) {
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== void 0 && index >= nCachedObjects) {
              const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
              indicesByUUID[firstActiveObject.uuid] = index;
              objects[index] = firstActiveObject;
              indicesByUUID[uuid] = lastCachedIndex;
              objects[lastCachedIndex] = object;
              for (let j = 0, m = nBindings; j !== m; ++j) {
                const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                bindingsForPath[index] = firstActive;
                bindingsForPath[lastCachedIndex] = binding;
              }
            }
          }
          this.nCachedObjects_ = nCachedObjects;
        }
        // remove & forget
        uncache() {
          const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
          let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
          for (let i = 0, n = arguments.length; i !== n; ++i) {
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== void 0) {
              delete indicesByUUID[uuid];
              if (index < nCachedObjects) {
                const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                indicesByUUID[lastCachedObject.uuid] = index;
                objects[index] = lastCachedObject;
                indicesByUUID[lastObject.uuid] = firstActiveIndex;
                objects[firstActiveIndex] = lastObject;
                objects.pop();
                for (let j = 0, m = nBindings; j !== m; ++j) {
                  const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                  bindingsForPath[index] = lastCached;
                  bindingsForPath[firstActiveIndex] = last;
                  bindingsForPath.pop();
                }
              } else {
                const lastIndex = --nObjects, lastObject = objects[lastIndex];
                if (lastIndex > 0) {
                  indicesByUUID[lastObject.uuid] = index;
                }
                objects[index] = lastObject;
                objects.pop();
                for (let j = 0, m = nBindings; j !== m; ++j) {
                  const bindingsForPath = bindings[j];
                  bindingsForPath[index] = bindingsForPath[lastIndex];
                  bindingsForPath.pop();
                }
              }
            }
          }
          this.nCachedObjects_ = nCachedObjects;
        }
        // Internal interface used by befriended PropertyBinding.Composite:
        subscribe_(path, parsedPath) {
          const indicesByPath = this._bindingsIndicesByPath;
          let index = indicesByPath[path];
          const bindings = this._bindings;
          if (index !== void 0)
            return bindings[index];
          const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
          index = bindings.length;
          indicesByPath[path] = index;
          paths.push(path);
          parsedPaths.push(parsedPath);
          bindings.push(bindingsForPath);
          for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
            const object = objects[i];
            bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
          }
          return bindingsForPath;
        }
        unsubscribe_(path) {
          const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
          if (index !== void 0) {
            const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
            indicesByPath[lastBindingsPath] = index;
            bindings[index] = lastBindings;
            bindings.pop();
            parsedPaths[index] = parsedPaths[lastBindingsIndex];
            parsedPaths.pop();
            paths[index] = paths[lastBindingsIndex];
            paths.pop();
          }
        }
      };
      AnimationAction = class {
        constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
          this._mixer = mixer;
          this._clip = clip;
          this._localRoot = localRoot;
          this.blendMode = blendMode;
          const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
          const interpolantSettings = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
          };
          for (let i = 0; i !== nTracks; ++i) {
            const interpolant = tracks[i].createInterpolant(null);
            interpolants[i] = interpolant;
            interpolant.settings = interpolantSettings;
          }
          this._interpolantSettings = interpolantSettings;
          this._interpolants = interpolants;
          this._propertyBindings = new Array(nTracks);
          this._cacheIndex = null;
          this._byClipCacheIndex = null;
          this._timeScaleInterpolant = null;
          this._weightInterpolant = null;
          this.loop = LoopRepeat;
          this._loopCount = -1;
          this._startTime = null;
          this.time = 0;
          this.timeScale = 1;
          this._effectiveTimeScale = 1;
          this.weight = 1;
          this._effectiveWeight = 1;
          this.repetitions = Infinity;
          this.paused = false;
          this.enabled = true;
          this.clampWhenFinished = false;
          this.zeroSlopeAtStart = true;
          this.zeroSlopeAtEnd = true;
        }
        // State & Scheduling
        play() {
          this._mixer._activateAction(this);
          return this;
        }
        stop() {
          this._mixer._deactivateAction(this);
          return this.reset();
        }
        reset() {
          this.paused = false;
          this.enabled = true;
          this.time = 0;
          this._loopCount = -1;
          this._startTime = null;
          return this.stopFading().stopWarping();
        }
        isRunning() {
          return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
        }
        // return true when play has been called
        isScheduled() {
          return this._mixer._isActiveAction(this);
        }
        startAt(time) {
          this._startTime = time;
          return this;
        }
        setLoop(mode, repetitions) {
          this.loop = mode;
          this.repetitions = repetitions;
          return this;
        }
        // Weight
        // set the weight stopping any scheduled fading
        // although .enabled = false yields an effective weight of zero, this
        // method does *not* change .enabled, because it would be confusing
        setEffectiveWeight(weight) {
          this.weight = weight;
          this._effectiveWeight = this.enabled ? weight : 0;
          return this.stopFading();
        }
        // return the weight considering fading and .enabled
        getEffectiveWeight() {
          return this._effectiveWeight;
        }
        fadeIn(duration) {
          return this._scheduleFading(duration, 0, 1);
        }
        fadeOut(duration) {
          return this._scheduleFading(duration, 1, 0);
        }
        crossFadeFrom(fadeOutAction, duration, warp) {
          fadeOutAction.fadeOut(duration);
          this.fadeIn(duration);
          if (warp) {
            const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
            fadeOutAction.warp(1, startEndRatio, duration);
            this.warp(endStartRatio, 1, duration);
          }
          return this;
        }
        crossFadeTo(fadeInAction, duration, warp) {
          return fadeInAction.crossFadeFrom(this, duration, warp);
        }
        stopFading() {
          const weightInterpolant = this._weightInterpolant;
          if (weightInterpolant !== null) {
            this._weightInterpolant = null;
            this._mixer._takeBackControlInterpolant(weightInterpolant);
          }
          return this;
        }
        // Time Scale Control
        // set the time scale stopping any scheduled warping
        // although .paused = true yields an effective time scale of zero, this
        // method does *not* change .paused, because it would be confusing
        setEffectiveTimeScale(timeScale) {
          this.timeScale = timeScale;
          this._effectiveTimeScale = this.paused ? 0 : timeScale;
          return this.stopWarping();
        }
        // return the time scale considering warping and .paused
        getEffectiveTimeScale() {
          return this._effectiveTimeScale;
        }
        setDuration(duration) {
          this.timeScale = this._clip.duration / duration;
          return this.stopWarping();
        }
        syncWith(action) {
          this.time = action.time;
          this.timeScale = action.timeScale;
          return this.stopWarping();
        }
        halt(duration) {
          return this.warp(this._effectiveTimeScale, 0, duration);
        }
        warp(startTimeScale, endTimeScale, duration) {
          const mixer = this._mixer, now3 = mixer.time, timeScale = this.timeScale;
          let interpolant = this._timeScaleInterpolant;
          if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._timeScaleInterpolant = interpolant;
          }
          const times = interpolant.parameterPositions, values = interpolant.sampleValues;
          times[0] = now3;
          times[1] = now3 + duration;
          values[0] = startTimeScale / timeScale;
          values[1] = endTimeScale / timeScale;
          return this;
        }
        stopWarping() {
          const timeScaleInterpolant = this._timeScaleInterpolant;
          if (timeScaleInterpolant !== null) {
            this._timeScaleInterpolant = null;
            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
          }
          return this;
        }
        // Object Accessors
        getMixer() {
          return this._mixer;
        }
        getClip() {
          return this._clip;
        }
        getRoot() {
          return this._localRoot || this._mixer._root;
        }
        // Interna
        _update(time, deltaTime, timeDirection, accuIndex) {
          if (!this.enabled) {
            this._updateWeight(time);
            return;
          }
          const startTime = this._startTime;
          if (startTime !== null) {
            const timeRunning = (time - startTime) * timeDirection;
            if (timeRunning < 0 || timeDirection === 0) {
              deltaTime = 0;
            } else {
              this._startTime = null;
              deltaTime = timeDirection * timeRunning;
            }
          }
          deltaTime *= this._updateTimeScale(time);
          const clipTime = this._updateTime(deltaTime);
          const weight = this._updateWeight(time);
          if (weight > 0) {
            const interpolants = this._interpolants;
            const propertyMixers = this._propertyBindings;
            switch (this.blendMode) {
              case AdditiveAnimationBlendMode:
                for (let j = 0, m = interpolants.length; j !== m; ++j) {
                  interpolants[j].evaluate(clipTime);
                  propertyMixers[j].accumulateAdditive(weight);
                }
                break;
              case NormalAnimationBlendMode:
              default:
                for (let j = 0, m = interpolants.length; j !== m; ++j) {
                  interpolants[j].evaluate(clipTime);
                  propertyMixers[j].accumulate(accuIndex, weight);
                }
            }
          }
        }
        _updateWeight(time) {
          let weight = 0;
          if (this.enabled) {
            weight = this.weight;
            const interpolant = this._weightInterpolant;
            if (interpolant !== null) {
              const interpolantValue = interpolant.evaluate(time)[0];
              weight *= interpolantValue;
              if (time > interpolant.parameterPositions[1]) {
                this.stopFading();
                if (interpolantValue === 0) {
                  this.enabled = false;
                }
              }
            }
          }
          this._effectiveWeight = weight;
          return weight;
        }
        _updateTimeScale(time) {
          let timeScale = 0;
          if (!this.paused) {
            timeScale = this.timeScale;
            const interpolant = this._timeScaleInterpolant;
            if (interpolant !== null) {
              const interpolantValue = interpolant.evaluate(time)[0];
              timeScale *= interpolantValue;
              if (time > interpolant.parameterPositions[1]) {
                this.stopWarping();
                if (timeScale === 0) {
                  this.paused = true;
                } else {
                  this.timeScale = timeScale;
                }
              }
            }
          }
          this._effectiveTimeScale = timeScale;
          return timeScale;
        }
        _updateTime(deltaTime) {
          const duration = this._clip.duration;
          const loop = this.loop;
          let time = this.time + deltaTime;
          let loopCount = this._loopCount;
          const pingPong = loop === LoopPingPong;
          if (deltaTime === 0) {
            if (loopCount === -1)
              return time;
            return pingPong && (loopCount & 1) === 1 ? duration - time : time;
          }
          if (loop === LoopOnce) {
            if (loopCount === -1) {
              this._loopCount = 0;
              this._setEndings(true, true, false);
            }
            handle_stop: {
              if (time >= duration) {
                time = duration;
              } else if (time < 0) {
                time = 0;
              } else {
                this.time = time;
                break handle_stop;
              }
              if (this.clampWhenFinished)
                this.paused = true;
              else
                this.enabled = false;
              this.time = time;
              this._mixer.dispatchEvent({
                type: "finished",
                action: this,
                direction: deltaTime < 0 ? -1 : 1
              });
            }
          } else {
            if (loopCount === -1) {
              if (deltaTime >= 0) {
                loopCount = 0;
                this._setEndings(true, this.repetitions === 0, pingPong);
              } else {
                this._setEndings(this.repetitions === 0, true, pingPong);
              }
            }
            if (time >= duration || time < 0) {
              const loopDelta = Math.floor(time / duration);
              time -= duration * loopDelta;
              loopCount += Math.abs(loopDelta);
              const pending = this.repetitions - loopCount;
              if (pending <= 0) {
                if (this.clampWhenFinished)
                  this.paused = true;
                else
                  this.enabled = false;
                time = deltaTime > 0 ? duration : 0;
                this.time = time;
                this._mixer.dispatchEvent({
                  type: "finished",
                  action: this,
                  direction: deltaTime > 0 ? 1 : -1
                });
              } else {
                if (pending === 1) {
                  const atStart = deltaTime < 0;
                  this._setEndings(atStart, !atStart, pingPong);
                } else {
                  this._setEndings(false, false, pingPong);
                }
                this._loopCount = loopCount;
                this.time = time;
                this._mixer.dispatchEvent({
                  type: "loop",
                  action: this,
                  loopDelta
                });
              }
            } else {
              this.time = time;
            }
            if (pingPong && (loopCount & 1) === 1) {
              return duration - time;
            }
          }
          return time;
        }
        _setEndings(atStart, atEnd, pingPong) {
          const settings = this._interpolantSettings;
          if (pingPong) {
            settings.endingStart = ZeroSlopeEnding;
            settings.endingEnd = ZeroSlopeEnding;
          } else {
            if (atStart) {
              settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
            } else {
              settings.endingStart = WrapAroundEnding;
            }
            if (atEnd) {
              settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
            } else {
              settings.endingEnd = WrapAroundEnding;
            }
          }
        }
        _scheduleFading(duration, weightNow, weightThen) {
          const mixer = this._mixer, now3 = mixer.time;
          let interpolant = this._weightInterpolant;
          if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._weightInterpolant = interpolant;
          }
          const times = interpolant.parameterPositions, values = interpolant.sampleValues;
          times[0] = now3;
          values[0] = weightNow;
          times[1] = now3 + duration;
          values[1] = weightThen;
          return this;
        }
      };
      _controlInterpolantsResultBuffer = new Float32Array(1);
      AnimationMixer = class extends EventDispatcher {
        constructor(root) {
          super();
          this._root = root;
          this._initMemoryManager();
          this._accuIndex = 0;
          this.time = 0;
          this.timeScale = 1;
        }
        _bindAction(action, prototypeAction) {
          const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
          let bindingsByName = bindingsByRoot[rootUuid];
          if (bindingsByName === void 0) {
            bindingsByName = {};
            bindingsByRoot[rootUuid] = bindingsByName;
          }
          for (let i = 0; i !== nTracks; ++i) {
            const track = tracks[i], trackName = track.name;
            let binding = bindingsByName[trackName];
            if (binding !== void 0) {
              ++binding.referenceCount;
              bindings[i] = binding;
            } else {
              binding = bindings[i];
              if (binding !== void 0) {
                if (binding._cacheIndex === null) {
                  ++binding.referenceCount;
                  this._addInactiveBinding(binding, rootUuid, trackName);
                }
                continue;
              }
              const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
              binding = new PropertyMixer(
                PropertyBinding.create(root, trackName, path),
                track.ValueTypeName,
                track.getValueSize()
              );
              ++binding.referenceCount;
              this._addInactiveBinding(binding, rootUuid, trackName);
              bindings[i] = binding;
            }
            interpolants[i].resultBuffer = binding.buffer;
          }
        }
        _activateAction(action) {
          if (!this._isActiveAction(action)) {
            if (action._cacheIndex === null) {
              const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
              this._bindAction(
                action,
                actionsForClip && actionsForClip.knownActions[0]
              );
              this._addInactiveAction(action, clipUuid, rootUuid);
            }
            const bindings = action._propertyBindings;
            for (let i = 0, n = bindings.length; i !== n; ++i) {
              const binding = bindings[i];
              if (binding.useCount++ === 0) {
                this._lendBinding(binding);
                binding.saveOriginalState();
              }
            }
            this._lendAction(action);
          }
        }
        _deactivateAction(action) {
          if (this._isActiveAction(action)) {
            const bindings = action._propertyBindings;
            for (let i = 0, n = bindings.length; i !== n; ++i) {
              const binding = bindings[i];
              if (--binding.useCount === 0) {
                binding.restoreOriginalState();
                this._takeBackBinding(binding);
              }
            }
            this._takeBackAction(action);
          }
        }
        // Memory manager
        _initMemoryManager() {
          this._actions = [];
          this._nActiveActions = 0;
          this._actionsByClip = {};
          this._bindings = [];
          this._nActiveBindings = 0;
          this._bindingsByRootAndName = {};
          this._controlInterpolants = [];
          this._nActiveControlInterpolants = 0;
          const scope = this;
          this.stats = {
            actions: {
              get total() {
                return scope._actions.length;
              },
              get inUse() {
                return scope._nActiveActions;
              }
            },
            bindings: {
              get total() {
                return scope._bindings.length;
              },
              get inUse() {
                return scope._nActiveBindings;
              }
            },
            controlInterpolants: {
              get total() {
                return scope._controlInterpolants.length;
              },
              get inUse() {
                return scope._nActiveControlInterpolants;
              }
            }
          };
        }
        // Memory management for AnimationAction objects
        _isActiveAction(action) {
          const index = action._cacheIndex;
          return index !== null && index < this._nActiveActions;
        }
        _addInactiveAction(action, clipUuid, rootUuid) {
          const actions = this._actions, actionsByClip = this._actionsByClip;
          let actionsForClip = actionsByClip[clipUuid];
          if (actionsForClip === void 0) {
            actionsForClip = {
              knownActions: [action],
              actionByRoot: {}
            };
            action._byClipCacheIndex = 0;
            actionsByClip[clipUuid] = actionsForClip;
          } else {
            const knownActions = actionsForClip.knownActions;
            action._byClipCacheIndex = knownActions.length;
            knownActions.push(action);
          }
          action._cacheIndex = actions.length;
          actions.push(action);
          actionsForClip.actionByRoot[rootUuid] = action;
        }
        _removeInactiveAction(action) {
          const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
          lastInactiveAction._cacheIndex = cacheIndex;
          actions[cacheIndex] = lastInactiveAction;
          actions.pop();
          action._cacheIndex = null;
          const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
          lastKnownAction._byClipCacheIndex = byClipCacheIndex;
          knownActionsForClip[byClipCacheIndex] = lastKnownAction;
          knownActionsForClip.pop();
          action._byClipCacheIndex = null;
          const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
          delete actionByRoot[rootUuid];
          if (knownActionsForClip.length === 0) {
            delete actionsByClip[clipUuid];
          }
          this._removeInactiveBindingsForAction(action);
        }
        _removeInactiveBindingsForAction(action) {
          const bindings = action._propertyBindings;
          for (let i = 0, n = bindings.length; i !== n; ++i) {
            const binding = bindings[i];
            if (--binding.referenceCount === 0) {
              this._removeInactiveBinding(binding);
            }
          }
        }
        _lendAction(action) {
          const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
          action._cacheIndex = lastActiveIndex;
          actions[lastActiveIndex] = action;
          firstInactiveAction._cacheIndex = prevIndex;
          actions[prevIndex] = firstInactiveAction;
        }
        _takeBackAction(action) {
          const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
          action._cacheIndex = firstInactiveIndex;
          actions[firstInactiveIndex] = action;
          lastActiveAction._cacheIndex = prevIndex;
          actions[prevIndex] = lastActiveAction;
        }
        // Memory management for PropertyMixer objects
        _addInactiveBinding(binding, rootUuid, trackName) {
          const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
          let bindingByName = bindingsByRoot[rootUuid];
          if (bindingByName === void 0) {
            bindingByName = {};
            bindingsByRoot[rootUuid] = bindingByName;
          }
          bindingByName[trackName] = binding;
          binding._cacheIndex = bindings.length;
          bindings.push(binding);
        }
        _removeInactiveBinding(binding) {
          const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
          lastInactiveBinding._cacheIndex = cacheIndex;
          bindings[cacheIndex] = lastInactiveBinding;
          bindings.pop();
          delete bindingByName[trackName];
          if (Object.keys(bindingByName).length === 0) {
            delete bindingsByRoot[rootUuid];
          }
        }
        _lendBinding(binding) {
          const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
          binding._cacheIndex = lastActiveIndex;
          bindings[lastActiveIndex] = binding;
          firstInactiveBinding._cacheIndex = prevIndex;
          bindings[prevIndex] = firstInactiveBinding;
        }
        _takeBackBinding(binding) {
          const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
          binding._cacheIndex = firstInactiveIndex;
          bindings[firstInactiveIndex] = binding;
          lastActiveBinding._cacheIndex = prevIndex;
          bindings[prevIndex] = lastActiveBinding;
        }
        // Memory management of Interpolants for weight and time scale
        _lendControlInterpolant() {
          const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
          let interpolant = interpolants[lastActiveIndex];
          if (interpolant === void 0) {
            interpolant = new LinearInterpolant(
              new Float32Array(2),
              new Float32Array(2),
              1,
              _controlInterpolantsResultBuffer
            );
            interpolant.__cacheIndex = lastActiveIndex;
            interpolants[lastActiveIndex] = interpolant;
          }
          return interpolant;
        }
        _takeBackControlInterpolant(interpolant) {
          const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
          interpolant.__cacheIndex = firstInactiveIndex;
          interpolants[firstInactiveIndex] = interpolant;
          lastActiveInterpolant.__cacheIndex = prevIndex;
          interpolants[prevIndex] = lastActiveInterpolant;
        }
        // return an action for a clip optionally using a custom root target
        // object (this method allocates a lot of dynamic memory in case a
        // previously unknown clip/root combination is specified)
        clipAction(clip, optionalRoot, blendMode) {
          const root = optionalRoot || this._root, rootUuid = root.uuid;
          let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
          const clipUuid = clipObject !== null ? clipObject.uuid : clip;
          const actionsForClip = this._actionsByClip[clipUuid];
          let prototypeAction = null;
          if (blendMode === void 0) {
            if (clipObject !== null) {
              blendMode = clipObject.blendMode;
            } else {
              blendMode = NormalAnimationBlendMode;
            }
          }
          if (actionsForClip !== void 0) {
            const existingAction = actionsForClip.actionByRoot[rootUuid];
            if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
              return existingAction;
            }
            prototypeAction = actionsForClip.knownActions[0];
            if (clipObject === null)
              clipObject = prototypeAction._clip;
          }
          if (clipObject === null)
            return null;
          const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
          this._bindAction(newAction, prototypeAction);
          this._addInactiveAction(newAction, clipUuid, rootUuid);
          return newAction;
        }
        // get an existing action
        existingAction(clip, optionalRoot) {
          const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
          if (actionsForClip !== void 0) {
            return actionsForClip.actionByRoot[rootUuid] || null;
          }
          return null;
        }
        // deactivates all previously scheduled actions
        stopAllAction() {
          const actions = this._actions, nActions = this._nActiveActions;
          for (let i = nActions - 1; i >= 0; --i) {
            actions[i].stop();
          }
          return this;
        }
        // advance the time and update apply the animation
        update(deltaTime) {
          deltaTime *= this.timeScale;
          const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
          for (let i = 0; i !== nActions; ++i) {
            const action = actions[i];
            action._update(time, deltaTime, timeDirection, accuIndex);
          }
          const bindings = this._bindings, nBindings = this._nActiveBindings;
          for (let i = 0; i !== nBindings; ++i) {
            bindings[i].apply(accuIndex);
          }
          return this;
        }
        // Allows you to seek to a specific time in an animation.
        setTime(timeInSeconds) {
          this.time = 0;
          for (let i = 0; i < this._actions.length; i++) {
            this._actions[i].time = 0;
          }
          return this.update(timeInSeconds);
        }
        // return this mixer's root target object
        getRoot() {
          return this._root;
        }
        // free all resources specific to a particular clip
        uncacheClip(clip) {
          const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
          if (actionsForClip !== void 0) {
            const actionsToRemove = actionsForClip.knownActions;
            for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
              const action = actionsToRemove[i];
              this._deactivateAction(action);
              const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
              action._cacheIndex = null;
              action._byClipCacheIndex = null;
              lastInactiveAction._cacheIndex = cacheIndex;
              actions[cacheIndex] = lastInactiveAction;
              actions.pop();
              this._removeInactiveBindingsForAction(action);
            }
            delete actionsByClip[clipUuid];
          }
        }
        // free all resources specific to a particular root target object
        uncacheRoot(root) {
          const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
          for (const clipUuid in actionsByClip) {
            const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
            if (action !== void 0) {
              this._deactivateAction(action);
              this._removeInactiveAction(action);
            }
          }
          const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
          if (bindingByName !== void 0) {
            for (const trackName in bindingByName) {
              const binding = bindingByName[trackName];
              binding.restoreOriginalState();
              this._removeInactiveBinding(binding);
            }
          }
        }
        // remove a targeted clip from the cache
        uncacheAction(clip, optionalRoot) {
          const action = this.existingAction(clip, optionalRoot);
          if (action !== null) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
          }
        }
      };
      Uniform = class _Uniform {
        constructor(value) {
          this.value = value;
        }
        clone() {
          return new _Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
        }
      };
      _id = 0;
      UniformsGroup = class extends EventDispatcher {
        constructor() {
          super();
          this.isUniformsGroup = true;
          Object.defineProperty(this, "id", { value: _id++ });
          this.name = "";
          this.usage = StaticDrawUsage;
          this.uniforms = [];
        }
        add(uniform) {
          this.uniforms.push(uniform);
          return this;
        }
        remove(uniform) {
          const index = this.uniforms.indexOf(uniform);
          if (index !== -1)
            this.uniforms.splice(index, 1);
          return this;
        }
        setName(name) {
          this.name = name;
          return this;
        }
        setUsage(value) {
          this.usage = value;
          return this;
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
          return this;
        }
        copy(source) {
          this.name = source.name;
          this.usage = source.usage;
          const uniformsSource = source.uniforms;
          this.uniforms.length = 0;
          for (let i = 0, l = uniformsSource.length; i < l; i++) {
            this.uniforms.push(uniformsSource[i].clone());
          }
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      InstancedInterleavedBuffer = class extends InterleavedBuffer {
        constructor(array, stride, meshPerAttribute = 1) {
          super(array, stride);
          this.isInstancedInterleavedBuffer = true;
          this.meshPerAttribute = meshPerAttribute;
        }
        copy(source) {
          super.copy(source);
          this.meshPerAttribute = source.meshPerAttribute;
          return this;
        }
        clone(data) {
          const ib = super.clone(data);
          ib.meshPerAttribute = this.meshPerAttribute;
          return ib;
        }
        toJSON(data) {
          const json = super.toJSON(data);
          json.isInstancedInterleavedBuffer = true;
          json.meshPerAttribute = this.meshPerAttribute;
          return json;
        }
      };
      GLBufferAttribute = class {
        constructor(buffer2, type, itemSize, elementSize, count) {
          this.isGLBufferAttribute = true;
          this.name = "";
          this.buffer = buffer2;
          this.type = type;
          this.itemSize = itemSize;
          this.elementSize = elementSize;
          this.count = count;
          this.version = 0;
        }
        set needsUpdate(value) {
          if (value === true)
            this.version++;
        }
        setBuffer(buffer2) {
          this.buffer = buffer2;
          return this;
        }
        setType(type, elementSize) {
          this.type = type;
          this.elementSize = elementSize;
          return this;
        }
        setItemSize(itemSize) {
          this.itemSize = itemSize;
          return this;
        }
        setCount(count) {
          this.count = count;
          return this;
        }
      };
      Raycaster = class {
        constructor(origin2, direction, near = 0, far = Infinity) {
          this.ray = new Ray(origin2, direction);
          this.near = near;
          this.far = far;
          this.camera = null;
          this.layers = new Layers();
          this.params = {
            Mesh: {},
            Line: { threshold: 1 },
            LOD: {},
            Points: { threshold: 1 },
            Sprite: {}
          };
        }
        set(origin2, direction) {
          this.ray.set(origin2, direction);
        }
        setFromCamera(coords, camera) {
          if (camera.isPerspectiveCamera) {
            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
            this.camera = camera;
          } else if (camera.isOrthographicCamera) {
            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
            this.camera = camera;
          } else {
            console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
          }
        }
        intersectObject(object, recursive = true, intersects2 = []) {
          intersectObject(object, this, intersects2, recursive);
          intersects2.sort(ascSort);
          return intersects2;
        }
        intersectObjects(objects, recursive = true, intersects2 = []) {
          for (let i = 0, l = objects.length; i < l; i++) {
            intersectObject(objects[i], this, intersects2, recursive);
          }
          intersects2.sort(ascSort);
          return intersects2;
        }
      };
      Spherical = class {
        constructor(radius = 1, phi = 0, theta = 0) {
          this.radius = radius;
          this.phi = phi;
          this.theta = theta;
          return this;
        }
        set(radius, phi, theta) {
          this.radius = radius;
          this.phi = phi;
          this.theta = theta;
          return this;
        }
        copy(other) {
          this.radius = other.radius;
          this.phi = other.phi;
          this.theta = other.theta;
          return this;
        }
        // restrict phi to be between EPS and PI-EPS
        makeSafe() {
          const EPS = 1e-6;
          this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
          return this;
        }
        setFromVector3(v) {
          return this.setFromCartesianCoords(v.x, v.y, v.z);
        }
        setFromCartesianCoords(x, y, z) {
          this.radius = Math.sqrt(x * x + y * y + z * z);
          if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
          } else {
            this.theta = Math.atan2(x, z);
            this.phi = Math.acos(clamp(y / this.radius, -1, 1));
          }
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      Cylindrical = class {
        constructor(radius = 1, theta = 0, y = 0) {
          this.radius = radius;
          this.theta = theta;
          this.y = y;
          return this;
        }
        set(radius, theta, y) {
          this.radius = radius;
          this.theta = theta;
          this.y = y;
          return this;
        }
        copy(other) {
          this.radius = other.radius;
          this.theta = other.theta;
          this.y = other.y;
          return this;
        }
        setFromVector3(v) {
          return this.setFromCartesianCoords(v.x, v.y, v.z);
        }
        setFromCartesianCoords(x, y, z) {
          this.radius = Math.sqrt(x * x + z * z);
          this.theta = Math.atan2(x, z);
          this.y = y;
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      _vector$4 = /* @__PURE__ */ new Vector2();
      Box2 = class {
        constructor(min = new Vector2(Infinity, Infinity), max = new Vector2(-Infinity, -Infinity)) {
          this.isBox2 = true;
          this.min = min;
          this.max = max;
        }
        set(min, max) {
          this.min.copy(min);
          this.max.copy(max);
          return this;
        }
        setFromPoints(points) {
          this.makeEmpty();
          for (let i = 0, il = points.length; i < il; i++) {
            this.expandByPoint(points[i]);
          }
          return this;
        }
        setFromCenterAndSize(center, size) {
          const halfSize = _vector$4.copy(size).multiplyScalar(0.5);
          this.min.copy(center).sub(halfSize);
          this.max.copy(center).add(halfSize);
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(box) {
          this.min.copy(box.min);
          this.max.copy(box.max);
          return this;
        }
        makeEmpty() {
          this.min.x = this.min.y = Infinity;
          this.max.x = this.max.y = -Infinity;
          return this;
        }
        isEmpty() {
          return this.max.x < this.min.x || this.max.y < this.min.y;
        }
        getCenter(target2) {
          return this.isEmpty() ? target2.set(0, 0) : target2.addVectors(this.min, this.max).multiplyScalar(0.5);
        }
        getSize(target2) {
          return this.isEmpty() ? target2.set(0, 0) : target2.subVectors(this.max, this.min);
        }
        expandByPoint(point) {
          this.min.min(point);
          this.max.max(point);
          return this;
        }
        expandByVector(vector) {
          this.min.sub(vector);
          this.max.add(vector);
          return this;
        }
        expandByScalar(scalar) {
          this.min.addScalar(-scalar);
          this.max.addScalar(scalar);
          return this;
        }
        containsPoint(point) {
          return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
        }
        containsBox(box) {
          return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
        }
        getParameter(point, target2) {
          return target2.set(
            (point.x - this.min.x) / (this.max.x - this.min.x),
            (point.y - this.min.y) / (this.max.y - this.min.y)
          );
        }
        intersectsBox(box) {
          return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
        }
        clampPoint(point, target2) {
          return target2.copy(point).clamp(this.min, this.max);
        }
        distanceToPoint(point) {
          return this.clampPoint(point, _vector$4).distanceTo(point);
        }
        intersect(box) {
          this.min.max(box.min);
          this.max.min(box.max);
          if (this.isEmpty())
            this.makeEmpty();
          return this;
        }
        union(box) {
          this.min.min(box.min);
          this.max.max(box.max);
          return this;
        }
        translate(offset) {
          this.min.add(offset);
          this.max.add(offset);
          return this;
        }
        equals(box) {
          return box.min.equals(this.min) && box.max.equals(this.max);
        }
      };
      _startP = /* @__PURE__ */ new Vector3();
      _startEnd = /* @__PURE__ */ new Vector3();
      Line3 = class {
        constructor(start = new Vector3(), end = new Vector3()) {
          this.start = start;
          this.end = end;
        }
        set(start, end) {
          this.start.copy(start);
          this.end.copy(end);
          return this;
        }
        copy(line) {
          this.start.copy(line.start);
          this.end.copy(line.end);
          return this;
        }
        getCenter(target2) {
          return target2.addVectors(this.start, this.end).multiplyScalar(0.5);
        }
        delta(target2) {
          return target2.subVectors(this.end, this.start);
        }
        distanceSq() {
          return this.start.distanceToSquared(this.end);
        }
        distance() {
          return this.start.distanceTo(this.end);
        }
        at(t, target2) {
          return this.delta(target2).multiplyScalar(t).add(this.start);
        }
        closestPointToPointParameter(point, clampToLine) {
          _startP.subVectors(point, this.start);
          _startEnd.subVectors(this.end, this.start);
          const startEnd2 = _startEnd.dot(_startEnd);
          const startEnd_startP = _startEnd.dot(_startP);
          let t = startEnd_startP / startEnd2;
          if (clampToLine) {
            t = clamp(t, 0, 1);
          }
          return t;
        }
        closestPointToPoint(point, clampToLine, target2) {
          const t = this.closestPointToPointParameter(point, clampToLine);
          return this.delta(target2).multiplyScalar(t).add(this.start);
        }
        applyMatrix4(matrix) {
          this.start.applyMatrix4(matrix);
          this.end.applyMatrix4(matrix);
          return this;
        }
        equals(line) {
          return line.start.equals(this.start) && line.end.equals(this.end);
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      _vector$3 = /* @__PURE__ */ new Vector3();
      SpotLightHelper = class extends Object3D {
        constructor(light, color) {
          super();
          this.light = light;
          this.matrix = light.matrixWorld;
          this.matrixAutoUpdate = false;
          this.color = color;
          this.type = "SpotLightHelper";
          const geometry = new BufferGeometry();
          const positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
          ];
          for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
            const p1 = i / l * Math.PI * 2;
            const p2 = j / l * Math.PI * 2;
            positions.push(
              Math.cos(p1),
              Math.sin(p1),
              1,
              Math.cos(p2),
              Math.sin(p2),
              1
            );
          }
          geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
          const material = new LineBasicMaterial({ fog: false, toneMapped: false });
          this.cone = new LineSegments(geometry, material);
          this.add(this.cone);
          this.update();
        }
        dispose() {
          this.cone.geometry.dispose();
          this.cone.material.dispose();
        }
        update() {
          this.light.updateWorldMatrix(true, false);
          this.light.target.updateWorldMatrix(true, false);
          const coneLength = this.light.distance ? this.light.distance : 1e3;
          const coneWidth = coneLength * Math.tan(this.light.angle);
          this.cone.scale.set(coneWidth, coneWidth, coneLength);
          _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
          this.cone.lookAt(_vector$3);
          if (this.color !== void 0) {
            this.cone.material.color.set(this.color);
          } else {
            this.cone.material.color.copy(this.light.color);
          }
        }
      };
      _vector$2 = /* @__PURE__ */ new Vector3();
      _boneMatrix = /* @__PURE__ */ new Matrix4();
      _matrixWorldInv = /* @__PURE__ */ new Matrix4();
      SkeletonHelper = class extends LineSegments {
        constructor(object) {
          const bones = getBoneList(object);
          const geometry = new BufferGeometry();
          const vertices = [];
          const colors = [];
          const color1 = new Color(0, 0, 1);
          const color2 = new Color(0, 1, 0);
          for (let i = 0; i < bones.length; i++) {
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
              vertices.push(0, 0, 0);
              vertices.push(0, 0, 0);
              colors.push(color1.r, color1.g, color1.b);
              colors.push(color2.r, color2.g, color2.b);
            }
          }
          geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
          const material = new LineBasicMaterial({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
          super(geometry, material);
          this.isSkeletonHelper = true;
          this.type = "SkeletonHelper";
          this.root = object;
          this.bones = bones;
          this.matrix = object.matrixWorld;
          this.matrixAutoUpdate = false;
        }
        updateMatrixWorld(force) {
          const bones = this.bones;
          const geometry = this.geometry;
          const position3 = geometry.getAttribute("position");
          _matrixWorldInv.copy(this.root.matrixWorld).invert();
          for (let i = 0, j = 0; i < bones.length; i++) {
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
              _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
              _vector$2.setFromMatrixPosition(_boneMatrix);
              position3.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
              _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
              _vector$2.setFromMatrixPosition(_boneMatrix);
              position3.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
              j += 2;
            }
          }
          geometry.getAttribute("position").needsUpdate = true;
          super.updateMatrixWorld(force);
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      PointLightHelper = class extends Mesh {
        constructor(light, sphereSize, color) {
          const geometry = new SphereGeometry(sphereSize, 4, 2);
          const material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
          super(geometry, material);
          this.light = light;
          this.color = color;
          this.type = "PointLightHelper";
          this.matrix = this.light.matrixWorld;
          this.matrixAutoUpdate = false;
          this.update();
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
        update() {
          this.light.updateWorldMatrix(true, false);
          if (this.color !== void 0) {
            this.material.color.set(this.color);
          } else {
            this.material.color.copy(this.light.color);
          }
        }
      };
      _vector$1 = /* @__PURE__ */ new Vector3();
      _color1 = /* @__PURE__ */ new Color();
      _color2 = /* @__PURE__ */ new Color();
      HemisphereLightHelper = class extends Object3D {
        constructor(light, size, color) {
          super();
          this.light = light;
          this.matrix = light.matrixWorld;
          this.matrixAutoUpdate = false;
          this.color = color;
          this.type = "HemisphereLightHelper";
          const geometry = new OctahedronGeometry(size);
          geometry.rotateY(Math.PI * 0.5);
          this.material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
          if (this.color === void 0)
            this.material.vertexColors = true;
          const position3 = geometry.getAttribute("position");
          const colors = new Float32Array(position3.count * 3);
          geometry.setAttribute("color", new BufferAttribute(colors, 3));
          this.add(new Mesh(geometry, this.material));
          this.update();
        }
        dispose() {
          this.children[0].geometry.dispose();
          this.children[0].material.dispose();
        }
        update() {
          const mesh = this.children[0];
          if (this.color !== void 0) {
            this.material.color.set(this.color);
          } else {
            const colors = mesh.geometry.getAttribute("color");
            _color1.copy(this.light.color);
            _color2.copy(this.light.groundColor);
            for (let i = 0, l = colors.count; i < l; i++) {
              const color = i < l / 2 ? _color1 : _color2;
              colors.setXYZ(i, color.r, color.g, color.b);
            }
            colors.needsUpdate = true;
          }
          this.light.updateWorldMatrix(true, false);
          mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
        }
      };
      GridHelper = class extends LineSegments {
        constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
          color1 = new Color(color1);
          color2 = new Color(color2);
          const center = divisions / 2;
          const step = size / divisions;
          const halfSize = size / 2;
          const vertices = [], colors = [];
          for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i === center ? color1 : color2;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
          }
          const geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
          const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
          super(geometry, material);
          this.type = "GridHelper";
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      PolarGridHelper = class extends LineSegments {
        constructor(radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 4473924, color2 = 8947848) {
          color1 = new Color(color1);
          color2 = new Color(color2);
          const vertices = [];
          const colors = [];
          if (sectors > 1) {
            for (let i = 0; i < sectors; i++) {
              const v = i / sectors * (Math.PI * 2);
              const x = Math.sin(v) * radius;
              const z = Math.cos(v) * radius;
              vertices.push(0, 0, 0);
              vertices.push(x, 0, z);
              const color = i & 1 ? color1 : color2;
              colors.push(color.r, color.g, color.b);
              colors.push(color.r, color.g, color.b);
            }
          }
          for (let i = 0; i < rings; i++) {
            const color = i & 1 ? color1 : color2;
            const r = radius - radius / rings * i;
            for (let j = 0; j < divisions; j++) {
              let v = j / divisions * (Math.PI * 2);
              let x = Math.sin(v) * r;
              let z = Math.cos(v) * r;
              vertices.push(x, 0, z);
              colors.push(color.r, color.g, color.b);
              v = (j + 1) / divisions * (Math.PI * 2);
              x = Math.sin(v) * r;
              z = Math.cos(v) * r;
              vertices.push(x, 0, z);
              colors.push(color.r, color.g, color.b);
            }
          }
          const geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
          const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
          super(geometry, material);
          this.type = "PolarGridHelper";
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      _v1 = /* @__PURE__ */ new Vector3();
      _v2 = /* @__PURE__ */ new Vector3();
      _v3 = /* @__PURE__ */ new Vector3();
      DirectionalLightHelper = class extends Object3D {
        constructor(light, size, color) {
          super();
          this.light = light;
          this.matrix = light.matrixWorld;
          this.matrixAutoUpdate = false;
          this.color = color;
          this.type = "DirectionalLightHelper";
          if (size === void 0)
            size = 1;
          let geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute([
            -size,
            size,
            0,
            size,
            size,
            0,
            size,
            -size,
            0,
            -size,
            -size,
            0,
            -size,
            size,
            0
          ], 3));
          const material = new LineBasicMaterial({ fog: false, toneMapped: false });
          this.lightPlane = new Line(geometry, material);
          this.add(this.lightPlane);
          geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
          this.targetLine = new Line(geometry, material);
          this.add(this.targetLine);
          this.update();
        }
        dispose() {
          this.lightPlane.geometry.dispose();
          this.lightPlane.material.dispose();
          this.targetLine.geometry.dispose();
          this.targetLine.material.dispose();
        }
        update() {
          this.light.updateWorldMatrix(true, false);
          this.light.target.updateWorldMatrix(true, false);
          _v1.setFromMatrixPosition(this.light.matrixWorld);
          _v2.setFromMatrixPosition(this.light.target.matrixWorld);
          _v3.subVectors(_v2, _v1);
          this.lightPlane.lookAt(_v2);
          if (this.color !== void 0) {
            this.lightPlane.material.color.set(this.color);
            this.targetLine.material.color.set(this.color);
          } else {
            this.lightPlane.material.color.copy(this.light.color);
            this.targetLine.material.color.copy(this.light.color);
          }
          this.targetLine.lookAt(_v2);
          this.targetLine.scale.z = _v3.length();
        }
      };
      _vector = /* @__PURE__ */ new Vector3();
      _camera = /* @__PURE__ */ new Camera();
      CameraHelper = class extends LineSegments {
        constructor(camera) {
          const geometry = new BufferGeometry();
          const material = new LineBasicMaterial({ color: 16777215, vertexColors: true, toneMapped: false });
          const vertices = [];
          const colors = [];
          const pointMap = {};
          addLine("n1", "n2");
          addLine("n2", "n4");
          addLine("n4", "n3");
          addLine("n3", "n1");
          addLine("f1", "f2");
          addLine("f2", "f4");
          addLine("f4", "f3");
          addLine("f3", "f1");
          addLine("n1", "f1");
          addLine("n2", "f2");
          addLine("n3", "f3");
          addLine("n4", "f4");
          addLine("p", "n1");
          addLine("p", "n2");
          addLine("p", "n3");
          addLine("p", "n4");
          addLine("u1", "u2");
          addLine("u2", "u3");
          addLine("u3", "u1");
          addLine("c", "t");
          addLine("p", "c");
          addLine("cn1", "cn2");
          addLine("cn3", "cn4");
          addLine("cf1", "cf2");
          addLine("cf3", "cf4");
          function addLine(a, b) {
            addPoint(a);
            addPoint(b);
          }
          function addPoint(id) {
            vertices.push(0, 0, 0);
            colors.push(0, 0, 0);
            if (pointMap[id] === void 0) {
              pointMap[id] = [];
            }
            pointMap[id].push(vertices.length / 3 - 1);
          }
          geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
          super(geometry, material);
          this.type = "CameraHelper";
          this.camera = camera;
          if (this.camera.updateProjectionMatrix)
            this.camera.updateProjectionMatrix();
          this.matrix = camera.matrixWorld;
          this.matrixAutoUpdate = false;
          this.pointMap = pointMap;
          this.update();
          const colorFrustum = new Color(16755200);
          const colorCone = new Color(16711680);
          const colorUp = new Color(43775);
          const colorTarget = new Color(16777215);
          const colorCross = new Color(3355443);
          this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
        }
        setColors(frustum, cone, up, target2, cross) {
          const geometry = this.geometry;
          const colorAttribute = geometry.getAttribute("color");
          colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b);
          colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(25, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(27, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(29, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(31, cone.r, cone.g, cone.b);
          colorAttribute.setXYZ(32, up.r, up.g, up.b);
          colorAttribute.setXYZ(33, up.r, up.g, up.b);
          colorAttribute.setXYZ(34, up.r, up.g, up.b);
          colorAttribute.setXYZ(35, up.r, up.g, up.b);
          colorAttribute.setXYZ(36, up.r, up.g, up.b);
          colorAttribute.setXYZ(37, up.r, up.g, up.b);
          colorAttribute.setXYZ(38, target2.r, target2.g, target2.b);
          colorAttribute.setXYZ(39, target2.r, target2.g, target2.b);
          colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(41, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(43, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(45, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(47, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
          colorAttribute.setXYZ(49, cross.r, cross.g, cross.b);
          colorAttribute.needsUpdate = true;
        }
        update() {
          const geometry = this.geometry;
          const pointMap = this.pointMap;
          const w = 1, h = 1;
          _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
          setPoint("c", pointMap, geometry, _camera, 0, 0, -1);
          setPoint("t", pointMap, geometry, _camera, 0, 0, 1);
          setPoint("n1", pointMap, geometry, _camera, -w, -h, -1);
          setPoint("n2", pointMap, geometry, _camera, w, -h, -1);
          setPoint("n3", pointMap, geometry, _camera, -w, h, -1);
          setPoint("n4", pointMap, geometry, _camera, w, h, -1);
          setPoint("f1", pointMap, geometry, _camera, -w, -h, 1);
          setPoint("f2", pointMap, geometry, _camera, w, -h, 1);
          setPoint("f3", pointMap, geometry, _camera, -w, h, 1);
          setPoint("f4", pointMap, geometry, _camera, w, h, 1);
          setPoint("u1", pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
          setPoint("u2", pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
          setPoint("u3", pointMap, geometry, _camera, 0, h * 2, -1);
          setPoint("cf1", pointMap, geometry, _camera, -w, 0, 1);
          setPoint("cf2", pointMap, geometry, _camera, w, 0, 1);
          setPoint("cf3", pointMap, geometry, _camera, 0, -h, 1);
          setPoint("cf4", pointMap, geometry, _camera, 0, h, 1);
          setPoint("cn1", pointMap, geometry, _camera, -w, 0, -1);
          setPoint("cn2", pointMap, geometry, _camera, w, 0, -1);
          setPoint("cn3", pointMap, geometry, _camera, 0, -h, -1);
          setPoint("cn4", pointMap, geometry, _camera, 0, h, -1);
          geometry.getAttribute("position").needsUpdate = true;
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      _box = /* @__PURE__ */ new Box3();
      BoxHelper = class extends LineSegments {
        constructor(object, color = 16776960) {
          const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
          const positions = new Float32Array(8 * 3);
          const geometry = new BufferGeometry();
          geometry.setIndex(new BufferAttribute(indices, 1));
          geometry.setAttribute("position", new BufferAttribute(positions, 3));
          super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
          this.object = object;
          this.type = "BoxHelper";
          this.matrixAutoUpdate = false;
          this.update();
        }
        update(object) {
          if (object !== void 0) {
            console.warn("THREE.BoxHelper: .update() has no longer arguments.");
          }
          if (this.object !== void 0) {
            _box.setFromObject(this.object);
          }
          if (_box.isEmpty())
            return;
          const min = _box.min;
          const max = _box.max;
          const position3 = this.geometry.attributes.position;
          const array = position3.array;
          array[0] = max.x;
          array[1] = max.y;
          array[2] = max.z;
          array[3] = min.x;
          array[4] = max.y;
          array[5] = max.z;
          array[6] = min.x;
          array[7] = min.y;
          array[8] = max.z;
          array[9] = max.x;
          array[10] = min.y;
          array[11] = max.z;
          array[12] = max.x;
          array[13] = max.y;
          array[14] = min.z;
          array[15] = min.x;
          array[16] = max.y;
          array[17] = min.z;
          array[18] = min.x;
          array[19] = min.y;
          array[20] = min.z;
          array[21] = max.x;
          array[22] = min.y;
          array[23] = min.z;
          position3.needsUpdate = true;
          this.geometry.computeBoundingSphere();
        }
        setFromObject(object) {
          this.object = object;
          this.update();
          return this;
        }
        copy(source, recursive) {
          super.copy(source, recursive);
          this.object = source.object;
          return this;
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      Box3Helper = class extends LineSegments {
        constructor(box, color = 16776960) {
          const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
          const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
          const geometry = new BufferGeometry();
          geometry.setIndex(new BufferAttribute(indices, 1));
          geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
          super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
          this.box = box;
          this.type = "Box3Helper";
          this.geometry.computeBoundingSphere();
        }
        updateMatrixWorld(force) {
          const box = this.box;
          if (box.isEmpty())
            return;
          box.getCenter(this.position);
          box.getSize(this.scale);
          this.scale.multiplyScalar(0.5);
          super.updateMatrixWorld(force);
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      PlaneHelper = class extends Line {
        constructor(plane, size = 1, hex = 16776960) {
          const color = hex;
          const positions = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];
          const geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
          geometry.computeBoundingSphere();
          super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
          this.type = "PlaneHelper";
          this.plane = plane;
          this.size = size;
          const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];
          const geometry2 = new BufferGeometry();
          geometry2.setAttribute("position", new Float32BufferAttribute(positions2, 3));
          geometry2.computeBoundingSphere();
          this.add(new Mesh(geometry2, new MeshBasicMaterial({ color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false })));
        }
        updateMatrixWorld(force) {
          this.position.set(0, 0, 0);
          this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
          this.lookAt(this.plane.normal);
          this.translateZ(-this.plane.constant);
          super.updateMatrixWorld(force);
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
          this.children[0].geometry.dispose();
          this.children[0].material.dispose();
        }
      };
      _axis = /* @__PURE__ */ new Vector3();
      ArrowHelper = class extends Object3D {
        // dir is assumed to be normalized
        constructor(dir = new Vector3(0, 0, 1), origin2 = new Vector3(0, 0, 0), length2 = 1, color = 16776960, headLength = length2 * 0.2, headWidth = headLength * 0.2) {
          super();
          this.type = "ArrowHelper";
          if (_lineGeometry === void 0) {
            _lineGeometry = new BufferGeometry();
            _lineGeometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
            _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
            _coneGeometry.translate(0, -0.5, 0);
          }
          this.position.copy(origin2);
          this.line = new Line(_lineGeometry, new LineBasicMaterial({ color, toneMapped: false }));
          this.line.matrixAutoUpdate = false;
          this.add(this.line);
          this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({ color, toneMapped: false }));
          this.cone.matrixAutoUpdate = false;
          this.add(this.cone);
          this.setDirection(dir);
          this.setLength(length2, headLength, headWidth);
        }
        setDirection(dir) {
          if (dir.y > 0.99999) {
            this.quaternion.set(0, 0, 0, 1);
          } else if (dir.y < -0.99999) {
            this.quaternion.set(1, 0, 0, 0);
          } else {
            _axis.set(dir.z, 0, -dir.x).normalize();
            const radians = Math.acos(dir.y);
            this.quaternion.setFromAxisAngle(_axis, radians);
          }
        }
        setLength(length2, headLength = length2 * 0.2, headWidth = headLength * 0.2) {
          this.line.scale.set(1, Math.max(1e-4, length2 - headLength), 1);
          this.line.updateMatrix();
          this.cone.scale.set(headWidth, headLength, headWidth);
          this.cone.position.y = length2;
          this.cone.updateMatrix();
        }
        setColor(color) {
          this.line.material.color.set(color);
          this.cone.material.color.set(color);
        }
        copy(source) {
          super.copy(source, false);
          this.line.copy(source.line);
          this.cone.copy(source.cone);
          return this;
        }
        dispose() {
          this.line.geometry.dispose();
          this.line.material.dispose();
          this.cone.geometry.dispose();
          this.cone.material.dispose();
        }
      };
      AxesHelper = class extends LineSegments {
        constructor(size = 1) {
          const vertices = [
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size
          ];
          const colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
          ];
          const geometry = new BufferGeometry();
          geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
          geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
          const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
          super(geometry, material);
          this.type = "AxesHelper";
        }
        setColors(xAxisColor, yAxisColor, zAxisColor) {
          const color = new Color();
          const array = this.geometry.attributes.color.array;
          color.set(xAxisColor);
          color.toArray(array, 0);
          color.toArray(array, 3);
          color.set(yAxisColor);
          color.toArray(array, 6);
          color.toArray(array, 9);
          color.set(zAxisColor);
          color.toArray(array, 12);
          color.toArray(array, 15);
          this.geometry.attributes.color.needsUpdate = true;
          return this;
        }
        dispose() {
          this.geometry.dispose();
          this.material.dispose();
        }
      };
      ShapePath = class {
        constructor() {
          this.type = "ShapePath";
          this.color = new Color();
          this.subPaths = [];
          this.currentPath = null;
        }
        moveTo(x, y) {
          this.currentPath = new Path();
          this.subPaths.push(this.currentPath);
          this.currentPath.moveTo(x, y);
          return this;
        }
        lineTo(x, y) {
          this.currentPath.lineTo(x, y);
          return this;
        }
        quadraticCurveTo(aCPx, aCPy, aX, aY) {
          this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
          return this;
        }
        bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
          this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
          return this;
        }
        splineThru(pts) {
          this.currentPath.splineThru(pts);
          return this;
        }
        toShapes(isCCW) {
          function toShapesNoHoles(inSubpaths) {
            const shapes2 = [];
            for (let i = 0, l = inSubpaths.length; i < l; i++) {
              const tmpPath2 = inSubpaths[i];
              const tmpShape2 = new Shape();
              tmpShape2.curves = tmpPath2.curves;
              shapes2.push(tmpShape2);
            }
            return shapes2;
          }
          function isPointInsidePolygon(inPt, inPolygon) {
            const polyLen = inPolygon.length;
            let inside = false;
            for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
              let edgeLowPt = inPolygon[p];
              let edgeHighPt = inPolygon[q];
              let edgeDx = edgeHighPt.x - edgeLowPt.x;
              let edgeDy = edgeHighPt.y - edgeLowPt.y;
              if (Math.abs(edgeDy) > Number.EPSILON) {
                if (edgeDy < 0) {
                  edgeLowPt = inPolygon[q];
                  edgeDx = -edgeDx;
                  edgeHighPt = inPolygon[p];
                  edgeDy = -edgeDy;
                }
                if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
                  continue;
                if (inPt.y === edgeLowPt.y) {
                  if (inPt.x === edgeLowPt.x)
                    return true;
                } else {
                  const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                  if (perpEdge === 0)
                    return true;
                  if (perpEdge < 0)
                    continue;
                  inside = !inside;
                }
              } else {
                if (inPt.y !== edgeLowPt.y)
                  continue;
                if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
                  return true;
              }
            }
            return inside;
          }
          const isClockWise = ShapeUtils.isClockWise;
          const subPaths = this.subPaths;
          if (subPaths.length === 0)
            return [];
          let solid, tmpPath, tmpShape;
          const shapes = [];
          if (subPaths.length === 1) {
            tmpPath = subPaths[0];
            tmpShape = new Shape();
            tmpShape.curves = tmpPath.curves;
            shapes.push(tmpShape);
            return shapes;
          }
          let holesFirst = !isClockWise(subPaths[0].getPoints());
          holesFirst = isCCW ? !holesFirst : holesFirst;
          const betterShapeHoles = [];
          const newShapes = [];
          let newShapeHoles = [];
          let mainIdx = 0;
          let tmpPoints;
          newShapes[mainIdx] = void 0;
          newShapeHoles[mainIdx] = [];
          for (let i = 0, l = subPaths.length; i < l; i++) {
            tmpPath = subPaths[i];
            tmpPoints = tmpPath.getPoints();
            solid = isClockWise(tmpPoints);
            solid = isCCW ? !solid : solid;
            if (solid) {
              if (!holesFirst && newShapes[mainIdx])
                mainIdx++;
              newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
              newShapes[mainIdx].s.curves = tmpPath.curves;
              if (holesFirst)
                mainIdx++;
              newShapeHoles[mainIdx] = [];
            } else {
              newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
            }
          }
          if (!newShapes[0])
            return toShapesNoHoles(subPaths);
          if (newShapes.length > 1) {
            let ambiguous = false;
            let toChange = 0;
            for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
              betterShapeHoles[sIdx] = [];
            }
            for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
              const sho = newShapeHoles[sIdx];
              for (let hIdx = 0; hIdx < sho.length; hIdx++) {
                const ho = sho[hIdx];
                let hole_unassigned = true;
                for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
                  if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                    if (sIdx !== s2Idx)
                      toChange++;
                    if (hole_unassigned) {
                      hole_unassigned = false;
                      betterShapeHoles[s2Idx].push(ho);
                    } else {
                      ambiguous = true;
                    }
                  }
                }
                if (hole_unassigned) {
                  betterShapeHoles[sIdx].push(ho);
                }
              }
            }
            if (toChange > 0 && ambiguous === false) {
              newShapeHoles = betterShapeHoles;
            }
          }
          let tmpHoles;
          for (let i = 0, il = newShapes.length; i < il; i++) {
            tmpShape = newShapes[i].s;
            shapes.push(tmpShape);
            tmpHoles = newShapeHoles[i];
            for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
              tmpShape.holes.push(tmpHoles[j].h);
            }
          }
          return shapes;
        }
      };
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
          revision: REVISION
        } }));
      }
      if (typeof window !== "undefined") {
        if (window.__THREE__) {
          console.warn("WARNING: Multiple instances of Three.js being imported.");
        } else {
          window.__THREE__ = REVISION;
        }
      }
    }
  });

  // node_modules/three/examples/jsm/libs/stats.module.js
  var Stats, stats_module_default;
  var init_stats_module = __esm({
    "node_modules/three/examples/jsm/libs/stats.module.js"() {
      Stats = function() {
        var mode = 0;
        var container = document.createElement("div");
        container.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
        container.addEventListener("click", function(event) {
          event.preventDefault();
          showPanel(++mode % container.children.length);
        }, false);
        function addPanel(panel) {
          container.appendChild(panel.dom);
          return panel;
        }
        function showPanel(id) {
          for (var i = 0; i < container.children.length; i++) {
            container.children[i].style.display = i === id ? "block" : "none";
          }
          mode = id;
        }
        var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;
        var fpsPanel = addPanel(new Stats.Panel("FPS", "#0ff", "#002"));
        var msPanel = addPanel(new Stats.Panel("MS", "#0f0", "#020"));
        if (self.performance && self.performance.memory) {
          var memPanel = addPanel(new Stats.Panel("MB", "#f08", "#201"));
        }
        showPanel(0);
        return {
          REVISION: 16,
          dom: container,
          addPanel,
          showPanel,
          begin: function() {
            beginTime = (performance || Date).now();
          },
          end: function() {
            frames++;
            var time = (performance || Date).now();
            msPanel.update(time - beginTime, 200);
            if (time >= prevTime + 1e3) {
              fpsPanel.update(frames * 1e3 / (time - prevTime), 100);
              prevTime = time;
              frames = 0;
              if (memPanel) {
                var memory = performance.memory;
                memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);
              }
            }
            return time;
          },
          update: function() {
            beginTime = this.end();
          },
          // Backwards Compatibility
          domElement: container,
          setMode: showPanel
        };
      };
      Stats.Panel = function(name, fg, bg) {
        var min = Infinity, max = 0, round = Math.round;
        var PR = round(window.devicePixelRatio || 1);
        var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;
        var canvas = document.createElement("canvas");
        canvas.width = WIDTH;
        canvas.height = HEIGHT;
        canvas.style.cssText = "width:80px;height:48px";
        var context = canvas.getContext("2d");
        context.font = "bold " + 9 * PR + "px Helvetica,Arial,sans-serif";
        context.textBaseline = "top";
        context.fillStyle = bg;
        context.fillRect(0, 0, WIDTH, HEIGHT);
        context.fillStyle = fg;
        context.fillText(name, TEXT_X, TEXT_Y);
        context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);
        context.fillStyle = bg;
        context.globalAlpha = 0.9;
        context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);
        return {
          dom: canvas,
          update: function(value, maxValue) {
            min = Math.min(min, value);
            max = Math.max(max, value);
            context.fillStyle = bg;
            context.globalAlpha = 1;
            context.fillRect(0, 0, WIDTH, GRAPH_Y);
            context.fillStyle = fg;
            context.fillText(round(value) + " " + name + " (" + round(min) + "-" + round(max) + ")", TEXT_X, TEXT_Y);
            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);
            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);
            context.fillStyle = bg;
            context.globalAlpha = 0.9;
            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));
          }
        };
      };
      stats_module_default = Stats;
    }
  });

  // node_modules/three/examples/jsm/controls/OrbitControls.js
  var _changeEvent, _startEvent, _endEvent, _ray2, _plane, TILT_LIMIT, OrbitControls;
  var init_OrbitControls = __esm({
    "node_modules/three/examples/jsm/controls/OrbitControls.js"() {
      init_three_module();
      _changeEvent = { type: "change" };
      _startEvent = { type: "start" };
      _endEvent = { type: "end" };
      _ray2 = new Ray();
      _plane = new Plane();
      TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);
      OrbitControls = class extends EventDispatcher {
        constructor(object, domElement) {
          super();
          this.object = object;
          this.domElement = domElement;
          this.domElement.style.touchAction = "none";
          this.enabled = true;
          this.target = new Vector3();
          this.minDistance = 0;
          this.maxDistance = Infinity;
          this.minZoom = 0;
          this.maxZoom = Infinity;
          this.minPolarAngle = 0;
          this.maxPolarAngle = Math.PI;
          this.minAzimuthAngle = -Infinity;
          this.maxAzimuthAngle = Infinity;
          this.enableDamping = false;
          this.dampingFactor = 0.05;
          this.enableZoom = true;
          this.zoomSpeed = 1;
          this.enableRotate = true;
          this.rotateSpeed = 1;
          this.enablePan = true;
          this.panSpeed = 1;
          this.screenSpacePanning = true;
          this.keyPanSpeed = 7;
          this.zoomToCursor = false;
          this.autoRotate = false;
          this.autoRotateSpeed = 2;
          this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
          this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
          this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
          this.target0 = this.target.clone();
          this.position0 = this.object.position.clone();
          this.zoom0 = this.object.zoom;
          this._domElementKeyEvents = null;
          this.getPolarAngle = function() {
            return spherical.phi;
          };
          this.getAzimuthalAngle = function() {
            return spherical.theta;
          };
          this.getDistance = function() {
            return this.object.position.distanceTo(this.target);
          };
          this.listenToKeyEvents = function(domElement2) {
            domElement2.addEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = domElement2;
          };
          this.stopListenToKeyEvents = function() {
            this._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
            this._domElementKeyEvents = null;
          };
          this.saveState = function() {
            scope.target0.copy(scope.target);
            scope.position0.copy(scope.object.position);
            scope.zoom0 = scope.object.zoom;
          };
          this.reset = function() {
            scope.target.copy(scope.target0);
            scope.object.position.copy(scope.position0);
            scope.object.zoom = scope.zoom0;
            scope.object.updateProjectionMatrix();
            scope.dispatchEvent(_changeEvent);
            scope.update();
            state = STATE.NONE;
          };
          this.update = function() {
            const offset = new Vector3();
            const quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
            const quatInverse = quat.clone().invert();
            const lastPosition = new Vector3();
            const lastQuaternion = new Quaternion();
            const lastTargetPosition = new Vector3();
            const twoPI = 2 * Math.PI;
            return function update(deltaTime = null) {
              const position3 = scope.object.position;
              offset.copy(position3).sub(scope.target);
              offset.applyQuaternion(quat);
              spherical.setFromVector3(offset);
              if (scope.autoRotate && state === STATE.NONE) {
                rotateLeft(getAutoRotationAngle(deltaTime));
              }
              if (scope.enableDamping) {
                spherical.theta += sphericalDelta.theta * scope.dampingFactor;
                spherical.phi += sphericalDelta.phi * scope.dampingFactor;
              } else {
                spherical.theta += sphericalDelta.theta;
                spherical.phi += sphericalDelta.phi;
              }
              let min = scope.minAzimuthAngle;
              let max = scope.maxAzimuthAngle;
              if (isFinite(min) && isFinite(max)) {
                if (min < -Math.PI)
                  min += twoPI;
                else if (min > Math.PI)
                  min -= twoPI;
                if (max < -Math.PI)
                  max += twoPI;
                else if (max > Math.PI)
                  max -= twoPI;
                if (min <= max) {
                  spherical.theta = Math.max(min, Math.min(max, spherical.theta));
                } else {
                  spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);
                }
              }
              spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
              spherical.makeSafe();
              if (scope.enableDamping === true) {
                scope.target.addScaledVector(panOffset, scope.dampingFactor);
              } else {
                scope.target.add(panOffset);
              }
              if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {
                spherical.radius = clampDistance(spherical.radius);
              } else {
                spherical.radius = clampDistance(spherical.radius * scale);
              }
              offset.setFromSpherical(spherical);
              offset.applyQuaternion(quatInverse);
              position3.copy(scope.target).add(offset);
              scope.object.lookAt(scope.target);
              if (scope.enableDamping === true) {
                sphericalDelta.theta *= 1 - scope.dampingFactor;
                sphericalDelta.phi *= 1 - scope.dampingFactor;
                panOffset.multiplyScalar(1 - scope.dampingFactor);
              } else {
                sphericalDelta.set(0, 0, 0);
                panOffset.set(0, 0, 0);
              }
              let zoomChanged = false;
              if (scope.zoomToCursor && performCursorZoom) {
                let newRadius = null;
                if (scope.object.isPerspectiveCamera) {
                  const prevRadius = offset.length();
                  newRadius = clampDistance(prevRadius * scale);
                  const radiusDelta = prevRadius - newRadius;
                  scope.object.position.addScaledVector(dollyDirection, radiusDelta);
                  scope.object.updateMatrixWorld();
                } else if (scope.object.isOrthographicCamera) {
                  const mouseBefore = new Vector3(mouse.x, mouse.y, 0);
                  mouseBefore.unproject(scope.object);
                  scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                  scope.object.updateProjectionMatrix();
                  zoomChanged = true;
                  const mouseAfter = new Vector3(mouse.x, mouse.y, 0);
                  mouseAfter.unproject(scope.object);
                  scope.object.position.sub(mouseAfter).add(mouseBefore);
                  scope.object.updateMatrixWorld();
                  newRadius = offset.length();
                } else {
                  console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
                  scope.zoomToCursor = false;
                }
                if (newRadius !== null) {
                  if (this.screenSpacePanning) {
                    scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);
                  } else {
                    _ray2.origin.copy(scope.object.position);
                    _ray2.direction.set(0, 0, -1).transformDirection(scope.object.matrix);
                    if (Math.abs(scope.object.up.dot(_ray2.direction)) < TILT_LIMIT) {
                      object.lookAt(scope.target);
                    } else {
                      _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);
                      _ray2.intersectPlane(_plane, scope.target);
                    }
                  }
                }
              } else if (scope.object.isOrthographicCamera) {
                scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));
                scope.object.updateProjectionMatrix();
                zoomChanged = true;
              }
              scale = 1;
              performCursorZoom = false;
              if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS || lastTargetPosition.distanceToSquared(scope.target) > 0) {
                scope.dispatchEvent(_changeEvent);
                lastPosition.copy(scope.object.position);
                lastQuaternion.copy(scope.object.quaternion);
                lastTargetPosition.copy(scope.target);
                zoomChanged = false;
                return true;
              }
              return false;
            };
          }();
          this.dispose = function() {
            scope.domElement.removeEventListener("contextmenu", onContextMenu);
            scope.domElement.removeEventListener("pointerdown", onPointerDown);
            scope.domElement.removeEventListener("pointercancel", onPointerUp);
            scope.domElement.removeEventListener("wheel", onMouseWheel);
            scope.domElement.removeEventListener("pointermove", onPointerMove);
            scope.domElement.removeEventListener("pointerup", onPointerUp);
            if (scope._domElementKeyEvents !== null) {
              scope._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
              scope._domElementKeyEvents = null;
            }
          };
          const scope = this;
          const STATE = {
            NONE: -1,
            ROTATE: 0,
            DOLLY: 1,
            PAN: 2,
            TOUCH_ROTATE: 3,
            TOUCH_PAN: 4,
            TOUCH_DOLLY_PAN: 5,
            TOUCH_DOLLY_ROTATE: 6
          };
          let state = STATE.NONE;
          const EPS = 1e-6;
          const spherical = new Spherical();
          const sphericalDelta = new Spherical();
          let scale = 1;
          const panOffset = new Vector3();
          const rotateStart = new Vector2();
          const rotateEnd = new Vector2();
          const rotateDelta = new Vector2();
          const panStart = new Vector2();
          const panEnd = new Vector2();
          const panDelta = new Vector2();
          const dollyStart = new Vector2();
          const dollyEnd = new Vector2();
          const dollyDelta = new Vector2();
          const dollyDirection = new Vector3();
          const mouse = new Vector2();
          let performCursorZoom = false;
          const pointers = [];
          const pointerPositions = {};
          function getAutoRotationAngle(deltaTime) {
            if (deltaTime !== null) {
              return 2 * Math.PI / 60 * scope.autoRotateSpeed * deltaTime;
            } else {
              return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
            }
          }
          function getZoomScale() {
            return Math.pow(0.95, scope.zoomSpeed);
          }
          function rotateLeft(angle) {
            sphericalDelta.theta -= angle;
          }
          function rotateUp(angle) {
            sphericalDelta.phi -= angle;
          }
          const panLeft = function() {
            const v = new Vector3();
            return function panLeft2(distance, objectMatrix) {
              v.setFromMatrixColumn(objectMatrix, 0);
              v.multiplyScalar(-distance);
              panOffset.add(v);
            };
          }();
          const panUp = function() {
            const v = new Vector3();
            return function panUp2(distance, objectMatrix) {
              if (scope.screenSpacePanning === true) {
                v.setFromMatrixColumn(objectMatrix, 1);
              } else {
                v.setFromMatrixColumn(objectMatrix, 0);
                v.crossVectors(scope.object.up, v);
              }
              v.multiplyScalar(distance);
              panOffset.add(v);
            };
          }();
          const pan = function() {
            const offset = new Vector3();
            return function pan2(deltaX, deltaY) {
              const element = scope.domElement;
              if (scope.object.isPerspectiveCamera) {
                const position3 = scope.object.position;
                offset.copy(position3).sub(scope.target);
                let targetDistance = offset.length();
                targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);
                panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
                panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
              } else if (scope.object.isOrthographicCamera) {
                panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
                panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
              } else {
                console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
                scope.enablePan = false;
              }
            };
          }();
          function dollyOut(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
              scale /= dollyScale;
            } else {
              console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
              scope.enableZoom = false;
            }
          }
          function dollyIn(dollyScale) {
            if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
              scale *= dollyScale;
            } else {
              console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
              scope.enableZoom = false;
            }
          }
          function updateMouseParameters(event) {
            if (!scope.zoomToCursor) {
              return;
            }
            performCursorZoom = true;
            const rect = scope.domElement.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const w = rect.width;
            const h = rect.height;
            mouse.x = x / w * 2 - 1;
            mouse.y = -(y / h) * 2 + 1;
            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();
          }
          function clampDistance(dist) {
            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));
          }
          function handleMouseDownRotate(event) {
            rotateStart.set(event.clientX, event.clientY);
          }
          function handleMouseDownDolly(event) {
            updateMouseParameters(event);
            dollyStart.set(event.clientX, event.clientY);
          }
          function handleMouseDownPan(event) {
            panStart.set(event.clientX, event.clientY);
          }
          function handleMouseMoveRotate(event) {
            rotateEnd.set(event.clientX, event.clientY);
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
            scope.update();
          }
          function handleMouseMoveDolly(event) {
            dollyEnd.set(event.clientX, event.clientY);
            dollyDelta.subVectors(dollyEnd, dollyStart);
            if (dollyDelta.y > 0) {
              dollyOut(getZoomScale());
            } else if (dollyDelta.y < 0) {
              dollyIn(getZoomScale());
            }
            dollyStart.copy(dollyEnd);
            scope.update();
          }
          function handleMouseMovePan(event) {
            panEnd.set(event.clientX, event.clientY);
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
            scope.update();
          }
          function handleMouseWheel(event) {
            updateMouseParameters(event);
            if (event.deltaY < 0) {
              dollyIn(getZoomScale());
            } else if (event.deltaY > 0) {
              dollyOut(getZoomScale());
            }
            scope.update();
          }
          function handleKeyDown(event) {
            let needsUpdate = false;
            switch (event.code) {
              case scope.keys.UP:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  rotateUp(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                } else {
                  pan(0, scope.keyPanSpeed);
                }
                needsUpdate = true;
                break;
              case scope.keys.BOTTOM:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  rotateUp(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                } else {
                  pan(0, -scope.keyPanSpeed);
                }
                needsUpdate = true;
                break;
              case scope.keys.LEFT:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  rotateLeft(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                } else {
                  pan(scope.keyPanSpeed, 0);
                }
                needsUpdate = true;
                break;
              case scope.keys.RIGHT:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  rotateLeft(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
                } else {
                  pan(-scope.keyPanSpeed, 0);
                }
                needsUpdate = true;
                break;
            }
            if (needsUpdate) {
              event.preventDefault();
              scope.update();
            }
          }
          function handleTouchStartRotate() {
            if (pointers.length === 1) {
              rotateStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
              const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
              const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
              rotateStart.set(x, y);
            }
          }
          function handleTouchStartPan() {
            if (pointers.length === 1) {
              panStart.set(pointers[0].pageX, pointers[0].pageY);
            } else {
              const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
              const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
              panStart.set(x, y);
            }
          }
          function handleTouchStartDolly() {
            const dx = pointers[0].pageX - pointers[1].pageX;
            const dy = pointers[0].pageY - pointers[1].pageY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyStart.set(0, distance);
          }
          function handleTouchStartDollyPan() {
            if (scope.enableZoom)
              handleTouchStartDolly();
            if (scope.enablePan)
              handleTouchStartPan();
          }
          function handleTouchStartDollyRotate() {
            if (scope.enableZoom)
              handleTouchStartDolly();
            if (scope.enableRotate)
              handleTouchStartRotate();
          }
          function handleTouchMoveRotate(event) {
            if (pointers.length == 1) {
              rotateEnd.set(event.pageX, event.pageY);
            } else {
              const position3 = getSecondPointerPosition(event);
              const x = 0.5 * (event.pageX + position3.x);
              const y = 0.5 * (event.pageY + position3.y);
              rotateEnd.set(x, y);
            }
            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
            const element = scope.domElement;
            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
            rotateStart.copy(rotateEnd);
          }
          function handleTouchMovePan(event) {
            if (pointers.length === 1) {
              panEnd.set(event.pageX, event.pageY);
            } else {
              const position3 = getSecondPointerPosition(event);
              const x = 0.5 * (event.pageX + position3.x);
              const y = 0.5 * (event.pageY + position3.y);
              panEnd.set(x, y);
            }
            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
            pan(panDelta.x, panDelta.y);
            panStart.copy(panEnd);
          }
          function handleTouchMoveDolly(event) {
            const position3 = getSecondPointerPosition(event);
            const dx = event.pageX - position3.x;
            const dy = event.pageY - position3.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            dollyEnd.set(0, distance);
            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
            dollyOut(dollyDelta.y);
            dollyStart.copy(dollyEnd);
          }
          function handleTouchMoveDollyPan(event) {
            if (scope.enableZoom)
              handleTouchMoveDolly(event);
            if (scope.enablePan)
              handleTouchMovePan(event);
          }
          function handleTouchMoveDollyRotate(event) {
            if (scope.enableZoom)
              handleTouchMoveDolly(event);
            if (scope.enableRotate)
              handleTouchMoveRotate(event);
          }
          function onPointerDown(event) {
            if (scope.enabled === false)
              return;
            if (pointers.length === 0) {
              scope.domElement.setPointerCapture(event.pointerId);
              scope.domElement.addEventListener("pointermove", onPointerMove);
              scope.domElement.addEventListener("pointerup", onPointerUp);
            }
            addPointer(event);
            if (event.pointerType === "touch") {
              onTouchStart(event);
            } else {
              onMouseDown(event);
            }
          }
          function onPointerMove(event) {
            if (scope.enabled === false)
              return;
            if (event.pointerType === "touch") {
              onTouchMove(event);
            } else {
              onMouseMove(event);
            }
          }
          function onPointerUp(event) {
            removePointer(event);
            if (pointers.length === 0) {
              scope.domElement.releasePointerCapture(event.pointerId);
              scope.domElement.removeEventListener("pointermove", onPointerMove);
              scope.domElement.removeEventListener("pointerup", onPointerUp);
            }
            scope.dispatchEvent(_endEvent);
            state = STATE.NONE;
          }
          function onMouseDown(event) {
            let mouseAction;
            switch (event.button) {
              case 0:
                mouseAction = scope.mouseButtons.LEFT;
                break;
              case 1:
                mouseAction = scope.mouseButtons.MIDDLE;
                break;
              case 2:
                mouseAction = scope.mouseButtons.RIGHT;
                break;
              default:
                mouseAction = -1;
            }
            switch (mouseAction) {
              case MOUSE.DOLLY:
                if (scope.enableZoom === false)
                  return;
                handleMouseDownDolly(event);
                state = STATE.DOLLY;
                break;
              case MOUSE.ROTATE:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  if (scope.enablePan === false)
                    return;
                  handleMouseDownPan(event);
                  state = STATE.PAN;
                } else {
                  if (scope.enableRotate === false)
                    return;
                  handleMouseDownRotate(event);
                  state = STATE.ROTATE;
                }
                break;
              case MOUSE.PAN:
                if (event.ctrlKey || event.metaKey || event.shiftKey) {
                  if (scope.enableRotate === false)
                    return;
                  handleMouseDownRotate(event);
                  state = STATE.ROTATE;
                } else {
                  if (scope.enablePan === false)
                    return;
                  handleMouseDownPan(event);
                  state = STATE.PAN;
                }
                break;
              default:
                state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
              scope.dispatchEvent(_startEvent);
            }
          }
          function onMouseMove(event) {
            switch (state) {
              case STATE.ROTATE:
                if (scope.enableRotate === false)
                  return;
                handleMouseMoveRotate(event);
                break;
              case STATE.DOLLY:
                if (scope.enableZoom === false)
                  return;
                handleMouseMoveDolly(event);
                break;
              case STATE.PAN:
                if (scope.enablePan === false)
                  return;
                handleMouseMovePan(event);
                break;
            }
          }
          function onMouseWheel(event) {
            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE)
              return;
            event.preventDefault();
            scope.dispatchEvent(_startEvent);
            handleMouseWheel(event);
            scope.dispatchEvent(_endEvent);
          }
          function onKeyDown(event) {
            if (scope.enabled === false || scope.enablePan === false)
              return;
            handleKeyDown(event);
          }
          function onTouchStart(event) {
            trackPointer(event);
            switch (pointers.length) {
              case 1:
                switch (scope.touches.ONE) {
                  case TOUCH.ROTATE:
                    if (scope.enableRotate === false)
                      return;
                    handleTouchStartRotate();
                    state = STATE.TOUCH_ROTATE;
                    break;
                  case TOUCH.PAN:
                    if (scope.enablePan === false)
                      return;
                    handleTouchStartPan();
                    state = STATE.TOUCH_PAN;
                    break;
                  default:
                    state = STATE.NONE;
                }
                break;
              case 2:
                switch (scope.touches.TWO) {
                  case TOUCH.DOLLY_PAN:
                    if (scope.enableZoom === false && scope.enablePan === false)
                      return;
                    handleTouchStartDollyPan();
                    state = STATE.TOUCH_DOLLY_PAN;
                    break;
                  case TOUCH.DOLLY_ROTATE:
                    if (scope.enableZoom === false && scope.enableRotate === false)
                      return;
                    handleTouchStartDollyRotate();
                    state = STATE.TOUCH_DOLLY_ROTATE;
                    break;
                  default:
                    state = STATE.NONE;
                }
                break;
              default:
                state = STATE.NONE;
            }
            if (state !== STATE.NONE) {
              scope.dispatchEvent(_startEvent);
            }
          }
          function onTouchMove(event) {
            trackPointer(event);
            switch (state) {
              case STATE.TOUCH_ROTATE:
                if (scope.enableRotate === false)
                  return;
                handleTouchMoveRotate(event);
                scope.update();
                break;
              case STATE.TOUCH_PAN:
                if (scope.enablePan === false)
                  return;
                handleTouchMovePan(event);
                scope.update();
                break;
              case STATE.TOUCH_DOLLY_PAN:
                if (scope.enableZoom === false && scope.enablePan === false)
                  return;
                handleTouchMoveDollyPan(event);
                scope.update();
                break;
              case STATE.TOUCH_DOLLY_ROTATE:
                if (scope.enableZoom === false && scope.enableRotate === false)
                  return;
                handleTouchMoveDollyRotate(event);
                scope.update();
                break;
              default:
                state = STATE.NONE;
            }
          }
          function onContextMenu(event) {
            if (scope.enabled === false)
              return;
            event.preventDefault();
          }
          function addPointer(event) {
            pointers.push(event);
          }
          function removePointer(event) {
            delete pointerPositions[event.pointerId];
            for (let i = 0; i < pointers.length; i++) {
              if (pointers[i].pointerId == event.pointerId) {
                pointers.splice(i, 1);
                return;
              }
            }
          }
          function trackPointer(event) {
            let position3 = pointerPositions[event.pointerId];
            if (position3 === void 0) {
              position3 = new Vector2();
              pointerPositions[event.pointerId] = position3;
            }
            position3.set(event.pageX, event.pageY);
          }
          function getSecondPointerPosition(event) {
            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
            return pointerPositions[pointer.pointerId];
          }
          scope.domElement.addEventListener("contextmenu", onContextMenu);
          scope.domElement.addEventListener("pointerdown", onPointerDown);
          scope.domElement.addEventListener("pointercancel", onPointerUp);
          scope.domElement.addEventListener("wheel", onMouseWheel, { passive: false });
          this.update();
        }
      };
    }
  });

  // node_modules/three/examples/jsm/controls/MapControls.js
  var MapControls;
  var init_MapControls = __esm({
    "node_modules/three/examples/jsm/controls/MapControls.js"() {
      init_three_module();
      init_OrbitControls();
      MapControls = class extends OrbitControls {
        constructor(object, domElement) {
          super(object, domElement);
          this.screenSpacePanning = false;
          this.mouseButtons = { LEFT: MOUSE.PAN, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.ROTATE };
          this.touches = { ONE: TOUCH.PAN, TWO: TOUCH.DOLLY_ROTATE };
        }
      };
    }
  });

  // node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js
  function workerBootstrap() {
    var modules = /* @__PURE__ */ Object.create(null);
    function registerModule(ref, callback) {
      var id = ref.id;
      var name = ref.name;
      var dependencies = ref.dependencies;
      if (dependencies === void 0)
        dependencies = [];
      var init = ref.init;
      if (init === void 0)
        init = function() {
        };
      var getTransferables = ref.getTransferables;
      if (getTransferables === void 0)
        getTransferables = null;
      if (modules[id]) {
        return;
      }
      try {
        dependencies = dependencies.map(function(dep) {
          if (dep && dep.isWorkerModule) {
            registerModule(dep, function(depResult) {
              if (depResult instanceof Error) {
                throw depResult;
              }
            });
            dep = modules[dep.id].value;
          }
          return dep;
        });
        init = rehydrate("<" + name + ">.init", init);
        if (getTransferables) {
          getTransferables = rehydrate("<" + name + ">.getTransferables", getTransferables);
        }
        var value = null;
        if (typeof init === "function") {
          value = init.apply(void 0, dependencies);
        } else {
          console.error("worker module init function failed to rehydrate");
        }
        modules[id] = {
          id,
          value,
          getTransferables
        };
        callback(value);
      } catch (err) {
        if (!(err && err.noLog)) {
          console.error(err);
        }
        callback(err);
      }
    }
    function callModule(ref, callback) {
      var ref$1;
      var id = ref.id;
      var args = ref.args;
      if (!modules[id] || typeof modules[id].value !== "function") {
        callback(new Error("Worker module " + id + ": not found or its 'init' did not return a function"));
      }
      try {
        var result = (ref$1 = modules[id]).value.apply(ref$1, args);
        if (result && typeof result.then === "function") {
          result.then(handleResult, function(rej) {
            return callback(rej instanceof Error ? rej : new Error("" + rej));
          });
        } else {
          handleResult(result);
        }
      } catch (err) {
        callback(err);
      }
      function handleResult(result2) {
        try {
          var tx = modules[id].getTransferables && modules[id].getTransferables(result2);
          if (!tx || !Array.isArray(tx) || !tx.length) {
            tx = void 0;
          }
          callback(result2, tx);
        } catch (err) {
          console.error(err);
          callback(err);
        }
      }
    }
    function rehydrate(name, str) {
      var result = void 0;
      self.troikaDefine = function(r) {
        return result = r;
      };
      var url = URL.createObjectURL(
        new Blob(
          ["/** " + name.replace(/\*/g, "") + " **/\n\ntroikaDefine(\n" + str + "\n)"],
          { type: "application/javascript" }
        )
      );
      try {
        importScripts(url);
      } catch (err) {
        console.error(err);
      }
      URL.revokeObjectURL(url);
      delete self.troikaDefine;
      return result;
    }
    self.addEventListener("message", function(e) {
      var ref = e.data;
      var messageId = ref.messageId;
      var action = ref.action;
      var data = ref.data;
      try {
        if (action === "registerModule") {
          registerModule(data, function(result) {
            if (result instanceof Error) {
              postMessage({
                messageId,
                success: false,
                error: result.message
              });
            } else {
              postMessage({
                messageId,
                success: true,
                result: { isCallable: typeof result === "function" }
              });
            }
          });
        }
        if (action === "callModule") {
          callModule(data, function(result, transferables) {
            if (result instanceof Error) {
              postMessage({
                messageId,
                success: false,
                error: result.message
              });
            } else {
              postMessage({
                messageId,
                success: true,
                result
              }, transferables || void 0);
            }
          });
        }
      } catch (err) {
        postMessage({
          messageId,
          success: false,
          error: err.stack
        });
      }
    });
  }
  function defineMainThreadModule(options) {
    var moduleFunc = function() {
      var args = [], len = arguments.length;
      while (len--)
        args[len] = arguments[len];
      return moduleFunc._getInitResult().then(function(initResult) {
        if (typeof initResult === "function") {
          return initResult.apply(void 0, args);
        } else {
          throw new Error("Worker module function was called but `init` did not return a callable function");
        }
      });
    };
    moduleFunc._getInitResult = function() {
      var dependencies = options.dependencies;
      var init = options.init;
      dependencies = Array.isArray(dependencies) ? dependencies.map(
        function(dep) {
          return dep && dep._getInitResult ? dep._getInitResult() : dep;
        }
      ) : [];
      var initPromise = Promise.all(dependencies).then(function(deps) {
        return init.apply(null, deps);
      });
      moduleFunc._getInitResult = function() {
        return initPromise;
      };
      return initPromise;
    };
    return moduleFunc;
  }
  function defineWorkerModule(options) {
    if ((!options || typeof options.init !== "function") && !_allowInitAsString) {
      throw new Error("requires `options.init` function");
    }
    var dependencies = options.dependencies;
    var init = options.init;
    var getTransferables = options.getTransferables;
    var workerId = options.workerId;
    if (!supportsWorkers()) {
      return defineMainThreadModule(options);
    }
    if (workerId == null) {
      workerId = "#default";
    }
    var id = "workerModule" + ++_workerModuleId;
    var name = options.name || id;
    var registrationPromise = null;
    dependencies = dependencies && dependencies.map(function(dep) {
      if (typeof dep === "function" && !dep.workerModuleData) {
        _allowInitAsString = true;
        dep = defineWorkerModule({
          workerId,
          name: "<" + name + "> function dependency: " + dep.name,
          init: "function(){return (\n" + stringifyFunction(dep) + "\n)}"
        });
        _allowInitAsString = false;
      }
      if (dep && dep.workerModuleData) {
        dep = dep.workerModuleData;
      }
      return dep;
    });
    function moduleFunc() {
      var args = [], len = arguments.length;
      while (len--)
        args[len] = arguments[len];
      if (!registrationPromise) {
        registrationPromise = callWorker(workerId, "registerModule", moduleFunc.workerModuleData);
        var unregister = function() {
          registrationPromise = null;
          registeredModules[workerId].delete(unregister);
        };
        (registeredModules[workerId] || (registeredModules[workerId] = /* @__PURE__ */ new Set())).add(unregister);
      }
      return registrationPromise.then(function(ref) {
        var isCallable = ref.isCallable;
        if (isCallable) {
          return callWorker(workerId, "callModule", { id, args });
        } else {
          throw new Error("Worker module function was called but `init` did not return a callable function");
        }
      });
    }
    moduleFunc.workerModuleData = {
      isWorkerModule: true,
      id,
      name,
      dependencies,
      init: stringifyFunction(init),
      getTransferables: getTransferables && stringifyFunction(getTransferables)
    };
    return moduleFunc;
  }
  function terminateWorker(workerId) {
    if (registeredModules[workerId]) {
      registeredModules[workerId].forEach(function(unregister) {
        unregister();
      });
    }
    if (workers[workerId]) {
      workers[workerId].terminate();
      delete workers[workerId];
    }
  }
  function stringifyFunction(fn) {
    var str = fn.toString();
    if (!/^function/.test(str) && /^\w+\s*\(/.test(str)) {
      str = "function " + str;
    }
    return str;
  }
  function getWorker(workerId) {
    var worker = workers[workerId];
    if (!worker) {
      var bootstrap = stringifyFunction(workerBootstrap);
      worker = workers[workerId] = new Worker(
        URL.createObjectURL(
          new Blob(
            ["/** Worker Module Bootstrap: " + workerId.replace(/\*/g, "") + " **/\n\n;(" + bootstrap + ")()"],
            { type: "application/javascript" }
          )
        )
      );
      worker.onmessage = function(e) {
        var response = e.data;
        var msgId = response.messageId;
        var callback = openRequests[msgId];
        if (!callback) {
          throw new Error("WorkerModule response with empty or unknown messageId");
        }
        delete openRequests[msgId];
        callback(response);
      };
    }
    return worker;
  }
  function callWorker(workerId, action, data) {
    return new Promise(function(resolve, reject) {
      var messageId = ++_messageId;
      openRequests[messageId] = function(response) {
        if (response.success) {
          resolve(response.result);
        } else {
          reject(new Error("Error in worker " + action + " call: " + response.error));
        }
      };
      getWorker(workerId).postMessage({
        messageId,
        action,
        data
      });
    });
  }
  var supportsWorkers, _workerModuleId, _messageId, _allowInitAsString, workers, registeredModules, openRequests;
  var init_troika_worker_utils_esm = __esm({
    "node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js"() {
      supportsWorkers = function() {
        var supported = false;
        if (typeof window !== "undefined" && typeof window.document !== "undefined") {
          try {
            var worker = new Worker(
              URL.createObjectURL(new Blob([""], { type: "application/javascript" }))
            );
            worker.terminate();
            supported = true;
          } catch (err) {
            if (typeof process !== "undefined" && false)
              ;
            else {
              console.log(
                "Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [" + err.message + "]"
              );
            }
          }
        }
        supportsWorkers = function() {
          return supported;
        };
        return supported;
      };
      _workerModuleId = 0;
      _messageId = 0;
      _allowInitAsString = false;
      workers = /* @__PURE__ */ Object.create(null);
      registeredModules = /* @__PURE__ */ Object.create(null);
      openRequests = /* @__PURE__ */ Object.create(null);
    }
  });

  // node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs
  function SDFGenerator() {
    var exports = function(exports2) {
      function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t, pointOut) {
        var t2 = 1 - t;
        pointOut.x = t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2;
        pointOut.y = t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2;
      }
      function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t, pointOut) {
        var t2 = 1 - t;
        pointOut.x = t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3;
        pointOut.y = t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3;
      }
      function forEachPathCommand(pathString, commandCallback) {
        var segmentRE = /([MLQCZ])([^MLQCZ]*)/g;
        var match, firstX, firstY, prevX, prevY;
        while (match = segmentRE.exec(pathString)) {
          var args = match[2].replace(/^\s*|\s*$/g, "").split(/[,\s]+/).map(function(v) {
            return parseFloat(v);
          });
          switch (match[1]) {
            case "M":
              prevX = firstX = args[0];
              prevY = firstY = args[1];
              break;
            case "L":
              if (args[0] !== prevX || args[1] !== prevY) {
                commandCallback("L", prevX, prevY, prevX = args[0], prevY = args[1]);
              }
              break;
            case "Q": {
              commandCallback("Q", prevX, prevY, prevX = args[2], prevY = args[3], args[0], args[1]);
              break;
            }
            case "C": {
              commandCallback("C", prevX, prevY, prevX = args[4], prevY = args[5], args[0], args[1], args[2], args[3]);
              break;
            }
            case "Z":
              if (prevX !== firstX || prevY !== firstY) {
                commandCallback("L", prevX, prevY, firstX, firstY);
              }
              break;
          }
        }
      }
      function pathToLineSegments(pathString, segmentCallback, curvePoints) {
        if (curvePoints === void 0)
          curvePoints = 16;
        var tempPoint = { x: 0, y: 0 };
        forEachPathCommand(pathString, function(command, startX, startY, endX, endY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y) {
          switch (command) {
            case "L":
              segmentCallback(startX, startY, endX, endY);
              break;
            case "Q": {
              var prevCurveX = startX;
              var prevCurveY = startY;
              for (var i = 1; i < curvePoints; i++) {
                pointOnQuadraticBezier(
                  startX,
                  startY,
                  ctrl1X,
                  ctrl1Y,
                  endX,
                  endY,
                  i / (curvePoints - 1),
                  tempPoint
                );
                segmentCallback(prevCurveX, prevCurveY, tempPoint.x, tempPoint.y);
                prevCurveX = tempPoint.x;
                prevCurveY = tempPoint.y;
              }
              break;
            }
            case "C": {
              var prevCurveX$1 = startX;
              var prevCurveY$1 = startY;
              for (var i$1 = 1; i$1 < curvePoints; i$1++) {
                pointOnCubicBezier(
                  startX,
                  startY,
                  ctrl1X,
                  ctrl1Y,
                  ctrl2X,
                  ctrl2Y,
                  endX,
                  endY,
                  i$1 / (curvePoints - 1),
                  tempPoint
                );
                segmentCallback(prevCurveX$1, prevCurveY$1, tempPoint.x, tempPoint.y);
                prevCurveX$1 = tempPoint.x;
                prevCurveY$1 = tempPoint.y;
              }
              break;
            }
          }
        });
      }
      var viewportQuadVertex = "precision highp float;attribute vec2 aUV;varying vec2 vUV;void main(){vUV=aUV;gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
      var copyTexFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){gl_FragColor=texture2D(tex,vUV);}";
      var cache2 = /* @__PURE__ */ new WeakMap();
      var glContextParams = {
        premultipliedAlpha: false,
        preserveDrawingBuffer: true,
        antialias: false,
        depth: false
      };
      function withWebGLContext(glOrCanvas, callback) {
        var gl = glOrCanvas.getContext ? glOrCanvas.getContext("webgl", glContextParams) : glOrCanvas;
        var wrapper = cache2.get(gl);
        if (!wrapper) {
          let getExtension = function(name) {
            var ext = extensions2[name];
            if (!ext) {
              ext = extensions2[name] = gl.getExtension(name);
              if (!ext) {
                throw new Error(name + " not supported");
              }
            }
            return ext;
          }, compileShader = function(src3, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src3);
            gl.compileShader(shader);
            return shader;
          }, withProgram = function(name, vert, frag, func) {
            if (!programs[name]) {
              var attributes = {};
              var uniforms = {};
              var program = gl.createProgram();
              gl.attachShader(program, compileShader(vert, gl.VERTEX_SHADER));
              gl.attachShader(program, compileShader(frag, gl.FRAGMENT_SHADER));
              gl.linkProgram(program);
              programs[name] = {
                program,
                transaction: function transaction(func2) {
                  gl.useProgram(program);
                  func2({
                    setUniform: function setUniform(type, name2) {
                      var values = [], len = arguments.length - 2;
                      while (len-- > 0)
                        values[len] = arguments[len + 2];
                      var uniformLoc = uniforms[name2] || (uniforms[name2] = gl.getUniformLocation(program, name2));
                      gl["uniform" + type].apply(gl, [uniformLoc].concat(values));
                    },
                    setAttribute: function setAttribute(name2, size, usage, instancingDivisor, data) {
                      var attr = attributes[name2];
                      if (!attr) {
                        attr = attributes[name2] = {
                          buf: gl.createBuffer(),
                          // TODO should we destroy our buffers?
                          loc: gl.getAttribLocation(program, name2),
                          data: null
                        };
                      }
                      gl.bindBuffer(gl.ARRAY_BUFFER, attr.buf);
                      gl.vertexAttribPointer(attr.loc, size, gl.FLOAT, false, 0, 0);
                      gl.enableVertexAttribArray(attr.loc);
                      if (isWebGL2) {
                        gl.vertexAttribDivisor(attr.loc, instancingDivisor);
                      } else {
                        getExtension("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(attr.loc, instancingDivisor);
                      }
                      if (data !== attr.data) {
                        gl.bufferData(gl.ARRAY_BUFFER, data, usage);
                        attr.data = data;
                      }
                    }
                  });
                }
              };
            }
            programs[name].transaction(func);
          }, withTexture = function(name, func) {
            textureUnit++;
            try {
              gl.activeTexture(gl.TEXTURE0 + textureUnit);
              var texture = textures[name];
              if (!texture) {
                texture = textures[name] = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              }
              gl.bindTexture(gl.TEXTURE_2D, texture);
              func(texture, textureUnit);
            } finally {
              textureUnit--;
            }
          }, withTextureFramebuffer = function(texture, textureUnit2, func) {
            var framebuffer = gl.createFramebuffer();
            framebufferStack.push(framebuffer);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.activeTexture(gl.TEXTURE0 + textureUnit2);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            try {
              func(framebuffer);
            } finally {
              gl.deleteFramebuffer(framebuffer);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferStack[--framebufferStack.length - 1] || null);
            }
          }, handleContextLoss = function() {
            extensions2 = {};
            programs = {};
            textures = {};
            textureUnit = -1;
            framebufferStack.length = 0;
          };
          var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
          var extensions2 = {};
          var programs = {};
          var textures = {};
          var textureUnit = -1;
          var framebufferStack = [];
          gl.canvas.addEventListener("webglcontextlost", function(e) {
            handleContextLoss();
            e.preventDefault();
          }, false);
          cache2.set(gl, wrapper = {
            gl,
            isWebGL2,
            getExtension,
            withProgram,
            withTexture,
            withTextureFramebuffer,
            handleContextLoss
          });
        }
        callback(wrapper);
      }
      function renderImageData(glOrCanvas, imageData, x, y, width, height, channels, framebuffer) {
        if (channels === void 0)
          channels = 15;
        if (framebuffer === void 0)
          framebuffer = null;
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var withProgram = ref.withProgram;
          var withTexture = ref.withTexture;
          withTexture("copy", function(tex, texUnit) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
            withProgram("copy", viewportQuadVertex, copyTexFragment, function(ref2) {
              var setUniform = ref2.setUniform;
              var setAttribute = ref2.setAttribute;
              setAttribute("aUV", 2, gl.STATIC_DRAW, 0, new Float32Array([0, 0, 2, 0, 0, 2]));
              setUniform("1i", "image", texUnit);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer || null);
              gl.disable(gl.BLEND);
              gl.colorMask(channels & 8, channels & 4, channels & 2, channels & 1);
              gl.viewport(x, y, width, height);
              gl.scissor(x, y, width, height);
              gl.drawArrays(gl.TRIANGLES, 0, 3);
            });
          });
        });
      }
      function resizeWebGLCanvasWithoutClearing2(canvas, newWidth, newHeight) {
        var width = canvas.width;
        var height = canvas.height;
        withWebGLContext(canvas, function(ref) {
          var gl = ref.gl;
          var data = new Uint8Array(width * height * 4);
          gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
          canvas.width = newWidth;
          canvas.height = newHeight;
          renderImageData(gl, data, 0, 0, width, height);
        });
      }
      var webglUtils = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        withWebGLContext,
        renderImageData,
        resizeWebGLCanvasWithoutClearing: resizeWebGLCanvasWithoutClearing2
      });
      function generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        var textureData = new Uint8Array(sdfWidth * sdfHeight);
        var viewBoxWidth = viewBox[2] - viewBox[0];
        var viewBoxHeight = viewBox[3] - viewBox[1];
        var segments = [];
        pathToLineSegments(path, function(x1, y1, x2, y2) {
          segments.push({
            x1,
            y1,
            x2,
            y2,
            minX: Math.min(x1, x2),
            minY: Math.min(y1, y2),
            maxX: Math.max(x1, x2),
            maxY: Math.max(y1, y2)
          });
        });
        segments.sort(function(a, b) {
          return a.maxX - b.maxX;
        });
        for (var sdfX = 0; sdfX < sdfWidth; sdfX++) {
          for (var sdfY = 0; sdfY < sdfHeight; sdfY++) {
            var signedDist = findNearestSignedDistance(
              viewBox[0] + viewBoxWidth * (sdfX + 0.5) / sdfWidth,
              viewBox[1] + viewBoxHeight * (sdfY + 0.5) / sdfHeight
            );
            var alpha = Math.pow(1 - Math.abs(signedDist) / maxDistance, sdfExponent) / 2;
            if (signedDist < 0) {
              alpha = 1 - alpha;
            }
            alpha = Math.max(0, Math.min(255, Math.round(alpha * 255)));
            textureData[sdfY * sdfWidth + sdfX] = alpha;
          }
        }
        return textureData;
        function findNearestSignedDistance(x, y) {
          var closestDistSq = Infinity;
          var closestDist = Infinity;
          for (var i = segments.length; i--; ) {
            var seg = segments[i];
            if (seg.maxX + closestDist <= x) {
              break;
            }
            if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {
              var distSq = absSquareDistanceToLineSegment(x, y, seg.x1, seg.y1, seg.x2, seg.y2);
              if (distSq < closestDistSq) {
                closestDistSq = distSq;
                closestDist = Math.sqrt(closestDistSq);
              }
            }
          }
          if (isPointInPoly(x, y)) {
            closestDist = -closestDist;
          }
          return closestDist;
        }
        function isPointInPoly(x, y) {
          var winding = 0;
          for (var i = segments.length; i--; ) {
            var seg = segments[i];
            if (seg.maxX <= x) {
              break;
            }
            var intersects2 = seg.y1 > y !== seg.y2 > y && x < (seg.x2 - seg.x1) * (y - seg.y1) / (seg.y2 - seg.y1) + seg.x1;
            if (intersects2) {
              winding += seg.y1 < seg.y2 ? 1 : -1;
            }
          }
          return winding !== 0;
        }
      }
      function generateIntoCanvas$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (x === void 0)
          x = 0;
        if (y === void 0)
          y = 0;
        if (channel === void 0)
          channel = 0;
        generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
      }
      function generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (x === void 0)
          x = 0;
        if (y === void 0)
          y = 0;
        if (channel === void 0)
          channel = 0;
        var data = generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent);
        var rgbaData = new Uint8Array(data.length * 4);
        for (var i = 0; i < data.length; i++) {
          rgbaData[i * 4 + channel] = data[i];
        }
        renderImageData(glOrCanvas, rgbaData, x, y, sdfWidth, sdfHeight, 1 << 3 - channel, framebuffer);
      }
      function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {
        var ldx = lineX1 - lineX0;
        var ldy = lineY1 - lineY0;
        var lengthSq = ldx * ldx + ldy * ldy;
        var t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;
        var dx = x - (lineX0 + t * ldx);
        var dy = y - (lineY0 + t * ldy);
        return dx * dx + dy * dy;
      }
      var javascript = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        generate: generate$2,
        generateIntoCanvas: generateIntoCanvas$2,
        generateIntoFramebuffer: generateIntoFramebuffer$1
      });
      var mainVertex = "precision highp float;uniform vec4 uGlyphBounds;attribute vec2 aUV;attribute vec4 aLineSegment;varying vec4 vLineSegment;varying vec2 vGlyphXY;void main(){vLineSegment=aLineSegment;vGlyphXY=mix(uGlyphBounds.xy,uGlyphBounds.zw,aUV);gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
      var mainFragment = "precision highp float;uniform vec4 uGlyphBounds;uniform float uMaxDistance;uniform float uExponent;varying vec4 vLineSegment;varying vec2 vGlyphXY;float absDistToSegment(vec2 point,vec2 lineA,vec2 lineB){vec2 lineDir=lineB-lineA;float lenSq=dot(lineDir,lineDir);float t=lenSq==0.0 ? 0.0 : clamp(dot(point-lineA,lineDir)/lenSq,0.0,1.0);vec2 linePt=lineA+t*lineDir;return distance(point,linePt);}void main(){vec4 seg=vLineSegment;vec2 p=vGlyphXY;float dist=absDistToSegment(p,seg.xy,seg.zw);float val=pow(1.0-clamp(dist/uMaxDistance,0.0,1.0),uExponent)*0.5;bool crossing=(seg.y>p.y!=seg.w>p.y)&&(p.x<(seg.z-seg.x)*(p.y-seg.y)/(seg.w-seg.y)+seg.x);bool crossingUp=crossing&&vLineSegment.y<vLineSegment.w;gl_FragColor=vec4(crossingUp ? 1.0/255.0 : 0.0,crossing&&!crossingUp ? 1.0/255.0 : 0.0,0.0,val);}";
      var postFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){vec4 color=texture2D(tex,vUV);bool inside=color.r!=color.g;float val=inside ? 1.0-color.a : color.a;gl_FragColor=vec4(val);}";
      var viewportUVs = new Float32Array([0, 0, 2, 0, 0, 2]);
      var implicitContext = null;
      var isTestingSupport = false;
      var NULL_OBJECT = {};
      var supportByCanvas = /* @__PURE__ */ new WeakMap();
      function validateSupport(glOrCanvas) {
        if (!isTestingSupport && !isSupported(glOrCanvas)) {
          throw new Error("WebGL generation not supported");
        }
      }
      function generate$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (glOrCanvas === void 0)
          glOrCanvas = null;
        if (!glOrCanvas) {
          glOrCanvas = implicitContext;
          if (!glOrCanvas) {
            var canvas = typeof OffscreenCanvas === "function" ? new OffscreenCanvas(1, 1) : typeof document !== "undefined" ? document.createElement("canvas") : null;
            if (!canvas) {
              throw new Error("OffscreenCanvas or DOM canvas not supported");
            }
            glOrCanvas = implicitContext = canvas.getContext("webgl", { depth: false });
          }
        }
        validateSupport(glOrCanvas);
        var rgbaData = new Uint8Array(sdfWidth * sdfHeight * 4);
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var withTexture = ref.withTexture;
          var withTextureFramebuffer = ref.withTextureFramebuffer;
          withTexture("readable", function(texture, textureUnit) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sdfWidth, sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            withTextureFramebuffer(texture, textureUnit, function(framebuffer) {
              generateIntoFramebuffer(
                sdfWidth,
                sdfHeight,
                path,
                viewBox,
                maxDistance,
                sdfExponent,
                gl,
                framebuffer,
                0,
                0,
                0
                // red channel
              );
              gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, rgbaData);
            });
          });
        });
        var data = new Uint8Array(sdfWidth * sdfHeight);
        for (var i = 0, j = 0; i < rgbaData.length; i += 4) {
          data[j++] = rgbaData[i];
        }
        return data;
      }
      function generateIntoCanvas$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (x === void 0)
          x = 0;
        if (y === void 0)
          y = 0;
        if (channel === void 0)
          channel = 0;
        generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
      }
      function generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (x === void 0)
          x = 0;
        if (y === void 0)
          y = 0;
        if (channel === void 0)
          channel = 0;
        validateSupport(glOrCanvas);
        var lineSegmentCoords = [];
        pathToLineSegments(path, function(x1, y1, x2, y2) {
          lineSegmentCoords.push(x1, y1, x2, y2);
        });
        lineSegmentCoords = new Float32Array(lineSegmentCoords);
        withWebGLContext(glOrCanvas, function(ref) {
          var gl = ref.gl;
          var isWebGL2 = ref.isWebGL2;
          var getExtension = ref.getExtension;
          var withProgram = ref.withProgram;
          var withTexture = ref.withTexture;
          var withTextureFramebuffer = ref.withTextureFramebuffer;
          var handleContextLoss = ref.handleContextLoss;
          withTexture("rawDistances", function(intermediateTexture, intermediateTextureUnit) {
            if (sdfWidth !== intermediateTexture._lastWidth || sdfHeight !== intermediateTexture._lastHeight) {
              gl.texImage2D(
                gl.TEXTURE_2D,
                0,
                gl.RGBA,
                intermediateTexture._lastWidth = sdfWidth,
                intermediateTexture._lastHeight = sdfHeight,
                0,
                gl.RGBA,
                gl.UNSIGNED_BYTE,
                null
              );
            }
            withProgram("main", mainVertex, mainFragment, function(ref2) {
              var setAttribute = ref2.setAttribute;
              var setUniform = ref2.setUniform;
              var instancingExtension = !isWebGL2 && getExtension("ANGLE_instanced_arrays");
              var blendMinMaxExtension = !isWebGL2 && getExtension("EXT_blend_minmax");
              setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
              setAttribute("aLineSegment", 4, gl.DYNAMIC_DRAW, 1, lineSegmentCoords);
              setUniform.apply(void 0, ["4f", "uGlyphBounds"].concat(viewBox));
              setUniform("1f", "uMaxDistance", maxDistance);
              setUniform("1f", "uExponent", sdfExponent);
              withTextureFramebuffer(intermediateTexture, intermediateTextureUnit, function(framebuffer2) {
                gl.enable(gl.BLEND);
                gl.colorMask(true, true, true, true);
                gl.viewport(0, 0, sdfWidth, sdfHeight);
                gl.scissor(0, 0, sdfWidth, sdfHeight);
                gl.blendFunc(gl.ONE, gl.ONE);
                gl.blendEquationSeparate(gl.FUNC_ADD, isWebGL2 ? gl.MAX : blendMinMaxExtension.MAX_EXT);
                gl.clear(gl.COLOR_BUFFER_BIT);
                if (isWebGL2) {
                  gl.drawArraysInstanced(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
                } else {
                  instancingExtension.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
                }
              });
            });
            withProgram("post", viewportQuadVertex, postFragment, function(program) {
              program.setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
              program.setUniform("1i", "tex", intermediateTextureUnit);
              gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
              gl.disable(gl.BLEND);
              gl.colorMask(channel === 0, channel === 1, channel === 2, channel === 3);
              gl.viewport(x, y, sdfWidth, sdfHeight);
              gl.scissor(x, y, sdfWidth, sdfHeight);
              gl.drawArrays(gl.TRIANGLES, 0, 3);
            });
          });
          if (gl.isContextLost()) {
            handleContextLoss();
            throw new Error("webgl context lost");
          }
        });
      }
      function isSupported(glOrCanvas) {
        var key = !glOrCanvas || glOrCanvas === implicitContext ? NULL_OBJECT : glOrCanvas.canvas || glOrCanvas;
        var supported = supportByCanvas.get(key);
        if (supported === void 0) {
          isTestingSupport = true;
          var failReason = null;
          try {
            var expectedResult = [
              97,
              106,
              97,
              61,
              99,
              137,
              118,
              80,
              80,
              118,
              137,
              99,
              61,
              97,
              106,
              97
            ];
            var testResult = generate$1(
              4,
              4,
              "M8,8L16,8L24,24L16,24Z",
              [0, 0, 32, 32],
              24,
              1,
              glOrCanvas
            );
            supported = testResult && expectedResult.length === testResult.length && testResult.every(function(val, i) {
              return val === expectedResult[i];
            });
            if (!supported) {
              failReason = "bad trial run results";
              console.info(expectedResult, testResult);
            }
          } catch (err) {
            supported = false;
            failReason = err.message;
          }
          if (failReason) {
            console.warn("WebGL SDF generation not supported:", failReason);
          }
          isTestingSupport = false;
          supportByCanvas.set(key, supported);
        }
        return supported;
      }
      var webgl = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        generate: generate$1,
        generateIntoCanvas: generateIntoCanvas$1,
        generateIntoFramebuffer,
        isSupported
      });
      function generate(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
        if (maxDistance === void 0)
          maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
        if (sdfExponent === void 0)
          sdfExponent = 1;
        try {
          return generate$1.apply(webgl, arguments);
        } catch (e) {
          console.info("WebGL SDF generation failed, falling back to JS", e);
          return generate$2.apply(javascript, arguments);
        }
      }
      function generateIntoCanvas(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
        if (maxDistance === void 0)
          maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
        if (sdfExponent === void 0)
          sdfExponent = 1;
        if (x === void 0)
          x = 0;
        if (y === void 0)
          y = 0;
        if (channel === void 0)
          channel = 0;
        try {
          return generateIntoCanvas$1.apply(webgl, arguments);
        } catch (e) {
          console.info("WebGL SDF generation failed, falling back to JS", e);
          return generateIntoCanvas$2.apply(javascript, arguments);
        }
      }
      exports2.forEachPathCommand = forEachPathCommand;
      exports2.generate = generate;
      exports2.generateIntoCanvas = generateIntoCanvas;
      exports2.javascript = javascript;
      exports2.pathToLineSegments = pathToLineSegments;
      exports2.webgl = webgl;
      exports2.webglUtils = webglUtils;
      Object.defineProperty(exports2, "__esModule", { value: true });
      return exports2;
    }({});
    return exports;
  }
  var init_webgl_sdf_generator = __esm({
    "node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs"() {
    }
  });

  // node_modules/bidi-js/dist/bidi.mjs
  function bidiFactory() {
    var bidi = function(exports) {
      var DATA = {
        "R": "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
        "EN": "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
        "ES": "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
        "ET": "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
        "AN": "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
        "CS": "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
        "B": "a,3,f+2,2v,690",
        "S": "9,2,k",
        "WS": "c,k,4f4,1vk+a,u,1j,335",
        "ON": "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
        "BN": "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
        "NSM": "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
        "AL": "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
        "LRO": "6ct",
        "RLO": "6cu",
        "LRE": "6cq",
        "RLE": "6cr",
        "PDF": "6cs",
        "LRI": "6ee",
        "RLI": "6ef",
        "FSI": "6eg",
        "PDI": "6eh"
      };
      var TYPES = {};
      var TYPES_TO_NAMES = {};
      TYPES.L = 1;
      TYPES_TO_NAMES[1] = "L";
      Object.keys(DATA).forEach(function(type, i) {
        TYPES[type] = 1 << i + 1;
        TYPES_TO_NAMES[TYPES[type]] = type;
      });
      Object.freeze(TYPES);
      var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;
      var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;
      var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;
      var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;
      var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;
      var map = null;
      function parseData() {
        if (!map) {
          map = /* @__PURE__ */ new Map();
          var loop = function(type2) {
            if (DATA.hasOwnProperty(type2)) {
              var lastCode = 0;
              DATA[type2].split(",").forEach(function(range) {
                var ref = range.split("+");
                var skip = ref[0];
                var step = ref[1];
                skip = parseInt(skip, 36);
                step = step ? parseInt(step, 36) : 0;
                map.set(lastCode += skip, TYPES[type2]);
                for (var i = 0; i < step; i++) {
                  map.set(++lastCode, TYPES[type2]);
                }
              });
            }
          };
          for (var type in DATA)
            loop(type);
        }
      }
      function getBidiCharType(char) {
        parseData();
        return map.get(char.codePointAt(0)) || TYPES.L;
      }
      function getBidiCharTypeName(char) {
        return TYPES_TO_NAMES[getBidiCharType(char)];
      }
      var data$1 = {
        "pairs": "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
        "canonical": "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye"
      };
      function parseCharacterMap(encodedString, includeReverse) {
        var radix = 36;
        var lastCode = 0;
        var map2 = /* @__PURE__ */ new Map();
        var reverseMap = includeReverse && /* @__PURE__ */ new Map();
        var prevPair;
        encodedString.split(",").forEach(function visit(entry) {
          if (entry.indexOf("+") !== -1) {
            for (var i = +entry; i--; ) {
              visit(prevPair);
            }
          } else {
            prevPair = entry;
            var ref = entry.split(">");
            var a = ref[0];
            var b = ref[1];
            a = String.fromCodePoint(lastCode += parseInt(a, radix));
            b = String.fromCodePoint(lastCode += parseInt(b, radix));
            map2.set(a, b);
            includeReverse && reverseMap.set(b, a);
          }
        });
        return { map: map2, reverseMap };
      }
      var openToClose, closeToOpen, canonical;
      function parse$1() {
        if (!openToClose) {
          var ref = parseCharacterMap(data$1.pairs, true);
          var map2 = ref.map;
          var reverseMap = ref.reverseMap;
          openToClose = map2;
          closeToOpen = reverseMap;
          canonical = parseCharacterMap(data$1.canonical, false).map;
        }
      }
      function openingToClosingBracket(char) {
        parse$1();
        return openToClose.get(char) || null;
      }
      function closingToOpeningBracket(char) {
        parse$1();
        return closeToOpen.get(char) || null;
      }
      function getCanonicalBracket(char) {
        parse$1();
        return canonical.get(char) || null;
      }
      var TYPE_L = TYPES.L;
      var TYPE_R = TYPES.R;
      var TYPE_EN = TYPES.EN;
      var TYPE_ES = TYPES.ES;
      var TYPE_ET = TYPES.ET;
      var TYPE_AN = TYPES.AN;
      var TYPE_CS = TYPES.CS;
      var TYPE_B = TYPES.B;
      var TYPE_S = TYPES.S;
      var TYPE_ON = TYPES.ON;
      var TYPE_BN = TYPES.BN;
      var TYPE_NSM = TYPES.NSM;
      var TYPE_AL = TYPES.AL;
      var TYPE_LRO = TYPES.LRO;
      var TYPE_RLO = TYPES.RLO;
      var TYPE_LRE = TYPES.LRE;
      var TYPE_RLE = TYPES.RLE;
      var TYPE_PDF = TYPES.PDF;
      var TYPE_LRI = TYPES.LRI;
      var TYPE_RLI = TYPES.RLI;
      var TYPE_FSI = TYPES.FSI;
      var TYPE_PDI = TYPES.PDI;
      function getEmbeddingLevels(string, baseDirection) {
        var MAX_DEPTH = 125;
        var charTypes = new Uint32Array(string.length);
        for (var i = 0; i < string.length; i++) {
          charTypes[i] = getBidiCharType(string[i]);
        }
        var charTypeCounts = /* @__PURE__ */ new Map();
        function changeCharType(i2, type2) {
          var oldType = charTypes[i2];
          charTypes[i2] = type2;
          charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);
          if (oldType & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);
          }
          charTypeCounts.set(type2, (charTypeCounts.get(type2) || 0) + 1);
          if (type2 & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
          }
        }
        var embedLevels = new Uint8Array(string.length);
        var isolationPairs = /* @__PURE__ */ new Map();
        var paragraphs = [];
        var paragraph = null;
        for (var i$1 = 0; i$1 < string.length; i$1++) {
          if (!paragraph) {
            paragraphs.push(paragraph = {
              start: i$1,
              end: string.length - 1,
              // 3.3.1 P2-P3: Determine the paragraph level
              level: baseDirection === "rtl" ? 1 : baseDirection === "ltr" ? 0 : determineAutoEmbedLevel(i$1, false)
            });
          }
          if (charTypes[i$1] & TYPE_B) {
            paragraph.end = i$1;
            paragraph = null;
          }
        }
        var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;
        var nextEven = function(n) {
          return n + (n & 1 ? 1 : 2);
        };
        var nextOdd = function(n) {
          return n + (n & 1 ? 2 : 1);
        };
        for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {
          paragraph = paragraphs[paraIdx];
          var statusStack = [{
            _level: paragraph.level,
            _override: 0,
            //0=neutral, 1=L, 2=R
            _isolate: 0
            //bool
          }];
          var stackTop = void 0;
          var overflowIsolateCount = 0;
          var overflowEmbeddingCount = 0;
          var validIsolateCount = 0;
          charTypeCounts.clear();
          for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {
            var charType = charTypes[i$2];
            stackTop = statusStack[statusStack.length - 1];
            charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);
            if (charType & NEUTRAL_ISOLATE_TYPES) {
              charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
            }
            if (charType & FORMATTING_TYPES) {
              if (charType & (TYPE_RLE | TYPE_LRE)) {
                embedLevels[i$2] = stackTop._level;
                var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);
                if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                  statusStack.push({
                    _level: level,
                    _override: 0,
                    _isolate: 0
                  });
                } else if (!overflowIsolateCount) {
                  overflowEmbeddingCount++;
                }
              } else if (charType & (TYPE_RLO | TYPE_LRO)) {
                embedLevels[i$2] = stackTop._level;
                var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);
                if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                  statusStack.push({
                    _level: level$1,
                    _override: charType & TYPE_RLO ? TYPE_R : TYPE_L,
                    _isolate: 0
                  });
                } else if (!overflowIsolateCount) {
                  overflowEmbeddingCount++;
                }
              } else if (charType & ISOLATE_INIT_TYPES) {
                if (charType & TYPE_FSI) {
                  charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;
                }
                embedLevels[i$2] = stackTop._level;
                if (stackTop._override) {
                  changeCharType(i$2, stackTop._override);
                }
                var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);
                if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {
                  validIsolateCount++;
                  statusStack.push({
                    _level: level$2,
                    _override: 0,
                    _isolate: 1,
                    _isolInitIndex: i$2
                  });
                } else {
                  overflowIsolateCount++;
                }
              } else if (charType & TYPE_PDI) {
                if (overflowIsolateCount > 0) {
                  overflowIsolateCount--;
                } else if (validIsolateCount > 0) {
                  overflowEmbeddingCount = 0;
                  while (!statusStack[statusStack.length - 1]._isolate) {
                    statusStack.pop();
                  }
                  var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;
                  if (isolInitIndex != null) {
                    isolationPairs.set(isolInitIndex, i$2);
                    isolationPairs.set(i$2, isolInitIndex);
                  }
                  statusStack.pop();
                  validIsolateCount--;
                }
                stackTop = statusStack[statusStack.length - 1];
                embedLevels[i$2] = stackTop._level;
                if (stackTop._override) {
                  changeCharType(i$2, stackTop._override);
                }
              } else if (charType & TYPE_PDF) {
                if (overflowIsolateCount === 0) {
                  if (overflowEmbeddingCount > 0) {
                    overflowEmbeddingCount--;
                  } else if (!stackTop._isolate && statusStack.length > 1) {
                    statusStack.pop();
                    stackTop = statusStack[statusStack.length - 1];
                  }
                }
                embedLevels[i$2] = stackTop._level;
              } else if (charType & TYPE_B) {
                embedLevels[i$2] = paragraph.level;
              }
            } else {
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override && charType !== TYPE_BN) {
                changeCharType(i$2, stackTop._override);
              }
            }
          }
          var levelRuns = [];
          var currentRun = null;
          for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {
            var charType$1 = charTypes[i$3];
            if (!(charType$1 & BN_LIKE_TYPES)) {
              var lvl = embedLevels[i$3];
              var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;
              var isPDI = charType$1 === TYPE_PDI;
              if (currentRun && lvl === currentRun._level) {
                currentRun._end = i$3;
                currentRun._endsWithIsolInit = isIsolInit;
              } else {
                levelRuns.push(currentRun = {
                  _start: i$3,
                  _end: i$3,
                  _level: lvl,
                  _startsWithPDI: isPDI,
                  _endsWithIsolInit: isIsolInit
                });
              }
            }
          }
          var isolatingRunSeqs = [];
          for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {
            var run = levelRuns[runIdx];
            if (!run._startsWithPDI || run._startsWithPDI && !isolationPairs.has(run._start)) {
              var seqRuns = [currentRun = run];
              for (var pdiIndex = void 0; currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null; ) {
                for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {
                  if (levelRuns[i$4]._start === pdiIndex) {
                    seqRuns.push(currentRun = levelRuns[i$4]);
                    break;
                  }
                }
              }
              var seqIndices = [];
              for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {
                var run$1 = seqRuns[i$5];
                for (var j = run$1._start; j <= run$1._end; j++) {
                  seqIndices.push(j);
                }
              }
              var firstLevel = embedLevels[seqIndices[0]];
              var prevLevel = paragraph.level;
              for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {
                if (!(charTypes[i$6] & BN_LIKE_TYPES)) {
                  prevLevel = embedLevels[i$6];
                  break;
                }
              }
              var lastIndex = seqIndices[seqIndices.length - 1];
              var lastLevel = embedLevels[lastIndex];
              var nextLevel = paragraph.level;
              if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {
                for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {
                  if (!(charTypes[i$7] & BN_LIKE_TYPES)) {
                    nextLevel = embedLevels[i$7];
                    break;
                  }
                }
              }
              isolatingRunSeqs.push({
                _seqIndices: seqIndices,
                _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,
                _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L
              });
            }
          }
          for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {
            var ref = isolatingRunSeqs[seqIdx];
            var seqIndices$1 = ref._seqIndices;
            var sosType = ref._sosType;
            var eosType = ref._eosType;
            var embedDirection = embedLevels[seqIndices$1[0]] & 1 ? TYPE_R : TYPE_L;
            if (charTypeCounts.get(TYPE_NSM)) {
              for (var si = 0; si < seqIndices$1.length; si++) {
                var i$8 = seqIndices$1[si];
                if (charTypes[i$8] & TYPE_NSM) {
                  var prevType = sosType;
                  for (var sj = si - 1; sj >= 0; sj--) {
                    if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) {
                      prevType = charTypes[seqIndices$1[sj]];
                      break;
                    }
                  }
                  changeCharType(i$8, prevType & (ISOLATE_INIT_TYPES | TYPE_PDI) ? TYPE_ON : prevType);
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {
                var i$9 = seqIndices$1[si$1];
                if (charTypes[i$9] & TYPE_EN) {
                  for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {
                    var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];
                    if (prevCharType & STRONG_TYPES) {
                      if (prevCharType === TYPE_AL) {
                        changeCharType(i$9, TYPE_AN);
                      }
                      break;
                    }
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_AL)) {
              for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {
                var i$10 = seqIndices$1[si$2];
                if (charTypes[i$10] & TYPE_AL) {
                  changeCharType(i$10, TYPE_R);
                }
              }
            }
            if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
              for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {
                var i$11 = seqIndices$1[si$3];
                if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {
                  var prevType$1 = 0, nextType = 0;
                  for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {
                    prevType$1 = charTypes[seqIndices$1[sj$2]];
                    if (!(prevType$1 & BN_LIKE_TYPES)) {
                      break;
                    }
                  }
                  for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {
                    nextType = charTypes[seqIndices$1[sj$3]];
                    if (!(nextType & BN_LIKE_TYPES)) {
                      break;
                    }
                  }
                  if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : prevType$1 & (TYPE_EN | TYPE_AN))) {
                    changeCharType(i$11, prevType$1);
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {
                var i$12 = seqIndices$1[si$4];
                if (charTypes[i$12] & TYPE_EN) {
                  for (var sj$4 = si$4 - 1; sj$4 >= 0 && charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES); sj$4--) {
                    changeCharType(seqIndices$1[sj$4], TYPE_EN);
                  }
                  for (si$4++; si$4 < seqIndices$1.length && charTypes[seqIndices$1[si$4]] & (TYPE_ET | BN_LIKE_TYPES | TYPE_EN); si$4++) {
                    if (charTypes[seqIndices$1[si$4]] !== TYPE_EN) {
                      changeCharType(seqIndices$1[si$4], TYPE_EN);
                    }
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
              for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {
                var i$13 = seqIndices$1[si$5];
                if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {
                  changeCharType(i$13, TYPE_ON);
                  for (var sj$5 = si$5 - 1; sj$5 >= 0 && charTypes[seqIndices$1[sj$5]] & BN_LIKE_TYPES; sj$5--) {
                    changeCharType(seqIndices$1[sj$5], TYPE_ON);
                  }
                  for (var sj$6 = si$5 + 1; sj$6 < seqIndices$1.length && charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES; sj$6++) {
                    changeCharType(seqIndices$1[sj$6], TYPE_ON);
                  }
                }
              }
            }
            if (charTypeCounts.get(TYPE_EN)) {
              for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {
                var i$14 = seqIndices$1[si$6];
                var type = charTypes[i$14];
                if (type & TYPE_EN) {
                  if (prevStrongType === TYPE_L) {
                    changeCharType(i$14, TYPE_L);
                  }
                } else if (type & STRONG_TYPES) {
                  prevStrongType = type;
                }
              }
            }
            if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {
              var R_TYPES_FOR_N_STEPS = TYPE_R | TYPE_EN | TYPE_AN;
              var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;
              var bracketPairs = [];
              {
                var openerStack = [];
                for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {
                  if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {
                    var char = string[seqIndices$1[si$7]];
                    var oppositeBracket = void 0;
                    if (openingToClosingBracket(char) !== null) {
                      if (openerStack.length < 63) {
                        openerStack.push({ char, seqIndex: si$7 });
                      } else {
                        break;
                      }
                    } else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {
                      for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {
                        var stackChar = openerStack[stackIdx].char;
                        if (stackChar === oppositeBracket || stackChar === closingToOpeningBracket(getCanonicalBracket(char)) || openingToClosingBracket(getCanonicalBracket(stackChar)) === char) {
                          bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);
                          openerStack.length = stackIdx;
                          break;
                        }
                      }
                    }
                  }
                }
                bracketPairs.sort(function(a, b) {
                  return a[0] - b[0];
                });
              }
              for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {
                var ref$1 = bracketPairs[pairIdx];
                var openSeqIdx = ref$1[0];
                var closeSeqIdx = ref$1[1];
                var foundStrongType = false;
                var useStrongType = 0;
                for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {
                  var i$15 = seqIndices$1[si$8];
                  if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {
                    foundStrongType = true;
                    var lr = charTypes[i$15] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    if (lr === embedDirection) {
                      useStrongType = lr;
                      break;
                    }
                  }
                }
                if (foundStrongType && !useStrongType) {
                  useStrongType = sosType;
                  for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {
                    var i$16 = seqIndices$1[si$9];
                    if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {
                      var lr$1 = charTypes[i$16] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      if (lr$1 !== embedDirection) {
                        useStrongType = lr$1;
                      } else {
                        useStrongType = embedDirection;
                      }
                      break;
                    }
                  }
                }
                if (useStrongType) {
                  charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;
                  if (useStrongType !== embedDirection) {
                    for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {
                      if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {
                        if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {
                          charTypes[seqIndices$1[si$10]] = useStrongType;
                        }
                        break;
                      }
                    }
                  }
                  if (useStrongType !== embedDirection) {
                    for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {
                      if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {
                        if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {
                          charTypes[seqIndices$1[si$11]] = useStrongType;
                        }
                        break;
                      }
                    }
                  }
                }
              }
              for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {
                if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {
                  var niRunStart = si$12, niRunEnd = si$12;
                  var prevType$2 = sosType;
                  for (var si2 = si$12 - 1; si2 >= 0; si2--) {
                    if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {
                      niRunStart = si2;
                    } else {
                      prevType$2 = charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      break;
                    }
                  }
                  var nextType$1 = eosType;
                  for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {
                    if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {
                      niRunEnd = si2$1;
                    } else {
                      nextType$1 = charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                      break;
                    }
                  }
                  for (var sj$7 = niRunStart; sj$7 <= niRunEnd; sj$7++) {
                    charTypes[seqIndices$1[sj$7]] = prevType$2 === nextType$1 ? prevType$2 : embedDirection;
                  }
                  si$12 = niRunEnd;
                }
              }
            }
          }
          for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {
            var level$3 = embedLevels[i$17];
            var type$1 = charTypes[i$17];
            if (level$3 & 1) {
              if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {
                embedLevels[i$17]++;
              }
            } else {
              if (type$1 & TYPE_R) {
                embedLevels[i$17]++;
              } else if (type$1 & (TYPE_AN | TYPE_EN)) {
                embedLevels[i$17] += 2;
              }
            }
            if (type$1 & BN_LIKE_TYPES) {
              embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];
            }
            if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {
              for (var j$1 = i$17; j$1 >= 0 && getBidiCharType(string[j$1]) & TRAILING_TYPES; j$1--) {
                embedLevels[j$1] = paragraph.level;
              }
            }
          }
        }
        return {
          levels: embedLevels,
          paragraphs
        };
        function determineAutoEmbedLevel(start, isFSI) {
          for (var i2 = start; i2 < string.length; i2++) {
            var charType2 = charTypes[i2];
            if (charType2 & (TYPE_R | TYPE_AL)) {
              return 1;
            }
            if (charType2 & (TYPE_B | TYPE_L) || isFSI && charType2 === TYPE_PDI) {
              return 0;
            }
            if (charType2 & ISOLATE_INIT_TYPES) {
              var pdi = indexOfMatchingPDI(i2);
              i2 = pdi === -1 ? string.length : pdi;
            }
          }
          return 0;
        }
        function indexOfMatchingPDI(isolateStart) {
          var isolationLevel = 1;
          for (var i2 = isolateStart + 1; i2 < string.length; i2++) {
            var charType2 = charTypes[i2];
            if (charType2 & TYPE_B) {
              break;
            }
            if (charType2 & TYPE_PDI) {
              if (--isolationLevel === 0) {
                return i2;
              }
            } else if (charType2 & ISOLATE_INIT_TYPES) {
              isolationLevel++;
            }
          }
          return -1;
        }
      }
      var data = "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1";
      var mirrorMap;
      function parse() {
        if (!mirrorMap) {
          var ref = parseCharacterMap(data, true);
          var map2 = ref.map;
          var reverseMap = ref.reverseMap;
          reverseMap.forEach(function(value, key) {
            map2.set(key, value);
          });
          mirrorMap = map2;
        }
      }
      function getMirroredCharacter(char) {
        parse();
        return mirrorMap.get(char) || null;
      }
      function getMirroredCharactersMap(string, embeddingLevels, start, end) {
        var strLen = string.length;
        start = Math.max(0, start == null ? 0 : +start);
        end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
        var map2 = /* @__PURE__ */ new Map();
        for (var i = start; i <= end; i++) {
          if (embeddingLevels[i] & 1) {
            var mirror = getMirroredCharacter(string[i]);
            if (mirror !== null) {
              map2.set(i, mirror);
            }
          }
        }
        return map2;
      }
      function getReorderSegments(string, embeddingLevelsResult, start, end) {
        var strLen = string.length;
        start = Math.max(0, start == null ? 0 : +start);
        end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
        var segments = [];
        embeddingLevelsResult.paragraphs.forEach(function(paragraph) {
          var lineStart = Math.max(start, paragraph.start);
          var lineEnd = Math.min(end, paragraph.end);
          if (lineStart < lineEnd) {
            var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);
            for (var i = lineEnd; i >= lineStart && getBidiCharType(string[i]) & TRAILING_TYPES; i--) {
              lineLevels[i] = paragraph.level;
            }
            var maxLevel = paragraph.level;
            var minOddLevel = Infinity;
            for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {
              var level = lineLevels[i$1];
              if (level > maxLevel) {
                maxLevel = level;
              }
              if (level < minOddLevel) {
                minOddLevel = level | 1;
              }
            }
            for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {
              for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {
                if (lineLevels[i$2] >= lvl) {
                  var segStart = i$2;
                  while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {
                    i$2++;
                  }
                  if (i$2 > segStart) {
                    segments.push([segStart + lineStart, i$2 + lineStart]);
                  }
                }
              }
            }
          }
        });
        return segments;
      }
      function getReorderedString(string, embedLevelsResult, start, end) {
        var indices = getReorderedIndices(string, embedLevelsResult, start, end);
        var chars = [].concat(string);
        indices.forEach(function(charIndex, i) {
          chars[i] = (embedLevelsResult.levels[charIndex] & 1 ? getMirroredCharacter(string[charIndex]) : null) || string[charIndex];
        });
        return chars.join("");
      }
      function getReorderedIndices(string, embedLevelsResult, start, end) {
        var segments = getReorderSegments(string, embedLevelsResult, start, end);
        var indices = [];
        for (var i = 0; i < string.length; i++) {
          indices[i] = i;
        }
        segments.forEach(function(ref) {
          var start2 = ref[0];
          var end2 = ref[1];
          var slice2 = indices.slice(start2, end2 + 1);
          for (var i2 = slice2.length; i2--; ) {
            indices[end2 - i2] = slice2[i2];
          }
        });
        return indices;
      }
      exports.closingToOpeningBracket = closingToOpeningBracket;
      exports.getBidiCharType = getBidiCharType;
      exports.getBidiCharTypeName = getBidiCharTypeName;
      exports.getCanonicalBracket = getCanonicalBracket;
      exports.getEmbeddingLevels = getEmbeddingLevels;
      exports.getMirroredCharacter = getMirroredCharacter;
      exports.getMirroredCharactersMap = getMirroredCharactersMap;
      exports.getReorderSegments = getReorderSegments;
      exports.getReorderedIndices = getReorderedIndices;
      exports.getReorderedString = getReorderedString;
      exports.openingToClosingBracket = openingToClosingBracket;
      Object.defineProperty(exports, "__esModule", { value: true });
      return exports;
    }({});
    return bidi;
  }
  var bidi_default;
  var init_bidi = __esm({
    "node_modules/bidi-js/dist/bidi.mjs"() {
      bidi_default = bidiFactory;
    }
  });

  // node_modules/troika-three-utils/dist/troika-three-utils.esm.js
  function expandShaderIncludes(source) {
    const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
    function replace(match, include) {
      let chunk = ShaderChunk[include];
      return chunk ? expandShaderIncludes(chunk) : match;
    }
    return source.replace(pattern, replace);
  }
  function generateUUID2() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut2[d0 & 255] + _lut2[d0 >> 8 & 255] + _lut2[d0 >> 16 & 255] + _lut2[d0 >> 24 & 255] + "-" + _lut2[d1 & 255] + _lut2[d1 >> 8 & 255] + "-" + _lut2[d1 >> 16 & 15 | 64] + _lut2[d1 >> 24 & 255] + "-" + _lut2[d2 & 63 | 128] + _lut2[d2 >> 8 & 255] + "-" + _lut2[d2 >> 16 & 255] + _lut2[d2 >> 24 & 255] + _lut2[d3 & 255] + _lut2[d3 >> 8 & 255] + _lut2[d3 >> 16 & 255] + _lut2[d3 >> 24 & 255];
    return uuid.toUpperCase();
  }
  function createDerivedMaterial(baseMaterial, options) {
    const optionsKey = getKeyForOptions(options);
    let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);
    if (!ctorsByDerivation) {
      CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = /* @__PURE__ */ Object.create(null));
    }
    if (ctorsByDerivation[optionsKey]) {
      return new ctorsByDerivation[optionsKey]();
    }
    const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;
    const onBeforeCompile = function(shaderInfo, renderer) {
      baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);
      const cacheKey = this.customProgramCacheKey() + "|" + shaderInfo.vertexShader + "|" + shaderInfo.fragmentShader;
      let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];
      if (!upgradedShaders) {
        const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);
        upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;
      }
      shaderInfo.vertexShader = upgradedShaders.vertexShader;
      shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
      assign(shaderInfo.uniforms, this.uniforms);
      if (options.timeUniform) {
        shaderInfo.uniforms[options.timeUniform] = {
          get value() {
            return Date.now() - epoch;
          }
        };
      }
      if (this[privateBeforeCompileProp]) {
        this[privateBeforeCompileProp](shaderInfo);
      }
    };
    const DerivedMaterial = function DerivedMaterial2() {
      return derive(options.chained ? baseMaterial : baseMaterial.clone());
    };
    const derive = function(base2) {
      const derived = Object.create(base2, descriptor);
      Object.defineProperty(derived, "baseMaterial", { value: baseMaterial });
      Object.defineProperty(derived, "id", { value: materialInstanceId++ });
      derived.uuid = generateUUID2();
      derived.uniforms = assign({}, base2.uniforms, options.uniforms);
      derived.defines = assign({}, base2.defines, options.defines);
      derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = "";
      derived.extensions = assign({}, base2.extensions, options.extensions);
      derived._listeners = void 0;
      return derived;
    };
    const descriptor = {
      constructor: { value: DerivedMaterial },
      isDerivedMaterial: { value: true },
      customProgramCacheKey: {
        writable: true,
        configurable: true,
        value: function() {
          return baseMaterial.customProgramCacheKey() + "|" + optionsKey;
        }
      },
      onBeforeCompile: {
        get() {
          return onBeforeCompile;
        },
        set(fn) {
          this[privateBeforeCompileProp] = fn;
        }
      },
      copy: {
        writable: true,
        configurable: true,
        value: function(source) {
          baseMaterial.copy.call(this, source);
          if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
            assign(this.extensions, source.extensions);
            assign(this.defines, source.defines);
            assign(this.uniforms, UniformsUtils.clone(source.uniforms));
          }
          return this;
        }
      },
      clone: {
        writable: true,
        configurable: true,
        value: function() {
          const newBase = new baseMaterial.constructor();
          return derive(newBase).copy(this);
        }
      },
      /**
       * Utility to get a MeshDepthMaterial that will honor this derived material's vertex
       * transformations and discarded fragments.
       */
      getDepthMaterial: {
        writable: true,
        configurable: true,
        value: function() {
          let depthMaterial = this._depthMaterial;
          if (!depthMaterial) {
            depthMaterial = this._depthMaterial = createDerivedMaterial(
              baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),
              options
            );
            depthMaterial.defines.IS_DEPTH_MATERIAL = "";
            depthMaterial.uniforms = this.uniforms;
          }
          return depthMaterial;
        }
      },
      /**
       * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex
       * transformations and discarded fragments.
       */
      getDistanceMaterial: {
        writable: true,
        configurable: true,
        value: function() {
          let distanceMaterial = this._distanceMaterial;
          if (!distanceMaterial) {
            distanceMaterial = this._distanceMaterial = createDerivedMaterial(
              baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(),
              options
            );
            distanceMaterial.defines.IS_DISTANCE_MATERIAL = "";
            distanceMaterial.uniforms = this.uniforms;
          }
          return distanceMaterial;
        }
      },
      dispose: {
        writable: true,
        configurable: true,
        value() {
          const { _depthMaterial, _distanceMaterial } = this;
          if (_depthMaterial)
            _depthMaterial.dispose();
          if (_distanceMaterial)
            _distanceMaterial.dispose();
          baseMaterial.dispose.call(this);
        }
      }
    };
    ctorsByDerivation[optionsKey] = DerivedMaterial;
    return new DerivedMaterial();
  }
  function upgradeShaders(material, { vertexShader, fragmentShader }, options, key) {
    let {
      vertexDefs,
      vertexMainIntro,
      vertexMainOutro,
      vertexTransform,
      fragmentDefs,
      fragmentMainIntro,
      fragmentMainOutro,
      fragmentColorTransform,
      customRewriter,
      timeUniform
    } = options;
    vertexDefs = vertexDefs || "";
    vertexMainIntro = vertexMainIntro || "";
    vertexMainOutro = vertexMainOutro || "";
    fragmentDefs = fragmentDefs || "";
    fragmentMainIntro = fragmentMainIntro || "";
    fragmentMainOutro = fragmentMainOutro || "";
    if (vertexTransform || customRewriter) {
      vertexShader = expandShaderIncludes(vertexShader);
    }
    if (fragmentColorTransform || customRewriter) {
      fragmentShader = fragmentShader.replace(
        /^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,
        "\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n"
      );
      fragmentShader = expandShaderIncludes(fragmentShader);
    }
    if (customRewriter) {
      let res = customRewriter({ vertexShader, fragmentShader });
      vertexShader = res.vertexShader;
      fragmentShader = res.fragmentShader;
    }
    if (fragmentColorTransform) {
      let postChunks = [];
      fragmentShader = fragmentShader.replace(
        /^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm,
        // [^]+? = non-greedy match of any chars including newlines
        (match) => {
          postChunks.push(match);
          return "";
        }
      );
      fragmentMainOutro = `${fragmentColorTransform}
${postChunks.join("\n")}
${fragmentMainOutro}`;
    }
    if (timeUniform) {
      const code = `
uniform float ${timeUniform};
`;
      vertexDefs = code + vertexDefs;
      fragmentDefs = code + fragmentDefs;
    }
    if (vertexTransform) {
      vertexShader = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader}
`;
      vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
      vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
      vertexShader = vertexShader.replace(/\b(position|normal|uv)\b/g, (match, match1, index, fullStr) => {
        return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`;
      });
      if (!(material.map && material.map.channel > 0)) {
        vertexShader = vertexShader.replace(/\bMAP_UV\b/g, `troika_uv_${key}`);
      }
    }
    vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);
    fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);
    return {
      vertexShader,
      fragmentShader
    };
  }
  function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {
    if (intro || outro || defs) {
      shaderCode = shaderCode.replace(
        voidMainRegExp,
        `
${defs}
void troikaOrigMain${id}() {`
      );
      shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
    }
    return shaderCode;
  }
  function optionsJsonReplacer(key, value) {
    return key === "uniforms" ? void 0 : typeof value === "function" ? value.toString() : value;
  }
  function getKeyForOptions(options) {
    const optionsHash = JSON.stringify(options, optionsJsonReplacer);
    let id = optionsHashesToIds.get(optionsHash);
    if (id == null) {
      optionsHashesToIds.set(optionsHash, id = ++_idCtr);
    }
    return id;
  }
  var voidMainRegExp, _lut2, assign, epoch, CONSTRUCTOR_CACHE, SHADER_UPGRADE_CACHE, materialInstanceId, _idCtr, optionsHashesToIds;
  var init_troika_three_utils_esm = __esm({
    "node_modules/troika-three-utils/dist/troika-three-utils.esm.js"() {
      init_three_module();
      voidMainRegExp = /\bvoid\s+main\s*\(\s*\)\s*{/g;
      _lut2 = [];
      for (let i = 0; i < 256; i++) {
        _lut2[i] = (i < 16 ? "0" : "") + i.toString(16);
      }
      assign = Object.assign || function() {
        let target2 = arguments[0];
        for (let i = 1, len = arguments.length; i < len; i++) {
          let source = arguments[i];
          if (source) {
            for (let prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                target2[prop] = source[prop];
              }
            }
          }
        }
        return target2;
      };
      epoch = Date.now();
      CONSTRUCTOR_CACHE = /* @__PURE__ */ new WeakMap();
      SHADER_UPGRADE_CACHE = /* @__PURE__ */ new Map();
      materialInstanceId = 1e10;
      _idCtr = 0;
      optionsHashesToIds = /* @__PURE__ */ new Map();
    }
  });

  // node_modules/troika-three-text/dist/troika-three-text.esm.js
  var troika_three_text_esm_exports = {};
  __export(troika_three_text_esm_exports, {
    GlyphsGeometry: () => GlyphsGeometry,
    Text: () => Text,
    configureTextBuilder: () => configureTextBuilder,
    createTextDerivedMaterial: () => createTextDerivedMaterial,
    dumpSDFTextures: () => dumpSDFTextures,
    fontResolverWorkerModule: () => fontResolverWorkerModule,
    getCaretAtPoint: () => getCaretAtPoint,
    getSelectionRects: () => getSelectionRects,
    getTextRenderInfo: () => getTextRenderInfo,
    preloadFont: () => preloadFont,
    typesetterWorkerModule: () => typesetterWorkerModule
  });
  function typrFactory() {
    return "undefined" == typeof window && (self.window = self), function(r) {
      var e = { parse: function(r2) {
        var t2 = e._bin, a2 = new Uint8Array(r2);
        if ("ttcf" == t2.readASCII(a2, 0, 4)) {
          var n = 4;
          t2.readUshort(a2, n), n += 2, t2.readUshort(a2, n), n += 2;
          var o = t2.readUint(a2, n);
          n += 4;
          for (var s = [], i = 0; i < o; i++) {
            var h = t2.readUint(a2, n);
            n += 4, s.push(e._readFont(a2, h));
          }
          return s;
        }
        return [e._readFont(a2, 0)];
      }, _readFont: function(r2, t2) {
        var a2 = e._bin, n = t2;
        a2.readFixed(r2, t2), t2 += 4;
        var o = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2;
        for (var s = ["cmap", "head", "hhea", "maxp", "hmtx", "name", "OS/2", "post", "loca", "glyf", "kern", "CFF ", "GPOS", "GSUB", "SVG "], i = { _data: r2, _offset: n }, h = {}, f = 0; f < o; f++) {
          var d = a2.readASCII(r2, t2, 4);
          t2 += 4, a2.readUint(r2, t2), t2 += 4;
          var u = a2.readUint(r2, t2);
          t2 += 4;
          var l = a2.readUint(r2, t2);
          t2 += 4, h[d] = { offset: u, length: l };
        }
        for (f = 0; f < s.length; f++) {
          var v = s[f];
          h[v] && (i[v.trim()] = e[v.trim()].parse(r2, h[v].offset, h[v].length, i));
        }
        return i;
      }, _tabOffset: function(r2, t2, a2) {
        for (var n = e._bin, o = n.readUshort(r2, a2 + 4), s = a2 + 12, i = 0; i < o; i++) {
          var h = n.readASCII(r2, s, 4);
          s += 4, n.readUint(r2, s), s += 4;
          var f = n.readUint(r2, s);
          if (s += 4, n.readUint(r2, s), s += 4, h == t2)
            return f;
        }
        return 0;
      } };
      e._bin = { readFixed: function(r2, e2) {
        return (r2[e2] << 8 | r2[e2 + 1]) + (r2[e2 + 2] << 8 | r2[e2 + 3]) / 65540;
      }, readF2dot14: function(r2, t2) {
        return e._bin.readShort(r2, t2) / 16384;
      }, readInt: function(r2, t2) {
        return e._bin._view(r2).getInt32(t2);
      }, readInt8: function(r2, t2) {
        return e._bin._view(r2).getInt8(t2);
      }, readShort: function(r2, t2) {
        return e._bin._view(r2).getInt16(t2);
      }, readUshort: function(r2, t2) {
        return e._bin._view(r2).getUint16(t2);
      }, readUshorts: function(r2, t2, a2) {
        for (var n = [], o = 0; o < a2; o++)
          n.push(e._bin.readUshort(r2, t2 + 2 * o));
        return n;
      }, readUint: function(r2, t2) {
        return e._bin._view(r2).getUint32(t2);
      }, readUint64: function(r2, t2) {
        return 4294967296 * e._bin.readUint(r2, t2) + e._bin.readUint(r2, t2 + 4);
      }, readASCII: function(r2, e2, t2) {
        for (var a2 = "", n = 0; n < t2; n++)
          a2 += String.fromCharCode(r2[e2 + n]);
        return a2;
      }, readUnicode: function(r2, e2, t2) {
        for (var a2 = "", n = 0; n < t2; n++) {
          var o = r2[e2++] << 8 | r2[e2++];
          a2 += String.fromCharCode(o);
        }
        return a2;
      }, _tdec: "undefined" != typeof window && window.TextDecoder ? new window.TextDecoder() : null, readUTF8: function(r2, t2, a2) {
        var n = e._bin._tdec;
        return n && 0 == t2 && a2 == r2.length ? n.decode(r2) : e._bin.readASCII(r2, t2, a2);
      }, readBytes: function(r2, e2, t2) {
        for (var a2 = [], n = 0; n < t2; n++)
          a2.push(r2[e2 + n]);
        return a2;
      }, readASCIIArray: function(r2, e2, t2) {
        for (var a2 = [], n = 0; n < t2; n++)
          a2.push(String.fromCharCode(r2[e2 + n]));
        return a2;
      }, _view: function(r2) {
        return r2._dataView || (r2._dataView = r2.buffer ? new DataView(r2.buffer, r2.byteOffset, r2.byteLength) : new DataView(new Uint8Array(r2).buffer));
      } }, e._lctf = {}, e._lctf.parse = function(r2, t2, a2, n, o) {
        var s = e._bin, i = {}, h = t2;
        s.readFixed(r2, t2), t2 += 4;
        var f = s.readUshort(r2, t2);
        t2 += 2;
        var d = s.readUshort(r2, t2);
        t2 += 2;
        var u = s.readUshort(r2, t2);
        return t2 += 2, i.scriptList = e._lctf.readScriptList(r2, h + f), i.featureList = e._lctf.readFeatureList(r2, h + d), i.lookupList = e._lctf.readLookupList(r2, h + u, o), i;
      }, e._lctf.readLookupList = function(r2, t2, a2) {
        var n = e._bin, o = t2, s = [], i = n.readUshort(r2, t2);
        t2 += 2;
        for (var h = 0; h < i; h++) {
          var f = n.readUshort(r2, t2);
          t2 += 2;
          var d = e._lctf.readLookupTable(r2, o + f, a2);
          s.push(d);
        }
        return s;
      }, e._lctf.readLookupTable = function(r2, t2, a2) {
        var n = e._bin, o = t2, s = { tabs: [] };
        s.ltype = n.readUshort(r2, t2), t2 += 2, s.flag = n.readUshort(r2, t2), t2 += 2;
        var i = n.readUshort(r2, t2);
        t2 += 2;
        for (var h = s.ltype, f = 0; f < i; f++) {
          var d = n.readUshort(r2, t2);
          t2 += 2;
          var u = a2(r2, h, o + d, s);
          s.tabs.push(u);
        }
        return s;
      }, e._lctf.numOfOnes = function(r2) {
        for (var e2 = 0, t2 = 0; t2 < 32; t2++)
          0 != (r2 >>> t2 & 1) && e2++;
        return e2;
      }, e._lctf.readClassDef = function(r2, t2) {
        var a2 = e._bin, n = [], o = a2.readUshort(r2, t2);
        if (t2 += 2, 1 == o) {
          var s = a2.readUshort(r2, t2);
          t2 += 2;
          var i = a2.readUshort(r2, t2);
          t2 += 2;
          for (var h = 0; h < i; h++)
            n.push(s + h), n.push(s + h), n.push(a2.readUshort(r2, t2)), t2 += 2;
        }
        if (2 == o) {
          var f = a2.readUshort(r2, t2);
          t2 += 2;
          for (h = 0; h < f; h++)
            n.push(a2.readUshort(r2, t2)), t2 += 2, n.push(a2.readUshort(r2, t2)), t2 += 2, n.push(a2.readUshort(r2, t2)), t2 += 2;
        }
        return n;
      }, e._lctf.getInterval = function(r2, e2) {
        for (var t2 = 0; t2 < r2.length; t2 += 3) {
          var a2 = r2[t2], n = r2[t2 + 1];
          if (r2[t2 + 2], a2 <= e2 && e2 <= n)
            return t2;
        }
        return -1;
      }, e._lctf.readCoverage = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.fmt = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        return t2 += 2, 1 == n.fmt && (n.tab = a2.readUshorts(r2, t2, o)), 2 == n.fmt && (n.tab = a2.readUshorts(r2, t2, 3 * o)), n;
      }, e._lctf.coverageIndex = function(r2, t2) {
        var a2 = r2.tab;
        if (1 == r2.fmt)
          return a2.indexOf(t2);
        if (2 == r2.fmt) {
          var n = e._lctf.getInterval(a2, t2);
          if (-1 != n)
            return a2[n + 2] + (t2 - a2[n]);
        }
        return -1;
      }, e._lctf.readFeatureList = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var f = a2.readUshort(r2, t2);
          t2 += 2;
          var d = e._lctf.readFeatureTable(r2, n + f);
          d.tag = h.trim(), o.push(d);
        }
        return o;
      }, e._lctf.readFeatureTable = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2, s > 0 && (o.featureParams = n + s);
        var i = a2.readUshort(r2, t2);
        t2 += 2, o.tab = [];
        for (var h = 0; h < i; h++)
          o.tab.push(a2.readUshort(r2, t2 + 2 * h));
        return o;
      }, e._lctf.readScriptList = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var f = a2.readUshort(r2, t2);
          t2 += 2, o[h.trim()] = e._lctf.readScriptTable(r2, n + f);
        }
        return o;
      }, e._lctf.readScriptTable = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {}, s = a2.readUshort(r2, t2);
        t2 += 2, s > 0 && (o.default = e._lctf.readLangSysTable(r2, n + s));
        var i = a2.readUshort(r2, t2);
        t2 += 2;
        for (var h = 0; h < i; h++) {
          var f = a2.readASCII(r2, t2, 4);
          t2 += 4;
          var d = a2.readUshort(r2, t2);
          t2 += 2, o[f.trim()] = e._lctf.readLangSysTable(r2, n + d);
        }
        return o;
      }, e._lctf.readLangSysTable = function(r2, t2) {
        var a2 = e._bin, n = {};
        a2.readUshort(r2, t2), t2 += 2, n.reqFeature = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        return t2 += 2, n.features = a2.readUshorts(r2, t2, o), n;
      }, e.CFF = {}, e.CFF.parse = function(r2, t2, a2) {
        var n = e._bin;
        (r2 = new Uint8Array(r2.buffer, t2, a2))[t2 = 0], r2[++t2], r2[++t2], r2[++t2], t2++;
        var o = [];
        t2 = e.CFF.readIndex(r2, t2, o);
        for (var s = [], i = 0; i < o.length - 1; i++)
          s.push(n.readASCII(r2, t2 + o[i], o[i + 1] - o[i]));
        t2 += o[o.length - 1];
        var h = [];
        t2 = e.CFF.readIndex(r2, t2, h);
        var f = [];
        for (i = 0; i < h.length - 1; i++)
          f.push(e.CFF.readDict(r2, t2 + h[i], t2 + h[i + 1]));
        t2 += h[h.length - 1];
        var d = f[0], u = [];
        t2 = e.CFF.readIndex(r2, t2, u);
        var l = [];
        for (i = 0; i < u.length - 1; i++)
          l.push(n.readASCII(r2, t2 + u[i], u[i + 1] - u[i]));
        if (t2 += u[u.length - 1], e.CFF.readSubrs(r2, t2, d), d.CharStrings) {
          t2 = d.CharStrings;
          u = [];
          t2 = e.CFF.readIndex(r2, t2, u);
          var v = [];
          for (i = 0; i < u.length - 1; i++)
            v.push(n.readBytes(r2, t2 + u[i], u[i + 1] - u[i]));
          d.CharStrings = v;
        }
        if (d.ROS) {
          t2 = d.FDArray;
          var c = [];
          t2 = e.CFF.readIndex(r2, t2, c), d.FDArray = [];
          for (i = 0; i < c.length - 1; i++) {
            var p = e.CFF.readDict(r2, t2 + c[i], t2 + c[i + 1]);
            e.CFF._readFDict(r2, p, l), d.FDArray.push(p);
          }
          t2 += c[c.length - 1], t2 = d.FDSelect, d.FDSelect = [];
          var U = r2[t2];
          if (t2++, 3 != U)
            throw U;
          var g = n.readUshort(r2, t2);
          t2 += 2;
          for (i = 0; i < g + 1; i++)
            d.FDSelect.push(n.readUshort(r2, t2), r2[t2 + 2]), t2 += 3;
        }
        return d.Encoding && (d.Encoding = e.CFF.readEncoding(r2, d.Encoding, d.CharStrings.length)), d.charset && (d.charset = e.CFF.readCharset(r2, d.charset, d.CharStrings.length)), e.CFF._readFDict(r2, d, l), d;
      }, e.CFF._readFDict = function(r2, t2, a2) {
        var n;
        for (var o in t2.Private && (n = t2.Private[1], t2.Private = e.CFF.readDict(r2, n, n + t2.Private[0]), t2.Private.Subrs && e.CFF.readSubrs(r2, n + t2.Private.Subrs, t2.Private)), t2)
          -1 != ["FamilyName", "FontName", "FullName", "Notice", "version", "Copyright"].indexOf(o) && (t2[o] = a2[t2[o] - 426 + 35]);
      }, e.CFF.readSubrs = function(r2, t2, a2) {
        var n = e._bin, o = [];
        t2 = e.CFF.readIndex(r2, t2, o);
        var s, i = o.length;
        s = i < 1240 ? 107 : i < 33900 ? 1131 : 32768, a2.Bias = s, a2.Subrs = [];
        for (var h = 0; h < o.length - 1; h++)
          a2.Subrs.push(n.readBytes(r2, t2 + o[h], o[h + 1] - o[h]));
      }, e.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0], e.CFF.glyphByUnicode = function(r2, e2) {
        for (var t2 = 0; t2 < r2.charset.length; t2++)
          if (r2.charset[t2] == e2)
            return t2;
        return -1;
      }, e.CFF.glyphBySE = function(r2, t2) {
        return t2 < 0 || t2 > 255 ? -1 : e.CFF.glyphByUnicode(r2, e.CFF.tableSE[t2]);
      }, e.CFF.readEncoding = function(r2, t2, a2) {
        e._bin;
        var n = [".notdef"], o = r2[t2];
        if (t2++, 0 != o)
          throw "error: unknown encoding format: " + o;
        var s = r2[t2];
        t2++;
        for (var i = 0; i < s; i++)
          n.push(r2[t2 + i]);
        return n;
      }, e.CFF.readCharset = function(r2, t2, a2) {
        var n = e._bin, o = [".notdef"], s = r2[t2];
        if (t2++, 0 == s)
          for (var i = 0; i < a2; i++) {
            var h = n.readUshort(r2, t2);
            t2 += 2, o.push(h);
          }
        else {
          if (1 != s && 2 != s)
            throw "error: format: " + s;
          for (; o.length < a2; ) {
            h = n.readUshort(r2, t2);
            t2 += 2;
            var f = 0;
            1 == s ? (f = r2[t2], t2++) : (f = n.readUshort(r2, t2), t2 += 2);
            for (i = 0; i <= f; i++)
              o.push(h), h++;
          }
        }
        return o;
      }, e.CFF.readIndex = function(r2, t2, a2) {
        var n = e._bin, o = n.readUshort(r2, t2) + 1, s = r2[t2 += 2];
        if (t2++, 1 == s)
          for (var i = 0; i < o; i++)
            a2.push(r2[t2 + i]);
        else if (2 == s)
          for (i = 0; i < o; i++)
            a2.push(n.readUshort(r2, t2 + 2 * i));
        else if (3 == s)
          for (i = 0; i < o; i++)
            a2.push(16777215 & n.readUint(r2, t2 + 3 * i - 1));
        else if (1 != o)
          throw "unsupported offset size: " + s + ", count: " + o;
        return (t2 += o * s) - 1;
      }, e.CFF.getCharString = function(r2, t2, a2) {
        var n = e._bin, o = r2[t2], s = r2[t2 + 1];
        r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
        var i = 1, h = null, f = null;
        o <= 20 && (h = o, i = 1), 12 == o && (h = 100 * o + s, i = 2), 21 <= o && o <= 27 && (h = o, i = 1), 28 == o && (f = n.readShort(r2, t2 + 1), i = 3), 29 <= o && o <= 31 && (h = o, i = 1), 32 <= o && o <= 246 && (f = o - 139, i = 1), 247 <= o && o <= 250 && (f = 256 * (o - 247) + s + 108, i = 2), 251 <= o && o <= 254 && (f = 256 * -(o - 251) - s - 108, i = 2), 255 == o && (f = n.readInt(r2, t2 + 1) / 65535, i = 5), a2.val = null != f ? f : "o" + h, a2.size = i;
      }, e.CFF.readCharString = function(r2, t2, a2) {
        for (var n = t2 + a2, o = e._bin, s = []; t2 < n; ) {
          var i = r2[t2], h = r2[t2 + 1];
          r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
          var f = 1, d = null, u = null;
          i <= 20 && (d = i, f = 1), 12 == i && (d = 100 * i + h, f = 2), 19 != i && 20 != i || (d = i, f = 2), 21 <= i && i <= 27 && (d = i, f = 1), 28 == i && (u = o.readShort(r2, t2 + 1), f = 3), 29 <= i && i <= 31 && (d = i, f = 1), 32 <= i && i <= 246 && (u = i - 139, f = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, f = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, f = 2), 255 == i && (u = o.readInt(r2, t2 + 1) / 65535, f = 5), s.push(null != u ? u : "o" + d), t2 += f;
        }
        return s;
      }, e.CFF.readDict = function(r2, t2, a2) {
        for (var n = e._bin, o = {}, s = []; t2 < a2; ) {
          var i = r2[t2], h = r2[t2 + 1];
          r2[t2 + 2], r2[t2 + 3], r2[t2 + 4];
          var f = 1, d = null, u = null;
          if (28 == i && (u = n.readShort(r2, t2 + 1), f = 3), 29 == i && (u = n.readInt(r2, t2 + 1), f = 5), 32 <= i && i <= 246 && (u = i - 139, f = 1), 247 <= i && i <= 250 && (u = 256 * (i - 247) + h + 108, f = 2), 251 <= i && i <= 254 && (u = 256 * -(i - 251) - h - 108, f = 2), 255 == i)
            throw u = n.readInt(r2, t2 + 1) / 65535, f = 5, "unknown number";
          if (30 == i) {
            var l = [];
            for (f = 1; ; ) {
              var v = r2[t2 + f];
              f++;
              var c = v >> 4, p = 15 & v;
              if (15 != c && l.push(c), 15 != p && l.push(p), 15 == p)
                break;
            }
            for (var U = "", g = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"], S = 0; S < l.length; S++)
              U += g[l[S]];
            u = parseFloat(U);
          }
          if (i <= 21) {
            if (d = ["version", "Notice", "FullName", "FamilyName", "Weight", "FontBBox", "BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StdHW", "StdVW", "escape", "UniqueID", "XUID", "charset", "Encoding", "CharStrings", "Private", "Subrs", "defaultWidthX", "nominalWidthX"][i], f = 1, 12 == i)
              d = ["Copyright", "isFixedPitch", "ItalicAngle", "UnderlinePosition", "UnderlineThickness", "PaintType", "CharstringType", "FontMatrix", "StrokeWidth", "BlueScale", "BlueShift", "BlueFuzz", "StemSnapH", "StemSnapV", "ForceBold", 0, 0, "LanguageGroup", "ExpansionFactor", "initialRandomSeed", "SyntheticBase", "PostScript", "BaseFontName", "BaseFontBlend", 0, 0, 0, 0, 0, 0, "ROS", "CIDFontVersion", "CIDFontRevision", "CIDFontType", "CIDCount", "UIDBase", "FDArray", "FDSelect", "FontName"][h], f = 2;
          }
          null != d ? (o[d] = 1 == s.length ? s[0] : s, s = []) : s.push(u), t2 += f;
        }
        return o;
      }, e.cmap = {}, e.cmap.parse = function(r2, t2, a2) {
        r2 = new Uint8Array(r2.buffer, t2, a2), t2 = 0;
        var n = e._bin, o = {};
        n.readUshort(r2, t2), t2 += 2;
        var s = n.readUshort(r2, t2);
        t2 += 2;
        var i = [];
        o.tables = [];
        for (var h = 0; h < s; h++) {
          var f = n.readUshort(r2, t2);
          t2 += 2;
          var d = n.readUshort(r2, t2);
          t2 += 2;
          var u = n.readUint(r2, t2);
          t2 += 4;
          var l = "p" + f + "e" + d, v = i.indexOf(u);
          if (-1 == v) {
            var c;
            v = o.tables.length, i.push(u);
            var p = n.readUshort(r2, u);
            0 == p ? c = e.cmap.parse0(r2, u) : 4 == p ? c = e.cmap.parse4(r2, u) : 6 == p ? c = e.cmap.parse6(r2, u) : 12 == p ? c = e.cmap.parse12(r2, u) : console.debug("unknown format: " + p, f, d, u), o.tables.push(c);
          }
          if (null != o[l])
            throw "multiple tables for one platform+encoding";
          o[l] = v;
        }
        return o;
      }, e.cmap.parse0 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2, n.map = [];
        for (var s = 0; s < o - 6; s++)
          n.map.push(r2[t2 + s]);
        return n;
      }, e.cmap.parse4 = function(r2, t2) {
        var a2 = e._bin, n = t2, o = {};
        o.format = a2.readUshort(r2, t2), t2 += 2;
        var s = a2.readUshort(r2, t2);
        t2 += 2, a2.readUshort(r2, t2), t2 += 2;
        var i = a2.readUshort(r2, t2);
        t2 += 2;
        var h = i / 2;
        o.searchRange = a2.readUshort(r2, t2), t2 += 2, o.entrySelector = a2.readUshort(r2, t2), t2 += 2, o.rangeShift = a2.readUshort(r2, t2), t2 += 2, o.endCount = a2.readUshorts(r2, t2, h), t2 += 2 * h, t2 += 2, o.startCount = a2.readUshorts(r2, t2, h), t2 += 2 * h, o.idDelta = [];
        for (var f = 0; f < h; f++)
          o.idDelta.push(a2.readShort(r2, t2)), t2 += 2;
        for (o.idRangeOffset = a2.readUshorts(r2, t2, h), t2 += 2 * h, o.glyphIdArray = []; t2 < n + s; )
          o.glyphIdArray.push(a2.readUshort(r2, t2)), t2 += 2;
        return o;
      }, e.cmap.parse6 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, a2.readUshort(r2, t2), t2 += 2, n.firstCode = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2, n.glyphIdArray = [];
        for (var s = 0; s < o; s++)
          n.glyphIdArray.push(a2.readUshort(r2, t2)), t2 += 2;
        return n;
      }, e.cmap.parse12 = function(r2, t2) {
        var a2 = e._bin, n = {};
        n.format = a2.readUshort(r2, t2), t2 += 2, t2 += 2, a2.readUint(r2, t2), t2 += 4, a2.readUint(r2, t2), t2 += 4;
        var o = a2.readUint(r2, t2);
        t2 += 4, n.groups = [];
        for (var s = 0; s < o; s++) {
          var i = t2 + 12 * s, h = a2.readUint(r2, i + 0), f = a2.readUint(r2, i + 4), d = a2.readUint(r2, i + 8);
          n.groups.push([h, f, d]);
        }
        return n;
      }, e.glyf = {}, e.glyf.parse = function(r2, e2, t2, a2) {
        for (var n = [], o = 0; o < a2.maxp.numGlyphs; o++)
          n.push(null);
        return n;
      }, e.glyf._parseGlyf = function(r2, t2) {
        var a2 = e._bin, n = r2._data, o = e._tabOffset(n, "glyf", r2._offset) + r2.loca[t2];
        if (r2.loca[t2] == r2.loca[t2 + 1])
          return null;
        var s = {};
        if (s.noc = a2.readShort(n, o), o += 2, s.xMin = a2.readShort(n, o), o += 2, s.yMin = a2.readShort(n, o), o += 2, s.xMax = a2.readShort(n, o), o += 2, s.yMax = a2.readShort(n, o), o += 2, s.xMin >= s.xMax || s.yMin >= s.yMax)
          return null;
        if (s.noc > 0) {
          s.endPts = [];
          for (var i = 0; i < s.noc; i++)
            s.endPts.push(a2.readUshort(n, o)), o += 2;
          var h = a2.readUshort(n, o);
          if (o += 2, n.length - o < h)
            return null;
          s.instructions = a2.readBytes(n, o, h), o += h;
          var f = s.endPts[s.noc - 1] + 1;
          s.flags = [];
          for (i = 0; i < f; i++) {
            var d = n[o];
            if (o++, s.flags.push(d), 0 != (8 & d)) {
              var u = n[o];
              o++;
              for (var l = 0; l < u; l++)
                s.flags.push(d), i++;
            }
          }
          s.xs = [];
          for (i = 0; i < f; i++) {
            var v = 0 != (2 & s.flags[i]), c = 0 != (16 & s.flags[i]);
            v ? (s.xs.push(c ? n[o] : -n[o]), o++) : c ? s.xs.push(0) : (s.xs.push(a2.readShort(n, o)), o += 2);
          }
          s.ys = [];
          for (i = 0; i < f; i++) {
            v = 0 != (4 & s.flags[i]), c = 0 != (32 & s.flags[i]);
            v ? (s.ys.push(c ? n[o] : -n[o]), o++) : c ? s.ys.push(0) : (s.ys.push(a2.readShort(n, o)), o += 2);
          }
          var p = 0, U = 0;
          for (i = 0; i < f; i++)
            p += s.xs[i], U += s.ys[i], s.xs[i] = p, s.ys[i] = U;
        } else {
          var g;
          s.parts = [];
          do {
            g = a2.readUshort(n, o), o += 2;
            var S = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 };
            if (s.parts.push(S), S.glyphIndex = a2.readUshort(n, o), o += 2, 1 & g) {
              var m = a2.readShort(n, o);
              o += 2;
              var b = a2.readShort(n, o);
              o += 2;
            } else {
              m = a2.readInt8(n, o);
              o++;
              b = a2.readInt8(n, o);
              o++;
            }
            2 & g ? (S.m.tx = m, S.m.ty = b) : (S.p1 = m, S.p2 = b), 8 & g ? (S.m.a = S.m.d = a2.readF2dot14(n, o), o += 2) : 64 & g ? (S.m.a = a2.readF2dot14(n, o), o += 2, S.m.d = a2.readF2dot14(n, o), o += 2) : 128 & g && (S.m.a = a2.readF2dot14(n, o), o += 2, S.m.b = a2.readF2dot14(n, o), o += 2, S.m.c = a2.readF2dot14(n, o), o += 2, S.m.d = a2.readF2dot14(n, o), o += 2);
          } while (32 & g);
          if (256 & g) {
            var y = a2.readUshort(n, o);
            o += 2, s.instr = [];
            for (i = 0; i < y; i++)
              s.instr.push(n[o]), o++;
          }
        }
        return s;
      }, e.GPOS = {}, e.GPOS.parse = function(r2, t2, a2, n) {
        return e._lctf.parse(r2, t2, a2, n, e.GPOS.subt);
      }, e.GPOS.subt = function(r2, t2, a2, n) {
        var o = e._bin, s = a2, i = {};
        if (i.fmt = o.readUshort(r2, a2), a2 += 2, 1 == t2 || 2 == t2 || 3 == t2 || 7 == t2 || 8 == t2 && i.fmt <= 2) {
          var h = o.readUshort(r2, a2);
          a2 += 2, i.coverage = e._lctf.readCoverage(r2, h + s);
        }
        if (1 == t2 && 1 == i.fmt) {
          var f = o.readUshort(r2, a2);
          a2 += 2;
          var d = e._lctf.numOfOnes(f);
          0 != f && (i.pos = e.GPOS.readValueRecord(r2, a2, f));
        } else if (2 == t2 && i.fmt >= 1 && i.fmt <= 2) {
          f = o.readUshort(r2, a2);
          a2 += 2;
          var u = o.readUshort(r2, a2);
          a2 += 2;
          d = e._lctf.numOfOnes(f);
          var l = e._lctf.numOfOnes(u);
          if (1 == i.fmt) {
            i.pairsets = [];
            var v = o.readUshort(r2, a2);
            a2 += 2;
            for (var c = 0; c < v; c++) {
              var p = s + o.readUshort(r2, a2);
              a2 += 2;
              var U = o.readUshort(r2, p);
              p += 2;
              for (var g = [], S = 0; S < U; S++) {
                var m = o.readUshort(r2, p);
                p += 2, 0 != f && (x = e.GPOS.readValueRecord(r2, p, f), p += 2 * d), 0 != u && (P = e.GPOS.readValueRecord(r2, p, u), p += 2 * l), g.push({ gid2: m, val1: x, val2: P });
              }
              i.pairsets.push(g);
            }
          }
          if (2 == i.fmt) {
            var b = o.readUshort(r2, a2);
            a2 += 2;
            var y = o.readUshort(r2, a2);
            a2 += 2;
            var F = o.readUshort(r2, a2);
            a2 += 2;
            var _ = o.readUshort(r2, a2);
            a2 += 2, i.classDef1 = e._lctf.readClassDef(r2, s + b), i.classDef2 = e._lctf.readClassDef(r2, s + y), i.matrix = [];
            for (c = 0; c < F; c++) {
              var C = [];
              for (S = 0; S < _; S++) {
                var x = null, P = null;
                0 != f && (x = e.GPOS.readValueRecord(r2, a2, f), a2 += 2 * d), 0 != u && (P = e.GPOS.readValueRecord(r2, a2, u), a2 += 2 * l), C.push({ val1: x, val2: P });
              }
              i.matrix.push(C);
            }
          }
        } else {
          if (9 == t2 && 1 == i.fmt) {
            var I = o.readUshort(r2, a2);
            a2 += 2;
            var w = o.readUint(r2, a2);
            if (a2 += 4, 9 == n.ltype)
              n.ltype = I;
            else if (n.ltype != I)
              throw "invalid extension substitution";
            return e.GPOS.subt(r2, n.ltype, s + w);
          }
          console.debug("unsupported GPOS table LookupType", t2, "format", i.fmt);
        }
        return i;
      }, e.GPOS.readValueRecord = function(r2, t2, a2) {
        var n = e._bin, o = [];
        return o.push(1 & a2 ? n.readShort(r2, t2) : 0), t2 += 1 & a2 ? 2 : 0, o.push(2 & a2 ? n.readShort(r2, t2) : 0), t2 += 2 & a2 ? 2 : 0, o.push(4 & a2 ? n.readShort(r2, t2) : 0), t2 += 4 & a2 ? 2 : 0, o.push(8 & a2 ? n.readShort(r2, t2) : 0), t2 += 8 & a2 ? 2 : 0, o;
      }, e.GSUB = {}, e.GSUB.parse = function(r2, t2, a2, n) {
        return e._lctf.parse(r2, t2, a2, n, e.GSUB.subt);
      }, e.GSUB.subt = function(r2, t2, a2, n) {
        var o = e._bin, s = a2, i = {};
        if (i.fmt = o.readUshort(r2, a2), a2 += 2, 1 != t2 && 4 != t2 && 5 != t2 && 6 != t2)
          return null;
        if (1 == t2 || 4 == t2 || 5 == t2 && i.fmt <= 2 || 6 == t2 && i.fmt <= 2) {
          var h = o.readUshort(r2, a2);
          a2 += 2, i.coverage = e._lctf.readCoverage(r2, s + h);
        }
        if (1 == t2 && i.fmt >= 1 && i.fmt <= 2) {
          if (1 == i.fmt)
            i.delta = o.readShort(r2, a2), a2 += 2;
          else if (2 == i.fmt) {
            var f = o.readUshort(r2, a2);
            a2 += 2, i.newg = o.readUshorts(r2, a2, f), a2 += 2 * i.newg.length;
          }
        } else if (4 == t2) {
          i.vals = [];
          f = o.readUshort(r2, a2);
          a2 += 2;
          for (var d = 0; d < f; d++) {
            var u = o.readUshort(r2, a2);
            a2 += 2, i.vals.push(e.GSUB.readLigatureSet(r2, s + u));
          }
        } else if (5 == t2 && 2 == i.fmt) {
          if (2 == i.fmt) {
            var l = o.readUshort(r2, a2);
            a2 += 2, i.cDef = e._lctf.readClassDef(r2, s + l), i.scset = [];
            var v = o.readUshort(r2, a2);
            a2 += 2;
            for (d = 0; d < v; d++) {
              var c = o.readUshort(r2, a2);
              a2 += 2, i.scset.push(0 == c ? null : e.GSUB.readSubClassSet(r2, s + c));
            }
          }
        } else if (6 == t2 && 3 == i.fmt) {
          if (3 == i.fmt) {
            for (d = 0; d < 3; d++) {
              f = o.readUshort(r2, a2);
              a2 += 2;
              for (var p = [], U = 0; U < f; U++)
                p.push(e._lctf.readCoverage(r2, s + o.readUshort(r2, a2 + 2 * U)));
              a2 += 2 * f, 0 == d && (i.backCvg = p), 1 == d && (i.inptCvg = p), 2 == d && (i.ahedCvg = p);
            }
            f = o.readUshort(r2, a2);
            a2 += 2, i.lookupRec = e.GSUB.readSubstLookupRecords(r2, a2, f);
          }
        } else {
          if (7 == t2 && 1 == i.fmt) {
            var g = o.readUshort(r2, a2);
            a2 += 2;
            var S = o.readUint(r2, a2);
            if (a2 += 4, 9 == n.ltype)
              n.ltype = g;
            else if (n.ltype != g)
              throw "invalid extension substitution";
            return e.GSUB.subt(r2, n.ltype, s + S);
          }
          console.debug("unsupported GSUB table LookupType", t2, "format", i.fmt);
        }
        return i;
      }, e.GSUB.readSubClassSet = function(r2, t2) {
        var a2 = e._bin.readUshort, n = t2, o = [], s = a2(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2(r2, t2);
          t2 += 2, o.push(e.GSUB.readSubClassRule(r2, n + h));
        }
        return o;
      }, e.GSUB.readSubClassRule = function(r2, t2) {
        var a2 = e._bin.readUshort, n = {}, o = a2(r2, t2), s = a2(r2, t2 += 2);
        t2 += 2, n.input = [];
        for (var i = 0; i < o - 1; i++)
          n.input.push(a2(r2, t2)), t2 += 2;
        return n.substLookupRecords = e.GSUB.readSubstLookupRecords(r2, t2, s), n;
      }, e.GSUB.readSubstLookupRecords = function(r2, t2, a2) {
        for (var n = e._bin.readUshort, o = [], s = 0; s < a2; s++)
          o.push(n(r2, t2), n(r2, t2 + 2)), t2 += 4;
        return o;
      }, e.GSUB.readChainSubClassSet = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readUshort(r2, t2);
          t2 += 2, o.push(e.GSUB.readChainSubClassRule(r2, n + h));
        }
        return o;
      }, e.GSUB.readChainSubClassRule = function(r2, t2) {
        for (var a2 = e._bin, n = {}, o = ["backtrack", "input", "lookahead"], s = 0; s < o.length; s++) {
          var i = a2.readUshort(r2, t2);
          t2 += 2, 1 == s && i--, n[o[s]] = a2.readUshorts(r2, t2, i), t2 += 2 * n[o[s]].length;
        }
        i = a2.readUshort(r2, t2);
        return t2 += 2, n.subst = a2.readUshorts(r2, t2, 2 * i), t2 += 2 * n.subst.length, n;
      }, e.GSUB.readLigatureSet = function(r2, t2) {
        var a2 = e._bin, n = t2, o = [], s = a2.readUshort(r2, t2);
        t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = a2.readUshort(r2, t2);
          t2 += 2, o.push(e.GSUB.readLigature(r2, n + h));
        }
        return o;
      }, e.GSUB.readLigature = function(r2, t2) {
        var a2 = e._bin, n = { chain: [] };
        n.nglyph = a2.readUshort(r2, t2), t2 += 2;
        var o = a2.readUshort(r2, t2);
        t2 += 2;
        for (var s = 0; s < o - 1; s++)
          n.chain.push(a2.readUshort(r2, t2)), t2 += 2;
        return n;
      }, e.head = {}, e.head.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return n.readFixed(r2, t2), t2 += 4, o.fontRevision = n.readFixed(r2, t2), t2 += 4, n.readUint(r2, t2), t2 += 4, n.readUint(r2, t2), t2 += 4, o.flags = n.readUshort(r2, t2), t2 += 2, o.unitsPerEm = n.readUshort(r2, t2), t2 += 2, o.created = n.readUint64(r2, t2), t2 += 8, o.modified = n.readUint64(r2, t2), t2 += 8, o.xMin = n.readShort(r2, t2), t2 += 2, o.yMin = n.readShort(r2, t2), t2 += 2, o.xMax = n.readShort(r2, t2), t2 += 2, o.yMax = n.readShort(r2, t2), t2 += 2, o.macStyle = n.readUshort(r2, t2), t2 += 2, o.lowestRecPPEM = n.readUshort(r2, t2), t2 += 2, o.fontDirectionHint = n.readShort(r2, t2), t2 += 2, o.indexToLocFormat = n.readShort(r2, t2), t2 += 2, o.glyphDataFormat = n.readShort(r2, t2), t2 += 2, o;
      }, e.hhea = {}, e.hhea.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return n.readFixed(r2, t2), t2 += 4, o.ascender = n.readShort(r2, t2), t2 += 2, o.descender = n.readShort(r2, t2), t2 += 2, o.lineGap = n.readShort(r2, t2), t2 += 2, o.advanceWidthMax = n.readUshort(r2, t2), t2 += 2, o.minLeftSideBearing = n.readShort(r2, t2), t2 += 2, o.minRightSideBearing = n.readShort(r2, t2), t2 += 2, o.xMaxExtent = n.readShort(r2, t2), t2 += 2, o.caretSlopeRise = n.readShort(r2, t2), t2 += 2, o.caretSlopeRun = n.readShort(r2, t2), t2 += 2, o.caretOffset = n.readShort(r2, t2), t2 += 2, t2 += 8, o.metricDataFormat = n.readShort(r2, t2), t2 += 2, o.numberOfHMetrics = n.readUshort(r2, t2), t2 += 2, o;
      }, e.hmtx = {}, e.hmtx.parse = function(r2, t2, a2, n) {
        for (var o = e._bin, s = { aWidth: [], lsBearing: [] }, i = 0, h = 0, f = 0; f < n.maxp.numGlyphs; f++)
          f < n.hhea.numberOfHMetrics && (i = o.readUshort(r2, t2), t2 += 2, h = o.readShort(r2, t2), t2 += 2), s.aWidth.push(i), s.lsBearing.push(h);
        return s;
      }, e.kern = {}, e.kern.parse = function(r2, t2, a2, n) {
        var o = e._bin, s = o.readUshort(r2, t2);
        if (t2 += 2, 1 == s)
          return e.kern.parseV1(r2, t2 - 2, a2, n);
        var i = o.readUshort(r2, t2);
        t2 += 2;
        for (var h = { glyph1: [], rval: [] }, f = 0; f < i; f++) {
          t2 += 2;
          a2 = o.readUshort(r2, t2);
          t2 += 2;
          var d = o.readUshort(r2, t2);
          t2 += 2;
          var u = d >>> 8;
          if (0 != (u &= 15))
            throw "unknown kern table format: " + u;
          t2 = e.kern.readFormat0(r2, t2, h);
        }
        return h;
      }, e.kern.parseV1 = function(r2, t2, a2, n) {
        var o = e._bin;
        o.readFixed(r2, t2), t2 += 4;
        var s = o.readUint(r2, t2);
        t2 += 4;
        for (var i = { glyph1: [], rval: [] }, h = 0; h < s; h++) {
          o.readUint(r2, t2), t2 += 4;
          var f = o.readUshort(r2, t2);
          t2 += 2, o.readUshort(r2, t2), t2 += 2;
          var d = f >>> 8;
          if (0 != (d &= 15))
            throw "unknown kern table format: " + d;
          t2 = e.kern.readFormat0(r2, t2, i);
        }
        return i;
      }, e.kern.readFormat0 = function(r2, t2, a2) {
        var n = e._bin, o = -1, s = n.readUshort(r2, t2);
        t2 += 2, n.readUshort(r2, t2), t2 += 2, n.readUshort(r2, t2), t2 += 2, n.readUshort(r2, t2), t2 += 2;
        for (var i = 0; i < s; i++) {
          var h = n.readUshort(r2, t2);
          t2 += 2;
          var f = n.readUshort(r2, t2);
          t2 += 2;
          var d = n.readShort(r2, t2);
          t2 += 2, h != o && (a2.glyph1.push(h), a2.rval.push({ glyph2: [], vals: [] }));
          var u = a2.rval[a2.rval.length - 1];
          u.glyph2.push(f), u.vals.push(d), o = h;
        }
        return t2;
      }, e.loca = {}, e.loca.parse = function(r2, t2, a2, n) {
        var o = e._bin, s = [], i = n.head.indexToLocFormat, h = n.maxp.numGlyphs + 1;
        if (0 == i)
          for (var f = 0; f < h; f++)
            s.push(o.readUshort(r2, t2 + (f << 1)) << 1);
        if (1 == i)
          for (f = 0; f < h; f++)
            s.push(o.readUint(r2, t2 + (f << 2)));
        return s;
      }, e.maxp = {}, e.maxp.parse = function(r2, t2, a2) {
        var n = e._bin, o = {}, s = n.readUint(r2, t2);
        return t2 += 4, o.numGlyphs = n.readUshort(r2, t2), t2 += 2, 65536 == s && (o.maxPoints = n.readUshort(r2, t2), t2 += 2, o.maxContours = n.readUshort(r2, t2), t2 += 2, o.maxCompositePoints = n.readUshort(r2, t2), t2 += 2, o.maxCompositeContours = n.readUshort(r2, t2), t2 += 2, o.maxZones = n.readUshort(r2, t2), t2 += 2, o.maxTwilightPoints = n.readUshort(r2, t2), t2 += 2, o.maxStorage = n.readUshort(r2, t2), t2 += 2, o.maxFunctionDefs = n.readUshort(r2, t2), t2 += 2, o.maxInstructionDefs = n.readUshort(r2, t2), t2 += 2, o.maxStackElements = n.readUshort(r2, t2), t2 += 2, o.maxSizeOfInstructions = n.readUshort(r2, t2), t2 += 2, o.maxComponentElements = n.readUshort(r2, t2), t2 += 2, o.maxComponentDepth = n.readUshort(r2, t2), t2 += 2), o;
      }, e.name = {}, e.name.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        n.readUshort(r2, t2), t2 += 2;
        var s = n.readUshort(r2, t2);
        t2 += 2, n.readUshort(r2, t2);
        for (var i, h = ["copyright", "fontFamily", "fontSubfamily", "ID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "urlVendor", "urlDesigner", "licence", "licenceURL", "---", "typoFamilyName", "typoSubfamilyName", "compatibleFull", "sampleText", "postScriptCID", "wwsFamilyName", "wwsSubfamilyName", "lightPalette", "darkPalette"], f = t2 += 2, d = 0; d < s; d++) {
          var u = n.readUshort(r2, t2);
          t2 += 2;
          var l = n.readUshort(r2, t2);
          t2 += 2;
          var v = n.readUshort(r2, t2);
          t2 += 2;
          var c = n.readUshort(r2, t2);
          t2 += 2;
          var p = n.readUshort(r2, t2);
          t2 += 2;
          var U = n.readUshort(r2, t2);
          t2 += 2;
          var g, S = h[c], m = f + 12 * s + U;
          if (0 == u)
            g = n.readUnicode(r2, m, p / 2);
          else if (3 == u && 0 == l)
            g = n.readUnicode(r2, m, p / 2);
          else if (0 == l)
            g = n.readASCII(r2, m, p);
          else if (1 == l)
            g = n.readUnicode(r2, m, p / 2);
          else if (3 == l)
            g = n.readUnicode(r2, m, p / 2);
          else {
            if (1 != u)
              throw "unknown encoding " + l + ", platformID: " + u;
            g = n.readASCII(r2, m, p), console.debug("reading unknown MAC encoding " + l + " as ASCII");
          }
          var b = "p" + u + "," + v.toString(16);
          null == o[b] && (o[b] = {}), o[b][void 0 !== S ? S : c] = g, o[b]._lang = v;
        }
        for (var y in o)
          if (null != o[y].postScriptName && 1033 == o[y]._lang)
            return o[y];
        for (var y in o)
          if (null != o[y].postScriptName && 0 == o[y]._lang)
            return o[y];
        for (var y in o)
          if (null != o[y].postScriptName && 3084 == o[y]._lang)
            return o[y];
        for (var y in o)
          if (null != o[y].postScriptName)
            return o[y];
        for (var y in o) {
          i = y;
          break;
        }
        return console.debug("returning name table with languageID " + o[i]._lang), o[i];
      }, e["OS/2"] = {}, e["OS/2"].parse = function(r2, t2, a2) {
        var n = e._bin.readUshort(r2, t2);
        t2 += 2;
        var o = {};
        if (0 == n)
          e["OS/2"].version0(r2, t2, o);
        else if (1 == n)
          e["OS/2"].version1(r2, t2, o);
        else if (2 == n || 3 == n || 4 == n)
          e["OS/2"].version2(r2, t2, o);
        else {
          if (5 != n)
            throw "unknown OS/2 table version: " + n;
          e["OS/2"].version5(r2, t2, o);
        }
        return o;
      }, e["OS/2"].version0 = function(r2, t2, a2) {
        var n = e._bin;
        return a2.xAvgCharWidth = n.readShort(r2, t2), t2 += 2, a2.usWeightClass = n.readUshort(r2, t2), t2 += 2, a2.usWidthClass = n.readUshort(r2, t2), t2 += 2, a2.fsType = n.readUshort(r2, t2), t2 += 2, a2.ySubscriptXSize = n.readShort(r2, t2), t2 += 2, a2.ySubscriptYSize = n.readShort(r2, t2), t2 += 2, a2.ySubscriptXOffset = n.readShort(r2, t2), t2 += 2, a2.ySubscriptYOffset = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptXSize = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptYSize = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptXOffset = n.readShort(r2, t2), t2 += 2, a2.ySuperscriptYOffset = n.readShort(r2, t2), t2 += 2, a2.yStrikeoutSize = n.readShort(r2, t2), t2 += 2, a2.yStrikeoutPosition = n.readShort(r2, t2), t2 += 2, a2.sFamilyClass = n.readShort(r2, t2), t2 += 2, a2.panose = n.readBytes(r2, t2, 10), t2 += 10, a2.ulUnicodeRange1 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange2 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange3 = n.readUint(r2, t2), t2 += 4, a2.ulUnicodeRange4 = n.readUint(r2, t2), t2 += 4, a2.achVendID = [n.readInt8(r2, t2), n.readInt8(r2, t2 + 1), n.readInt8(r2, t2 + 2), n.readInt8(r2, t2 + 3)], t2 += 4, a2.fsSelection = n.readUshort(r2, t2), t2 += 2, a2.usFirstCharIndex = n.readUshort(r2, t2), t2 += 2, a2.usLastCharIndex = n.readUshort(r2, t2), t2 += 2, a2.sTypoAscender = n.readShort(r2, t2), t2 += 2, a2.sTypoDescender = n.readShort(r2, t2), t2 += 2, a2.sTypoLineGap = n.readShort(r2, t2), t2 += 2, a2.usWinAscent = n.readUshort(r2, t2), t2 += 2, a2.usWinDescent = n.readUshort(r2, t2), t2 += 2;
      }, e["OS/2"].version1 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version0(r2, t2, a2), a2.ulCodePageRange1 = n.readUint(r2, t2), t2 += 4, a2.ulCodePageRange2 = n.readUint(r2, t2), t2 += 4;
      }, e["OS/2"].version2 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version1(r2, t2, a2), a2.sxHeight = n.readShort(r2, t2), t2 += 2, a2.sCapHeight = n.readShort(r2, t2), t2 += 2, a2.usDefault = n.readUshort(r2, t2), t2 += 2, a2.usBreak = n.readUshort(r2, t2), t2 += 2, a2.usMaxContext = n.readUshort(r2, t2), t2 += 2;
      }, e["OS/2"].version5 = function(r2, t2, a2) {
        var n = e._bin;
        return t2 = e["OS/2"].version2(r2, t2, a2), a2.usLowerOpticalPointSize = n.readUshort(r2, t2), t2 += 2, a2.usUpperOpticalPointSize = n.readUshort(r2, t2), t2 += 2;
      }, e.post = {}, e.post.parse = function(r2, t2, a2) {
        var n = e._bin, o = {};
        return o.version = n.readFixed(r2, t2), t2 += 4, o.italicAngle = n.readFixed(r2, t2), t2 += 4, o.underlinePosition = n.readShort(r2, t2), t2 += 2, o.underlineThickness = n.readShort(r2, t2), t2 += 2, o;
      }, null == e && (e = {}), null == e.U && (e.U = {}), e.U.codeToGlyph = function(r2, e2) {
        var t2 = r2.cmap, a2 = -1;
        if (null != t2.p0e4 ? a2 = t2.p0e4 : null != t2.p3e1 ? a2 = t2.p3e1 : null != t2.p1e0 ? a2 = t2.p1e0 : null != t2.p0e3 && (a2 = t2.p0e3), -1 == a2)
          throw "no familiar platform and encoding!";
        var n = t2.tables[a2];
        if (0 == n.format)
          return e2 >= n.map.length ? 0 : n.map[e2];
        if (4 == n.format) {
          for (var o = -1, s = 0; s < n.endCount.length; s++)
            if (e2 <= n.endCount[s]) {
              o = s;
              break;
            }
          if (-1 == o)
            return 0;
          if (n.startCount[o] > e2)
            return 0;
          return 65535 & (0 != n.idRangeOffset[o] ? n.glyphIdArray[e2 - n.startCount[o] + (n.idRangeOffset[o] >> 1) - (n.idRangeOffset.length - o)] : e2 + n.idDelta[o]);
        }
        if (12 == n.format) {
          if (e2 > n.groups[n.groups.length - 1][1])
            return 0;
          for (s = 0; s < n.groups.length; s++) {
            var i = n.groups[s];
            if (i[0] <= e2 && e2 <= i[1])
              return i[2] + (e2 - i[0]);
          }
          return 0;
        }
        throw "unknown cmap table format " + n.format;
      }, e.U.glyphToPath = function(r2, t2) {
        var a2 = { cmds: [], crds: [] };
        if (r2.SVG && r2.SVG.entries[t2]) {
          var n = r2.SVG.entries[t2];
          return null == n ? a2 : ("string" == typeof n && (n = e.SVG.toPath(n), r2.SVG.entries[t2] = n), n);
        }
        if (r2.CFF) {
          var o = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: false, width: r2.CFF.Private ? r2.CFF.Private.defaultWidthX : 0, open: false }, s = r2.CFF, i = r2.CFF.Private;
          if (s.ROS) {
            for (var h = 0; s.FDSelect[h + 2] <= t2; )
              h += 2;
            i = s.FDArray[s.FDSelect[h + 1]].Private;
          }
          e.U._drawCFF(r2.CFF.CharStrings[t2], o, s, i, a2);
        } else
          r2.glyf && e.U._drawGlyf(t2, r2, a2);
        return a2;
      }, e.U._drawGlyf = function(r2, t2, a2) {
        var n = t2.glyf[r2];
        null == n && (n = t2.glyf[r2] = e.glyf._parseGlyf(t2, r2)), null != n && (n.noc > -1 ? e.U._simpleGlyph(n, a2) : e.U._compoGlyph(n, t2, a2));
      }, e.U._simpleGlyph = function(r2, t2) {
        for (var a2 = 0; a2 < r2.noc; a2++) {
          for (var n = 0 == a2 ? 0 : r2.endPts[a2 - 1] + 1, o = r2.endPts[a2], s = n; s <= o; s++) {
            var i = s == n ? o : s - 1, h = s == o ? n : s + 1, f = 1 & r2.flags[s], d = 1 & r2.flags[i], u = 1 & r2.flags[h], l = r2.xs[s], v = r2.ys[s];
            if (s == n)
              if (f) {
                if (!d) {
                  e.U.P.moveTo(t2, l, v);
                  continue;
                }
                e.U.P.moveTo(t2, r2.xs[i], r2.ys[i]);
              } else
                d ? e.U.P.moveTo(t2, r2.xs[i], r2.ys[i]) : e.U.P.moveTo(t2, (r2.xs[i] + l) / 2, (r2.ys[i] + v) / 2);
            f ? d && e.U.P.lineTo(t2, l, v) : u ? e.U.P.qcurveTo(t2, l, v, r2.xs[h], r2.ys[h]) : e.U.P.qcurveTo(t2, l, v, (l + r2.xs[h]) / 2, (v + r2.ys[h]) / 2);
          }
          e.U.P.closePath(t2);
        }
      }, e.U._compoGlyph = function(r2, t2, a2) {
        for (var n = 0; n < r2.parts.length; n++) {
          var o = { cmds: [], crds: [] }, s = r2.parts[n];
          e.U._drawGlyf(s.glyphIndex, t2, o);
          for (var i = s.m, h = 0; h < o.crds.length; h += 2) {
            var f = o.crds[h], d = o.crds[h + 1];
            a2.crds.push(f * i.a + d * i.b + i.tx), a2.crds.push(f * i.c + d * i.d + i.ty);
          }
          for (h = 0; h < o.cmds.length; h++)
            a2.cmds.push(o.cmds[h]);
        }
      }, e.U._getGlyphClass = function(r2, t2) {
        var a2 = e._lctf.getInterval(t2, r2);
        return -1 == a2 ? 0 : t2[a2 + 2];
      }, e.U.getPairAdjustment = function(r2, t2, a2) {
        var n = false;
        if (r2.GPOS)
          for (var o = r2.GPOS, s = o.lookupList, i = o.featureList, h = [], f = 0; f < i.length; f++) {
            var d = i[f];
            if ("kern" == d.tag) {
              n = true;
              for (var u = 0; u < d.tab.length; u++)
                if (!h[d.tab[u]]) {
                  h[d.tab[u]] = true;
                  for (var l = s[d.tab[u]], v = 0; v < l.tabs.length; v++)
                    if (null != l.tabs[v]) {
                      var c, p = l.tabs[v];
                      if (!p.coverage || -1 != (c = e._lctf.coverageIndex(p.coverage, t2))) {
                        if (1 == l.ltype)
                          ;
                        else if (2 == l.ltype) {
                          var U = null;
                          if (1 == p.fmt) {
                            var g = p.pairsets[c];
                            for (f = 0; f < g.length; f++)
                              g[f].gid2 == a2 && (U = g[f]);
                          } else if (2 == p.fmt) {
                            var S = e.U._getGlyphClass(t2, p.classDef1), m = e.U._getGlyphClass(a2, p.classDef2);
                            U = p.matrix[S][m];
                          }
                          if (U) {
                            var b = 0;
                            return U.val1 && U.val1[2] && (b += U.val1[2]), U.val2 && U.val2[0] && (b += U.val2[0]), b;
                          }
                        }
                      }
                    }
                }
            }
          }
        if (r2.kern && !n) {
          var y = r2.kern.glyph1.indexOf(t2);
          if (-1 != y) {
            var F = r2.kern.rval[y].glyph2.indexOf(a2);
            if (-1 != F)
              return r2.kern.rval[y].vals[F];
          }
        }
        return 0;
      }, e.U._applySubs = function(r2, t2, a2, n) {
        for (var o = r2.length - t2 - 1, s = 0; s < a2.tabs.length; s++)
          if (null != a2.tabs[s]) {
            var i, h = a2.tabs[s];
            if (!h.coverage || -1 != (i = e._lctf.coverageIndex(h.coverage, r2[t2]))) {
              if (1 == a2.ltype)
                r2[t2], 1 == h.fmt ? r2[t2] = r2[t2] + h.delta : r2[t2] = h.newg[i];
              else if (4 == a2.ltype)
                for (var f = h.vals[i], d = 0; d < f.length; d++) {
                  var u = f[d], l = u.chain.length;
                  if (!(l > o)) {
                    for (var v = true, c = 0, p = 0; p < l; p++) {
                      for (; -1 == r2[t2 + c + (1 + p)]; )
                        c++;
                      u.chain[p] != r2[t2 + c + (1 + p)] && (v = false);
                    }
                    if (v) {
                      r2[t2] = u.nglyph;
                      for (p = 0; p < l + c; p++)
                        r2[t2 + p + 1] = -1;
                      break;
                    }
                  }
                }
              else if (5 == a2.ltype && 2 == h.fmt)
                for (var U = e._lctf.getInterval(h.cDef, r2[t2]), g = h.cDef[U + 2], S = h.scset[g], m = 0; m < S.length; m++) {
                  var b = S[m], y = b.input;
                  if (!(y.length > o)) {
                    for (v = true, p = 0; p < y.length; p++) {
                      var F = e._lctf.getInterval(h.cDef, r2[t2 + 1 + p]);
                      if (-1 == U && h.cDef[F + 2] != y[p]) {
                        v = false;
                        break;
                      }
                    }
                    if (v) {
                      var _ = b.substLookupRecords;
                      for (d = 0; d < _.length; d += 2)
                        _[d], _[d + 1];
                    }
                  }
                }
              else if (6 == a2.ltype && 3 == h.fmt) {
                if (!e.U._glsCovered(r2, h.backCvg, t2 - h.backCvg.length))
                  continue;
                if (!e.U._glsCovered(r2, h.inptCvg, t2))
                  continue;
                if (!e.U._glsCovered(r2, h.ahedCvg, t2 + h.inptCvg.length))
                  continue;
                var C = h.lookupRec;
                for (m = 0; m < C.length; m += 2) {
                  U = C[m];
                  var x = n[C[m + 1]];
                  e.U._applySubs(r2, t2 + U, x, n);
                }
              }
            }
          }
      }, e.U._glsCovered = function(r2, t2, a2) {
        for (var n = 0; n < t2.length; n++) {
          if (-1 == e._lctf.coverageIndex(t2[n], r2[a2 + n]))
            return false;
        }
        return true;
      }, e.U.glyphsToPath = function(r2, t2, a2) {
        for (var n = { cmds: [], crds: [] }, o = 0, s = 0; s < t2.length; s++) {
          var i = t2[s];
          if (-1 != i) {
            for (var h = s < t2.length - 1 && -1 != t2[s + 1] ? t2[s + 1] : 0, f = e.U.glyphToPath(r2, i), d = 0; d < f.crds.length; d += 2)
              n.crds.push(f.crds[d] + o), n.crds.push(f.crds[d + 1]);
            a2 && n.cmds.push(a2);
            for (d = 0; d < f.cmds.length; d++)
              n.cmds.push(f.cmds[d]);
            a2 && n.cmds.push("X"), o += r2.hmtx.aWidth[i], s < t2.length - 1 && (o += e.U.getPairAdjustment(r2, i, h));
          }
        }
        return n;
      }, e.U.P = {}, e.U.P.moveTo = function(r2, e2, t2) {
        r2.cmds.push("M"), r2.crds.push(e2, t2);
      }, e.U.P.lineTo = function(r2, e2, t2) {
        r2.cmds.push("L"), r2.crds.push(e2, t2);
      }, e.U.P.curveTo = function(r2, e2, t2, a2, n, o, s) {
        r2.cmds.push("C"), r2.crds.push(e2, t2, a2, n, o, s);
      }, e.U.P.qcurveTo = function(r2, e2, t2, a2, n) {
        r2.cmds.push("Q"), r2.crds.push(e2, t2, a2, n);
      }, e.U.P.closePath = function(r2) {
        r2.cmds.push("Z");
      }, e.U._drawCFF = function(r2, t2, a2, n, o) {
        for (var s = t2.stack, i = t2.nStems, h = t2.haveWidth, f = t2.width, d = t2.open, u = 0, l = t2.x, v = t2.y, c = 0, p = 0, U = 0, g = 0, S = 0, m = 0, b = 0, y = 0, F = 0, _ = 0, C = { val: 0, size: 0 }; u < r2.length; ) {
          e.CFF.getCharString(r2, u, C);
          var x = C.val;
          if (u += C.size, "o1" == x || "o18" == x)
            s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true;
          else if ("o3" == x || "o23" == x) {
            s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true;
          } else if ("o4" == x)
            s.length > 1 && !h && (f = s.shift() + n.nominalWidthX, h = true), d && e.U.P.closePath(o), v += s.pop(), e.U.P.moveTo(o, l, v), d = true;
          else if ("o5" == x)
            for (; s.length > 0; )
              l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);
          else if ("o6" == x || "o7" == x)
            for (var P = s.length, I = "o6" == x, w = 0; w < P; w++) {
              var O = s.shift();
              I ? l += O : v += O, I = !I, e.U.P.lineTo(o, l, v);
            }
          else if ("o8" == x || "o24" == x) {
            P = s.length;
            for (var T = 0; T + 6 <= P; )
              c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v), T += 6;
            "o24" == x && (l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v));
          } else {
            if ("o11" == x)
              break;
            if ("o1234" == x || "o1235" == x || "o1236" == x || "o1237" == x)
              "o1234" == x && (p = v, U = (c = l + s.shift()) + s.shift(), _ = g = p + s.shift(), m = g, y = v, l = (b = (S = (F = U + s.shift()) + s.shift()) + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1235" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), _ = g + s.shift(), S = F + s.shift(), m = _ + s.shift(), b = S + s.shift(), y = m + s.shift(), l = b + s.shift(), v = y + s.shift(), s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1236" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), _ = g = p + s.shift(), m = g, b = (S = (F = U + s.shift()) + s.shift()) + s.shift(), y = m + s.shift(), l = b + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v)), "o1237" == x && (c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), F = U + s.shift(), _ = g + s.shift(), S = F + s.shift(), m = _ + s.shift(), b = S + s.shift(), y = m + s.shift(), Math.abs(b - l) > Math.abs(y - v) ? l = b + s.shift() : v = y + s.shift(), e.U.P.curveTo(o, c, p, U, g, F, _), e.U.P.curveTo(o, S, m, b, y, l, v));
            else if ("o14" == x) {
              if (s.length > 0 && !h && (f = s.shift() + a2.nominalWidthX, h = true), 4 == s.length) {
                var k = s.shift(), G = s.shift(), D = s.shift(), B = s.shift(), L = e.CFF.glyphBySE(a2, D), R = e.CFF.glyphBySE(a2, B);
                e.U._drawCFF(a2.CharStrings[L], t2, a2, n, o), t2.x = k, t2.y = G, e.U._drawCFF(a2.CharStrings[R], t2, a2, n, o);
              }
              d && (e.U.P.closePath(o), d = false);
            } else if ("o19" == x || "o20" == x) {
              s.length % 2 != 0 && !h && (f = s.shift() + n.nominalWidthX), i += s.length >> 1, s.length = 0, h = true, u += i + 7 >> 3;
            } else if ("o21" == x)
              s.length > 2 && !h && (f = s.shift() + n.nominalWidthX, h = true), v += s.pop(), l += s.pop(), d && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), d = true;
            else if ("o22" == x)
              s.length > 1 && !h && (f = s.shift() + n.nominalWidthX, h = true), l += s.pop(), d && e.U.P.closePath(o), e.U.P.moveTo(o, l, v), d = true;
            else if ("o25" == x) {
              for (; s.length > 6; )
                l += s.shift(), v += s.shift(), e.U.P.lineTo(o, l, v);
              c = l + s.shift(), p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);
            } else if ("o26" == x)
              for (s.length % 2 && (l += s.shift()); s.length > 0; )
                c = l, p = v + s.shift(), l = U = c + s.shift(), v = (g = p + s.shift()) + s.shift(), e.U.P.curveTo(o, c, p, U, g, l, v);
            else if ("o27" == x)
              for (s.length % 2 && (v += s.shift()); s.length > 0; )
                p = v, U = (c = l + s.shift()) + s.shift(), g = p + s.shift(), l = U + s.shift(), v = g, e.U.P.curveTo(o, c, p, U, g, l, v);
            else if ("o10" == x || "o29" == x) {
              var A = "o10" == x ? n : a2;
              if (0 == s.length)
                console.debug("error: empty stack");
              else {
                var W = s.pop(), M = A.Subrs[W + A.Bias];
                t2.x = l, t2.y = v, t2.nStems = i, t2.haveWidth = h, t2.width = f, t2.open = d, e.U._drawCFF(M, t2, a2, n, o), l = t2.x, v = t2.y, i = t2.nStems, h = t2.haveWidth, f = t2.width, d = t2.open;
              }
            } else if ("o30" == x || "o31" == x) {
              var V = s.length, N = (T = 0, "o31" == x);
              for (T += V - (P = -3 & V); T < P; )
                N ? (p = v, U = (c = l + s.shift()) + s.shift(), v = (g = p + s.shift()) + s.shift(), P - T == 5 ? (l = U + s.shift(), T++) : l = U, N = false) : (c = l, p = v + s.shift(), U = c + s.shift(), g = p + s.shift(), l = U + s.shift(), P - T == 5 ? (v = g + s.shift(), T++) : v = g, N = true), e.U.P.curveTo(o, c, p, U, g, l, v), T += 4;
            } else {
              if ("o" == (x + "").charAt(0))
                throw console.debug("Unknown operation: " + x, r2), x;
              s.push(x);
            }
          }
        }
        t2.x = l, t2.y = v, t2.nStems = i, t2.haveWidth = h, t2.width = f, t2.open = d;
      };
      var t = e, a = { Typr: t };
      return r.Typr = t, r.default = a, Object.defineProperty(r, "__esModule", { value: true }), r;
    }({}).Typr;
  }
  function woff2otfFactory() {
    return function(r) {
      var e = Uint8Array, n = Uint16Array, t = Uint32Array, a = new e([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]), i = new e([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]), o = new e([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), f = function(r2, e2) {
        for (var a2 = new n(31), i2 = 0; i2 < 31; ++i2)
          a2[i2] = e2 += 1 << r2[i2 - 1];
        var o2 = new t(a2[30]);
        for (i2 = 1; i2 < 30; ++i2)
          for (var f2 = a2[i2]; f2 < a2[i2 + 1]; ++f2)
            o2[f2] = f2 - a2[i2] << 5 | i2;
        return [a2, o2];
      }, u = f(a, 2), v = u[0], s = u[1];
      v[28] = 258, s[258] = 28;
      for (var l = f(i, 0)[0], c = new n(32768), g = 0; g < 32768; ++g) {
        var h = (43690 & g) >>> 1 | (21845 & g) << 1;
        h = (61680 & (h = (52428 & h) >>> 2 | (13107 & h) << 2)) >>> 4 | (3855 & h) << 4, c[g] = ((65280 & h) >>> 8 | (255 & h) << 8) >>> 1;
      }
      var w = function(r2, e2, t2) {
        for (var a2 = r2.length, i2 = 0, o2 = new n(e2); i2 < a2; ++i2)
          ++o2[r2[i2] - 1];
        var f2, u2 = new n(e2);
        for (i2 = 0; i2 < e2; ++i2)
          u2[i2] = u2[i2 - 1] + o2[i2 - 1] << 1;
        if (t2) {
          f2 = new n(1 << e2);
          var v2 = 15 - e2;
          for (i2 = 0; i2 < a2; ++i2)
            if (r2[i2])
              for (var s2 = i2 << 4 | r2[i2], l2 = e2 - r2[i2], g2 = u2[r2[i2] - 1]++ << l2, h2 = g2 | (1 << l2) - 1; g2 <= h2; ++g2)
                f2[c[g2] >>> v2] = s2;
        } else
          for (f2 = new n(a2), i2 = 0; i2 < a2; ++i2)
            r2[i2] && (f2[i2] = c[u2[r2[i2] - 1]++] >>> 15 - r2[i2]);
        return f2;
      }, d = new e(288);
      for (g = 0; g < 144; ++g)
        d[g] = 8;
      for (g = 144; g < 256; ++g)
        d[g] = 9;
      for (g = 256; g < 280; ++g)
        d[g] = 7;
      for (g = 280; g < 288; ++g)
        d[g] = 8;
      var m = new e(32);
      for (g = 0; g < 32; ++g)
        m[g] = 5;
      var b = w(d, 9, 1), p = w(m, 5, 1), y = function(r2) {
        for (var e2 = r2[0], n2 = 1; n2 < r2.length; ++n2)
          r2[n2] > e2 && (e2 = r2[n2]);
        return e2;
      }, L = function(r2, e2, n2) {
        var t2 = e2 / 8 | 0;
        return (r2[t2] | r2[t2 + 1] << 8) >> (7 & e2) & n2;
      }, U = function(r2, e2) {
        var n2 = e2 / 8 | 0;
        return (r2[n2] | r2[n2 + 1] << 8 | r2[n2 + 2] << 16) >> (7 & e2);
      }, k = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"], T = function(r2, e2, n2) {
        var t2 = new Error(e2 || k[r2]);
        if (t2.code = r2, Error.captureStackTrace && Error.captureStackTrace(t2, T), !n2)
          throw t2;
        return t2;
      }, O = function(r2, f2, u2) {
        var s2 = r2.length;
        if (!s2 || u2 && !u2.l && s2 < 5)
          return f2 || new e(0);
        var c2 = !f2 || u2, g2 = !u2 || u2.i;
        u2 || (u2 = {}), f2 || (f2 = new e(3 * s2));
        var h2, d2 = function(r3) {
          var n2 = f2.length;
          if (r3 > n2) {
            var t2 = new e(Math.max(2 * n2, r3));
            t2.set(f2), f2 = t2;
          }
        }, m2 = u2.f || 0, k2 = u2.p || 0, O2 = u2.b || 0, A2 = u2.l, x2 = u2.d, E = u2.m, D = u2.n, M = 8 * s2;
        do {
          if (!A2) {
            u2.f = m2 = L(r2, k2, 1);
            var S = L(r2, k2 + 1, 3);
            if (k2 += 3, !S) {
              var V = r2[(I = ((h2 = k2) / 8 | 0) + (7 & h2 && 1) + 4) - 4] | r2[I - 3] << 8, _ = I + V;
              if (_ > s2) {
                g2 && T(0);
                break;
              }
              c2 && d2(O2 + V), f2.set(r2.subarray(I, _), O2), u2.b = O2 += V, u2.p = k2 = 8 * _;
              continue;
            }
            if (1 == S)
              A2 = b, x2 = p, E = 9, D = 5;
            else if (2 == S) {
              var j = L(r2, k2, 31) + 257, z = L(r2, k2 + 10, 15) + 4, C = j + L(r2, k2 + 5, 31) + 1;
              k2 += 14;
              for (var F = new e(C), P = new e(19), q = 0; q < z; ++q)
                P[o[q]] = L(r2, k2 + 3 * q, 7);
              k2 += 3 * z;
              var B = y(P), G = (1 << B) - 1, H = w(P, B, 1);
              for (q = 0; q < C; ) {
                var I, J = H[L(r2, k2, G)];
                if (k2 += 15 & J, (I = J >>> 4) < 16)
                  F[q++] = I;
                else {
                  var K = 0, N = 0;
                  for (16 == I ? (N = 3 + L(r2, k2, 3), k2 += 2, K = F[q - 1]) : 17 == I ? (N = 3 + L(r2, k2, 7), k2 += 3) : 18 == I && (N = 11 + L(r2, k2, 127), k2 += 7); N--; )
                    F[q++] = K;
                }
              }
              var Q = F.subarray(0, j), R = F.subarray(j);
              E = y(Q), D = y(R), A2 = w(Q, E, 1), x2 = w(R, D, 1);
            } else
              T(1);
            if (k2 > M) {
              g2 && T(0);
              break;
            }
          }
          c2 && d2(O2 + 131072);
          for (var W = (1 << E) - 1, X = (1 << D) - 1, Y = k2; ; Y = k2) {
            var Z = (K = A2[U(r2, k2) & W]) >>> 4;
            if ((k2 += 15 & K) > M) {
              g2 && T(0);
              break;
            }
            if (K || T(2), Z < 256)
              f2[O2++] = Z;
            else {
              if (256 == Z) {
                Y = k2, A2 = null;
                break;
              }
              var $ = Z - 254;
              if (Z > 264) {
                var rr = a[q = Z - 257];
                $ = L(r2, k2, (1 << rr) - 1) + v[q], k2 += rr;
              }
              var er = x2[U(r2, k2) & X], nr = er >>> 4;
              er || T(3), k2 += 15 & er;
              R = l[nr];
              if (nr > 3) {
                rr = i[nr];
                R += U(r2, k2) & (1 << rr) - 1, k2 += rr;
              }
              if (k2 > M) {
                g2 && T(0);
                break;
              }
              c2 && d2(O2 + 131072);
              for (var tr = O2 + $; O2 < tr; O2 += 4)
                f2[O2] = f2[O2 - R], f2[O2 + 1] = f2[O2 + 1 - R], f2[O2 + 2] = f2[O2 + 2 - R], f2[O2 + 3] = f2[O2 + 3 - R];
              O2 = tr;
            }
          }
          u2.l = A2, u2.p = Y, u2.b = O2, A2 && (m2 = 1, u2.m = E, u2.d = x2, u2.n = D);
        } while (!m2);
        return O2 == f2.length ? f2 : function(r3, a2, i2) {
          (null == a2 || a2 < 0) && (a2 = 0), (null == i2 || i2 > r3.length) && (i2 = r3.length);
          var o2 = new (r3 instanceof n ? n : r3 instanceof t ? t : e)(i2 - a2);
          return o2.set(r3.subarray(a2, i2)), o2;
        }(f2, 0, O2);
      }, A = new e(0);
      var x = "undefined" != typeof TextDecoder && new TextDecoder();
      try {
        x.decode(A, { stream: true }), 1;
      } catch (r2) {
      }
      return r.convert_streams = function(r2) {
        var e2 = new DataView(r2), n2 = 0;
        function t2() {
          var r3 = e2.getUint16(n2);
          return n2 += 2, r3;
        }
        function a2() {
          var r3 = e2.getUint32(n2);
          return n2 += 4, r3;
        }
        function i2(r3) {
          m2.setUint16(b2, r3), b2 += 2;
        }
        function o2(r3) {
          m2.setUint32(b2, r3), b2 += 4;
        }
        for (var f2 = { signature: a2(), flavor: a2(), length: a2(), numTables: t2(), reserved: t2(), totalSfntSize: a2(), majorVersion: t2(), minorVersion: t2(), metaOffset: a2(), metaLength: a2(), metaOrigLength: a2(), privOffset: a2(), privLength: a2() }, u2 = 0; Math.pow(2, u2) <= f2.numTables; )
          u2++;
        u2--;
        for (var v2 = 16 * Math.pow(2, u2), s2 = 16 * f2.numTables - v2, l2 = 12, c2 = [], g2 = 0; g2 < f2.numTables; g2++)
          c2.push({ tag: a2(), offset: a2(), compLength: a2(), origLength: a2(), origChecksum: a2() }), l2 += 16;
        var h2, w2 = new Uint8Array(12 + 16 * c2.length + c2.reduce(function(r3, e3) {
          return r3 + e3.origLength + 4;
        }, 0)), d2 = w2.buffer, m2 = new DataView(d2), b2 = 0;
        return o2(f2.flavor), i2(f2.numTables), i2(v2), i2(u2), i2(s2), c2.forEach(function(r3) {
          o2(r3.tag), o2(r3.origChecksum), o2(l2), o2(r3.origLength), r3.outOffset = l2, (l2 += r3.origLength) % 4 != 0 && (l2 += 4 - l2 % 4);
        }), c2.forEach(function(e3) {
          var n3, t3 = r2.slice(e3.offset, e3.offset + e3.compLength);
          if (e3.compLength != e3.origLength) {
            var a3 = new Uint8Array(e3.origLength);
            n3 = new Uint8Array(t3, 2), O(n3, a3);
          } else
            a3 = new Uint8Array(t3);
          w2.set(a3, e3.outOffset);
          var i3 = 0;
          (l2 = e3.outOffset + e3.origLength) % 4 != 0 && (i3 = 4 - l2 % 4), w2.set(new Uint8Array(i3).buffer, e3.outOffset + e3.origLength), h2 = l2 + i3;
        }), d2.slice(0, h2);
      }, Object.defineProperty(r, "__esModule", { value: true }), r;
    }({}).convert_streams;
  }
  function parserFactory(Typr, woff2otf) {
    const cmdArgLengths = {
      M: 2,
      L: 2,
      Q: 4,
      C: 6,
      Z: 0
    };
    const joiningTypeRawData = { "C": "18g,ca,368,1kz", "D": "17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v", "R": "17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6", "L": "x9u,jff,a,fd,jv", "T": "4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n" };
    const JT_LEFT = 1, JT_RIGHT = 2, JT_DUAL = 4, JT_TRANSPARENT = 8, JT_JOIN_CAUSING = 16, JT_NON_JOINING = 32;
    let joiningTypeMap;
    function getCharJoiningType(ch) {
      if (!joiningTypeMap) {
        const m = {
          R: JT_RIGHT,
          L: JT_LEFT,
          D: JT_DUAL,
          C: JT_JOIN_CAUSING,
          U: JT_NON_JOINING,
          T: JT_TRANSPARENT
        };
        joiningTypeMap = /* @__PURE__ */ new Map();
        for (let type in joiningTypeRawData) {
          let lastCode = 0;
          joiningTypeRawData[type].split(",").forEach((range) => {
            let [skip, step] = range.split("+");
            skip = parseInt(skip, 36);
            step = step ? parseInt(step, 36) : 0;
            joiningTypeMap.set(lastCode += skip, m[type]);
            for (let i = step; i--; ) {
              joiningTypeMap.set(++lastCode, m[type]);
            }
          });
        }
      }
      return joiningTypeMap.get(ch) || JT_NON_JOINING;
    }
    const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;
    const formsToFeatures = [null, "isol", "init", "fina", "medi"];
    function detectJoiningForms(str) {
      const joiningForms = new Uint8Array(str.length);
      let prevJoiningType = JT_NON_JOINING;
      let prevForm = ISOL;
      let prevIndex = -1;
      for (let i = 0; i < str.length; i++) {
        const code = str.codePointAt(i);
        let joiningType = getCharJoiningType(code) | 0;
        let form = ISOL;
        if (joiningType & JT_TRANSPARENT) {
          continue;
        }
        if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {
          if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {
            form = FINA;
            if (prevForm === ISOL || prevForm === FINA) {
              joiningForms[prevIndex]++;
            }
          } else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {
            if (prevForm === INIT || prevForm === MEDI) {
              joiningForms[prevIndex]--;
            }
          }
        } else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {
          if (prevForm === INIT || prevForm === MEDI) {
            joiningForms[prevIndex]--;
          }
        }
        prevForm = joiningForms[i] = form;
        prevJoiningType = joiningType;
        prevIndex = i;
        if (code > 65535)
          i++;
      }
      return joiningForms;
    }
    function stringToGlyphs(font, str) {
      const glyphIds = [];
      for (let i = 0; i < str.length; i++) {
        const cc = str.codePointAt(i);
        if (cc > 65535)
          i++;
        glyphIds.push(Typr.U.codeToGlyph(font, cc));
      }
      const gsub = font["GSUB"];
      if (gsub) {
        const { lookupList, featureList } = gsub;
        let joiningForms;
        const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;
        const usedLookups = [];
        featureList.forEach((feature) => {
          if (supportedFeatures.test(feature.tag)) {
            for (let ti = 0; ti < feature.tab.length; ti++) {
              if (usedLookups[feature.tab[ti]])
                continue;
              usedLookups[feature.tab[ti]] = true;
              const tab = lookupList[feature.tab[ti]];
              const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);
              if (isJoiningFeature && !joiningForms) {
                joiningForms = detectJoiningForms(str);
              }
              for (let ci = 0; ci < glyphIds.length; ci++) {
                if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {
                  Typr.U._applySubs(glyphIds, ci, tab, lookupList);
                }
              }
            }
          }
        });
      }
      return glyphIds;
    }
    function firstNum(...args) {
      for (let i = 0; i < args.length; i++) {
        if (typeof args[i] === "number") {
          return args[i];
        }
      }
    }
    function wrapFontObj(typrFont) {
      const glyphMap = /* @__PURE__ */ Object.create(null);
      const os2 = typrFont["OS/2"];
      const hhea = typrFont.hhea;
      const unitsPerEm = typrFont.head.unitsPerEm;
      const ascender = firstNum(os2 && os2.sTypoAscender, hhea && hhea.ascender, unitsPerEm);
      const fontObj = {
        unitsPerEm,
        ascender,
        descender: firstNum(os2 && os2.sTypoDescender, hhea && hhea.descender, 0),
        capHeight: firstNum(os2 && os2.sCapHeight, ascender),
        xHeight: firstNum(os2 && os2.sxHeight, ascender),
        lineGap: firstNum(os2 && os2.sTypoLineGap, hhea && hhea.lineGap),
        supportsCodePoint(code) {
          return Typr.U.codeToGlyph(typrFont, code) > 0;
        },
        forEachGlyph(text, fontSize, letterSpacing, callback) {
          let glyphX = 0;
          const fontScale = 1 / fontObj.unitsPerEm * fontSize;
          const glyphIndices = stringToGlyphs(typrFont, text);
          let charIndex = 0;
          let prevGlyphIndex = -1;
          glyphIndices.forEach((glyphIndex, i) => {
            if (glyphIndex !== -1) {
              let glyphObj = glyphMap[glyphIndex];
              if (!glyphObj) {
                const { cmds, crds } = Typr.U.glyphToPath(typrFont, glyphIndex);
                let path = "";
                let crdsIdx = 0;
                for (let i2 = 0, len = cmds.length; i2 < len; i2++) {
                  const numArgs = cmdArgLengths[cmds[i2]];
                  path += cmds[i2];
                  for (let j = 1; j <= numArgs; j++) {
                    path += (j > 1 ? "," : "") + crds[crdsIdx++];
                  }
                }
                let xMin, yMin, xMax, yMax;
                if (crds.length) {
                  xMin = yMin = Infinity;
                  xMax = yMax = -Infinity;
                  for (let i2 = 0, len = crds.length; i2 < len; i2 += 2) {
                    let x = crds[i2];
                    let y = crds[i2 + 1];
                    if (x < xMin)
                      xMin = x;
                    if (y < yMin)
                      yMin = y;
                    if (x > xMax)
                      xMax = x;
                    if (y > yMax)
                      yMax = y;
                  }
                } else {
                  xMin = xMax = yMin = yMax = 0;
                }
                glyphObj = glyphMap[glyphIndex] = {
                  index: glyphIndex,
                  advanceWidth: typrFont.hmtx.aWidth[glyphIndex],
                  xMin,
                  yMin,
                  xMax,
                  yMax,
                  path,
                  pathCommandCount: cmds.length
                  // forEachPathCommand(callback) {
                  //   let argsIndex = 0
                  //   const argsArray = []
                  //   for (let i = 0, len = cmds.length; i < len; i++) {
                  //     const numArgs = cmdArgLengths[cmds[i]]
                  //     argsArray.length = 1 + numArgs
                  //     argsArray[0] = cmds[i]
                  //     for (let j = 1; j <= numArgs; j++) {
                  //       argsArray[j] = crds[argsIndex++]
                  //     }
                  //     callback.apply(null, argsArray)
                  //   }
                  // }
                };
              }
              if (prevGlyphIndex !== -1) {
                glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;
              }
              callback.call(null, glyphObj, glyphX, charIndex);
              if (glyphObj.advanceWidth) {
                glyphX += glyphObj.advanceWidth * fontScale;
              }
              if (letterSpacing) {
                glyphX += letterSpacing * fontSize;
              }
              prevGlyphIndex = glyphIndex;
            }
            charIndex += text.codePointAt(charIndex) > 65535 ? 2 : 1;
          });
          return glyphX;
        }
      };
      return fontObj;
    }
    return function parse(buffer2) {
      const peek = new Uint8Array(buffer2, 0, 4);
      const tag = Typr._bin.readASCII(peek, 0, 4);
      if (tag === "wOFF") {
        buffer2 = woff2otf(buffer2);
      } else if (tag === "wOF2") {
        throw new Error("woff2 fonts not supported");
      }
      return wrapFontObj(Typr.parse(buffer2)[0]);
    };
  }
  function unicodeFontResolverClientFactory() {
    return function(t) {
      var n = function() {
        this.buckets = /* @__PURE__ */ new Map();
      };
      n.prototype.add = function(t2) {
        var n2 = t2 >> 5;
        this.buckets.set(n2, (this.buckets.get(n2) || 0) | 1 << (31 & t2));
      }, n.prototype.has = function(t2) {
        var n2 = this.buckets.get(t2 >> 5);
        return void 0 !== n2 && 0 != (n2 & 1 << (31 & t2));
      }, n.prototype.serialize = function() {
        var t2 = [];
        return this.buckets.forEach(function(n2, r2) {
          t2.push((+r2).toString(36) + ":" + n2.toString(36));
        }), t2.join(",");
      }, n.prototype.deserialize = function(t2) {
        var n2 = this;
        this.buckets.clear(), t2.split(",").forEach(function(t3) {
          var r2 = t3.split(":");
          n2.buckets.set(parseInt(r2[0], 36), parseInt(r2[1], 36));
        });
      };
      var r = Math.pow(2, 8), e = r - 1, o = ~e;
      function i(t2) {
        var n2 = function(t3) {
          return t3 & o;
        }(t2).toString(16), e2 = function(t3) {
          return (t3 & o) + r - 1;
        }(t2).toString(16);
        return "codepoint-index/plane" + (t2 >> 16) + "/" + n2 + "-" + e2 + ".json";
      }
      function a(t2, n2) {
        var r2 = t2 & e, o2 = n2.codePointAt(r2 / 6 | 0);
        return 0 != ((o2 = (o2 || 48) - 48) & 1 << r2 % 6);
      }
      function u(t2, n2) {
        var r2;
        (r2 = t2, r2.replace(/U\+/gi, "").replace(/^,+|,+$/g, "").split(/,+/).map(function(t3) {
          return t3.split("-").map(function(t4) {
            return parseInt(t4.trim(), 16);
          });
        })).forEach(function(t3) {
          var r3 = t3[0], e2 = t3[1];
          void 0 === e2 && (e2 = r3), n2(r3, e2);
        });
      }
      function s(t2, n2) {
        u(t2, function(t3, r2) {
          for (var e2 = t3; e2 <= r2; e2++)
            n2(e2);
        });
      }
      var c = {}, f = {}, l = /* @__PURE__ */ new WeakMap(), v = "https://cdn.jsdelivr.net/gh/lojjic/unicode-font-resolver@v1.0.0/packages/data";
      function d(t2) {
        var r2 = l.get(t2);
        return r2 || (r2 = new n(), s(t2.ranges, function(t3) {
          return r2.add(t3);
        }), l.set(t2, r2)), r2;
      }
      var h, p = /* @__PURE__ */ new Map();
      function g(t2, n2, r2) {
        return t2[n2] ? n2 : t2[r2] ? r2 : function(t3) {
          for (var n3 in t3)
            return n3;
        }(t2);
      }
      function w(t2, n2) {
        var r2 = n2;
        if (!t2.includes(r2)) {
          r2 = 1 / 0;
          for (var e2 = 0; e2 < t2.length; e2++)
            Math.abs(t2[e2] - n2) < Math.abs(r2 - n2) && (r2 = t2[e2]);
        }
        return r2;
      }
      function y(t2) {
        return h || (h = /* @__PURE__ */ new Set(), s("9-D,20,85,A0,1680,2000-200A,2028-202F,205F,3000", function(t3) {
          h.add(t3);
        })), h.has(t2);
      }
      return t.CodePointSet = n, t.clearCache = function() {
        c = {}, f = {};
      }, t.getFontsForString = function(t2, n2) {
        void 0 === n2 && (n2 = {});
        var r2 = n2.lang;
        void 0 === r2 && (r2 = "en");
        var e2 = n2.category;
        void 0 === e2 && (e2 = "sans-serif");
        var o2 = n2.style;
        void 0 === o2 && (o2 = "normal");
        var u2 = n2.weight;
        void 0 === u2 && (u2 = 400);
        var s2 = (n2.dataUrl || v).replace(/\/$/g, ""), l2 = /* @__PURE__ */ new Map(), h2 = new Uint8Array(t2.length), m = {}, b = {}, k = new Array(t2.length), A = /* @__PURE__ */ new Map(), M = false;
        function j(t3) {
          var n3 = p.get(t3);
          return n3 || (n3 = fetch(s2 + "/" + t3).then(function(t4) {
            if (!t4.ok)
              throw new Error(t4.statusText);
            return t4.json().then(function(t5) {
              if (!Array.isArray(t5) || 1 !== t5[0])
                throw new Error("Incorrect schema version; need 1, got " + t5[0]);
              return t5[1];
            });
          }).catch(function(n4) {
            if (s2 !== v)
              return M || (console.error('unicode-font-resolver: Failed loading from dataUrl "' + s2 + '", trying default CDN. ' + n4.message), M = true), s2 = v, p.delete(t3), j(t3);
            throw n4;
          }), p.set(t3, n3)), n3;
        }
        for (var P = function(n3) {
          var r3 = t2.codePointAt(n3), e3 = i(r3);
          k[n3] = e3, c[e3] || A.has(e3) || A.set(e3, j(e3).then(function(t3) {
            c[e3] = t3;
          })), r3 > 65535 && (n3++, S = n3);
        }, S = 0; S < t2.length; S++)
          P(S);
        return Promise.all(A.values()).then(function() {
          A.clear();
          for (var n3 = function(n4) {
            var o3 = t2.codePointAt(n4), i2 = null, u3 = c[k[n4]];
            t:
              for (var s3 in u3) {
                var l3 = b[s3];
                if (void 0 === l3 && (l3 = b[s3] = new RegExp(s3).test(r2)), l3) {
                  for (var v2 in u3[s3])
                    if (a(o3, u3[s3][v2])) {
                      i2 = v2;
                      break t;
                    }
                }
              }
            i2 || (console.debug("No font coverage for U+" + o3.toString(16)), i2 = "latin"), k[n4] = i2, f[i2] || A.has(i2) || A.set(i2, j("font-meta/" + i2 + ".json").then(function(t3) {
              f[i2] = t3;
            })), o3 > 65535 && (n4++, e3 = n4);
          }, e3 = 0; e3 < t2.length; e3++)
            n3(e3);
          return Promise.all(A.values());
        }).then(function() {
          for (var n3, r3 = null, i2 = 0; i2 < t2.length; i2++) {
            var a2 = t2.codePointAt(i2);
            if (r3 && (y(a2) || d(r3).has(a2)))
              h2[i2] = h2[i2 - 1];
            else {
              r3 = f[k[i2]];
              var c2 = m[r3.id];
              if (!c2) {
                var v2 = r3.typeforms, p2 = g(v2, e2, "sans-serif"), b2 = g(v2[p2], o2, "normal"), A2 = w(null === (n3 = v2[p2]) || void 0 === n3 ? void 0 : n3[b2], u2);
                c2 = m[r3.id] = s2 + "/font-files/" + r3.id + "/" + p2 + "." + b2 + "." + A2 + ".woff";
              }
              var M2 = l2.get(c2);
              null == M2 && (M2 = l2.size, l2.set(c2, M2)), h2[i2] = M2;
            }
            a2 > 65535 && (i2++, h2[i2] = h2[i2 - 1]);
          }
          return { fontUrls: Array.from(l2.keys()), chars: h2 };
        });
      }, Object.defineProperty(t, "__esModule", { value: true }), t;
    }({});
  }
  function createFontResolver(fontParser, unicodeFontResolverClient) {
    const parsedFonts = /* @__PURE__ */ Object.create(null);
    const loadingFonts = /* @__PURE__ */ Object.create(null);
    function doLoadFont(url, callback) {
      const onError = (err) => {
        console.error(`Failure loading font ${url}`, err);
      };
      try {
        const request = new XMLHttpRequest();
        request.open("get", url, true);
        request.responseType = "arraybuffer";
        request.onload = function() {
          if (request.status >= 400) {
            onError(new Error(request.statusText));
          } else if (request.status > 0) {
            try {
              const fontObj = fontParser(request.response);
              fontObj.src = url;
              callback(fontObj);
            } catch (e) {
              onError(e);
            }
          }
        };
        request.onerror = onError;
        request.send();
      } catch (err) {
        onError(err);
      }
    }
    function loadFont(fontUrl, callback) {
      let font = parsedFonts[fontUrl];
      if (font) {
        callback(font);
      } else if (loadingFonts[fontUrl]) {
        loadingFonts[fontUrl].push(callback);
      } else {
        loadingFonts[fontUrl] = [callback];
        doLoadFont(fontUrl, (fontObj) => {
          fontObj.src = fontUrl;
          parsedFonts[fontUrl] = fontObj;
          loadingFonts[fontUrl].forEach((cb) => cb(fontObj));
          delete loadingFonts[fontUrl];
        });
      }
    }
    return function(text, callback, {
      lang,
      fonts: userFonts = [],
      style = "normal",
      weight = "normal",
      unicodeFontsURL
    } = {}) {
      const charResolutions = new Uint8Array(text.length);
      const fontResolutions = [];
      if (!text.length) {
        allDone();
      }
      const fontIndices = /* @__PURE__ */ new Map();
      const fallbackRanges = [];
      if (style !== "italic")
        style = "normal";
      if (typeof weight !== "number") {
        weight = weight === "bold" ? 700 : 400;
      }
      if (userFonts && !Array.isArray(userFonts)) {
        userFonts = [userFonts];
      }
      userFonts = userFonts.slice().filter((def) => !def.lang || def.lang.test(lang)).reverse();
      if (userFonts.length) {
        const UNKNOWN = 0;
        const RESOLVED = 1;
        const NEEDS_FALLBACK = 2;
        let prevCharResult = UNKNOWN;
        (function resolveUserFonts(startIndex = 0) {
          for (let i = startIndex, iLen = text.length; i < iLen; i++) {
            const codePoint = text.codePointAt(i);
            if (prevCharResult === RESOLVED && fontResolutions[charResolutions[i - 1]].supportsCodePoint(codePoint) || /\s/.test(text[i])) {
              charResolutions[i] = charResolutions[i - 1];
              if (prevCharResult === NEEDS_FALLBACK) {
                fallbackRanges[fallbackRanges.length - 1][1] = i;
              }
            } else {
              for (let j = charResolutions[i], jLen = userFonts.length; j <= jLen; j++) {
                if (j === jLen) {
                  const range = prevCharResult === NEEDS_FALLBACK ? fallbackRanges[fallbackRanges.length - 1] : fallbackRanges[fallbackRanges.length] = [i, i];
                  range[1] = i;
                  prevCharResult = NEEDS_FALLBACK;
                } else {
                  charResolutions[i] = j;
                  const { src: src3, unicodeRange } = userFonts[j];
                  if (!unicodeRange || isCodeInRanges(codePoint, unicodeRange)) {
                    const fontObj = parsedFonts[src3];
                    if (!fontObj) {
                      loadFont(src3, () => {
                        resolveUserFonts(i);
                      });
                      return;
                    }
                    if (fontObj.supportsCodePoint(codePoint)) {
                      let fontIndex = fontIndices.get(fontObj);
                      if (typeof fontIndex !== "number") {
                        fontIndex = fontResolutions.length;
                        fontResolutions.push(fontObj);
                        fontIndices.set(fontObj, fontIndex);
                      }
                      charResolutions[i] = fontIndex;
                      prevCharResult = RESOLVED;
                      break;
                    }
                  }
                }
              }
            }
            if (codePoint > 65535 && i + 1 < iLen) {
              charResolutions[i + 1] = charResolutions[i];
              i++;
              if (prevCharResult === NEEDS_FALLBACK) {
                fallbackRanges[fallbackRanges.length - 1][1] = i;
              }
            }
          }
          resolveFallbacks();
        })();
      } else {
        fallbackRanges.push([0, text.length - 1]);
        resolveFallbacks();
      }
      function resolveFallbacks() {
        if (fallbackRanges.length) {
          const fallbackString = fallbackRanges.map((range) => text.substring(range[0], range[1] + 1)).join("\n");
          unicodeFontResolverClient.getFontsForString(fallbackString, {
            lang,
            style,
            weight,
            dataUrl: unicodeFontsURL
          }).then(({ fontUrls, chars }) => {
            const fontIndexOffset = fontResolutions.length;
            let charIdx = 0;
            fallbackRanges.forEach((range) => {
              for (let i = 0, endIdx = range[1] - range[0]; i <= endIdx; i++) {
                charResolutions[range[0] + i] = chars[charIdx++] + fontIndexOffset;
              }
              charIdx++;
            });
            let loadedCount = 0;
            fontUrls.forEach((url, i) => {
              loadFont(url, (fontObj) => {
                fontResolutions[i + fontIndexOffset] = fontObj;
                if (++loadedCount === fontUrls.length) {
                  allDone();
                }
              });
            });
          });
        } else {
          allDone();
        }
      }
      function allDone() {
        callback({
          chars: charResolutions,
          fonts: fontResolutions
        });
      }
      function isCodeInRanges(code, ranges) {
        for (let k = 0; k < ranges.length; k++) {
          const [start, end = start] = ranges[k];
          if (start <= code && code <= end) {
            return true;
          }
        }
        return false;
      }
    };
  }
  function createTypesetter(resolveFonts, bidi) {
    const INF = Infinity;
    const DEFAULT_IGNORABLE_CHARS = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;
    const lineBreakingWhiteSpace = `[^\\S\\u00A0]`;
    const BREAK_AFTER_CHARS = new RegExp(`${lineBreakingWhiteSpace}|[\\-\\u007C\\u00AD\\u2010\\u2012-\\u2014\\u2027\\u2056\\u2E17\\u2E40]`);
    function calculateFontRuns({ text, lang, fonts, style, weight, preResolvedFonts, unicodeFontsURL }, onDone) {
      const onResolved = ({ chars, fonts: parsedFonts }) => {
        let curRun, prevVal;
        const runs = [];
        for (let i = 0; i < chars.length; i++) {
          if (chars[i] !== prevVal) {
            prevVal = chars[i];
            runs.push(curRun = { start: i, end: i, fontObj: parsedFonts[chars[i]] });
          } else {
            curRun.end = i;
          }
        }
        onDone(runs);
      };
      if (preResolvedFonts) {
        onResolved(preResolvedFonts);
      } else {
        resolveFonts(
          text,
          onResolved,
          { lang, fonts, style, weight, unicodeFontsURL }
        );
      }
    }
    function typeset({
      text = "",
      font,
      lang = "en",
      sdfGlyphSize = 64,
      fontSize = 400,
      fontWeight = 1,
      fontStyle = "normal",
      letterSpacing = 0,
      lineHeight = "normal",
      maxWidth = INF,
      direction,
      textAlign = "left",
      textIndent = 0,
      whiteSpace = "normal",
      overflowWrap = "normal",
      anchorX = 0,
      anchorY = 0,
      metricsOnly = false,
      unicodeFontsURL,
      preResolvedFonts = null,
      includeCaretPositions = false,
      chunkedBoundsSize = 8192,
      colorRanges = null
    }, callback) {
      const mainStart = now3();
      const timings = { fontLoad: 0, typesetting: 0 };
      if (text.indexOf("\r") > -1) {
        console.info("Typesetter: got text with \\r chars; normalizing to \\n");
        text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
      }
      fontSize = +fontSize;
      letterSpacing = +letterSpacing;
      maxWidth = +maxWidth;
      lineHeight = lineHeight || "normal";
      textIndent = +textIndent;
      calculateFontRuns({
        text,
        lang,
        style: fontStyle,
        weight: fontWeight,
        fonts: typeof font === "string" ? [{ src: font }] : font,
        unicodeFontsURL,
        preResolvedFonts
      }, (runs) => {
        timings.fontLoad = now3() - mainStart;
        const hasMaxWidth = isFinite(maxWidth);
        let glyphIds = null;
        let glyphFontIndices = null;
        let glyphPositions = null;
        let glyphData = null;
        let glyphColors = null;
        let caretPositions = null;
        let visibleBounds = null;
        let chunkedBounds = null;
        let maxLineWidth = 0;
        let renderableGlyphCount = 0;
        let canWrap = whiteSpace !== "nowrap";
        const metricsByFont = /* @__PURE__ */ new Map();
        const typesetStart = now3();
        let lineXOffset = textIndent;
        let prevRunEndX = 0;
        let currentLine = new TextLine();
        const lines = [currentLine];
        runs.forEach((run) => {
          const { fontObj } = run;
          const { ascender, descender, unitsPerEm, lineGap, capHeight, xHeight } = fontObj;
          let fontData2 = metricsByFont.get(fontObj);
          if (!fontData2) {
            const fontSizeMult2 = fontSize / unitsPerEm;
            const calcLineHeight = lineHeight === "normal" ? (ascender - descender + lineGap) * fontSizeMult2 : lineHeight * fontSize;
            const halfLeading = (calcLineHeight - (ascender - descender) * fontSizeMult2) / 2;
            const caretHeight = Math.min(calcLineHeight, (ascender - descender) * fontSizeMult2);
            const caretTop = (ascender + descender) / 2 * fontSizeMult2 + caretHeight / 2;
            fontData2 = {
              index: metricsByFont.size,
              src: fontObj.src,
              fontObj,
              fontSizeMult: fontSizeMult2,
              unitsPerEm,
              ascender: ascender * fontSizeMult2,
              descender: descender * fontSizeMult2,
              capHeight: capHeight * fontSizeMult2,
              xHeight: xHeight * fontSizeMult2,
              lineHeight: calcLineHeight,
              baseline: -halfLeading - ascender * fontSizeMult2,
              // baseline offset from top of line height
              // cap: -halfLeading - capHeight * fontSizeMult, // cap from top of line height
              // ex: -halfLeading - xHeight * fontSizeMult, // ex from top of line height
              caretTop: (ascender + descender) / 2 * fontSizeMult2 + caretHeight / 2,
              caretBottom: caretTop - caretHeight
            };
            metricsByFont.set(fontObj, fontData2);
          }
          const { fontSizeMult } = fontData2;
          const runText = text.slice(run.start, run.end + 1);
          let prevGlyphX, prevGlyphObj;
          fontObj.forEachGlyph(runText, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {
            glyphX += prevRunEndX;
            charIndex += run.start;
            prevGlyphX = glyphX;
            prevGlyphObj = glyphObj;
            const char = text.charAt(charIndex);
            const glyphWidth = glyphObj.advanceWidth * fontSizeMult;
            const curLineCount = currentLine.count;
            let nextLine;
            if (!("isEmpty" in glyphObj)) {
              glyphObj.isWhitespace = !!char && new RegExp(lineBreakingWhiteSpace).test(char);
              glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);
              glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);
            }
            if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
              renderableGlyphCount++;
            }
            if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {
              if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {
                nextLine = new TextLine();
                lineXOffset = -glyphX;
              } else {
                for (let i = curLineCount; i--; ) {
                  if (i === 0 && overflowWrap === "break-word") {
                    nextLine = new TextLine();
                    lineXOffset = -glyphX;
                    break;
                  } else if (currentLine.glyphAt(i).glyphObj.canBreakAfter) {
                    nextLine = currentLine.splitAt(i + 1);
                    const adjustX = nextLine.glyphAt(0).x;
                    lineXOffset -= adjustX;
                    for (let j = nextLine.count; j--; ) {
                      nextLine.glyphAt(j).x -= adjustX;
                    }
                    break;
                  }
                }
              }
              if (nextLine) {
                currentLine.isSoftWrapped = true;
                currentLine = nextLine;
                lines.push(currentLine);
                maxLineWidth = maxWidth;
              }
            }
            let fly = currentLine.glyphAt(currentLine.count);
            fly.glyphObj = glyphObj;
            fly.x = glyphX + lineXOffset;
            fly.width = glyphWidth;
            fly.charIndex = charIndex;
            fly.fontData = fontData2;
            if (char === "\n") {
              currentLine = new TextLine();
              lines.push(currentLine);
              lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;
            }
          });
          prevRunEndX = prevGlyphX + prevGlyphObj.advanceWidth * fontSizeMult + letterSpacing * fontSize;
        });
        let totalHeight = 0;
        lines.forEach((line) => {
          let isTrailingWhitespace = true;
          for (let i = line.count; i--; ) {
            const glyphInfo = line.glyphAt(i);
            if (isTrailingWhitespace && !glyphInfo.glyphObj.isWhitespace) {
              line.width = glyphInfo.x + glyphInfo.width;
              if (line.width > maxLineWidth) {
                maxLineWidth = line.width;
              }
              isTrailingWhitespace = false;
            }
            let { lineHeight: lineHeight2, capHeight, xHeight, baseline } = glyphInfo.fontData;
            if (lineHeight2 > line.lineHeight)
              line.lineHeight = lineHeight2;
            const baselineDiff = baseline - line.baseline;
            if (baselineDiff < 0) {
              line.baseline += baselineDiff;
              line.cap += baselineDiff;
              line.ex += baselineDiff;
            }
            line.cap = Math.max(line.cap, line.baseline + capHeight);
            line.ex = Math.max(line.ex, line.baseline + xHeight);
          }
          line.baseline -= totalHeight;
          line.cap -= totalHeight;
          line.ex -= totalHeight;
          totalHeight += line.lineHeight;
        });
        let anchorXOffset = 0;
        let anchorYOffset = 0;
        if (anchorX) {
          if (typeof anchorX === "number") {
            anchorXOffset = -anchorX;
          } else if (typeof anchorX === "string") {
            anchorXOffset = -maxLineWidth * (anchorX === "left" ? 0 : anchorX === "center" ? 0.5 : anchorX === "right" ? 1 : parsePercent(anchorX));
          }
        }
        if (anchorY) {
          if (typeof anchorY === "number") {
            anchorYOffset = -anchorY;
          } else if (typeof anchorY === "string") {
            anchorYOffset = anchorY === "top" ? 0 : anchorY === "top-baseline" ? -lines[0].baseline : anchorY === "top-cap" ? -lines[0].cap : anchorY === "top-ex" ? -lines[0].ex : anchorY === "middle" ? totalHeight / 2 : anchorY === "bottom" ? totalHeight : anchorY === "bottom-baseline" ? lines[lines.length - 1].baseline : parsePercent(anchorY) * totalHeight;
          }
        }
        if (!metricsOnly) {
          const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);
          glyphIds = new Uint16Array(renderableGlyphCount);
          glyphFontIndices = new Uint8Array(renderableGlyphCount);
          glyphPositions = new Float32Array(renderableGlyphCount * 2);
          glyphData = {};
          visibleBounds = [INF, INF, -INF, -INF];
          chunkedBounds = [];
          if (includeCaretPositions) {
            caretPositions = new Float32Array(text.length * 4);
          }
          if (colorRanges) {
            glyphColors = new Uint8Array(renderableGlyphCount * 3);
          }
          let renderableGlyphIndex = 0;
          let prevCharIndex = -1;
          let colorCharIndex = -1;
          let chunk;
          let currentColor;
          lines.forEach((line, lineIndex) => {
            let { count: lineGlyphCount, width: lineWidth } = line;
            if (lineGlyphCount > 0) {
              let trailingWhitespaceCount = 0;
              for (let i = lineGlyphCount; i-- && line.glyphAt(i).glyphObj.isWhitespace; ) {
                trailingWhitespaceCount++;
              }
              let lineXOffset2 = 0;
              let justifyAdjust = 0;
              if (textAlign === "center") {
                lineXOffset2 = (maxLineWidth - lineWidth) / 2;
              } else if (textAlign === "right") {
                lineXOffset2 = maxLineWidth - lineWidth;
              } else if (textAlign === "justify" && line.isSoftWrapped) {
                let whitespaceCount = 0;
                for (let i = lineGlyphCount - trailingWhitespaceCount; i--; ) {
                  if (line.glyphAt(i).glyphObj.isWhitespace) {
                    whitespaceCount++;
                  }
                }
                justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;
              }
              if (justifyAdjust || lineXOffset2) {
                let justifyOffset = 0;
                for (let i = 0; i < lineGlyphCount; i++) {
                  let glyphInfo = line.glyphAt(i);
                  const glyphObj2 = glyphInfo.glyphObj;
                  glyphInfo.x += lineXOffset2 + justifyOffset;
                  if (justifyAdjust !== 0 && glyphObj2.isWhitespace && i < lineGlyphCount - trailingWhitespaceCount) {
                    justifyOffset += justifyAdjust;
                    glyphInfo.width += justifyAdjust;
                  }
                }
              }
              const flips = bidi.getReorderSegments(
                text,
                bidiLevelsResult,
                line.glyphAt(0).charIndex,
                line.glyphAt(line.count - 1).charIndex
              );
              for (let fi = 0; fi < flips.length; fi++) {
                const [start, end] = flips[fi];
                let left = Infinity, right = -Infinity;
                for (let i = 0; i < lineGlyphCount; i++) {
                  if (line.glyphAt(i).charIndex >= start) {
                    let startInLine = i, endInLine = i;
                    for (; endInLine < lineGlyphCount; endInLine++) {
                      let info = line.glyphAt(endInLine);
                      if (info.charIndex > end) {
                        break;
                      }
                      if (endInLine < lineGlyphCount - trailingWhitespaceCount) {
                        left = Math.min(left, info.x);
                        right = Math.max(right, info.x + info.width);
                      }
                    }
                    for (let j = startInLine; j < endInLine; j++) {
                      const glyphInfo = line.glyphAt(j);
                      glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);
                    }
                    break;
                  }
                }
              }
              let glyphObj;
              const setGlyphObj = (g) => glyphObj = g;
              for (let i = 0; i < lineGlyphCount; i++) {
                const glyphInfo = line.glyphAt(i);
                glyphObj = glyphInfo.glyphObj;
                const glyphId = glyphObj.index;
                const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1;
                if (rtl) {
                  const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);
                  if (mirrored) {
                    glyphInfo.fontData.fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);
                  }
                }
                if (includeCaretPositions) {
                  const { charIndex, fontData: fontData2 } = glyphInfo;
                  const caretLeft = glyphInfo.x + anchorXOffset;
                  const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;
                  caretPositions[charIndex * 4] = rtl ? caretRight : caretLeft;
                  caretPositions[charIndex * 4 + 1] = rtl ? caretLeft : caretRight;
                  caretPositions[charIndex * 4 + 2] = line.baseline + fontData2.caretBottom + anchorYOffset;
                  caretPositions[charIndex * 4 + 3] = line.baseline + fontData2.caretTop + anchorYOffset;
                  const ligCount = charIndex - prevCharIndex;
                  if (ligCount > 1) {
                    fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
                  }
                  prevCharIndex = charIndex;
                }
                if (colorRanges) {
                  const { charIndex } = glyphInfo;
                  while (charIndex > colorCharIndex) {
                    colorCharIndex++;
                    if (colorRanges.hasOwnProperty(colorCharIndex)) {
                      currentColor = colorRanges[colorCharIndex];
                    }
                  }
                }
                if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
                  const idx = renderableGlyphIndex++;
                  const { fontSizeMult, src: fontSrc, index: fontIndex } = glyphInfo.fontData;
                  const fontGlyphData = glyphData[fontSrc] || (glyphData[fontSrc] = {});
                  if (!fontGlyphData[glyphId]) {
                    fontGlyphData[glyphId] = {
                      path: glyphObj.path,
                      pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]
                    };
                  }
                  const glyphX = glyphInfo.x + anchorXOffset;
                  const glyphY = line.baseline + anchorYOffset;
                  glyphPositions[idx * 2] = glyphX;
                  glyphPositions[idx * 2 + 1] = glyphY;
                  const visX0 = glyphX + glyphObj.xMin * fontSizeMult;
                  const visY0 = glyphY + glyphObj.yMin * fontSizeMult;
                  const visX1 = glyphX + glyphObj.xMax * fontSizeMult;
                  const visY1 = glyphY + glyphObj.yMax * fontSizeMult;
                  if (visX0 < visibleBounds[0])
                    visibleBounds[0] = visX0;
                  if (visY0 < visibleBounds[1])
                    visibleBounds[1] = visY0;
                  if (visX1 > visibleBounds[2])
                    visibleBounds[2] = visX1;
                  if (visY1 > visibleBounds[3])
                    visibleBounds[3] = visY1;
                  if (idx % chunkedBoundsSize === 0) {
                    chunk = { start: idx, end: idx, rect: [INF, INF, -INF, -INF] };
                    chunkedBounds.push(chunk);
                  }
                  chunk.end++;
                  const chunkRect = chunk.rect;
                  if (visX0 < chunkRect[0])
                    chunkRect[0] = visX0;
                  if (visY0 < chunkRect[1])
                    chunkRect[1] = visY0;
                  if (visX1 > chunkRect[2])
                    chunkRect[2] = visX1;
                  if (visY1 > chunkRect[3])
                    chunkRect[3] = visY1;
                  glyphIds[idx] = glyphId;
                  glyphFontIndices[idx] = fontIndex;
                  if (colorRanges) {
                    const start = idx * 3;
                    glyphColors[start] = currentColor >> 16 & 255;
                    glyphColors[start + 1] = currentColor >> 8 & 255;
                    glyphColors[start + 2] = currentColor & 255;
                  }
                }
              }
            }
          });
          if (caretPositions) {
            const ligCount = text.length - prevCharIndex;
            if (ligCount > 1) {
              fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
            }
          }
        }
        const fontData = [];
        metricsByFont.forEach(({ index, src: src3, unitsPerEm, ascender, descender, lineHeight: lineHeight2, capHeight, xHeight }) => {
          fontData[index] = { src: src3, unitsPerEm, ascender, descender, lineHeight: lineHeight2, capHeight, xHeight };
        });
        timings.typesetting = now3() - typesetStart;
        callback({
          glyphIds,
          //id for each glyph, specific to that glyph's font
          glyphFontIndices,
          //index into fontData for each glyph
          glyphPositions,
          //x,y of each glyph's origin in layout
          glyphData,
          //dict holding data about each glyph appearing in the text
          fontData,
          //data about each font used in the text
          caretPositions,
          //startX,endX,bottomY caret positions for each char
          // caretHeight, //height of cursor from bottom to top - todo per glyph?
          glyphColors,
          //color for each glyph, if color ranges supplied
          chunkedBounds,
          //total rects per (n=chunkedBoundsSize) consecutive glyphs
          fontSize,
          //calculated em height
          topBaseline: anchorYOffset + lines[0].baseline,
          //y coordinate of the top line's baseline
          blockBounds: [
            //bounds for the whole block of text, including vertical padding for lineHeight
            anchorXOffset,
            anchorYOffset - totalHeight,
            anchorXOffset + maxLineWidth,
            anchorYOffset
          ],
          visibleBounds,
          //total bounds of visible text paths, may be larger or smaller than blockBounds
          timings
        });
      });
    }
    function measure(args, callback) {
      typeset({ ...args, metricsOnly: true }, (result) => {
        const [x0, y0, x1, y1] = result.blockBounds;
        callback({
          width: x1 - x0,
          height: y1 - y0
        });
      });
    }
    function parsePercent(str) {
      let match = str.match(/^([\d.]+)%$/);
      let pct = match ? parseFloat(match[1]) : NaN;
      return isNaN(pct) ? 0 : pct / 100;
    }
    function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {
      const ligStartX = caretPositions[ligStartIndex * 4];
      const ligEndX = caretPositions[ligStartIndex * 4 + 1];
      const ligBottom = caretPositions[ligStartIndex * 4 + 2];
      const ligTop = caretPositions[ligStartIndex * 4 + 3];
      const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;
      for (let i = 0; i < ligCount; i++) {
        const startIndex = (ligStartIndex + i) * 4;
        caretPositions[startIndex] = ligStartX + guessedAdvanceX * i;
        caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i + 1);
        caretPositions[startIndex + 2] = ligBottom;
        caretPositions[startIndex + 3] = ligTop;
      }
    }
    function now3() {
      return (self.performance || Date).now();
    }
    function TextLine() {
      this.data = [];
    }
    const textLineProps = ["glyphObj", "x", "width", "charIndex", "fontData"];
    TextLine.prototype = {
      width: 0,
      lineHeight: 0,
      baseline: 0,
      cap: 0,
      ex: 0,
      isSoftWrapped: false,
      get count() {
        return Math.ceil(this.data.length / textLineProps.length);
      },
      glyphAt(i) {
        let fly = TextLine.flyweight;
        fly.data = this.data;
        fly.index = i;
        return fly;
      },
      splitAt(i) {
        let newLine = new TextLine();
        newLine.data = this.data.splice(i * textLineProps.length);
        return newLine;
      }
    };
    TextLine.flyweight = textLineProps.reduce((obj, prop, i, all) => {
      Object.defineProperty(obj, prop, {
        get() {
          return this.data[this.index * textLineProps.length + i];
        },
        set(val) {
          this.data[this.index * textLineProps.length + i] = val;
        }
      });
      return obj;
    }, { data: null, index: 0 });
    return {
      typeset,
      measure
    };
  }
  function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {
    if (!useWebGL) {
      return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
    }
    return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(
      null,
      (err) => {
        if (!warned) {
          console.warn(`WebGL SDF generation failed, falling back to JS`, err);
          warned = true;
        }
        return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
      }
    );
  }
  function nextChunk() {
    const start = now2();
    while (queue.length && now2() - start < chunkTimeBudget) {
      queue.shift()();
    }
    timer = queue.length ? setTimeout(nextChunk, 0) : 0;
  }
  function generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {
    const workerId = "TroikaTextSDFGenerator_JS_" + callNum++ % threadCount;
    let thread = threads[workerId];
    if (!thread) {
      thread = threads[workerId] = {
        workerModule: defineWorkerModule({
          name: workerId,
          workerId,
          dependencies: [
            SDFGenerator,
            now2
          ],
          init(_createSDFGenerator, now3) {
            const generate = _createSDFGenerator().javascript.generate;
            return function(...args) {
              const start = now3();
              const textureData = generate(...args);
              return {
                textureData,
                timing: now3() - start
              };
            };
          },
          getTransferables(result) {
            return [result.textureData.buffer];
          }
        }),
        requests: 0,
        idleTimer: null
      };
    }
    thread.requests++;
    clearTimeout(thread.idleTimer);
    return thread.workerModule(width, height, path, viewBox, distance, exponent).then(({ textureData, timing }) => {
      const start = now2();
      const imageData = new Uint8Array(textureData.length * 4);
      for (let i = 0; i < textureData.length; i++) {
        imageData[i * 4 + channel] = textureData[i];
      }
      mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << 3 - channel);
      timing += now2() - start;
      if (--thread.requests === 0) {
        thread.idleTimer = setTimeout(() => {
          terminateWorker(workerId);
        }, idleTimeout);
      }
      return { timing };
    });
  }
  function warmUpSDFCanvas(canvas) {
    if (!canvas._warm) {
      mainThreadGenerator.webgl.isSupported(canvas);
      canvas._warm = true;
    }
  }
  function now$1() {
    return (self.performance || Date).now();
  }
  function configureTextBuilder(config) {
    if (hasRequested) {
      console.warn("configureTextBuilder called after first font request; will be ignored.");
    } else {
      assign2(CONFIG, config);
    }
  }
  function getTextRenderInfo(args, callback) {
    hasRequested = true;
    args = assign2({}, args);
    const totalStart = now$1();
    const { defaultFontURL } = CONFIG;
    const fonts = [];
    if (defaultFontURL) {
      fonts.push({ label: "default", src: toAbsoluteURL(defaultFontURL) });
    }
    if (args.font) {
      fonts.push({ label: "user", src: toAbsoluteURL(args.font) });
    }
    args.font = fonts;
    args.text = "" + args.text;
    args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;
    args.unicodeFontsURL = args.unicodeFontsURL || CONFIG.unicodeFontsURL;
    if (args.colorRanges != null) {
      let colors = {};
      for (let key in args.colorRanges) {
        if (args.colorRanges.hasOwnProperty(key)) {
          let val = args.colorRanges[key];
          if (typeof val !== "number") {
            val = tempColor.set(val).getHex();
          }
          colors[key] = val;
        }
      }
      args.colorRanges = colors;
    }
    Object.freeze(args);
    const { textureWidth, sdfExponent } = CONFIG;
    const { sdfGlyphSize } = args;
    const glyphsPerRow = textureWidth / sdfGlyphSize * 4;
    let atlas2 = atlases[sdfGlyphSize];
    if (!atlas2) {
      const canvas = document.createElement("canvas");
      canvas.width = textureWidth;
      canvas.height = sdfGlyphSize * 256 / glyphsPerRow;
      atlas2 = atlases[sdfGlyphSize] = {
        glyphCount: 0,
        sdfGlyphSize,
        sdfCanvas: canvas,
        sdfTexture: new Texture(
          canvas,
          void 0,
          void 0,
          void 0,
          LinearFilter,
          LinearFilter
        ),
        contextLost: false,
        glyphsByFont: /* @__PURE__ */ new Map()
      };
      atlas2.sdfTexture.generateMipmaps = false;
      initContextLossHandling(atlas2);
    }
    const { sdfTexture, sdfCanvas } = atlas2;
    typesetInWorker(args).then((result) => {
      const { glyphIds, glyphFontIndices, fontData, glyphPositions, fontSize, timings } = result;
      const neededSDFs = [];
      const glyphBounds = new Float32Array(glyphIds.length * 4);
      let boundsIdx = 0;
      let positionsIdx = 0;
      const quadsStart = now$1();
      const fontGlyphMaps = fontData.map((font) => {
        let map = atlas2.glyphsByFont.get(font.src);
        if (!map) {
          atlas2.glyphsByFont.set(font.src, map = /* @__PURE__ */ new Map());
        }
        return map;
      });
      glyphIds.forEach((glyphId, i) => {
        const fontIndex = glyphFontIndices[i];
        const { src: fontSrc, unitsPerEm } = fontData[fontIndex];
        let glyphInfo = fontGlyphMaps[fontIndex].get(glyphId);
        if (!glyphInfo) {
          const { path, pathBounds } = result.glyphData[fontSrc][glyphId];
          const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1]) / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);
          const atlasIndex = atlas2.glyphCount++;
          const sdfViewBox2 = [
            pathBounds[0] - fontUnitsMargin,
            pathBounds[1] - fontUnitsMargin,
            pathBounds[2] + fontUnitsMargin,
            pathBounds[3] + fontUnitsMargin
          ];
          fontGlyphMaps[fontIndex].set(glyphId, glyphInfo = { path, atlasIndex, sdfViewBox: sdfViewBox2 });
          neededSDFs.push(glyphInfo);
        }
        const { sdfViewBox } = glyphInfo;
        const posX = glyphPositions[positionsIdx++];
        const posY = glyphPositions[positionsIdx++];
        const fontSizeMult = fontSize / unitsPerEm;
        glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;
        glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;
        glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;
        glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;
        glyphIds[i] = glyphInfo.atlasIndex;
      });
      timings.quads = (timings.quads || 0) + (now$1() - quadsStart);
      const sdfStart = now$1();
      timings.sdf = {};
      const currentHeight = sdfCanvas.height;
      const neededRows = Math.ceil(atlas2.glyphCount / glyphsPerRow);
      const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));
      if (neededHeight > currentHeight) {
        console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);
        resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);
        sdfTexture.dispose();
      }
      Promise.all(neededSDFs.map(
        (glyphInfo) => generateGlyphSDF(glyphInfo, atlas2, args.gpuAccelerateSDF).then(({ timing }) => {
          timings.sdf[glyphInfo.atlasIndex] = timing;
        })
      )).then(() => {
        if (neededSDFs.length && !atlas2.contextLost) {
          safariPre15Workaround(atlas2);
          sdfTexture.needsUpdate = true;
        }
        timings.sdfTotal = now$1() - sdfStart;
        timings.total = now$1() - totalStart;
        callback(Object.freeze({
          parameters: args,
          sdfTexture,
          sdfGlyphSize,
          sdfExponent,
          glyphBounds,
          glyphAtlasIndices: glyphIds,
          glyphColors: result.glyphColors,
          caretPositions: result.caretPositions,
          chunkedBounds: result.chunkedBounds,
          ascender: result.ascender,
          descender: result.descender,
          lineHeight: result.lineHeight,
          capHeight: result.capHeight,
          xHeight: result.xHeight,
          topBaseline: result.topBaseline,
          blockBounds: result.blockBounds,
          visibleBounds: result.visibleBounds,
          timings: result.timings
        }));
      });
    });
    Promise.resolve().then(() => {
      if (!atlas2.contextLost) {
        warmUpSDFCanvas(sdfCanvas);
      }
    });
  }
  function generateGlyphSDF({ path, atlasIndex, sdfViewBox }, { sdfGlyphSize, sdfCanvas, contextLost }, useGPU) {
    if (contextLost) {
      return Promise.resolve({ timing: -1 });
    }
    const { textureWidth, sdfExponent } = CONFIG;
    const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);
    const squareIndex = Math.floor(atlasIndex / 4);
    const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;
    const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;
    const channel = atlasIndex % 4;
    return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU);
  }
  function initContextLossHandling(atlas2) {
    const canvas = atlas2.sdfCanvas;
    canvas.addEventListener("webglcontextlost", (event) => {
      console.log("Context Lost", event);
      event.preventDefault();
      atlas2.contextLost = true;
    });
    canvas.addEventListener("webglcontextrestored", (event) => {
      console.log("Context Restored", event);
      atlas2.contextLost = false;
      const promises = [];
      atlas2.glyphsByFont.forEach((glyphMap) => {
        glyphMap.forEach((glyph) => {
          promises.push(generateGlyphSDF(glyph, atlas2, true));
        });
      });
      Promise.all(promises).then(() => {
        safariPre15Workaround(atlas2);
        atlas2.sdfTexture.needsUpdate = true;
      });
    });
  }
  function preloadFont({ font, characters, sdfGlyphSize }, callback) {
    let text = Array.isArray(characters) ? characters.join("\n") : "" + characters;
    getTextRenderInfo({ font, sdfGlyphSize, text }, callback);
  }
  function assign2(toObj, fromObj) {
    for (let key in fromObj) {
      if (fromObj.hasOwnProperty(key)) {
        toObj[key] = fromObj[key];
      }
    }
    return toObj;
  }
  function toAbsoluteURL(path) {
    if (!linkEl) {
      linkEl = typeof document === "undefined" ? {} : document.createElement("a");
    }
    linkEl.href = path;
    return linkEl.href;
  }
  function safariPre15Workaround(atlas2) {
    if (typeof createImageBitmap !== "function") {
      console.info("Safari<15: applying SDF canvas workaround");
      const { sdfCanvas, sdfTexture } = atlas2;
      const { width, height } = sdfCanvas;
      const gl = atlas2.sdfCanvas.getContext("webgl");
      let pixels = sdfTexture.image.data;
      if (!pixels || pixels.length !== width * height * 4) {
        pixels = new Uint8Array(width * height * 4);
        sdfTexture.image = { width, height, data: pixels };
        sdfTexture.flipY = false;
        sdfTexture.isDataTexture = true;
      }
      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
    }
  }
  function dumpSDFTextures() {
    Object.keys(atlases).forEach((size) => {
      const canvas = atlases[size].sdfCanvas;
      const { width, height } = canvas;
      console.log("%c.", `
      background: url(${canvas.toDataURL()});
      background-size: ${width}px ${height}px;
      color: transparent;
      font-size: 0;
      line-height: ${height}px;
      padding-left: ${width}px;
    `);
    });
  }
  function getTemplateGeometry(detail) {
    let geom = templateGeometries[detail];
    if (!geom) {
      const front = new PlaneGeometry(1, 1, detail, detail);
      const back = front.clone();
      const frontAttrs = front.attributes;
      const backAttrs = back.attributes;
      const combined = new BufferGeometry();
      const vertCount = frontAttrs.uv.count;
      for (let i = 0; i < vertCount; i++) {
        backAttrs.position.array[i * 3] *= -1;
        backAttrs.normal.array[i * 3 + 2] *= -1;
      }
      ["position", "normal", "uv"].forEach((name) => {
        combined.setAttribute(
          name,
          new Float32BufferAttribute(
            [...frontAttrs[name].array, ...backAttrs[name].array],
            frontAttrs[name].itemSize
          )
        );
      });
      combined.setIndex([...front.index.array, ...back.index.array.map((n) => n + vertCount)]);
      combined.translate(0.5, 0.5, 0);
      geom = templateGeometries[detail] = combined;
    }
    return geom;
  }
  function updateBufferAttr(geom, attrName, newArray, itemSize) {
    const attr = geom.getAttribute(attrName);
    if (newArray) {
      if (attr && attr.array.length === newArray.length) {
        attr.array.set(newArray);
        attr.needsUpdate = true;
      } else {
        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));
        delete geom._maxInstanceCount;
        geom.dispose();
      }
    } else if (attr) {
      geom.deleteAttribute(attrName);
    }
  }
  function createTextDerivedMaterial(baseMaterial) {
    const textMaterial = createDerivedMaterial(baseMaterial, {
      chained: true,
      extensions: {
        derivatives: true
      },
      uniforms: {
        uTroikaSDFTexture: { value: null },
        uTroikaSDFTextureSize: { value: new Vector2() },
        uTroikaSDFGlyphSize: { value: 0 },
        uTroikaSDFExponent: { value: 0 },
        uTroikaTotalBounds: { value: new Vector4(0, 0, 0, 0) },
        uTroikaClipRect: { value: new Vector4(0, 0, 0, 0) },
        uTroikaDistanceOffset: { value: 0 },
        uTroikaOutlineOpacity: { value: 0 },
        uTroikaFillOpacity: { value: 1 },
        uTroikaPositionOffset: { value: new Vector2() },
        uTroikaCurveRadius: { value: 0 },
        uTroikaBlurRadius: { value: 0 },
        uTroikaStrokeWidth: { value: 0 },
        uTroikaStrokeColor: { value: new Color() },
        uTroikaStrokeOpacity: { value: 1 },
        uTroikaOrient: { value: new Matrix3() },
        uTroikaUseGlyphColors: { value: true },
        uTroikaSDFDebug: { value: false }
      },
      vertexDefs: VERTEX_DEFS,
      vertexTransform: VERTEX_TRANSFORM,
      fragmentDefs: FRAGMENT_DEFS,
      fragmentColorTransform: FRAGMENT_TRANSFORM,
      customRewriter({ vertexShader, fragmentShader }) {
        let uDiffuseRE = /\buniform\s+vec3\s+diffuse\b/;
        if (uDiffuseRE.test(fragmentShader)) {
          fragmentShader = fragmentShader.replace(uDiffuseRE, "varying vec3 vTroikaGlyphColor").replace(/\bdiffuse\b/g, "vTroikaGlyphColor");
          if (!uDiffuseRE.test(vertexShader)) {
            vertexShader = vertexShader.replace(
              voidMainRegExp,
              "uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n"
            );
          }
        }
        return { vertexShader, fragmentShader };
      }
    });
    textMaterial.transparent = true;
    Object.defineProperties(textMaterial, {
      isTroikaTextMaterial: { value: true },
      // WebGLShadowMap reverses the side of the shadow material by default, which fails
      // for planes, so here we force the `shadowSide` to always match the main side.
      shadowSide: {
        get() {
          return this.side;
        },
        set() {
        }
      }
    });
    return textMaterial;
  }
  function first(o) {
    return Array.isArray(o) ? o[0] : o;
  }
  function getCaretAtPoint(textRenderInfo, x, y) {
    let closestCaret = null;
    const rows = groupCaretsByRow(textRenderInfo);
    let closestRow = null;
    rows.forEach((row) => {
      if (!closestRow || Math.abs(y - (row.top + row.bottom) / 2) < Math.abs(y - (closestRow.top + closestRow.bottom) / 2)) {
        closestRow = row;
      }
    });
    closestRow.carets.forEach((caret) => {
      if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {
        closestCaret = caret;
      }
    });
    return closestCaret;
  }
  function getSelectionRects(textRenderInfo, start, end) {
    let rects;
    if (textRenderInfo) {
      let prevResult = _rectsCache.get(textRenderInfo);
      if (prevResult && prevResult.start === start && prevResult.end === end) {
        return prevResult.rects;
      }
      const { caretPositions } = textRenderInfo;
      if (end < start) {
        const s = start;
        start = end;
        end = s;
      }
      start = Math.max(start, 0);
      end = Math.min(end, caretPositions.length + 1);
      rects = [];
      let currentRect = null;
      for (let i = start; i < end; i++) {
        const x1 = caretPositions[i * 4];
        const x2 = caretPositions[i * 4 + 1];
        const left = Math.min(x1, x2);
        const right = Math.max(x1, x2);
        const bottom = caretPositions[i * 4 + 2];
        const top = caretPositions[i * 4 + 3];
        if (!currentRect || bottom !== currentRect.bottom || top !== currentRect.top || left > currentRect.right || right < currentRect.left) {
          currentRect = {
            left: Infinity,
            right: -Infinity,
            bottom,
            top
          };
          rects.push(currentRect);
        }
        currentRect.left = Math.min(left, currentRect.left);
        currentRect.right = Math.max(right, currentRect.right);
      }
      rects.sort((a, b) => b.bottom - a.bottom || a.left - b.left);
      for (let i = rects.length - 1; i-- > 0; ) {
        const rectA = rects[i];
        const rectB = rects[i + 1];
        if (rectA.bottom === rectB.bottom && rectA.top === rectB.top && rectA.left <= rectB.right && rectA.right >= rectB.left) {
          rectB.left = Math.min(rectB.left, rectA.left);
          rectB.right = Math.max(rectB.right, rectA.right);
          rects.splice(i, 1);
        }
      }
      _rectsCache.set(textRenderInfo, { start, end, rects });
    }
    return rects;
  }
  function groupCaretsByRow(textRenderInfo) {
    let rows = _caretsByRowCache.get(textRenderInfo);
    if (!rows) {
      rows = [];
      const { caretPositions } = textRenderInfo;
      let curRow;
      const visitCaret = (x, bottom, top, charIndex) => {
        if (!curRow || top < (curRow.top + curRow.bottom) / 2) {
          rows.push(curRow = { bottom, top, carets: [] });
        }
        if (top > curRow.top)
          curRow.top = top;
        if (bottom < curRow.bottom)
          curRow.bottom = bottom;
        curRow.carets.push({
          x,
          y: bottom,
          height: top - bottom,
          charIndex
        });
      };
      let i = 0;
      for (; i < caretPositions.length; i += 4) {
        visitCaret(caretPositions[i], caretPositions[i + 2], caretPositions[i + 3], i / 4);
      }
      visitCaret(caretPositions[i - 3], caretPositions[i - 2], caretPositions[i - 1], i / 4);
    }
    _caretsByRowCache.set(textRenderInfo, rows);
    return rows;
  }
  var workerModule, fontResolverWorkerModule, now2, mainThreadGenerator, warned, queue, chunkTimeBudget, timer, generateSDF_GL, threadCount, idleTimeout, threads, callNum, resizeWebGLCanvasWithoutClearing, CONFIG, tempColor, hasRequested, atlases, linkEl, typesetterWorkerModule, typesetInWorker, templateGeometries, glyphBoundsAttrName, glyphIndexAttrName, glyphColorAttrName, GlyphsGeometry, VERTEX_DEFS, VERTEX_TRANSFORM, FRAGMENT_DEFS, FRAGMENT_TRANSFORM, defaultMaterial, defaultStrokeColor, tempMat4, tempVec3a, tempVec3b, tempArray, origin, defaultOrient, getFlatRaycastMesh, getCurvedRaycastMesh, syncStartEvent, syncCompleteEvent, SYNCABLE_PROPS, COPYABLE_PROPS, Text, _rectsCache, _caretsByRowCache;
  var init_troika_three_text_esm = __esm({
    "node_modules/troika-three-text/dist/troika-three-text.esm.js"() {
      init_three_module();
      init_troika_worker_utils_esm();
      init_webgl_sdf_generator();
      init_bidi();
      init_troika_three_utils_esm();
      workerModule = /* @__PURE__ */ defineWorkerModule({
        name: "Typr Font Parser",
        dependencies: [typrFactory, woff2otfFactory, parserFactory],
        init(typrFactory2, woff2otfFactory2, parserFactory2) {
          const Typr = typrFactory2();
          const woff2otf = woff2otfFactory2();
          return parserFactory2(Typr, woff2otf);
        }
      });
      fontResolverWorkerModule = /* @__PURE__ */ defineWorkerModule({
        name: "FontResolver",
        dependencies: [
          createFontResolver,
          workerModule,
          unicodeFontResolverClientFactory
        ],
        init(createFontResolver2, fontParser, unicodeFontResolverClientFactory2) {
          return createFontResolver2(fontParser, unicodeFontResolverClientFactory2());
        }
      });
      now2 = () => (self.performance || Date).now();
      mainThreadGenerator = /* @__PURE__ */ SDFGenerator();
      queue = [];
      chunkTimeBudget = 5;
      timer = 0;
      generateSDF_GL = (...args) => {
        return new Promise((resolve, reject) => {
          queue.push(() => {
            const start = now2();
            try {
              mainThreadGenerator.webgl.generateIntoCanvas(...args);
              resolve({ timing: now2() - start });
            } catch (err) {
              reject(err);
            }
          });
          if (!timer) {
            timer = setTimeout(nextChunk, 0);
          }
        });
      };
      threadCount = 4;
      idleTimeout = 2e3;
      threads = {};
      callNum = 0;
      resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;
      CONFIG = {
        defaultFontURL: null,
        unicodeFontsURL: null,
        sdfGlyphSize: 64,
        sdfMargin: 1 / 16,
        sdfExponent: 9,
        textureWidth: 2048
      };
      tempColor = /* @__PURE__ */ new Color();
      hasRequested = false;
      atlases = /* @__PURE__ */ Object.create(null);
      typesetterWorkerModule = /* @__PURE__ */ defineWorkerModule({
        name: "Typesetter",
        dependencies: [
          createTypesetter,
          fontResolverWorkerModule,
          bidi_default
        ],
        init(createTypesetter2, fontResolver, bidiFactory2) {
          return createTypesetter2(fontResolver, bidiFactory2());
        }
      });
      typesetInWorker = /* @__PURE__ */ defineWorkerModule({
        name: "Typesetter",
        dependencies: [
          typesetterWorkerModule
        ],
        init(typesetter) {
          return function(args) {
            return new Promise((resolve) => {
              typesetter.typeset(args, resolve);
            });
          };
        },
        getTransferables(result) {
          const transferables = [];
          for (let p in result) {
            if (result[p] && result[p].buffer) {
              transferables.push(result[p].buffer);
            }
          }
          return transferables;
        }
      });
      templateGeometries = {};
      glyphBoundsAttrName = "aTroikaGlyphBounds";
      glyphIndexAttrName = "aTroikaGlyphIndex";
      glyphColorAttrName = "aTroikaGlyphColor";
      GlyphsGeometry = class extends InstancedBufferGeometry {
        constructor() {
          super();
          this.detail = 1;
          this.curveRadius = 0;
          this.groups = [
            { start: 0, count: Infinity, materialIndex: 0 },
            { start: 0, count: Infinity, materialIndex: 1 }
          ];
          this.boundingSphere = new Sphere();
          this.boundingBox = new Box3();
        }
        computeBoundingSphere() {
        }
        computeBoundingBox() {
        }
        // Since our base geometry contains triangles for both front and back sides, we can emulate
        // the "side" by restricting the draw range.
        setSide(side) {
          const verts = this.getIndex().count;
          this.setDrawRange(side === BackSide ? verts / 2 : 0, side === DoubleSide ? verts : verts / 2);
        }
        set detail(detail) {
          if (detail !== this._detail) {
            this._detail = detail;
            if (typeof detail !== "number" || detail < 1) {
              detail = 1;
            }
            let tpl = getTemplateGeometry(detail);
            ["position", "normal", "uv"].forEach((attr) => {
              this.attributes[attr] = tpl.attributes[attr].clone();
            });
            this.setIndex(tpl.getIndex().clone());
          }
        }
        get detail() {
          return this._detail;
        }
        set curveRadius(r) {
          if (r !== this._curveRadius) {
            this._curveRadius = r;
            this._updateBounds();
          }
        }
        get curveRadius() {
          return this._curveRadius;
        }
        /**
         * Update the geometry for a new set of glyphs.
         * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs
         *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1
         * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within
         *        the SDF atlas texture.
         * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs
         * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N
         *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be
         *        used with `applyClipRect` to choose an optimized `instanceCount`.
         * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.
         */
        updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {
          updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);
          updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);
          updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);
          this._blockBounds = blockBounds;
          this._chunkedBounds = chunkedBounds;
          this.instanceCount = glyphAtlasIndices.length;
          this._updateBounds();
        }
        _updateBounds() {
          const bounds = this._blockBounds;
          if (bounds) {
            const { curveRadius, boundingBox: bbox } = this;
            if (curveRadius) {
              const { PI, floor, min, max, sin, cos } = Math;
              const halfPi = PI / 2;
              const twoPi = PI * 2;
              const absR = Math.abs(curveRadius);
              const leftAngle = bounds[0] / absR;
              const rightAngle = bounds[2] / absR;
              const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi) ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);
              const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi) ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);
              const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi) ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);
              bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);
              bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);
            } else {
              bbox.min.set(bounds[0], bounds[1], 0);
              bbox.max.set(bounds[2], bounds[3], 0);
            }
            bbox.getBoundingSphere(this.boundingSphere);
          }
        }
        /**
         * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest
         * `instanceCount` that will show all glyphs within the clipped view. This is an optimization
         * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would
         * be clipped anyway.
         *
         * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting
         * offset, this optimization becomes less effective as the clipRect moves closer to the end of the
         * text block. We could fix that by switching from instancing to a full geometry with a drawRange,
         * but at the expense of much larger attribute buffers (see classdoc above.)
         *
         * @param {Vector4} clipRect
         */
        applyClipRect(clipRect) {
          let count = this.getAttribute(glyphIndexAttrName).count;
          let chunks = this._chunkedBounds;
          if (chunks) {
            for (let i = chunks.length; i--; ) {
              count = chunks[i].end;
              let rect = chunks[i].rect;
              if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {
                break;
              }
            }
          }
          this.instanceCount = count;
        }
      };
      VERTEX_DEFS = `
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform vec4 uTroikaTotalBounds;
uniform vec4 uTroikaClipRect;
uniform mat3 uTroikaOrient;
uniform bool uTroikaUseGlyphColors;
uniform float uTroikaDistanceOffset;
uniform float uTroikaBlurRadius;
uniform vec2 uTroikaPositionOffset;
uniform float uTroikaCurveRadius;
attribute vec4 aTroikaGlyphBounds;
attribute float aTroikaGlyphIndex;
attribute vec3 aTroikaGlyphColor;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec3 vTroikaGlyphColor;
varying vec2 vTroikaGlyphDimensions;
`;
      VERTEX_TRANSFORM = `
vec4 bounds = aTroikaGlyphBounds;
bounds.xz += uTroikaPositionOffset.x;
bounds.yw -= uTroikaPositionOffset.y;

vec4 outlineBounds = vec4(
  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,
  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius
);
vec4 clippedBounds = vec4(
  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),
  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)
);

vec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);

position.xy = mix(bounds.xy, bounds.zw, clippedXY);

uv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);

float rad = uTroikaCurveRadius;
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);
  normal.xz = vec2(sin(angle), cos(angle));
}
  
position = uTroikaOrient * position;
normal = uTroikaOrient * normal;

vTroikaGlyphUV = clippedXY.xy;
vTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);

${""}
float txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;
vec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;
vec2 txStartUV = txUvPerSquare * vec2(
  mod(floor(aTroikaGlyphIndex / 4.0), txCols),
  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)
);
vTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);
vTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);
`;
      FRAGMENT_DEFS = `
uniform sampler2D uTroikaSDFTexture;
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform float uTroikaSDFExponent;
uniform float uTroikaDistanceOffset;
uniform float uTroikaFillOpacity;
uniform float uTroikaOutlineOpacity;
uniform float uTroikaBlurRadius;
uniform vec3 uTroikaStrokeColor;
uniform float uTroikaStrokeWidth;
uniform float uTroikaStrokeOpacity;
uniform bool uTroikaSDFDebug;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec2 vTroikaGlyphDimensions;

float troikaSdfValueToSignedDistance(float alpha) {
  // Inverse of exponential encoding in webgl-sdf-generator
  ${""}
  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);
  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;
  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);
  return signedDist;
}

float troikaGlyphUvToSdfValue(vec2 glyphUV) {
  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);
  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);
  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1
  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;
}

float troikaGlyphUvToDistance(vec2 uv) {
  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));
}

float troikaGetAADist() {
  ${""}
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;
  #else
  return vTroikaGlyphDimensions.x / 64.0;
  #endif
}

float troikaGetFragDistValue() {
  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);
  float distance = troikaGlyphUvToDistance(clampedGlyphUV);
 
  // Extrapolate distance when outside bounds:
  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : 
    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);

  ${""}

  return distance;
}

float troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {
  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)
  float alpha = step(-distanceOffset, -distance);
  #else

  float alpha = smoothstep(
    distanceOffset + aaDist,
    distanceOffset - aaDist,
    distance
  );
  #endif

  return alpha;
}
`;
      FRAGMENT_TRANSFORM = `
float aaDist = troikaGetAADist();
float fragDistance = troikaGetFragDistValue();
float edgeAlpha = uTroikaSDFDebug ?
  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :
  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));

#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)
vec4 fillRGBA = gl_FragColor;
fillRGBA.a *= uTroikaFillOpacity;
vec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);
if (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;
gl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(
  -uTroikaStrokeWidth - aaDist,
  -uTroikaStrokeWidth + aaDist,
  fragDistance
));
gl_FragColor.a *= edgeAlpha;
#endif

if (edgeAlpha == 0.0) {
  discard;
}
`;
      defaultMaterial = /* @__PURE__ */ new MeshBasicMaterial({
        color: 16777215,
        side: DoubleSide,
        transparent: true
      });
      defaultStrokeColor = 8421504;
      tempMat4 = /* @__PURE__ */ new Matrix4();
      tempVec3a = /* @__PURE__ */ new Vector3();
      tempVec3b = /* @__PURE__ */ new Vector3();
      tempArray = [];
      origin = /* @__PURE__ */ new Vector3();
      defaultOrient = "+x+y";
      getFlatRaycastMesh = () => {
        const mesh = new Mesh(
          new PlaneGeometry(1, 1),
          defaultMaterial
        );
        getFlatRaycastMesh = () => mesh;
        return mesh;
      };
      getCurvedRaycastMesh = () => {
        const mesh = new Mesh(
          new PlaneGeometry(1, 1, 32, 1),
          defaultMaterial
        );
        getCurvedRaycastMesh = () => mesh;
        return mesh;
      };
      syncStartEvent = { type: "syncstart" };
      syncCompleteEvent = { type: "synccomplete" };
      SYNCABLE_PROPS = [
        "font",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "lang",
        "letterSpacing",
        "lineHeight",
        "maxWidth",
        "overflowWrap",
        "text",
        "direction",
        "textAlign",
        "textIndent",
        "whiteSpace",
        "anchorX",
        "anchorY",
        "colorRanges",
        "sdfGlyphSize"
      ];
      COPYABLE_PROPS = SYNCABLE_PROPS.concat(
        "material",
        "color",
        "depthOffset",
        "clipRect",
        "curveRadius",
        "orientation",
        "glyphGeometryDetail"
      );
      Text = class extends Mesh {
        constructor() {
          const geometry = new GlyphsGeometry();
          super(geometry, null);
          this.text = "";
          this.anchorX = 0;
          this.anchorY = 0;
          this.curveRadius = 0;
          this.direction = "auto";
          this.font = null;
          this.unicodeFontsURL = null;
          this.fontSize = 0.1;
          this.fontWeight = "normal";
          this.fontStyle = "normal";
          this.lang = "en";
          this.letterSpacing = 0;
          this.lineHeight = "normal";
          this.maxWidth = Infinity;
          this.overflowWrap = "normal";
          this.textAlign = "left";
          this.textIndent = 0;
          this.whiteSpace = "normal";
          this.material = null;
          this.color = null;
          this.colorRanges = null;
          this.outlineWidth = 0;
          this.outlineColor = 0;
          this.outlineOpacity = 1;
          this.outlineBlur = 0;
          this.outlineOffsetX = 0;
          this.outlineOffsetY = 0;
          this.strokeWidth = 0;
          this.strokeColor = defaultStrokeColor;
          this.strokeOpacity = 1;
          this.fillOpacity = 1;
          this.depthOffset = 0;
          this.clipRect = null;
          this.orientation = defaultOrient;
          this.glyphGeometryDetail = 1;
          this.sdfGlyphSize = null;
          this.gpuAccelerateSDF = true;
          this.debugSDF = false;
        }
        /**
         * Updates the text rendering according to the current text-related configuration properties.
         * This is an async process, so you can pass in a callback function to be executed when it
         * finishes.
         * @param {function} [callback]
         */
        sync(callback) {
          if (this._needsSync) {
            this._needsSync = false;
            if (this._isSyncing) {
              (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);
            } else {
              this._isSyncing = true;
              this.dispatchEvent(syncStartEvent);
              getTextRenderInfo({
                text: this.text,
                font: this.font,
                lang: this.lang,
                fontSize: this.fontSize || 0.1,
                fontWeight: this.fontWeight || "normal",
                fontStyle: this.fontStyle || "normal",
                letterSpacing: this.letterSpacing || 0,
                lineHeight: this.lineHeight || "normal",
                maxWidth: this.maxWidth,
                direction: this.direction || "auto",
                textAlign: this.textAlign,
                textIndent: this.textIndent,
                whiteSpace: this.whiteSpace,
                overflowWrap: this.overflowWrap,
                anchorX: this.anchorX,
                anchorY: this.anchorY,
                colorRanges: this.colorRanges,
                includeCaretPositions: true,
                //TODO parameterize
                sdfGlyphSize: this.sdfGlyphSize,
                gpuAccelerateSDF: this.gpuAccelerateSDF,
                unicodeFontsURL: this.unicodeFontsURL
              }, (textRenderInfo) => {
                this._isSyncing = false;
                this._textRenderInfo = textRenderInfo;
                this.geometry.updateGlyphs(
                  textRenderInfo.glyphBounds,
                  textRenderInfo.glyphAtlasIndices,
                  textRenderInfo.blockBounds,
                  textRenderInfo.chunkedBounds,
                  textRenderInfo.glyphColors
                );
                const queued = this._queuedSyncs;
                if (queued) {
                  this._queuedSyncs = null;
                  this._needsSync = true;
                  this.sync(() => {
                    queued.forEach((fn) => fn && fn());
                  });
                }
                this.dispatchEvent(syncCompleteEvent);
                if (callback) {
                  callback();
                }
              });
            }
          }
        }
        /**
         * Initiate a sync if needed - note it won't complete until next frame at the
         * earliest so if possible it's a good idea to call sync() manually as soon as
         * all the properties have been set.
         * @override
         */
        onBeforeRender(renderer, scene, camera, geometry, material, group) {
          this.sync();
          if (material.isTroikaTextMaterial) {
            this._prepareForRender(material);
          }
          material._hadOwnSide = material.hasOwnProperty("side");
          this.geometry.setSide(material._actualSide = material.side);
          material.side = FrontSide;
        }
        onAfterRender(renderer, scene, camera, geometry, material, group) {
          if (material._hadOwnSide) {
            material.side = material._actualSide;
          } else {
            delete material.side;
          }
        }
        /**
         * Shortcut to dispose the geometry specific to this instance.
         * Note: we don't also dispose the derived material here because if anything else is
         * sharing the same base material it will result in a pause next frame as the program
         * is recompiled. Instead users can dispose the base material manually, like normal,
         * and we'll also dispose the derived material at that time.
         */
        dispose() {
          this.geometry.dispose();
        }
        /**
         * @property {TroikaTextRenderInfo|null} textRenderInfo
         * @readonly
         * The current processed rendering data for this TextMesh, returned by the TextBuilder after
         * a `sync()` call. This will be `null` initially, and may be stale for a short period until
         * the asynchrous `sync()` process completes.
         */
        get textRenderInfo() {
          return this._textRenderInfo || null;
        }
        // Handler for automatically wrapping the base material with our upgrades. We do the wrapping
        // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.
        get material() {
          let derivedMaterial = this._derivedMaterial;
          const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());
          if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {
            derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);
            baseMaterial.addEventListener("dispose", function onDispose() {
              baseMaterial.removeEventListener("dispose", onDispose);
              derivedMaterial.dispose();
            });
          }
          if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {
            let outlineMaterial = derivedMaterial._outlineMtl;
            if (!outlineMaterial) {
              outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {
                id: { value: derivedMaterial.id + 0.1 }
              });
              outlineMaterial.isTextOutlineMaterial = true;
              outlineMaterial.depthWrite = false;
              outlineMaterial.map = null;
              derivedMaterial.addEventListener("dispose", function onDispose() {
                derivedMaterial.removeEventListener("dispose", onDispose);
                outlineMaterial.dispose();
              });
            }
            return [
              outlineMaterial,
              derivedMaterial
            ];
          } else {
            return derivedMaterial;
          }
        }
        set material(baseMaterial) {
          if (baseMaterial && baseMaterial.isTroikaTextMaterial) {
            this._derivedMaterial = baseMaterial;
            this._baseMaterial = baseMaterial.baseMaterial;
          } else {
            this._baseMaterial = baseMaterial;
          }
        }
        get glyphGeometryDetail() {
          return this.geometry.detail;
        }
        set glyphGeometryDetail(detail) {
          this.geometry.detail = detail;
        }
        get curveRadius() {
          return this.geometry.curveRadius;
        }
        set curveRadius(r) {
          this.geometry.curveRadius = r;
        }
        // Create and update material for shadows upon request:
        get customDepthMaterial() {
          return first(this.material).getDepthMaterial();
        }
        get customDistanceMaterial() {
          return first(this.material).getDistanceMaterial();
        }
        _prepareForRender(material) {
          const isOutline = material.isTextOutlineMaterial;
          const uniforms = material.uniforms;
          const textInfo = this.textRenderInfo;
          if (textInfo) {
            const { sdfTexture, blockBounds } = textInfo;
            uniforms.uTroikaSDFTexture.value = sdfTexture;
            uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);
            uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;
            uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;
            uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);
            uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;
            let distanceOffset = 0;
            let blurRadius = 0;
            let strokeWidth = 0;
            let fillOpacity;
            let strokeOpacity;
            let strokeColor;
            let offsetX = 0;
            let offsetY = 0;
            if (isOutline) {
              let { outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity } = this;
              distanceOffset = this._parsePercent(outlineWidth) || 0;
              blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);
              fillOpacity = outlineOpacity;
              offsetX = this._parsePercent(outlineOffsetX) || 0;
              offsetY = this._parsePercent(outlineOffsetY) || 0;
            } else {
              strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);
              if (strokeWidth) {
                strokeColor = this.strokeColor;
                uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);
                strokeOpacity = this.strokeOpacity;
                if (strokeOpacity == null)
                  strokeOpacity = 1;
              }
              fillOpacity = this.fillOpacity;
            }
            uniforms.uTroikaDistanceOffset.value = distanceOffset;
            uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);
            uniforms.uTroikaBlurRadius.value = blurRadius;
            uniforms.uTroikaStrokeWidth.value = strokeWidth;
            uniforms.uTroikaStrokeOpacity.value = strokeOpacity;
            uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;
            uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;
            let clipRect = this.clipRect;
            if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {
              uniforms.uTroikaClipRect.value.fromArray(clipRect);
            } else {
              const pad = (this.fontSize || 0.1) * 100;
              uniforms.uTroikaClipRect.value.set(
                blockBounds[0] - pad,
                blockBounds[1] - pad,
                blockBounds[2] + pad,
                blockBounds[3] + pad
              );
            }
            this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);
          }
          uniforms.uTroikaSDFDebug.value = !!this.debugSDF;
          material.polygonOffset = !!this.depthOffset;
          material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;
          const color = isOutline ? this.outlineColor || 0 : this.color;
          if (color == null) {
            delete material.color;
          } else {
            const colorObj = material.hasOwnProperty("color") ? material.color : material.color = new Color();
            if (color !== colorObj._input || typeof color === "object") {
              colorObj.set(colorObj._input = color);
            }
          }
          let orient = this.orientation || defaultOrient;
          if (orient !== material._orientation) {
            let rotMat = uniforms.uTroikaOrient.value;
            orient = orient.replace(/[^-+xyz]/g, "");
            let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);
            if (match) {
              let [, hSign, hAxis, vSign, vAxis] = match;
              tempVec3a.set(0, 0, 0)[hAxis] = hSign === "-" ? 1 : -1;
              tempVec3b.set(0, 0, 0)[vAxis] = vSign === "-" ? -1 : 1;
              tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);
              rotMat.setFromMatrix4(tempMat4);
            } else {
              rotMat.identity();
            }
            material._orientation = orient;
          }
        }
        _parsePercent(value) {
          if (typeof value === "string") {
            let match = value.match(/^(-?[\d.]+)%$/);
            let pct = match ? parseFloat(match[1]) : NaN;
            value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;
          }
          return value;
        }
        /**
         * Translate a point in local space to an x/y in the text plane.
         */
        localPositionToTextCoords(position3, target2 = new Vector2()) {
          target2.copy(position3);
          const r = this.curveRadius;
          if (r) {
            target2.x = Math.atan2(position3.x, Math.abs(r) - Math.abs(position3.z)) * Math.abs(r);
          }
          return target2;
        }
        /**
         * Translate a point in world space to an x/y in the text plane.
         */
        worldPositionToTextCoords(position3, target2 = new Vector2()) {
          tempVec3a.copy(position3);
          return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target2);
        }
        /**
         * @override Custom raycasting to test against the whole text block's max rectangular bounds
         * TODO is there any reason to make this more granular, like within individual line or glyph rects?
         */
        raycast(raycaster, intersects2) {
          const { textRenderInfo, curveRadius } = this;
          if (textRenderInfo) {
            const bounds = textRenderInfo.blockBounds;
            const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();
            const geom = raycastMesh.geometry;
            const { position: position3, uv } = geom.attributes;
            for (let i = 0; i < uv.count; i++) {
              let x = bounds[0] + uv.getX(i) * (bounds[2] - bounds[0]);
              const y = bounds[1] + uv.getY(i) * (bounds[3] - bounds[1]);
              let z = 0;
              if (curveRadius) {
                z = curveRadius - Math.cos(x / curveRadius) * curveRadius;
                x = Math.sin(x / curveRadius) * curveRadius;
              }
              position3.setXYZ(i, x, y, z);
            }
            geom.boundingSphere = this.geometry.boundingSphere;
            geom.boundingBox = this.geometry.boundingBox;
            raycastMesh.matrixWorld = this.matrixWorld;
            raycastMesh.material.side = this.material.side;
            tempArray.length = 0;
            raycastMesh.raycast(raycaster, tempArray);
            for (let i = 0; i < tempArray.length; i++) {
              tempArray[i].object = this;
              intersects2.push(tempArray[i]);
            }
          }
        }
        copy(source) {
          const geom = this.geometry;
          super.copy(source);
          this.geometry = geom;
          COPYABLE_PROPS.forEach((prop) => {
            this[prop] = source[prop];
          });
          return this;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      };
      SYNCABLE_PROPS.forEach((prop) => {
        const privateKey = "_private_" + prop;
        Object.defineProperty(Text.prototype, prop, {
          get() {
            return this[privateKey];
          },
          set(value) {
            if (value !== this[privateKey]) {
              this[privateKey] = value;
              this._needsSync = true;
            }
          }
        });
      });
      _rectsCache = /* @__PURE__ */ new WeakMap();
      _caretsByRowCache = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/@atproto/api/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@atproto/api/dist/index.js"(exports, module) {
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __commonJS2 = (cb, mod) => function __require() {
        return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
      };
      var __export2 = (target2, all) => {
        for (var name2 in all)
          __defProp2(target2, name2, { get: all[name2], enumerable: true });
      };
      var __copyProps2 = (to, from3, except, desc) => {
        if (from3 && typeof from3 === "object" || typeof from3 === "function") {
          for (let key of __getOwnPropNames2(from3))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc2(from3, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target2) => (target2 = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target2, "default", { value: mod, enumerable: true }) : target2, mod));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var require_boundaries = __commonJS2({
        "../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          exports2.EXTENDED_PICTOGRAPHIC = exports2.CLUSTER_BREAK = void 0;
          var CLUSTER_BREAK;
          (function(CLUSTER_BREAK2) {
            CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
            CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
            CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
            CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
            CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
            CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
            CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
            CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
            CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
            CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
            CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
            CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
            CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
            CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
          })(CLUSTER_BREAK = exports2.CLUSTER_BREAK || (exports2.CLUSTER_BREAK = {}));
          exports2.EXTENDED_PICTOGRAPHIC = 101;
        }
      });
      var require_GraphemerHelper = __commonJS2({
        "../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          var boundaries_1 = require_boundaries();
          var NotBreak = 0;
          var BreakStart = 1;
          var Break = 2;
          var BreakLastRegional = 3;
          var BreakPenultimateRegional = 4;
          var GraphemerHelper = class {
            static isSurrogate(str, pos) {
              return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
            }
            static codePointAt(str, idx) {
              if (idx === void 0) {
                idx = 0;
              }
              const code2 = str.charCodeAt(idx);
              if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
                const hi = code2;
                const low = str.charCodeAt(idx + 1);
                if (56320 <= low && low <= 57343) {
                  return (hi - 55296) * 1024 + (low - 56320) + 65536;
                }
                return hi;
              }
              if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
                const hi = str.charCodeAt(idx - 1);
                const low = code2;
                if (55296 <= hi && hi <= 56319) {
                  return (hi - 55296) * 1024 + (low - 56320) + 65536;
                }
                return low;
              }
              return code2;
            }
            static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
              const all = [start].concat(mid).concat([end]);
              const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
              const previous = all[all.length - 2];
              const next = end;
              const nextEmoji = endEmoji;
              const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
              if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
              }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
                if (all.filter(function(c) {
                  return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                }).length % 2 === 1) {
                  return BreakLastRegional;
                } else {
                  return BreakPenultimateRegional;
                }
              }
              if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
                return NotBreak;
              } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
                return BreakStart;
              } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {
                return BreakStart;
              } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {
                return NotBreak;
              } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
                return NotBreak;
              } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {
                return NotBreak;
              } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
                return NotBreak;
              } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
                return NotBreak;
              } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
                return NotBreak;
              }
              const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
              if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {
                return c === boundaries_1.CLUSTER_BREAK.EXTEND;
              }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
                return NotBreak;
              }
              if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
                return Break;
              }
              if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
                return NotBreak;
              }
              return BreakStart;
            }
          };
          exports2.default = GraphemerHelper;
        }
      });
      var require_GraphemerIterator = __commonJS2({
        "../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js"(exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          var GraphemerIterator = class {
            constructor(str, nextBreak) {
              this._index = 0;
              this._str = str;
              this._nextBreak = nextBreak;
            }
            [Symbol.iterator]() {
              return this;
            }
            next() {
              let brk;
              if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
                const value = this._str.slice(this._index, brk);
                this._index = brk;
                return { value, done: false };
              }
              if (this._index < this._str.length) {
                const value = this._str.slice(this._index);
                this._index = this._str.length;
                return { value, done: false };
              }
              return { value: void 0, done: true };
            }
          };
          exports2.default = GraphemerIterator;
        }
      });
      var require_Graphemer = __commonJS2({
        "../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js"(exports2) {
          "use strict";
          var __importDefault = exports2 && exports2.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : { "default": mod };
          };
          Object.defineProperty(exports2, "__esModule", { value: true });
          var boundaries_1 = require_boundaries();
          var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());
          var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());
          var Graphemer2 = class {
            static nextBreak(string3, index) {
              if (index === void 0) {
                index = 0;
              }
              if (index < 0) {
                return 0;
              }
              if (index >= string3.length - 1) {
                return string3.length;
              }
              const prevCP = GraphemerHelper_1.default.codePointAt(string3, index);
              const prev = Graphemer2.getGraphemeBreakProperty(prevCP);
              const prevEmoji = Graphemer2.getEmojiProperty(prevCP);
              const mid = [];
              const midEmoji = [];
              for (let i = index + 1; i < string3.length; i++) {
                if (GraphemerHelper_1.default.isSurrogate(string3, i - 1)) {
                  continue;
                }
                const nextCP = GraphemerHelper_1.default.codePointAt(string3, i);
                const next = Graphemer2.getGraphemeBreakProperty(nextCP);
                const nextEmoji = Graphemer2.getEmojiProperty(nextCP);
                if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {
                  return i;
                }
                mid.push(next);
                midEmoji.push(nextEmoji);
              }
              return string3.length;
            }
            splitGraphemes(str) {
              const res = [];
              let index = 0;
              let brk;
              while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {
                res.push(str.slice(index, brk));
                index = brk;
              }
              if (index < str.length) {
                res.push(str.slice(index));
              }
              return res;
            }
            iterateGraphemes(str) {
              return new GraphemerIterator_1.default(str, Graphemer2.nextBreak);
            }
            countGraphemes(str) {
              let count = 0;
              let index = 0;
              let brk;
              while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {
                index = brk;
                count++;
              }
              if (index < str.length) {
                count++;
              }
              return count;
            }
            static getGraphemeBreakProperty(code2) {
              if (code2 < 48905) {
                if (code2 < 44116) {
                  if (code2 < 4141) {
                    if (code2 < 2818) {
                      if (code2 < 2363) {
                        if (code2 < 1759) {
                          if (code2 < 1471) {
                            if (code2 < 127) {
                              if (code2 < 11) {
                                if (code2 < 10) {
                                  if (0 <= code2 && code2 <= 9) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 === 10) {
                                    return boundaries_1.CLUSTER_BREAK.LF;
                                  }
                                }
                              } else {
                                if (code2 < 13) {
                                  if (11 <= code2 && code2 <= 12) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 < 14) {
                                    if (code2 === 13) {
                                      return boundaries_1.CLUSTER_BREAK.CR;
                                    }
                                  } else {
                                    if (14 <= code2 && code2 <= 31) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 768) {
                                if (code2 < 173) {
                                  if (127 <= code2 && code2 <= 159) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 === 173) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                }
                              } else {
                                if (code2 < 1155) {
                                  if (768 <= code2 && code2 <= 879) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 1425) {
                                    if (1155 <= code2 && code2 <= 1161) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (1425 <= code2 && code2 <= 1469) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 1552) {
                              if (code2 < 1476) {
                                if (code2 < 1473) {
                                  if (code2 === 1471) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (1473 <= code2 && code2 <= 1474) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 1479) {
                                  if (1476 <= code2 && code2 <= 1477) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 1536) {
                                    if (code2 === 1479) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (1536 <= code2 && code2 <= 1541) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 1648) {
                                if (code2 < 1564) {
                                  if (1552 <= code2 && code2 <= 1562) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 1611) {
                                    if (code2 === 1564) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  } else {
                                    if (1611 <= code2 && code2 <= 1631) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 1750) {
                                  if (code2 === 1648) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 1757) {
                                    if (1750 <= code2 && code2 <= 1756) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 1757) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2075) {
                            if (code2 < 1840) {
                              if (code2 < 1770) {
                                if (code2 < 1767) {
                                  if (1759 <= code2 && code2 <= 1764) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (1767 <= code2 && code2 <= 1768) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 1807) {
                                  if (1770 <= code2 && code2 <= 1773) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 1807) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                  if (code2 === 1809) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2027) {
                                if (code2 < 1958) {
                                  if (1840 <= code2 && code2 <= 1866) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (1958 <= code2 && code2 <= 1968) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 2045) {
                                  if (2027 <= code2 && code2 <= 2035) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2070) {
                                    if (code2 === 2045) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2070 <= code2 && code2 <= 2073) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2200) {
                              if (code2 < 2089) {
                                if (code2 < 2085) {
                                  if (2075 <= code2 && code2 <= 2083) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (2085 <= code2 && code2 <= 2087) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 2137) {
                                  if (2089 <= code2 && code2 <= 2093) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2192) {
                                    if (2137 <= code2 && code2 <= 2139) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2192 <= code2 && code2 <= 2193) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2275) {
                                if (code2 < 2250) {
                                  if (2200 <= code2 && code2 <= 2207) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2274) {
                                    if (2250 <= code2 && code2 <= 2273) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 2274) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 2307) {
                                  if (2275 <= code2 && code2 <= 2306) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 2307) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 2362) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2561) {
                          if (code2 < 2434) {
                            if (code2 < 2381) {
                              if (code2 < 2366) {
                                if (code2 === 2363) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 2364) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 2369) {
                                  if (2366 <= code2 && code2 <= 2368) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 2377) {
                                    if (2369 <= code2 && code2 <= 2376) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2377 <= code2 && code2 <= 2380) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2385) {
                                if (code2 < 2382) {
                                  if (code2 === 2381) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (2382 <= code2 && code2 <= 2383) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 2402) {
                                  if (2385 <= code2 && code2 <= 2391) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2433) {
                                    if (2402 <= code2 && code2 <= 2403) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 2433) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2503) {
                              if (code2 < 2494) {
                                if (code2 < 2492) {
                                  if (2434 <= code2 && code2 <= 2435) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 2492) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 2495) {
                                  if (code2 === 2494) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2497) {
                                    if (2495 <= code2 && code2 <= 2496) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (2497 <= code2 && code2 <= 2500) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2519) {
                                if (code2 < 2507) {
                                  if (2503 <= code2 && code2 <= 2504) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 2509) {
                                    if (2507 <= code2 && code2 <= 2508) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 2509) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 2530) {
                                  if (code2 === 2519) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2558) {
                                    if (2530 <= code2 && code2 <= 2531) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 2558) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2691) {
                            if (code2 < 2631) {
                              if (code2 < 2620) {
                                if (code2 < 2563) {
                                  if (2561 <= code2 && code2 <= 2562) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 2563) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 2622) {
                                  if (code2 === 2620) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2625) {
                                    if (2622 <= code2 && code2 <= 2624) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (2625 <= code2 && code2 <= 2626) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2672) {
                                if (code2 < 2635) {
                                  if (2631 <= code2 && code2 <= 2632) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2641) {
                                    if (2635 <= code2 && code2 <= 2637) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 2641) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 2677) {
                                  if (2672 <= code2 && code2 <= 2673) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2689) {
                                    if (code2 === 2677) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2689 <= code2 && code2 <= 2690) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 2761) {
                              if (code2 < 2750) {
                                if (code2 === 2691) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 2748) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 2753) {
                                  if (2750 <= code2 && code2 <= 2752) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 2759) {
                                    if (2753 <= code2 && code2 <= 2757) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2759 <= code2 && code2 <= 2760) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2786) {
                                if (code2 < 2763) {
                                  if (code2 === 2761) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 2765) {
                                    if (2763 <= code2 && code2 <= 2764) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 2765) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 2810) {
                                  if (2786 <= code2 && code2 <= 2787) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2817) {
                                    if (2810 <= code2 && code2 <= 2815) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 2817) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3315) {
                        if (code2 < 3076) {
                          if (code2 < 2946) {
                            if (code2 < 2887) {
                              if (code2 < 2878) {
                                if (code2 < 2876) {
                                  if (2818 <= code2 && code2 <= 2819) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 2876) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 2880) {
                                  if (2878 <= code2 && code2 <= 2879) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2881) {
                                    if (code2 === 2880) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (2881 <= code2 && code2 <= 2884) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 2893) {
                                if (code2 < 2891) {
                                  if (2887 <= code2 && code2 <= 2888) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (2891 <= code2 && code2 <= 2892) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 2901) {
                                  if (code2 === 2893) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 2914) {
                                    if (2901 <= code2 && code2 <= 2903) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (2914 <= code2 && code2 <= 2915) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3014) {
                              if (code2 < 3007) {
                                if (code2 === 2946) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                                if (code2 === 3006) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 3008) {
                                  if (code2 === 3007) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3009) {
                                    if (code2 === 3008) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3009 <= code2 && code2 <= 3010) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3031) {
                                if (code2 < 3018) {
                                  if (3014 <= code2 && code2 <= 3016) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3021) {
                                    if (3018 <= code2 && code2 <= 3020) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 3021) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 3072) {
                                  if (code2 === 3031) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3073) {
                                    if (code2 === 3072) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3073 <= code2 && code2 <= 3075) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3262) {
                            if (code2 < 3146) {
                              if (code2 < 3134) {
                                if (code2 === 3076) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                                if (code2 === 3132) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 3137) {
                                  if (3134 <= code2 && code2 <= 3136) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3142) {
                                    if (3137 <= code2 && code2 <= 3140) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (3142 <= code2 && code2 <= 3144) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3201) {
                                if (code2 < 3157) {
                                  if (3146 <= code2 && code2 <= 3149) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3170) {
                                    if (3157 <= code2 && code2 <= 3158) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3170 <= code2 && code2 <= 3171) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 3202) {
                                  if (code2 === 3201) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3260) {
                                    if (3202 <= code2 && code2 <= 3203) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 3260) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3270) {
                              if (code2 < 3264) {
                                if (code2 === 3262) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 3263) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 3266) {
                                  if (3264 <= code2 && code2 <= 3265) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3267) {
                                    if (code2 === 3266) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3267 <= code2 && code2 <= 3268) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3276) {
                                if (code2 < 3271) {
                                  if (code2 === 3270) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3274) {
                                    if (3271 <= code2 && code2 <= 3272) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (3274 <= code2 && code2 <= 3275) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 3285) {
                                  if (3276 <= code2 && code2 <= 3277) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3298) {
                                    if (3285 <= code2 && code2 <= 3286) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3298 <= code2 && code2 <= 3299) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3551) {
                          if (code2 < 3406) {
                            if (code2 < 3391) {
                              if (code2 < 3330) {
                                if (code2 < 3328) {
                                  if (code2 === 3315) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (3328 <= code2 && code2 <= 3329) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 3387) {
                                  if (3330 <= code2 && code2 <= 3331) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3390) {
                                    if (3387 <= code2 && code2 <= 3388) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 3390) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3398) {
                                if (code2 < 3393) {
                                  if (3391 <= code2 && code2 <= 3392) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (3393 <= code2 && code2 <= 3396) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 3402) {
                                  if (3398 <= code2 && code2 <= 3400) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3405) {
                                    if (3402 <= code2 && code2 <= 3404) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 3405) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3530) {
                              if (code2 < 3426) {
                                if (code2 === 3406) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                                if (code2 === 3415) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 3457) {
                                  if (3426 <= code2 && code2 <= 3427) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3458) {
                                    if (code2 === 3457) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3458 <= code2 && code2 <= 3459) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3538) {
                                if (code2 < 3535) {
                                  if (code2 === 3530) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3536) {
                                    if (code2 === 3535) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3536 <= code2 && code2 <= 3537) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 3542) {
                                  if (3538 <= code2 && code2 <= 3540) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3544) {
                                    if (code2 === 3542) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3544 <= code2 && code2 <= 3550) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3893) {
                            if (code2 < 3655) {
                              if (code2 < 3633) {
                                if (code2 < 3570) {
                                  if (code2 === 3551) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (3570 <= code2 && code2 <= 3571) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 3635) {
                                  if (code2 === 3633) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3636) {
                                    if (code2 === 3635) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (3636 <= code2 && code2 <= 3642) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3764) {
                                if (code2 < 3761) {
                                  if (3655 <= code2 && code2 <= 3662) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 3761) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 3763) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 3784) {
                                  if (3764 <= code2 && code2 <= 3772) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3864) {
                                    if (3784 <= code2 && code2 <= 3790) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3864 <= code2 && code2 <= 3865) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 3967) {
                              if (code2 < 3897) {
                                if (code2 === 3893) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                                if (code2 === 3895) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 3902) {
                                  if (code2 === 3897) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 3953) {
                                    if (3902 <= code2 && code2 <= 3903) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (3953 <= code2 && code2 <= 3966) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 3981) {
                                if (code2 < 3968) {
                                  if (code2 === 3967) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 3974) {
                                    if (3968 <= code2 && code2 <= 3972) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (3974 <= code2 && code2 <= 3975) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 3993) {
                                  if (3981 <= code2 && code2 <= 3991) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 4038) {
                                    if (3993 <= code2 && code2 <= 4028) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 4038) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 7204) {
                      if (code2 < 6448) {
                        if (code2 < 5938) {
                          if (code2 < 4226) {
                            if (code2 < 4157) {
                              if (code2 < 4146) {
                                if (code2 < 4145) {
                                  if (4141 <= code2 && code2 <= 4144) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 4145) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 4153) {
                                  if (4146 <= code2 && code2 <= 4151) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 4155) {
                                    if (4153 <= code2 && code2 <= 4154) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (4155 <= code2 && code2 <= 4156) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 4184) {
                                if (code2 < 4182) {
                                  if (4157 <= code2 && code2 <= 4158) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (4182 <= code2 && code2 <= 4183) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 4190) {
                                  if (4184 <= code2 && code2 <= 4185) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 4209) {
                                    if (4190 <= code2 && code2 <= 4192) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (4209 <= code2 && code2 <= 4212) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 4352) {
                              if (code2 < 4229) {
                                if (code2 === 4226) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                                if (code2 === 4228) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (code2 < 4237) {
                                  if (4229 <= code2 && code2 <= 4230) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 4237) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 4253) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 4957) {
                                if (code2 < 4448) {
                                  if (4352 <= code2 && code2 <= 4447) {
                                    return boundaries_1.CLUSTER_BREAK.L;
                                  }
                                } else {
                                  if (code2 < 4520) {
                                    if (4448 <= code2 && code2 <= 4519) {
                                      return boundaries_1.CLUSTER_BREAK.V;
                                    }
                                  } else {
                                    if (4520 <= code2 && code2 <= 4607) {
                                      return boundaries_1.CLUSTER_BREAK.T;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 5906) {
                                  if (4957 <= code2 && code2 <= 4959) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 5909) {
                                    if (5906 <= code2 && code2 <= 5908) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 5909) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6089) {
                            if (code2 < 6070) {
                              if (code2 < 5970) {
                                if (code2 < 5940) {
                                  if (5938 <= code2 && code2 <= 5939) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 5940) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 6002) {
                                  if (5970 <= code2 && code2 <= 5971) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 6068) {
                                    if (6002 <= code2 && code2 <= 6003) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6068 <= code2 && code2 <= 6069) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6078) {
                                if (code2 < 6071) {
                                  if (code2 === 6070) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (6071 <= code2 && code2 <= 6077) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 6086) {
                                  if (6078 <= code2 && code2 <= 6085) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 6087) {
                                    if (code2 === 6086) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6087 <= code2 && code2 <= 6088) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 6277) {
                              if (code2 < 6155) {
                                if (code2 < 6109) {
                                  if (6089 <= code2 && code2 <= 6099) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 6109) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 6158) {
                                  if (6155 <= code2 && code2 <= 6157) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 6158) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                  if (code2 === 6159) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6435) {
                                if (code2 < 6313) {
                                  if (6277 <= code2 && code2 <= 6278) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 6432) {
                                    if (code2 === 6313) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6432 <= code2 && code2 <= 6434) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 6439) {
                                  if (6435 <= code2 && code2 <= 6438) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 6441) {
                                    if (6439 <= code2 && code2 <= 6440) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6441 <= code2 && code2 <= 6443) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6971) {
                          if (code2 < 6744) {
                            if (code2 < 6681) {
                              if (code2 < 6451) {
                                if (code2 < 6450) {
                                  if (6448 <= code2 && code2 <= 6449) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 6450) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 6457) {
                                  if (6451 <= code2 && code2 <= 6456) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 6679) {
                                    if (6457 <= code2 && code2 <= 6459) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6679 <= code2 && code2 <= 6680) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6741) {
                                if (code2 < 6683) {
                                  if (6681 <= code2 && code2 <= 6682) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 6683) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 6742) {
                                  if (code2 === 6741) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 6742) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 6743) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 6771) {
                              if (code2 < 6754) {
                                if (code2 < 6752) {
                                  if (6744 <= code2 && code2 <= 6750) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 6752) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 6757) {
                                  if (code2 === 6754) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 6765) {
                                    if (6757 <= code2 && code2 <= 6764) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6765 <= code2 && code2 <= 6770) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 6912) {
                                if (code2 < 6783) {
                                  if (6771 <= code2 && code2 <= 6780) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 6832) {
                                    if (code2 === 6783) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6832 <= code2 && code2 <= 6862) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 6916) {
                                  if (6912 <= code2 && code2 <= 6915) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 6964) {
                                    if (code2 === 6916) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (6964 <= code2 && code2 <= 6970) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7080) {
                            if (code2 < 7019) {
                              if (code2 < 6973) {
                                if (code2 === 6971) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 6972) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 6978) {
                                  if (6973 <= code2 && code2 <= 6977) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 6979) {
                                    if (code2 === 6978) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (6979 <= code2 && code2 <= 6980) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 7073) {
                                if (code2 < 7040) {
                                  if (7019 <= code2 && code2 <= 7027) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 7042) {
                                    if (7040 <= code2 && code2 <= 7041) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 7042) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 7074) {
                                  if (code2 === 7073) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 7078) {
                                    if (7074 <= code2 && code2 <= 7077) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (7078 <= code2 && code2 <= 7079) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 7144) {
                              if (code2 < 7083) {
                                if (code2 < 7082) {
                                  if (7080 <= code2 && code2 <= 7081) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 7082) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 7142) {
                                  if (7083 <= code2 && code2 <= 7085) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 7142) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 7143) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 7150) {
                                if (code2 < 7146) {
                                  if (7144 <= code2 && code2 <= 7145) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 7149) {
                                    if (7146 <= code2 && code2 <= 7148) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 7149) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 7151) {
                                  if (code2 === 7150) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 7154) {
                                    if (7151 <= code2 && code2 <= 7153) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (7154 <= code2 && code2 <= 7155) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43346) {
                        if (code2 < 11647) {
                          if (code2 < 7415) {
                            if (code2 < 7380) {
                              if (code2 < 7220) {
                                if (code2 < 7212) {
                                  if (7204 <= code2 && code2 <= 7211) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (7212 <= code2 && code2 <= 7219) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 7222) {
                                  if (7220 <= code2 && code2 <= 7221) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 7376) {
                                    if (7222 <= code2 && code2 <= 7223) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (7376 <= code2 && code2 <= 7378) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 7394) {
                                if (code2 < 7393) {
                                  if (7380 <= code2 && code2 <= 7392) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 7393) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 7405) {
                                  if (7394 <= code2 && code2 <= 7400) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 7405) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 7412) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 8205) {
                              if (code2 < 7616) {
                                if (code2 < 7416) {
                                  if (code2 === 7415) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (7416 <= code2 && code2 <= 7417) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 8203) {
                                  if (7616 <= code2 && code2 <= 7679) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 8203) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                  if (code2 === 8204) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 8288) {
                                if (code2 < 8206) {
                                  if (code2 === 8205) {
                                    return boundaries_1.CLUSTER_BREAK.ZWJ;
                                  }
                                } else {
                                  if (code2 < 8232) {
                                    if (8206 <= code2 && code2 <= 8207) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  } else {
                                    if (8232 <= code2 && code2 <= 8238) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 8400) {
                                  if (8288 <= code2 && code2 <= 8303) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 < 11503) {
                                    if (8400 <= code2 && code2 <= 8432) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (11503 <= code2 && code2 <= 11505) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43043) {
                            if (code2 < 42612) {
                              if (code2 < 12330) {
                                if (code2 < 11744) {
                                  if (code2 === 11647) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (11744 <= code2 && code2 <= 11775) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 12441) {
                                  if (12330 <= code2 && code2 <= 12335) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 42607) {
                                    if (12441 <= code2 && code2 <= 12442) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (42607 <= code2 && code2 <= 42610) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43010) {
                                if (code2 < 42654) {
                                  if (42612 <= code2 && code2 <= 42621) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 42736) {
                                    if (42654 <= code2 && code2 <= 42655) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (42736 <= code2 && code2 <= 42737) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 43014) {
                                  if (code2 === 43010) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 43014) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 43019) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 43188) {
                              if (code2 < 43047) {
                                if (code2 < 43045) {
                                  if (43043 <= code2 && code2 <= 43044) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (43045 <= code2 && code2 <= 43046) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 43052) {
                                  if (code2 === 43047) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 43136) {
                                    if (code2 === 43052) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (43136 <= code2 && code2 <= 43137) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43263) {
                                if (code2 < 43204) {
                                  if (43188 <= code2 && code2 <= 43203) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 43232) {
                                    if (43204 <= code2 && code2 <= 43205) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (43232 <= code2 && code2 <= 43249) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 43302) {
                                  if (code2 === 43263) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 43335) {
                                    if (43302 <= code2 && code2 <= 43309) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (43335 <= code2 && code2 <= 43345) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43698) {
                          if (code2 < 43493) {
                            if (code2 < 43444) {
                              if (code2 < 43392) {
                                if (code2 < 43360) {
                                  if (43346 <= code2 && code2 <= 43347) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (43360 <= code2 && code2 <= 43388) {
                                    return boundaries_1.CLUSTER_BREAK.L;
                                  }
                                }
                              } else {
                                if (code2 < 43395) {
                                  if (43392 <= code2 && code2 <= 43394) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 43395) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 43443) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43450) {
                                if (code2 < 43446) {
                                  if (43444 <= code2 && code2 <= 43445) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (43446 <= code2 && code2 <= 43449) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 43452) {
                                  if (43450 <= code2 && code2 <= 43451) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 43454) {
                                    if (43452 <= code2 && code2 <= 43453) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (43454 <= code2 && code2 <= 43456) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 43573) {
                              if (code2 < 43567) {
                                if (code2 < 43561) {
                                  if (code2 === 43493) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (43561 <= code2 && code2 <= 43566) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 43569) {
                                  if (43567 <= code2 && code2 <= 43568) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 43571) {
                                    if (43569 <= code2 && code2 <= 43570) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (43571 <= code2 && code2 <= 43572) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43597) {
                                if (code2 < 43587) {
                                  if (43573 <= code2 && code2 <= 43574) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 43587) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 43596) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 43644) {
                                  if (code2 === 43597) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 43644) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 43696) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44006) {
                            if (code2 < 43756) {
                              if (code2 < 43710) {
                                if (code2 < 43703) {
                                  if (43698 <= code2 && code2 <= 43700) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (43703 <= code2 && code2 <= 43704) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 43713) {
                                  if (43710 <= code2 && code2 <= 43711) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 43713) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 43755) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 43766) {
                                if (code2 < 43758) {
                                  if (43756 <= code2 && code2 <= 43757) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 43765) {
                                    if (43758 <= code2 && code2 <= 43759) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 43765) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 44003) {
                                  if (code2 === 43766) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 44005) {
                                    if (44003 <= code2 && code2 <= 44004) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 44005) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44032) {
                              if (code2 < 44009) {
                                if (code2 < 44008) {
                                  if (44006 <= code2 && code2 <= 44007) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 44008) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 44012) {
                                  if (44009 <= code2 && code2 <= 44010) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 44012) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 44013) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44061) {
                                if (code2 < 44033) {
                                  if (code2 === 44032) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44060) {
                                    if (44033 <= code2 && code2 <= 44059) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44060) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 44088) {
                                  if (44061 <= code2 && code2 <= 44087) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44089) {
                                    if (code2 === 44088) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44089 <= code2 && code2 <= 44115) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 46497) {
                    if (code2 < 45293) {
                      if (code2 < 44704) {
                        if (code2 < 44397) {
                          if (code2 < 44256) {
                            if (code2 < 44173) {
                              if (code2 < 44144) {
                                if (code2 < 44117) {
                                  if (code2 === 44116) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (44117 <= code2 && code2 <= 44143) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 44145) {
                                  if (code2 === 44144) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44172) {
                                    if (44145 <= code2 && code2 <= 44171) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44172) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44201) {
                                if (code2 < 44200) {
                                  if (44173 <= code2 && code2 <= 44199) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 44200) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 44228) {
                                  if (44201 <= code2 && code2 <= 44227) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44229) {
                                    if (code2 === 44228) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44229 <= code2 && code2 <= 44255) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44313) {
                              if (code2 < 44284) {
                                if (code2 < 44257) {
                                  if (code2 === 44256) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (44257 <= code2 && code2 <= 44283) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 44285) {
                                  if (code2 === 44284) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44312) {
                                    if (44285 <= code2 && code2 <= 44311) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44312) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44368) {
                                if (code2 < 44340) {
                                  if (44313 <= code2 && code2 <= 44339) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44341) {
                                    if (code2 === 44340) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44341 <= code2 && code2 <= 44367) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 44369) {
                                  if (code2 === 44368) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44396) {
                                    if (44369 <= code2 && code2 <= 44395) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44396) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44537) {
                            if (code2 < 44480) {
                              if (code2 < 44425) {
                                if (code2 < 44424) {
                                  if (44397 <= code2 && code2 <= 44423) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 44424) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 44452) {
                                  if (44425 <= code2 && code2 <= 44451) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44453) {
                                    if (code2 === 44452) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44453 <= code2 && code2 <= 44479) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44508) {
                                if (code2 < 44481) {
                                  if (code2 === 44480) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (44481 <= code2 && code2 <= 44507) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 44509) {
                                  if (code2 === 44508) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44536) {
                                    if (44509 <= code2 && code2 <= 44535) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44536) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44620) {
                              if (code2 < 44565) {
                                if (code2 < 44564) {
                                  if (44537 <= code2 && code2 <= 44563) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 44564) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 44592) {
                                  if (44565 <= code2 && code2 <= 44591) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44593) {
                                    if (code2 === 44592) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44593 <= code2 && code2 <= 44619) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44649) {
                                if (code2 < 44621) {
                                  if (code2 === 44620) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44648) {
                                    if (44621 <= code2 && code2 <= 44647) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44648) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 44676) {
                                  if (44649 <= code2 && code2 <= 44675) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44677) {
                                    if (code2 === 44676) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44677 <= code2 && code2 <= 44703) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44985) {
                          if (code2 < 44844) {
                            if (code2 < 44761) {
                              if (code2 < 44732) {
                                if (code2 < 44705) {
                                  if (code2 === 44704) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (44705 <= code2 && code2 <= 44731) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 44733) {
                                  if (code2 === 44732) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44760) {
                                    if (44733 <= code2 && code2 <= 44759) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44760) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44789) {
                                if (code2 < 44788) {
                                  if (44761 <= code2 && code2 <= 44787) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 44788) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 44816) {
                                  if (44789 <= code2 && code2 <= 44815) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44817) {
                                    if (code2 === 44816) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44817 <= code2 && code2 <= 44843) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 44901) {
                              if (code2 < 44872) {
                                if (code2 < 44845) {
                                  if (code2 === 44844) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (44845 <= code2 && code2 <= 44871) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 44873) {
                                  if (code2 === 44872) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44900) {
                                    if (44873 <= code2 && code2 <= 44899) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44900) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 44956) {
                                if (code2 < 44928) {
                                  if (44901 <= code2 && code2 <= 44927) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 44929) {
                                    if (code2 === 44928) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (44929 <= code2 && code2 <= 44955) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 44957) {
                                  if (code2 === 44956) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 44984) {
                                    if (44957 <= code2 && code2 <= 44983) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 44984) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45152) {
                            if (code2 < 45068) {
                              if (code2 < 45013) {
                                if (code2 < 45012) {
                                  if (44985 <= code2 && code2 <= 45011) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 45012) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 45040) {
                                  if (45013 <= code2 && code2 <= 45039) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45041) {
                                    if (code2 === 45040) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45041 <= code2 && code2 <= 45067) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45097) {
                                if (code2 < 45069) {
                                  if (code2 === 45068) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45096) {
                                    if (45069 <= code2 && code2 <= 45095) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45096) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 45124) {
                                  if (45097 <= code2 && code2 <= 45123) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45125) {
                                    if (code2 === 45124) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45125 <= code2 && code2 <= 45151) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45209) {
                              if (code2 < 45180) {
                                if (code2 < 45153) {
                                  if (code2 === 45152) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (45153 <= code2 && code2 <= 45179) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 45181) {
                                  if (code2 === 45180) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45208) {
                                    if (45181 <= code2 && code2 <= 45207) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45208) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45264) {
                                if (code2 < 45236) {
                                  if (45209 <= code2 && code2 <= 45235) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45237) {
                                    if (code2 === 45236) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45237 <= code2 && code2 <= 45263) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 45265) {
                                  if (code2 === 45264) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45292) {
                                    if (45265 <= code2 && code2 <= 45291) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45292) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45908) {
                        if (code2 < 45600) {
                          if (code2 < 45433) {
                            if (code2 < 45376) {
                              if (code2 < 45321) {
                                if (code2 < 45320) {
                                  if (45293 <= code2 && code2 <= 45319) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 45320) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 45348) {
                                  if (45321 <= code2 && code2 <= 45347) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45349) {
                                    if (code2 === 45348) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45349 <= code2 && code2 <= 45375) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45404) {
                                if (code2 < 45377) {
                                  if (code2 === 45376) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (45377 <= code2 && code2 <= 45403) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 45405) {
                                  if (code2 === 45404) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45432) {
                                    if (45405 <= code2 && code2 <= 45431) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45432) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45516) {
                              if (code2 < 45461) {
                                if (code2 < 45460) {
                                  if (45433 <= code2 && code2 <= 45459) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 45460) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 45488) {
                                  if (45461 <= code2 && code2 <= 45487) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45489) {
                                    if (code2 === 45488) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45489 <= code2 && code2 <= 45515) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45545) {
                                if (code2 < 45517) {
                                  if (code2 === 45516) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45544) {
                                    if (45517 <= code2 && code2 <= 45543) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45544) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 45572) {
                                  if (45545 <= code2 && code2 <= 45571) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45573) {
                                    if (code2 === 45572) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45573 <= code2 && code2 <= 45599) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45741) {
                            if (code2 < 45657) {
                              if (code2 < 45628) {
                                if (code2 < 45601) {
                                  if (code2 === 45600) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (45601 <= code2 && code2 <= 45627) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 45629) {
                                  if (code2 === 45628) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45656) {
                                    if (45629 <= code2 && code2 <= 45655) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45656) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45712) {
                                if (code2 < 45684) {
                                  if (45657 <= code2 && code2 <= 45683) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45685) {
                                    if (code2 === 45684) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45685 <= code2 && code2 <= 45711) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 45713) {
                                  if (code2 === 45712) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45740) {
                                    if (45713 <= code2 && code2 <= 45739) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45740) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 45824) {
                              if (code2 < 45769) {
                                if (code2 < 45768) {
                                  if (45741 <= code2 && code2 <= 45767) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 45768) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 45796) {
                                  if (45769 <= code2 && code2 <= 45795) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45797) {
                                    if (code2 === 45796) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45797 <= code2 && code2 <= 45823) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45853) {
                                if (code2 < 45825) {
                                  if (code2 === 45824) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45852) {
                                    if (45825 <= code2 && code2 <= 45851) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45852) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 45880) {
                                  if (45853 <= code2 && code2 <= 45879) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 45881) {
                                    if (code2 === 45880) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (45881 <= code2 && code2 <= 45907) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46189) {
                          if (code2 < 46048) {
                            if (code2 < 45965) {
                              if (code2 < 45936) {
                                if (code2 < 45909) {
                                  if (code2 === 45908) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (45909 <= code2 && code2 <= 45935) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 45937) {
                                  if (code2 === 45936) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 45964) {
                                    if (45937 <= code2 && code2 <= 45963) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 45964) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 45993) {
                                if (code2 < 45992) {
                                  if (45965 <= code2 && code2 <= 45991) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 45992) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 46020) {
                                  if (45993 <= code2 && code2 <= 46019) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46021) {
                                    if (code2 === 46020) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46021 <= code2 && code2 <= 46047) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46105) {
                              if (code2 < 46076) {
                                if (code2 < 46049) {
                                  if (code2 === 46048) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (46049 <= code2 && code2 <= 46075) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 46077) {
                                  if (code2 === 46076) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46104) {
                                    if (46077 <= code2 && code2 <= 46103) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46104) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46160) {
                                if (code2 < 46132) {
                                  if (46105 <= code2 && code2 <= 46131) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46133) {
                                    if (code2 === 46132) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46133 <= code2 && code2 <= 46159) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 46161) {
                                  if (code2 === 46160) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46188) {
                                    if (46161 <= code2 && code2 <= 46187) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46188) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46356) {
                            if (code2 < 46272) {
                              if (code2 < 46217) {
                                if (code2 < 46216) {
                                  if (46189 <= code2 && code2 <= 46215) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 46216) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 46244) {
                                  if (46217 <= code2 && code2 <= 46243) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46245) {
                                    if (code2 === 46244) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46245 <= code2 && code2 <= 46271) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46301) {
                                if (code2 < 46273) {
                                  if (code2 === 46272) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46300) {
                                    if (46273 <= code2 && code2 <= 46299) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46300) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 46328) {
                                  if (46301 <= code2 && code2 <= 46327) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46329) {
                                    if (code2 === 46328) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46329 <= code2 && code2 <= 46355) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46413) {
                              if (code2 < 46384) {
                                if (code2 < 46357) {
                                  if (code2 === 46356) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (46357 <= code2 && code2 <= 46383) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 46385) {
                                  if (code2 === 46384) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46412) {
                                    if (46385 <= code2 && code2 <= 46411) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46412) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46468) {
                                if (code2 < 46440) {
                                  if (46413 <= code2 && code2 <= 46439) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46441) {
                                    if (code2 === 46440) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46441 <= code2 && code2 <= 46467) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 46469) {
                                  if (code2 === 46468) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46496) {
                                    if (46469 <= code2 && code2 <= 46495) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46496) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 47701) {
                      if (code2 < 47112) {
                        if (code2 < 46804) {
                          if (code2 < 46637) {
                            if (code2 < 46580) {
                              if (code2 < 46525) {
                                if (code2 < 46524) {
                                  if (46497 <= code2 && code2 <= 46523) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 46524) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 46552) {
                                  if (46525 <= code2 && code2 <= 46551) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46553) {
                                    if (code2 === 46552) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46553 <= code2 && code2 <= 46579) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46608) {
                                if (code2 < 46581) {
                                  if (code2 === 46580) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (46581 <= code2 && code2 <= 46607) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 46609) {
                                  if (code2 === 46608) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46636) {
                                    if (46609 <= code2 && code2 <= 46635) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46636) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 46720) {
                              if (code2 < 46665) {
                                if (code2 < 46664) {
                                  if (46637 <= code2 && code2 <= 46663) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 46664) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 46692) {
                                  if (46665 <= code2 && code2 <= 46691) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46693) {
                                    if (code2 === 46692) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46693 <= code2 && code2 <= 46719) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46749) {
                                if (code2 < 46721) {
                                  if (code2 === 46720) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46748) {
                                    if (46721 <= code2 && code2 <= 46747) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46748) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 46776) {
                                  if (46749 <= code2 && code2 <= 46775) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46777) {
                                    if (code2 === 46776) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46777 <= code2 && code2 <= 46803) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46945) {
                            if (code2 < 46861) {
                              if (code2 < 46832) {
                                if (code2 < 46805) {
                                  if (code2 === 46804) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (46805 <= code2 && code2 <= 46831) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 46833) {
                                  if (code2 === 46832) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46860) {
                                    if (46833 <= code2 && code2 <= 46859) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46860) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 46916) {
                                if (code2 < 46888) {
                                  if (46861 <= code2 && code2 <= 46887) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 46889) {
                                    if (code2 === 46888) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (46889 <= code2 && code2 <= 46915) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 46917) {
                                  if (code2 === 46916) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 46944) {
                                    if (46917 <= code2 && code2 <= 46943) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 46944) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47028) {
                              if (code2 < 46973) {
                                if (code2 < 46972) {
                                  if (46945 <= code2 && code2 <= 46971) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 46972) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 47e3) {
                                  if (46973 <= code2 && code2 <= 46999) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47001) {
                                    if (code2 === 47e3) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47001 <= code2 && code2 <= 47027) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47057) {
                                if (code2 < 47029) {
                                  if (code2 === 47028) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47056) {
                                    if (47029 <= code2 && code2 <= 47055) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47056) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 47084) {
                                  if (47057 <= code2 && code2 <= 47083) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47085) {
                                    if (code2 === 47084) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47085 <= code2 && code2 <= 47111) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47393) {
                          if (code2 < 47252) {
                            if (code2 < 47169) {
                              if (code2 < 47140) {
                                if (code2 < 47113) {
                                  if (code2 === 47112) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (47113 <= code2 && code2 <= 47139) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 47141) {
                                  if (code2 === 47140) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47168) {
                                    if (47141 <= code2 && code2 <= 47167) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47168) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47197) {
                                if (code2 < 47196) {
                                  if (47169 <= code2 && code2 <= 47195) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 47196) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 47224) {
                                  if (47197 <= code2 && code2 <= 47223) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47225) {
                                    if (code2 === 47224) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47225 <= code2 && code2 <= 47251) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47309) {
                              if (code2 < 47280) {
                                if (code2 < 47253) {
                                  if (code2 === 47252) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (47253 <= code2 && code2 <= 47279) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 47281) {
                                  if (code2 === 47280) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47308) {
                                    if (47281 <= code2 && code2 <= 47307) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47308) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47364) {
                                if (code2 < 47336) {
                                  if (47309 <= code2 && code2 <= 47335) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47337) {
                                    if (code2 === 47336) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47337 <= code2 && code2 <= 47363) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 47365) {
                                  if (code2 === 47364) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47392) {
                                    if (47365 <= code2 && code2 <= 47391) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47392) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47560) {
                            if (code2 < 47476) {
                              if (code2 < 47421) {
                                if (code2 < 47420) {
                                  if (47393 <= code2 && code2 <= 47419) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 47420) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 47448) {
                                  if (47421 <= code2 && code2 <= 47447) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47449) {
                                    if (code2 === 47448) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47449 <= code2 && code2 <= 47475) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47505) {
                                if (code2 < 47477) {
                                  if (code2 === 47476) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47504) {
                                    if (47477 <= code2 && code2 <= 47503) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47504) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 47532) {
                                  if (47505 <= code2 && code2 <= 47531) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47533) {
                                    if (code2 === 47532) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47533 <= code2 && code2 <= 47559) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47617) {
                              if (code2 < 47588) {
                                if (code2 < 47561) {
                                  if (code2 === 47560) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (47561 <= code2 && code2 <= 47587) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 47589) {
                                  if (code2 === 47588) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47616) {
                                    if (47589 <= code2 && code2 <= 47615) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47616) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47672) {
                                if (code2 < 47644) {
                                  if (47617 <= code2 && code2 <= 47643) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47645) {
                                    if (code2 === 47644) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47645 <= code2 && code2 <= 47671) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 47673) {
                                  if (code2 === 47672) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47700) {
                                    if (47673 <= code2 && code2 <= 47699) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47700) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48316) {
                        if (code2 < 48008) {
                          if (code2 < 47841) {
                            if (code2 < 47784) {
                              if (code2 < 47729) {
                                if (code2 < 47728) {
                                  if (47701 <= code2 && code2 <= 47727) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 47728) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 47756) {
                                  if (47729 <= code2 && code2 <= 47755) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47757) {
                                    if (code2 === 47756) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47757 <= code2 && code2 <= 47783) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47812) {
                                if (code2 < 47785) {
                                  if (code2 === 47784) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (47785 <= code2 && code2 <= 47811) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 47813) {
                                  if (code2 === 47812) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47840) {
                                    if (47813 <= code2 && code2 <= 47839) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47840) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 47924) {
                              if (code2 < 47869) {
                                if (code2 < 47868) {
                                  if (47841 <= code2 && code2 <= 47867) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 47868) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 47896) {
                                  if (47869 <= code2 && code2 <= 47895) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47897) {
                                    if (code2 === 47896) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47897 <= code2 && code2 <= 47923) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 47953) {
                                if (code2 < 47925) {
                                  if (code2 === 47924) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 47952) {
                                    if (47925 <= code2 && code2 <= 47951) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 47952) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 47980) {
                                  if (47953 <= code2 && code2 <= 47979) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 47981) {
                                    if (code2 === 47980) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (47981 <= code2 && code2 <= 48007) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48149) {
                            if (code2 < 48065) {
                              if (code2 < 48036) {
                                if (code2 < 48009) {
                                  if (code2 === 48008) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (48009 <= code2 && code2 <= 48035) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 48037) {
                                  if (code2 === 48036) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48064) {
                                    if (48037 <= code2 && code2 <= 48063) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48064) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48120) {
                                if (code2 < 48092) {
                                  if (48065 <= code2 && code2 <= 48091) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48093) {
                                    if (code2 === 48092) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48093 <= code2 && code2 <= 48119) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 48121) {
                                  if (code2 === 48120) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48148) {
                                    if (48121 <= code2 && code2 <= 48147) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48148) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48232) {
                              if (code2 < 48177) {
                                if (code2 < 48176) {
                                  if (48149 <= code2 && code2 <= 48175) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 48176) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 48204) {
                                  if (48177 <= code2 && code2 <= 48203) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48205) {
                                    if (code2 === 48204) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48205 <= code2 && code2 <= 48231) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48261) {
                                if (code2 < 48233) {
                                  if (code2 === 48232) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48260) {
                                    if (48233 <= code2 && code2 <= 48259) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48260) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 48288) {
                                  if (48261 <= code2 && code2 <= 48287) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48289) {
                                    if (code2 === 48288) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48289 <= code2 && code2 <= 48315) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48597) {
                          if (code2 < 48456) {
                            if (code2 < 48373) {
                              if (code2 < 48344) {
                                if (code2 < 48317) {
                                  if (code2 === 48316) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (48317 <= code2 && code2 <= 48343) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 48345) {
                                  if (code2 === 48344) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48372) {
                                    if (48345 <= code2 && code2 <= 48371) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48372) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48401) {
                                if (code2 < 48400) {
                                  if (48373 <= code2 && code2 <= 48399) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 48400) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 48428) {
                                  if (48401 <= code2 && code2 <= 48427) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48429) {
                                    if (code2 === 48428) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48429 <= code2 && code2 <= 48455) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48513) {
                              if (code2 < 48484) {
                                if (code2 < 48457) {
                                  if (code2 === 48456) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (48457 <= code2 && code2 <= 48483) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 48485) {
                                  if (code2 === 48484) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48512) {
                                    if (48485 <= code2 && code2 <= 48511) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48512) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48568) {
                                if (code2 < 48540) {
                                  if (48513 <= code2 && code2 <= 48539) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48541) {
                                    if (code2 === 48540) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48541 <= code2 && code2 <= 48567) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 48569) {
                                  if (code2 === 48568) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48596) {
                                    if (48569 <= code2 && code2 <= 48595) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48596) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48764) {
                            if (code2 < 48680) {
                              if (code2 < 48625) {
                                if (code2 < 48624) {
                                  if (48597 <= code2 && code2 <= 48623) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 48624) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 48652) {
                                  if (48625 <= code2 && code2 <= 48651) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48653) {
                                    if (code2 === 48652) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48653 <= code2 && code2 <= 48679) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48709) {
                                if (code2 < 48681) {
                                  if (code2 === 48680) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48708) {
                                    if (48681 <= code2 && code2 <= 48707) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48708) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 48736) {
                                  if (48709 <= code2 && code2 <= 48735) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48737) {
                                    if (code2 === 48736) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48737 <= code2 && code2 <= 48763) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 48821) {
                              if (code2 < 48792) {
                                if (code2 < 48765) {
                                  if (code2 === 48764) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (48765 <= code2 && code2 <= 48791) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 48793) {
                                  if (code2 === 48792) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48820) {
                                    if (48793 <= code2 && code2 <= 48819) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48820) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 48876) {
                                if (code2 < 48848) {
                                  if (48821 <= code2 && code2 <= 48847) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48849) {
                                    if (code2 === 48848) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48849 <= code2 && code2 <= 48875) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 48877) {
                                  if (code2 === 48876) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 48904) {
                                    if (48877 <= code2 && code2 <= 48903) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 48904) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 53720) {
                  if (code2 < 51312) {
                    if (code2 < 50108) {
                      if (code2 < 49493) {
                        if (code2 < 49212) {
                          if (code2 < 49045) {
                            if (code2 < 48988) {
                              if (code2 < 48933) {
                                if (code2 < 48932) {
                                  if (48905 <= code2 && code2 <= 48931) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 48932) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 48960) {
                                  if (48933 <= code2 && code2 <= 48959) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 48961) {
                                    if (code2 === 48960) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (48961 <= code2 && code2 <= 48987) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49016) {
                                if (code2 < 48989) {
                                  if (code2 === 48988) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (48989 <= code2 && code2 <= 49015) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 49017) {
                                  if (code2 === 49016) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49044) {
                                    if (49017 <= code2 && code2 <= 49043) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49044) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49128) {
                              if (code2 < 49073) {
                                if (code2 < 49072) {
                                  if (49045 <= code2 && code2 <= 49071) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 49072) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 49100) {
                                  if (49073 <= code2 && code2 <= 49099) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49101) {
                                    if (code2 === 49100) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49101 <= code2 && code2 <= 49127) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49157) {
                                if (code2 < 49129) {
                                  if (code2 === 49128) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49156) {
                                    if (49129 <= code2 && code2 <= 49155) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49156) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 49184) {
                                  if (49157 <= code2 && code2 <= 49183) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49185) {
                                    if (code2 === 49184) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49185 <= code2 && code2 <= 49211) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49352) {
                            if (code2 < 49269) {
                              if (code2 < 49240) {
                                if (code2 < 49213) {
                                  if (code2 === 49212) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (49213 <= code2 && code2 <= 49239) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 49241) {
                                  if (code2 === 49240) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49268) {
                                    if (49241 <= code2 && code2 <= 49267) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49268) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49297) {
                                if (code2 < 49296) {
                                  if (49269 <= code2 && code2 <= 49295) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 49296) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 49324) {
                                  if (49297 <= code2 && code2 <= 49323) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49325) {
                                    if (code2 === 49324) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49325 <= code2 && code2 <= 49351) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49409) {
                              if (code2 < 49380) {
                                if (code2 < 49353) {
                                  if (code2 === 49352) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (49353 <= code2 && code2 <= 49379) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 49381) {
                                  if (code2 === 49380) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49408) {
                                    if (49381 <= code2 && code2 <= 49407) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49408) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49464) {
                                if (code2 < 49436) {
                                  if (49409 <= code2 && code2 <= 49435) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49437) {
                                    if (code2 === 49436) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49437 <= code2 && code2 <= 49463) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 49465) {
                                  if (code2 === 49464) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49492) {
                                    if (49465 <= code2 && code2 <= 49491) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49492) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49800) {
                          if (code2 < 49633) {
                            if (code2 < 49576) {
                              if (code2 < 49521) {
                                if (code2 < 49520) {
                                  if (49493 <= code2 && code2 <= 49519) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 49520) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 49548) {
                                  if (49521 <= code2 && code2 <= 49547) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49549) {
                                    if (code2 === 49548) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49549 <= code2 && code2 <= 49575) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49604) {
                                if (code2 < 49577) {
                                  if (code2 === 49576) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (49577 <= code2 && code2 <= 49603) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 49605) {
                                  if (code2 === 49604) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49632) {
                                    if (49605 <= code2 && code2 <= 49631) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49632) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 49716) {
                              if (code2 < 49661) {
                                if (code2 < 49660) {
                                  if (49633 <= code2 && code2 <= 49659) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 49660) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 49688) {
                                  if (49661 <= code2 && code2 <= 49687) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49689) {
                                    if (code2 === 49688) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49689 <= code2 && code2 <= 49715) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49745) {
                                if (code2 < 49717) {
                                  if (code2 === 49716) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49744) {
                                    if (49717 <= code2 && code2 <= 49743) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49744) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 49772) {
                                  if (49745 <= code2 && code2 <= 49771) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49773) {
                                    if (code2 === 49772) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49773 <= code2 && code2 <= 49799) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49941) {
                            if (code2 < 49857) {
                              if (code2 < 49828) {
                                if (code2 < 49801) {
                                  if (code2 === 49800) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (49801 <= code2 && code2 <= 49827) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 49829) {
                                  if (code2 === 49828) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49856) {
                                    if (49829 <= code2 && code2 <= 49855) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49856) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 49912) {
                                if (code2 < 49884) {
                                  if (49857 <= code2 && code2 <= 49883) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49885) {
                                    if (code2 === 49884) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49885 <= code2 && code2 <= 49911) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 49913) {
                                  if (code2 === 49912) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 49940) {
                                    if (49913 <= code2 && code2 <= 49939) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 49940) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50024) {
                              if (code2 < 49969) {
                                if (code2 < 49968) {
                                  if (49941 <= code2 && code2 <= 49967) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 49968) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 49996) {
                                  if (49969 <= code2 && code2 <= 49995) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 49997) {
                                    if (code2 === 49996) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (49997 <= code2 && code2 <= 50023) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50053) {
                                if (code2 < 50025) {
                                  if (code2 === 50024) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50052) {
                                    if (50025 <= code2 && code2 <= 50051) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50052) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 50080) {
                                  if (50053 <= code2 && code2 <= 50079) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50081) {
                                    if (code2 === 50080) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50081 <= code2 && code2 <= 50107) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50697) {
                        if (code2 < 50389) {
                          if (code2 < 50248) {
                            if (code2 < 50165) {
                              if (code2 < 50136) {
                                if (code2 < 50109) {
                                  if (code2 === 50108) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (50109 <= code2 && code2 <= 50135) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 50137) {
                                  if (code2 === 50136) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50164) {
                                    if (50137 <= code2 && code2 <= 50163) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50164) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50193) {
                                if (code2 < 50192) {
                                  if (50165 <= code2 && code2 <= 50191) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 50192) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 50220) {
                                  if (50193 <= code2 && code2 <= 50219) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50221) {
                                    if (code2 === 50220) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50221 <= code2 && code2 <= 50247) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50305) {
                              if (code2 < 50276) {
                                if (code2 < 50249) {
                                  if (code2 === 50248) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (50249 <= code2 && code2 <= 50275) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 50277) {
                                  if (code2 === 50276) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50304) {
                                    if (50277 <= code2 && code2 <= 50303) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50304) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50360) {
                                if (code2 < 50332) {
                                  if (50305 <= code2 && code2 <= 50331) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50333) {
                                    if (code2 === 50332) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50333 <= code2 && code2 <= 50359) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 50361) {
                                  if (code2 === 50360) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50388) {
                                    if (50361 <= code2 && code2 <= 50387) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50388) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50556) {
                            if (code2 < 50472) {
                              if (code2 < 50417) {
                                if (code2 < 50416) {
                                  if (50389 <= code2 && code2 <= 50415) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 50416) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 50444) {
                                  if (50417 <= code2 && code2 <= 50443) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50445) {
                                    if (code2 === 50444) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50445 <= code2 && code2 <= 50471) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50501) {
                                if (code2 < 50473) {
                                  if (code2 === 50472) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50500) {
                                    if (50473 <= code2 && code2 <= 50499) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50500) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 50528) {
                                  if (50501 <= code2 && code2 <= 50527) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50529) {
                                    if (code2 === 50528) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50529 <= code2 && code2 <= 50555) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50613) {
                              if (code2 < 50584) {
                                if (code2 < 50557) {
                                  if (code2 === 50556) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (50557 <= code2 && code2 <= 50583) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 50585) {
                                  if (code2 === 50584) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50612) {
                                    if (50585 <= code2 && code2 <= 50611) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50612) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50668) {
                                if (code2 < 50640) {
                                  if (50613 <= code2 && code2 <= 50639) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50641) {
                                    if (code2 === 50640) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50641 <= code2 && code2 <= 50667) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 50669) {
                                  if (code2 === 50668) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50696) {
                                    if (50669 <= code2 && code2 <= 50695) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50696) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51004) {
                          if (code2 < 50837) {
                            if (code2 < 50780) {
                              if (code2 < 50725) {
                                if (code2 < 50724) {
                                  if (50697 <= code2 && code2 <= 50723) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 50724) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 50752) {
                                  if (50725 <= code2 && code2 <= 50751) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50753) {
                                    if (code2 === 50752) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50753 <= code2 && code2 <= 50779) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50808) {
                                if (code2 < 50781) {
                                  if (code2 === 50780) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (50781 <= code2 && code2 <= 50807) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 50809) {
                                  if (code2 === 50808) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50836) {
                                    if (50809 <= code2 && code2 <= 50835) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50836) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 50920) {
                              if (code2 < 50865) {
                                if (code2 < 50864) {
                                  if (50837 <= code2 && code2 <= 50863) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 50864) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 50892) {
                                  if (50865 <= code2 && code2 <= 50891) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50893) {
                                    if (code2 === 50892) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50893 <= code2 && code2 <= 50919) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 50949) {
                                if (code2 < 50921) {
                                  if (code2 === 50920) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 50948) {
                                    if (50921 <= code2 && code2 <= 50947) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 50948) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 50976) {
                                  if (50949 <= code2 && code2 <= 50975) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 50977) {
                                    if (code2 === 50976) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (50977 <= code2 && code2 <= 51003) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51145) {
                            if (code2 < 51061) {
                              if (code2 < 51032) {
                                if (code2 < 51005) {
                                  if (code2 === 51004) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (51005 <= code2 && code2 <= 51031) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 51033) {
                                  if (code2 === 51032) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51060) {
                                    if (51033 <= code2 && code2 <= 51059) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51060) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51116) {
                                if (code2 < 51088) {
                                  if (51061 <= code2 && code2 <= 51087) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51089) {
                                    if (code2 === 51088) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51089 <= code2 && code2 <= 51115) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 51117) {
                                  if (code2 === 51116) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51144) {
                                    if (51117 <= code2 && code2 <= 51143) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51144) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51228) {
                              if (code2 < 51173) {
                                if (code2 < 51172) {
                                  if (51145 <= code2 && code2 <= 51171) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 51172) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 51200) {
                                  if (51173 <= code2 && code2 <= 51199) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51201) {
                                    if (code2 === 51200) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51201 <= code2 && code2 <= 51227) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51257) {
                                if (code2 < 51229) {
                                  if (code2 === 51228) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51256) {
                                    if (51229 <= code2 && code2 <= 51255) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51256) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 51284) {
                                  if (51257 <= code2 && code2 <= 51283) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51285) {
                                    if (code2 === 51284) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51285 <= code2 && code2 <= 51311) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52516) {
                      if (code2 < 51901) {
                        if (code2 < 51593) {
                          if (code2 < 51452) {
                            if (code2 < 51369) {
                              if (code2 < 51340) {
                                if (code2 < 51313) {
                                  if (code2 === 51312) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (51313 <= code2 && code2 <= 51339) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 51341) {
                                  if (code2 === 51340) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51368) {
                                    if (51341 <= code2 && code2 <= 51367) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51368) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51397) {
                                if (code2 < 51396) {
                                  if (51369 <= code2 && code2 <= 51395) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 51396) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 51424) {
                                  if (51397 <= code2 && code2 <= 51423) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51425) {
                                    if (code2 === 51424) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51425 <= code2 && code2 <= 51451) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51509) {
                              if (code2 < 51480) {
                                if (code2 < 51453) {
                                  if (code2 === 51452) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (51453 <= code2 && code2 <= 51479) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 51481) {
                                  if (code2 === 51480) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51508) {
                                    if (51481 <= code2 && code2 <= 51507) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51508) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51564) {
                                if (code2 < 51536) {
                                  if (51509 <= code2 && code2 <= 51535) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51537) {
                                    if (code2 === 51536) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51537 <= code2 && code2 <= 51563) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 51565) {
                                  if (code2 === 51564) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51592) {
                                    if (51565 <= code2 && code2 <= 51591) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51592) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51760) {
                            if (code2 < 51676) {
                              if (code2 < 51621) {
                                if (code2 < 51620) {
                                  if (51593 <= code2 && code2 <= 51619) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 51620) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 51648) {
                                  if (51621 <= code2 && code2 <= 51647) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51649) {
                                    if (code2 === 51648) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51649 <= code2 && code2 <= 51675) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51705) {
                                if (code2 < 51677) {
                                  if (code2 === 51676) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51704) {
                                    if (51677 <= code2 && code2 <= 51703) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51704) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 51732) {
                                  if (51705 <= code2 && code2 <= 51731) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51733) {
                                    if (code2 === 51732) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51733 <= code2 && code2 <= 51759) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 51817) {
                              if (code2 < 51788) {
                                if (code2 < 51761) {
                                  if (code2 === 51760) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (51761 <= code2 && code2 <= 51787) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 51789) {
                                  if (code2 === 51788) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51816) {
                                    if (51789 <= code2 && code2 <= 51815) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51816) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 51872) {
                                if (code2 < 51844) {
                                  if (51817 <= code2 && code2 <= 51843) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51845) {
                                    if (code2 === 51844) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51845 <= code2 && code2 <= 51871) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 51873) {
                                  if (code2 === 51872) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 51900) {
                                    if (51873 <= code2 && code2 <= 51899) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 51900) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52208) {
                          if (code2 < 52041) {
                            if (code2 < 51984) {
                              if (code2 < 51929) {
                                if (code2 < 51928) {
                                  if (51901 <= code2 && code2 <= 51927) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 51928) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 51956) {
                                  if (51929 <= code2 && code2 <= 51955) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 51957) {
                                    if (code2 === 51956) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (51957 <= code2 && code2 <= 51983) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52012) {
                                if (code2 < 51985) {
                                  if (code2 === 51984) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (51985 <= code2 && code2 <= 52011) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 52013) {
                                  if (code2 === 52012) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52040) {
                                    if (52013 <= code2 && code2 <= 52039) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52040) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52124) {
                              if (code2 < 52069) {
                                if (code2 < 52068) {
                                  if (52041 <= code2 && code2 <= 52067) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 52068) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 52096) {
                                  if (52069 <= code2 && code2 <= 52095) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52097) {
                                    if (code2 === 52096) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52097 <= code2 && code2 <= 52123) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52153) {
                                if (code2 < 52125) {
                                  if (code2 === 52124) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52152) {
                                    if (52125 <= code2 && code2 <= 52151) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52152) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 52180) {
                                  if (52153 <= code2 && code2 <= 52179) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52181) {
                                    if (code2 === 52180) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52181 <= code2 && code2 <= 52207) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52349) {
                            if (code2 < 52265) {
                              if (code2 < 52236) {
                                if (code2 < 52209) {
                                  if (code2 === 52208) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (52209 <= code2 && code2 <= 52235) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 52237) {
                                  if (code2 === 52236) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52264) {
                                    if (52237 <= code2 && code2 <= 52263) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52264) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52320) {
                                if (code2 < 52292) {
                                  if (52265 <= code2 && code2 <= 52291) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52293) {
                                    if (code2 === 52292) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52293 <= code2 && code2 <= 52319) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 52321) {
                                  if (code2 === 52320) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52348) {
                                    if (52321 <= code2 && code2 <= 52347) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52348) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52432) {
                              if (code2 < 52377) {
                                if (code2 < 52376) {
                                  if (52349 <= code2 && code2 <= 52375) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 52376) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 52404) {
                                  if (52377 <= code2 && code2 <= 52403) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52405) {
                                    if (code2 === 52404) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52405 <= code2 && code2 <= 52431) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52461) {
                                if (code2 < 52433) {
                                  if (code2 === 52432) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52460) {
                                    if (52433 <= code2 && code2 <= 52459) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52460) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 52488) {
                                  if (52461 <= code2 && code2 <= 52487) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52489) {
                                    if (code2 === 52488) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52489 <= code2 && code2 <= 52515) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53105) {
                        if (code2 < 52797) {
                          if (code2 < 52656) {
                            if (code2 < 52573) {
                              if (code2 < 52544) {
                                if (code2 < 52517) {
                                  if (code2 === 52516) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (52517 <= code2 && code2 <= 52543) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 52545) {
                                  if (code2 === 52544) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52572) {
                                    if (52545 <= code2 && code2 <= 52571) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52572) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52601) {
                                if (code2 < 52600) {
                                  if (52573 <= code2 && code2 <= 52599) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 52600) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 52628) {
                                  if (52601 <= code2 && code2 <= 52627) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52629) {
                                    if (code2 === 52628) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52629 <= code2 && code2 <= 52655) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 52713) {
                              if (code2 < 52684) {
                                if (code2 < 52657) {
                                  if (code2 === 52656) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (52657 <= code2 && code2 <= 52683) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 52685) {
                                  if (code2 === 52684) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52712) {
                                    if (52685 <= code2 && code2 <= 52711) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52712) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52768) {
                                if (code2 < 52740) {
                                  if (52713 <= code2 && code2 <= 52739) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52741) {
                                    if (code2 === 52740) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52741 <= code2 && code2 <= 52767) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 52769) {
                                  if (code2 === 52768) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52796) {
                                    if (52769 <= code2 && code2 <= 52795) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52796) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52964) {
                            if (code2 < 52880) {
                              if (code2 < 52825) {
                                if (code2 < 52824) {
                                  if (52797 <= code2 && code2 <= 52823) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 52824) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 52852) {
                                  if (52825 <= code2 && code2 <= 52851) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52853) {
                                    if (code2 === 52852) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52853 <= code2 && code2 <= 52879) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 52909) {
                                if (code2 < 52881) {
                                  if (code2 === 52880) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 52908) {
                                    if (52881 <= code2 && code2 <= 52907) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 52908) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 52936) {
                                  if (52909 <= code2 && code2 <= 52935) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 52937) {
                                    if (code2 === 52936) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (52937 <= code2 && code2 <= 52963) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53021) {
                              if (code2 < 52992) {
                                if (code2 < 52965) {
                                  if (code2 === 52964) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (52965 <= code2 && code2 <= 52991) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 52993) {
                                  if (code2 === 52992) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53020) {
                                    if (52993 <= code2 && code2 <= 53019) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53020) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53076) {
                                if (code2 < 53048) {
                                  if (53021 <= code2 && code2 <= 53047) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53049) {
                                    if (code2 === 53048) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53049 <= code2 && code2 <= 53075) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 53077) {
                                  if (code2 === 53076) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53104) {
                                    if (53077 <= code2 && code2 <= 53103) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53104) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53412) {
                          if (code2 < 53245) {
                            if (code2 < 53188) {
                              if (code2 < 53133) {
                                if (code2 < 53132) {
                                  if (53105 <= code2 && code2 <= 53131) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 53132) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 53160) {
                                  if (53133 <= code2 && code2 <= 53159) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53161) {
                                    if (code2 === 53160) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53161 <= code2 && code2 <= 53187) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53216) {
                                if (code2 < 53189) {
                                  if (code2 === 53188) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (53189 <= code2 && code2 <= 53215) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 53217) {
                                  if (code2 === 53216) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53244) {
                                    if (53217 <= code2 && code2 <= 53243) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53244) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53328) {
                              if (code2 < 53273) {
                                if (code2 < 53272) {
                                  if (53245 <= code2 && code2 <= 53271) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 53272) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 53300) {
                                  if (53273 <= code2 && code2 <= 53299) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53301) {
                                    if (code2 === 53300) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53301 <= code2 && code2 <= 53327) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53357) {
                                if (code2 < 53329) {
                                  if (code2 === 53328) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53356) {
                                    if (53329 <= code2 && code2 <= 53355) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53356) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 53384) {
                                  if (53357 <= code2 && code2 <= 53383) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53385) {
                                    if (code2 === 53384) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53385 <= code2 && code2 <= 53411) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53553) {
                            if (code2 < 53469) {
                              if (code2 < 53440) {
                                if (code2 < 53413) {
                                  if (code2 === 53412) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (53413 <= code2 && code2 <= 53439) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 53441) {
                                  if (code2 === 53440) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53468) {
                                    if (53441 <= code2 && code2 <= 53467) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53468) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53524) {
                                if (code2 < 53496) {
                                  if (53469 <= code2 && code2 <= 53495) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53497) {
                                    if (code2 === 53496) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53497 <= code2 && code2 <= 53523) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 53525) {
                                  if (code2 === 53524) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53552) {
                                    if (53525 <= code2 && code2 <= 53551) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53552) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53636) {
                              if (code2 < 53581) {
                                if (code2 < 53580) {
                                  if (53553 <= code2 && code2 <= 53579) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 53580) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 53608) {
                                  if (53581 <= code2 && code2 <= 53607) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53609) {
                                    if (code2 === 53608) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53609 <= code2 && code2 <= 53635) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53665) {
                                if (code2 < 53637) {
                                  if (code2 === 53636) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53664) {
                                    if (53637 <= code2 && code2 <= 53663) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53664) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 53692) {
                                  if (53665 <= code2 && code2 <= 53691) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53693) {
                                    if (code2 === 53692) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53693 <= code2 && code2 <= 53719) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 70459) {
                    if (code2 < 54897) {
                      if (code2 < 54308) {
                        if (code2 < 54001) {
                          if (code2 < 53860) {
                            if (code2 < 53777) {
                              if (code2 < 53748) {
                                if (code2 < 53721) {
                                  if (code2 === 53720) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (53721 <= code2 && code2 <= 53747) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 53749) {
                                  if (code2 === 53748) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53776) {
                                    if (53749 <= code2 && code2 <= 53775) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53776) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53805) {
                                if (code2 < 53804) {
                                  if (53777 <= code2 && code2 <= 53803) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 53804) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 53832) {
                                  if (53805 <= code2 && code2 <= 53831) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53833) {
                                    if (code2 === 53832) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53833 <= code2 && code2 <= 53859) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 53917) {
                              if (code2 < 53888) {
                                if (code2 < 53861) {
                                  if (code2 === 53860) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (53861 <= code2 && code2 <= 53887) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 53889) {
                                  if (code2 === 53888) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 53916) {
                                    if (53889 <= code2 && code2 <= 53915) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 53916) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 53972) {
                                if (code2 < 53944) {
                                  if (53917 <= code2 && code2 <= 53943) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 53945) {
                                    if (code2 === 53944) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (53945 <= code2 && code2 <= 53971) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 53973) {
                                  if (code2 === 53972) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54e3) {
                                    if (53973 <= code2 && code2 <= 53999) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54e3) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54141) {
                            if (code2 < 54084) {
                              if (code2 < 54029) {
                                if (code2 < 54028) {
                                  if (54001 <= code2 && code2 <= 54027) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 54028) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 54056) {
                                  if (54029 <= code2 && code2 <= 54055) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54057) {
                                    if (code2 === 54056) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54057 <= code2 && code2 <= 54083) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54112) {
                                if (code2 < 54085) {
                                  if (code2 === 54084) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (54085 <= code2 && code2 <= 54111) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 54113) {
                                  if (code2 === 54112) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54140) {
                                    if (54113 <= code2 && code2 <= 54139) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54140) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54224) {
                              if (code2 < 54169) {
                                if (code2 < 54168) {
                                  if (54141 <= code2 && code2 <= 54167) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 54168) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 54196) {
                                  if (54169 <= code2 && code2 <= 54195) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54197) {
                                    if (code2 === 54196) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54197 <= code2 && code2 <= 54223) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54253) {
                                if (code2 < 54225) {
                                  if (code2 === 54224) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54252) {
                                    if (54225 <= code2 && code2 <= 54251) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54252) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 54280) {
                                  if (54253 <= code2 && code2 <= 54279) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54281) {
                                    if (code2 === 54280) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54281 <= code2 && code2 <= 54307) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54589) {
                          if (code2 < 54448) {
                            if (code2 < 54365) {
                              if (code2 < 54336) {
                                if (code2 < 54309) {
                                  if (code2 === 54308) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (54309 <= code2 && code2 <= 54335) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 54337) {
                                  if (code2 === 54336) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54364) {
                                    if (54337 <= code2 && code2 <= 54363) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54364) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54393) {
                                if (code2 < 54392) {
                                  if (54365 <= code2 && code2 <= 54391) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 54392) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 54420) {
                                  if (54393 <= code2 && code2 <= 54419) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54421) {
                                    if (code2 === 54420) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54421 <= code2 && code2 <= 54447) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54505) {
                              if (code2 < 54476) {
                                if (code2 < 54449) {
                                  if (code2 === 54448) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (54449 <= code2 && code2 <= 54475) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 54477) {
                                  if (code2 === 54476) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54504) {
                                    if (54477 <= code2 && code2 <= 54503) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54504) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54560) {
                                if (code2 < 54532) {
                                  if (54505 <= code2 && code2 <= 54531) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54533) {
                                    if (code2 === 54532) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54533 <= code2 && code2 <= 54559) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 54561) {
                                  if (code2 === 54560) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54588) {
                                    if (54561 <= code2 && code2 <= 54587) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54588) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54756) {
                            if (code2 < 54672) {
                              if (code2 < 54617) {
                                if (code2 < 54616) {
                                  if (54589 <= code2 && code2 <= 54615) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 54616) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 54644) {
                                  if (54617 <= code2 && code2 <= 54643) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54645) {
                                    if (code2 === 54644) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54645 <= code2 && code2 <= 54671) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54701) {
                                if (code2 < 54673) {
                                  if (code2 === 54672) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54700) {
                                    if (54673 <= code2 && code2 <= 54699) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54700) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 54728) {
                                  if (54701 <= code2 && code2 <= 54727) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54729) {
                                    if (code2 === 54728) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54729 <= code2 && code2 <= 54755) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 54813) {
                              if (code2 < 54784) {
                                if (code2 < 54757) {
                                  if (code2 === 54756) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (54757 <= code2 && code2 <= 54783) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 54785) {
                                  if (code2 === 54784) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54812) {
                                    if (54785 <= code2 && code2 <= 54811) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54812) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 54868) {
                                if (code2 < 54840) {
                                  if (54813 <= code2 && code2 <= 54839) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54841) {
                                    if (code2 === 54840) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54841 <= code2 && code2 <= 54867) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 54869) {
                                  if (code2 === 54868) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 54896) {
                                    if (54869 <= code2 && code2 <= 54895) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 54896) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 69632) {
                        if (code2 < 55216) {
                          if (code2 < 55037) {
                            if (code2 < 54980) {
                              if (code2 < 54925) {
                                if (code2 < 54924) {
                                  if (54897 <= code2 && code2 <= 54923) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 54924) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 54952) {
                                  if (54925 <= code2 && code2 <= 54951) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 54953) {
                                    if (code2 === 54952) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (54953 <= code2 && code2 <= 54979) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 55008) {
                                if (code2 < 54981) {
                                  if (code2 === 54980) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (54981 <= code2 && code2 <= 55007) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                }
                              } else {
                                if (code2 < 55009) {
                                  if (code2 === 55008) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 55036) {
                                    if (55009 <= code2 && code2 <= 55035) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 55036) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 55120) {
                              if (code2 < 55065) {
                                if (code2 < 55064) {
                                  if (55037 <= code2 && code2 <= 55063) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 === 55064) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                }
                              } else {
                                if (code2 < 55092) {
                                  if (55065 <= code2 && code2 <= 55091) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 55093) {
                                    if (code2 === 55092) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (55093 <= code2 && code2 <= 55119) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 55149) {
                                if (code2 < 55121) {
                                  if (code2 === 55120) {
                                    return boundaries_1.CLUSTER_BREAK.LV;
                                  }
                                } else {
                                  if (code2 < 55148) {
                                    if (55121 <= code2 && code2 <= 55147) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  } else {
                                    if (code2 === 55148) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 55176) {
                                  if (55149 <= code2 && code2 <= 55175) {
                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                  }
                                } else {
                                  if (code2 < 55177) {
                                    if (code2 === 55176) {
                                      return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                  } else {
                                    if (55177 <= code2 && code2 <= 55203) {
                                      return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 68097) {
                            if (code2 < 65279) {
                              if (code2 < 64286) {
                                if (code2 < 55243) {
                                  if (55216 <= code2 && code2 <= 55238) {
                                    return boundaries_1.CLUSTER_BREAK.V;
                                  }
                                } else {
                                  if (55243 <= code2 && code2 <= 55291) {
                                    return boundaries_1.CLUSTER_BREAK.T;
                                  }
                                }
                              } else {
                                if (code2 < 65024) {
                                  if (code2 === 64286) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 65056) {
                                    if (65024 <= code2 && code2 <= 65039) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (65056 <= code2 && code2 <= 65071) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 66045) {
                                if (code2 < 65438) {
                                  if (code2 === 65279) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 < 65520) {
                                    if (65438 <= code2 && code2 <= 65439) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (65520 <= code2 && code2 <= 65531) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 66272) {
                                  if (code2 === 66045) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 66422) {
                                    if (code2 === 66272) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (66422 <= code2 && code2 <= 66426) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 68325) {
                              if (code2 < 68108) {
                                if (code2 < 68101) {
                                  if (68097 <= code2 && code2 <= 68099) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (68101 <= code2 && code2 <= 68102) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 68152) {
                                  if (68108 <= code2 && code2 <= 68111) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 68159) {
                                    if (68152 <= code2 && code2 <= 68154) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 68159) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 69373) {
                                if (code2 < 68900) {
                                  if (68325 <= code2 && code2 <= 68326) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 69291) {
                                    if (68900 <= code2 && code2 <= 68903) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (69291 <= code2 && code2 <= 69292) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 69446) {
                                  if (69373 <= code2 && code2 <= 69375) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 69506) {
                                    if (69446 <= code2 && code2 <= 69456) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (69506 <= code2 && code2 <= 69509) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70016) {
                          if (code2 < 69815) {
                            if (code2 < 69747) {
                              if (code2 < 69634) {
                                if (code2 === 69632) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 69633) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 69688) {
                                  if (code2 === 69634) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 69744) {
                                    if (69688 <= code2 && code2 <= 69702) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 69744) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 69762) {
                                if (code2 < 69759) {
                                  if (69747 <= code2 && code2 <= 69748) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (69759 <= code2 && code2 <= 69761) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 69808) {
                                  if (code2 === 69762) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 69811) {
                                    if (69808 <= code2 && code2 <= 69810) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (69811 <= code2 && code2 <= 69814) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 69888) {
                              if (code2 < 69821) {
                                if (code2 < 69817) {
                                  if (69815 <= code2 && code2 <= 69816) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (69817 <= code2 && code2 <= 69818) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 69826) {
                                  if (code2 === 69821) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                } else {
                                  if (code2 === 69826) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 69837) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 69933) {
                                if (code2 < 69927) {
                                  if (69888 <= code2 && code2 <= 69890) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 69932) {
                                    if (69927 <= code2 && code2 <= 69931) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 69932) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 69957) {
                                  if (69933 <= code2 && code2 <= 69940) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70003) {
                                    if (69957 <= code2 && code2 <= 69958) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (code2 === 70003) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70194) {
                            if (code2 < 70082) {
                              if (code2 < 70067) {
                                if (code2 < 70018) {
                                  if (70016 <= code2 && code2 <= 70017) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 70018) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 70070) {
                                  if (70067 <= code2 && code2 <= 70069) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 70079) {
                                    if (70070 <= code2 && code2 <= 70078) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (70079 <= code2 && code2 <= 70080) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70095) {
                                if (code2 < 70089) {
                                  if (70082 <= code2 && code2 <= 70083) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                } else {
                                  if (code2 < 70094) {
                                    if (70089 <= code2 && code2 <= 70092) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 70094) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 70188) {
                                  if (code2 === 70095) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70191) {
                                    if (70188 <= code2 && code2 <= 70190) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (70191 <= code2 && code2 <= 70193) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70209) {
                              if (code2 < 70197) {
                                if (code2 < 70196) {
                                  if (70194 <= code2 && code2 <= 70195) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 70196) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 70198) {
                                  if (code2 === 70197) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 70206) {
                                    if (70198 <= code2 && code2 <= 70199) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 70206) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70371) {
                                if (code2 < 70367) {
                                  if (code2 === 70209) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70368) {
                                    if (code2 === 70367) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (70368 <= code2 && code2 <= 70370) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 70400) {
                                  if (70371 <= code2 && code2 <= 70378) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70402) {
                                    if (70400 <= code2 && code2 <= 70401) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (70402 <= code2 && code2 <= 70403) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 72343) {
                      if (code2 < 71339) {
                        if (code2 < 70841) {
                          if (code2 < 70512) {
                            if (code2 < 70471) {
                              if (code2 < 70463) {
                                if (code2 < 70462) {
                                  if (70459 <= code2 && code2 <= 70460) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 70462) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 70464) {
                                  if (code2 === 70463) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 70465) {
                                    if (code2 === 70464) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (70465 <= code2 && code2 <= 70468) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70487) {
                                if (code2 < 70475) {
                                  if (70471 <= code2 && code2 <= 70472) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (70475 <= code2 && code2 <= 70477) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 70498) {
                                  if (code2 === 70487) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70502) {
                                    if (70498 <= code2 && code2 <= 70499) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (70502 <= code2 && code2 <= 70508) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 70725) {
                              if (code2 < 70712) {
                                if (code2 < 70709) {
                                  if (70512 <= code2 && code2 <= 70516) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (70709 <= code2 && code2 <= 70711) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 70720) {
                                  if (70712 <= code2 && code2 <= 70719) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70722) {
                                    if (70720 <= code2 && code2 <= 70721) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (70722 <= code2 && code2 <= 70724) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 70832) {
                                if (code2 < 70726) {
                                  if (code2 === 70725) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 70726) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 70750) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 70833) {
                                  if (code2 === 70832) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70835) {
                                    if (70833 <= code2 && code2 <= 70834) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (70835 <= code2 && code2 <= 70840) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71096) {
                            if (code2 < 70847) {
                              if (code2 < 70843) {
                                if (code2 === 70841) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 70842) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 70845) {
                                  if (70843 <= code2 && code2 <= 70844) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 70845) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 70846) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71087) {
                                if (code2 < 70849) {
                                  if (70847 <= code2 && code2 <= 70848) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 70850) {
                                    if (code2 === 70849) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (70850 <= code2 && code2 <= 70851) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 71088) {
                                  if (code2 === 71087) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71090) {
                                    if (71088 <= code2 && code2 <= 71089) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (71090 <= code2 && code2 <= 71093) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 71216) {
                              if (code2 < 71102) {
                                if (code2 < 71100) {
                                  if (71096 <= code2 && code2 <= 71099) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (71100 <= code2 && code2 <= 71101) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 71103) {
                                  if (code2 === 71102) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 71132) {
                                    if (71103 <= code2 && code2 <= 71104) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (71132 <= code2 && code2 <= 71133) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71229) {
                                if (code2 < 71219) {
                                  if (71216 <= code2 && code2 <= 71218) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 71227) {
                                    if (71219 <= code2 && code2 <= 71226) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (71227 <= code2 && code2 <= 71228) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 71230) {
                                  if (code2 === 71229) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71231) {
                                    if (code2 === 71230) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (71231 <= code2 && code2 <= 71232) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71999) {
                          if (code2 < 71463) {
                            if (code2 < 71350) {
                              if (code2 < 71341) {
                                if (code2 === 71339) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                                if (code2 === 71340) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (code2 < 71342) {
                                  if (code2 === 71341) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71344) {
                                    if (71342 <= code2 && code2 <= 71343) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (71344 <= code2 && code2 <= 71349) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71453) {
                                if (code2 === 71350) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 71351) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 71458) {
                                  if (71453 <= code2 && code2 <= 71455) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71462) {
                                    if (71458 <= code2 && code2 <= 71461) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 71462) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 71984) {
                              if (code2 < 71727) {
                                if (code2 < 71724) {
                                  if (71463 <= code2 && code2 <= 71467) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (71724 <= code2 && code2 <= 71726) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 71736) {
                                  if (71727 <= code2 && code2 <= 71735) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71737) {
                                    if (code2 === 71736) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (71737 <= code2 && code2 <= 71738) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 71995) {
                                if (code2 < 71985) {
                                  if (code2 === 71984) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 71991) {
                                    if (71985 <= code2 && code2 <= 71989) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (71991 <= code2 && code2 <= 71992) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 71997) {
                                  if (71995 <= code2 && code2 <= 71996) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 71997) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 71998) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72193) {
                            if (code2 < 72145) {
                              if (code2 < 72001) {
                                if (code2 === 71999) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                                if (code2 === 72e3) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (code2 < 72002) {
                                  if (code2 === 72001) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                } else {
                                  if (code2 === 72002) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 72003) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 72156) {
                                if (code2 < 72148) {
                                  if (72145 <= code2 && code2 <= 72147) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 72154) {
                                    if (72148 <= code2 && code2 <= 72151) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (72154 <= code2 && code2 <= 72155) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 72160) {
                                  if (72156 <= code2 && code2 <= 72159) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 === 72160) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 72164) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 72263) {
                              if (code2 < 72249) {
                                if (code2 < 72243) {
                                  if (72193 <= code2 && code2 <= 72202) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (72243 <= code2 && code2 <= 72248) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 72250) {
                                  if (code2 === 72249) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 72251) {
                                    if (code2 === 72250) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  } else {
                                    if (72251 <= code2 && code2 <= 72254) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 72281) {
                                if (code2 < 72273) {
                                  if (code2 === 72263) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 72279) {
                                    if (72273 <= code2 && code2 <= 72278) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (72279 <= code2 && code2 <= 72280) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 72324) {
                                  if (72281 <= code2 && code2 <= 72283) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 72330) {
                                    if (72324 <= code2 && code2 <= 72329) {
                                      return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    }
                                  } else {
                                    if (72330 <= code2 && code2 <= 72342) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 94033) {
                        if (code2 < 73104) {
                          if (code2 < 72881) {
                            if (code2 < 72766) {
                              if (code2 < 72751) {
                                if (code2 < 72344) {
                                  if (code2 === 72343) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (72344 <= code2 && code2 <= 72345) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 72752) {
                                  if (code2 === 72751) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 72760) {
                                    if (72752 <= code2 && code2 <= 72758) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (72760 <= code2 && code2 <= 72765) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 72850) {
                                if (code2 === 72766) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                                if (code2 === 72767) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (code2 < 72873) {
                                  if (72850 <= code2 && code2 <= 72871) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 72874) {
                                    if (code2 === 72873) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (72874 <= code2 && code2 <= 72880) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 73018) {
                              if (code2 < 72884) {
                                if (code2 < 72882) {
                                  if (code2 === 72881) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (72882 <= code2 && code2 <= 72883) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 72885) {
                                  if (code2 === 72884) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (code2 < 73009) {
                                    if (72885 <= code2 && code2 <= 72886) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (73009 <= code2 && code2 <= 73014) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 73030) {
                                if (code2 < 73020) {
                                  if (code2 === 73018) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 73023) {
                                    if (73020 <= code2 && code2 <= 73021) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (73023 <= code2 && code2 <= 73029) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 73031) {
                                  if (code2 === 73030) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                } else {
                                  if (code2 < 73098) {
                                    if (code2 === 73031) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (73098 <= code2 && code2 <= 73102) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 73526) {
                            if (code2 < 73459) {
                              if (code2 < 73109) {
                                if (code2 < 73107) {
                                  if (73104 <= code2 && code2 <= 73105) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (73107 <= code2 && code2 <= 73108) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 73110) {
                                  if (code2 === 73109) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 73110) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 73111) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 73474) {
                                if (code2 < 73461) {
                                  if (73459 <= code2 && code2 <= 73460) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 73472) {
                                    if (73461 <= code2 && code2 <= 73462) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (73472 <= code2 && code2 <= 73473) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 73475) {
                                  if (code2 === 73474) {
                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                  }
                                } else {
                                  if (code2 < 73524) {
                                    if (code2 === 73475) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (73524 <= code2 && code2 <= 73525) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 78896) {
                              if (code2 < 73536) {
                                if (code2 < 73534) {
                                  if (73526 <= code2 && code2 <= 73530) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (73534 <= code2 && code2 <= 73535) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 73537) {
                                  if (code2 === 73536) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 73537) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                  if (code2 === 73538) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              }
                            } else {
                              if (code2 < 92912) {
                                if (code2 < 78912) {
                                  if (78896 <= code2 && code2 <= 78911) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 < 78919) {
                                    if (code2 === 78912) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (78919 <= code2 && code2 <= 78933) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 92976) {
                                  if (92912 <= code2 && code2 <= 92916) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 94031) {
                                    if (92976 <= code2 && code2 <= 92982) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 94031) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 121476) {
                          if (code2 < 119143) {
                            if (code2 < 113824) {
                              if (code2 < 94180) {
                                if (code2 < 94095) {
                                  if (94033 <= code2 && code2 <= 94087) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                } else {
                                  if (94095 <= code2 && code2 <= 94098) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 94192) {
                                  if (code2 === 94180) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 113821) {
                                    if (94192 <= code2 && code2 <= 94193) {
                                      return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                  } else {
                                    if (113821 <= code2 && code2 <= 113822) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 118576) {
                                if (code2 < 118528) {
                                  if (113824 <= code2 && code2 <= 113827) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (118528 <= code2 && code2 <= 118573) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 119141) {
                                  if (118576 <= code2 && code2 <= 118598) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 119141) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                  if (code2 === 119142) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 119173) {
                              if (code2 < 119150) {
                                if (code2 < 119149) {
                                  if (119143 <= code2 && code2 <= 119145) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 === 119149) {
                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                  }
                                }
                              } else {
                                if (code2 < 119155) {
                                  if (119150 <= code2 && code2 <= 119154) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 119163) {
                                    if (119155 <= code2 && code2 <= 119162) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  } else {
                                    if (119163 <= code2 && code2 <= 119170) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 121344) {
                                if (code2 < 119210) {
                                  if (119173 <= code2 && code2 <= 119179) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 119362) {
                                    if (119210 <= code2 && code2 <= 119213) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (119362 <= code2 && code2 <= 119364) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 121403) {
                                  if (121344 <= code2 && code2 <= 121398) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 121461) {
                                    if (121403 <= code2 && code2 <= 121452) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 121461) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 123628) {
                            if (code2 < 122907) {
                              if (code2 < 121505) {
                                if (code2 < 121499) {
                                  if (code2 === 121476) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (121499 <= code2 && code2 <= 121503) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 122880) {
                                  if (121505 <= code2 && code2 <= 121519) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 122888) {
                                    if (122880 <= code2 && code2 <= 122886) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (122888 <= code2 && code2 <= 122904) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 123023) {
                                if (code2 < 122915) {
                                  if (122907 <= code2 && code2 <= 122913) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 122918) {
                                    if (122915 <= code2 && code2 <= 122916) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (122918 <= code2 && code2 <= 122922) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 123184) {
                                  if (code2 === 123023) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 123566) {
                                    if (123184 <= code2 && code2 <= 123190) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (code2 === 123566) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            if (code2 < 127995) {
                              if (code2 < 125136) {
                                if (code2 < 124140) {
                                  if (123628 <= code2 && code2 <= 123631) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (124140 <= code2 && code2 <= 124143) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                }
                              } else {
                                if (code2 < 125252) {
                                  if (125136 <= code2 && code2 <= 125142) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 127462) {
                                    if (125252 <= code2 && code2 <= 125258) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (127462 <= code2 && code2 <= 127487) {
                                      return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                    }
                                  }
                                }
                              }
                            } else {
                              if (code2 < 917632) {
                                if (code2 < 917504) {
                                  if (127995 <= code2 && code2 <= 127999) {
                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                  }
                                } else {
                                  if (code2 < 917536) {
                                    if (917504 <= code2 && code2 <= 917535) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  } else {
                                    if (917536 <= code2 && code2 <= 917631) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  }
                                }
                              } else {
                                if (code2 < 917760) {
                                  if (917632 <= code2 && code2 <= 917759) {
                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                  }
                                } else {
                                  if (code2 < 918e3) {
                                    if (917760 <= code2 && code2 <= 917999) {
                                      return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                  } else {
                                    if (918e3 <= code2 && code2 <= 921599) {
                                      return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              return boundaries_1.CLUSTER_BREAK.OTHER;
            }
            static getEmojiProperty(code2) {
              if (code2 < 10160) {
                if (code2 < 9728) {
                  if (code2 < 9e3) {
                    if (code2 < 8482) {
                      if (code2 < 8252) {
                        if (code2 === 169) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 174) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 === 8252) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 8265) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    } else {
                      if (code2 < 8596) {
                        if (code2 === 8482) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 8505) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 < 8617) {
                          if (8596 <= code2 && code2 <= 8601) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 8986) {
                            if (8617 <= code2 && code2 <= 8618) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (8986 <= code2 && code2 <= 8987) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 9410) {
                      if (code2 < 9167) {
                        if (code2 === 9e3) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 9096) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 < 9193) {
                          if (code2 === 9167) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 9208) {
                            if (9193 <= code2 && code2 <= 9203) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (9208 <= code2 && code2 <= 9210) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 9654) {
                        if (code2 < 9642) {
                          if (code2 === 9410) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (9642 <= code2 && code2 <= 9643) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 9664) {
                          if (code2 === 9654) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 9723) {
                            if (code2 === 9664) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (9723 <= code2 && code2 <= 9726) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 10035) {
                    if (code2 < 10004) {
                      if (code2 < 9748) {
                        if (code2 < 9735) {
                          if (9728 <= code2 && code2 <= 9733) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (9735 <= code2 && code2 <= 9746) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 9872) {
                          if (9748 <= code2 && code2 <= 9861) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 9992) {
                            if (9872 <= code2 && code2 <= 9989) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (9992 <= code2 && code2 <= 10002) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 10013) {
                        if (code2 === 10004) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 10006) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 < 10017) {
                          if (code2 === 10013) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 10017) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                          if (code2 === 10024) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 10067) {
                      if (code2 < 10055) {
                        if (code2 < 10052) {
                          if (10035 <= code2 && code2 <= 10036) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 10052) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 10060) {
                          if (code2 === 10055) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 10060) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                          if (code2 === 10062) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      }
                    } else {
                      if (code2 < 10083) {
                        if (code2 < 10071) {
                          if (10067 <= code2 && code2 <= 10069) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 10071) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 10133) {
                          if (10083 <= code2 && code2 <= 10087) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 10145) {
                            if (10133 <= code2 && code2 <= 10135) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (code2 === 10145) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 127489) {
                  if (code2 < 12951) {
                    if (code2 < 11035) {
                      if (code2 < 10548) {
                        if (code2 === 10160) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 10175) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 < 11013) {
                          if (10548 <= code2 && code2 <= 10549) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (11013 <= code2 && code2 <= 11015) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      }
                    } else {
                      if (code2 < 11093) {
                        if (code2 < 11088) {
                          if (11035 <= code2 && code2 <= 11036) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 11088) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 12336) {
                          if (code2 === 11093) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 12336) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                          if (code2 === 12349) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 127340) {
                      if (code2 < 126976) {
                        if (code2 === 12951) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                        if (code2 === 12953) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (code2 < 127245) {
                          if (126976 <= code2 && code2 <= 127231) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 127279) {
                            if (127245 <= code2 && code2 <= 127247) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (code2 === 127279) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 127374) {
                        if (code2 < 127358) {
                          if (127340 <= code2 && code2 <= 127345) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (127358 <= code2 && code2 <= 127359) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 127377) {
                          if (code2 === 127374) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 127405) {
                            if (127377 <= code2 && code2 <= 127386) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (127405 <= code2 && code2 <= 127461) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 128981) {
                    if (code2 < 127561) {
                      if (code2 < 127535) {
                        if (code2 < 127514) {
                          if (127489 <= code2 && code2 <= 127503) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 === 127514) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 127538) {
                          if (code2 === 127535) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 127548) {
                            if (127538 <= code2 && code2 <= 127546) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (127548 <= code2 && code2 <= 127551) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 128326) {
                        if (code2 < 128e3) {
                          if (127561 <= code2 && code2 <= 127994) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (128e3 <= code2 && code2 <= 128317) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 128640) {
                          if (128326 <= code2 && code2 <= 128591) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 128884) {
                            if (128640 <= code2 && code2 <= 128767) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (128884 <= code2 && code2 <= 128895) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 129198) {
                      if (code2 < 129096) {
                        if (code2 < 129036) {
                          if (128981 <= code2 && code2 <= 129023) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (129036 <= code2 && code2 <= 129039) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 129114) {
                          if (129096 <= code2 && code2 <= 129103) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 129160) {
                            if (129114 <= code2 && code2 <= 129119) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (129160 <= code2 && code2 <= 129167) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 129340) {
                        if (code2 < 129292) {
                          if (129198 <= code2 && code2 <= 129279) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (129292 <= code2 && code2 <= 129338) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        }
                      } else {
                        if (code2 < 129351) {
                          if (129340 <= code2 && code2 <= 129349) {
                            return boundaries_1.EXTENDED_PICTOGRAPHIC;
                          }
                        } else {
                          if (code2 < 130048) {
                            if (129351 <= code2 && code2 <= 129791) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          } else {
                            if (130048 <= code2 && code2 <= 131069) {
                              return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              return boundaries_1.CLUSTER_BREAK.OTHER;
            }
          };
          exports2.default = Graphemer2;
        }
      });
      var require_lib2 = __commonJS2({
        "../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js"(exports2) {
          "use strict";
          var __importDefault = exports2 && exports2.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : { "default": mod };
          };
          Object.defineProperty(exports2, "__esModule", { value: true });
          var Graphemer_1 = __importDefault(require_Graphemer());
          exports2.default = Graphemer_1.default;
        }
      });
      var require_dist2 = __commonJS2({
        "../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js"(exports2) {
          (() => {
            "use strict";
            var e = { d: (t2, r2) => {
              for (var n2 in r2)
                e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r2[n2] });
            }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
              typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
            } }, t = {};
            function r(e2, t2) {
              return t2 === void 0 && (t2 = "-"), new RegExp("^(?!0{4}" + t2 + "0{2}" + t2 + "0{2})((?=[0-9]{4}" + t2 + "(((0[^2])|1[0-2])|02(?=" + t2 + "(([0-1][0-9])|2[0-8])))" + t2 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t2 + "02" + t2 + "29))([0-9]{4})" + t2 + "(?!((0[469])|11)" + t2 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t2 + "3)))" + t2 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e2);
            }
            function n(e2) {
              var t2 = /\D/.exec(e2);
              return t2 ? t2[0] : "";
            }
            function i(e2, t2, r2) {
              t2 === void 0 && (t2 = ":"), r2 === void 0 && (r2 = false);
              var i2 = new RegExp("^([0-1]|2(?=([0-3])|4" + t2 + "00))[0-9]" + t2 + "[0-5][0-9](" + t2 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
              if (!r2 || !/[Z+\-]/.test(e2))
                return i2.test(e2);
              if (/Z$/.test(e2))
                return i2.test(e2.replace("Z", ""));
              var o2 = e2.includes("+"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];
              return i2.test(u2) && function(e3, t3, r3) {
                return r3 === void 0 && (r3 = ":"), new RegExp(t3 ? "^(0(?!(2" + r3 + "4)|0" + r3 + "3)|1(?=([0-1]|2(?=" + r3 + "[04])|[34](?=" + r3 + "0))))([03469](?=" + r3 + "[03])|[17](?=" + r3 + "0)|2(?=" + r3 + "[04])|5(?=" + r3 + "[034])|8(?=" + r3 + "[04]))" + r3 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r3 + "[03])|[0-24-8](?=" + r3 + "00))" + r3 + "[03]0$").test(e3);
              }(d2, o2, n(d2));
            }
            function o(e2) {
              var t2 = e2.split("T"), o2 = t2[0], a2 = t2[1], u2 = r(o2, n(o2));
              if (!a2)
                return false;
              var d2, s = (d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d2) ? d2[0] : "");
              return u2 && i(a2, s, true);
            }
            function a(e2, t2) {
              return t2 === void 0 && (t2 = "-"), new RegExp("^[0-9]{4}" + t2 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e2);
            }
            e.r(t), e.d(t, { isValidDate: () => r, isValidISODateString: () => o, isValidTime: () => i, isValidYearMonth: () => a });
            var u = exports2;
            for (var d in t)
              u[d] = t[d];
            t.__esModule && Object.defineProperty(u, "__esModule", { value: true });
          })();
        }
      });
      var src_exports2 = {};
      __export2(src_exports2, {
        APP_BSKY_GRAPH: () => APP_BSKY_GRAPH,
        ActorNS: () => ActorNS,
        AdminNS: () => AdminNS,
        AppBskyActorDefs: () => defs_exports5,
        AppBskyActorGetPreferences: () => getPreferences_exports,
        AppBskyActorGetProfile: () => getProfile_exports,
        AppBskyActorGetProfiles: () => getProfiles_exports,
        AppBskyActorGetSuggestions: () => getSuggestions_exports,
        AppBskyActorProfile: () => profile_exports,
        AppBskyActorPutPreferences: () => putPreferences_exports,
        AppBskyActorSearchActors: () => searchActors_exports,
        AppBskyActorSearchActorsTypeahead: () => searchActorsTypeahead_exports,
        AppBskyEmbedExternal: () => external_exports,
        AppBskyEmbedImages: () => images_exports,
        AppBskyEmbedRecord: () => record_exports,
        AppBskyEmbedRecordWithMedia: () => recordWithMedia_exports,
        AppBskyFeedDefs: () => defs_exports6,
        AppBskyFeedDescribeFeedGenerator: () => describeFeedGenerator_exports,
        AppBskyFeedGenerator: () => generator_exports,
        AppBskyFeedGetActorFeeds: () => getActorFeeds_exports,
        AppBskyFeedGetActorLikes: () => getActorLikes_exports,
        AppBskyFeedGetAuthorFeed: () => getAuthorFeed_exports,
        AppBskyFeedGetFeed: () => getFeed_exports,
        AppBskyFeedGetFeedGenerator: () => getFeedGenerator_exports,
        AppBskyFeedGetFeedGenerators: () => getFeedGenerators_exports,
        AppBskyFeedGetFeedSkeleton: () => getFeedSkeleton_exports,
        AppBskyFeedGetLikes: () => getLikes_exports,
        AppBskyFeedGetListFeed: () => getListFeed_exports,
        AppBskyFeedGetPostThread: () => getPostThread_exports,
        AppBskyFeedGetPosts: () => getPosts_exports,
        AppBskyFeedGetRepostedBy: () => getRepostedBy_exports,
        AppBskyFeedGetSuggestedFeeds: () => getSuggestedFeeds_exports,
        AppBskyFeedGetTimeline: () => getTimeline_exports,
        AppBskyFeedLike: () => like_exports,
        AppBskyFeedPost: () => post_exports,
        AppBskyFeedRepost: () => repost_exports,
        AppBskyFeedThreadgate: () => threadgate_exports,
        AppBskyGraphBlock: () => block_exports,
        AppBskyGraphDefs: () => defs_exports7,
        AppBskyGraphFollow: () => follow_exports,
        AppBskyGraphGetBlocks: () => getBlocks_exports2,
        AppBskyGraphGetFollowers: () => getFollowers_exports,
        AppBskyGraphGetFollows: () => getFollows_exports,
        AppBskyGraphGetList: () => getList_exports,
        AppBskyGraphGetListBlocks: () => getListBlocks_exports,
        AppBskyGraphGetListMutes: () => getListMutes_exports,
        AppBskyGraphGetLists: () => getLists_exports,
        AppBskyGraphGetMutes: () => getMutes_exports,
        AppBskyGraphGetSuggestedFollowsByActor: () => getSuggestedFollowsByActor_exports,
        AppBskyGraphList: () => list_exports,
        AppBskyGraphListblock: () => listblock_exports,
        AppBskyGraphListitem: () => listitem_exports,
        AppBskyGraphMuteActor: () => muteActor_exports,
        AppBskyGraphMuteActorList: () => muteActorList_exports,
        AppBskyGraphUnmuteActor: () => unmuteActor_exports,
        AppBskyGraphUnmuteActorList: () => unmuteActorList_exports,
        AppBskyNotificationGetUnreadCount: () => getUnreadCount_exports,
        AppBskyNotificationListNotifications: () => listNotifications_exports,
        AppBskyNotificationRegisterPush: () => registerPush_exports,
        AppBskyNotificationUpdateSeen: () => updateSeen_exports,
        AppBskyRichtextFacet: () => facet_exports,
        AppBskyUnspeccedApplyLabels: () => applyLabels_exports,
        AppBskyUnspeccedGetPopular: () => getPopular_exports,
        AppBskyUnspeccedGetPopularFeedGenerators: () => getPopularFeedGenerators_exports,
        AppBskyUnspeccedGetTimelineSkeleton: () => getTimelineSkeleton_exports,
        AppNS: () => AppNS,
        AtUri: () => AtUri,
        AtpAgent: () => AtpAgent,
        AtpBaseClient: () => AtpBaseClient,
        AtpServiceClient: () => AtpServiceClient,
        AtprotoNS: () => AtprotoNS,
        BlobRef: () => BlobRef,
        BlockRecord: () => BlockRecord,
        BskyAgent: () => BskyAgent,
        BskyNS: () => BskyNS,
        COM_ATPROTO_ADMIN: () => COM_ATPROTO_ADMIN,
        COM_ATPROTO_MODERATION: () => COM_ATPROTO_MODERATION,
        ComAtprotoAdminDefs: () => defs_exports,
        ComAtprotoAdminDisableAccountInvites: () => disableAccountInvites_exports,
        ComAtprotoAdminDisableInviteCodes: () => disableInviteCodes_exports,
        ComAtprotoAdminEnableAccountInvites: () => enableAccountInvites_exports,
        ComAtprotoAdminGetInviteCodes: () => getInviteCodes_exports,
        ComAtprotoAdminGetModerationAction: () => getModerationAction_exports,
        ComAtprotoAdminGetModerationActions: () => getModerationActions_exports,
        ComAtprotoAdminGetModerationReport: () => getModerationReport_exports,
        ComAtprotoAdminGetModerationReports: () => getModerationReports_exports,
        ComAtprotoAdminGetRecord: () => getRecord_exports,
        ComAtprotoAdminGetRepo: () => getRepo_exports,
        ComAtprotoAdminResolveModerationReports: () => resolveModerationReports_exports,
        ComAtprotoAdminReverseModerationAction: () => reverseModerationAction_exports,
        ComAtprotoAdminSearchRepos: () => searchRepos_exports,
        ComAtprotoAdminSendEmail: () => sendEmail_exports,
        ComAtprotoAdminTakeModerationAction: () => takeModerationAction_exports,
        ComAtprotoAdminUpdateAccountEmail: () => updateAccountEmail_exports,
        ComAtprotoAdminUpdateAccountHandle: () => updateAccountHandle_exports,
        ComAtprotoIdentityResolveHandle: () => resolveHandle_exports,
        ComAtprotoIdentityUpdateHandle: () => updateHandle_exports,
        ComAtprotoLabelDefs: () => defs_exports2,
        ComAtprotoLabelQueryLabels: () => queryLabels_exports,
        ComAtprotoLabelSubscribeLabels: () => subscribeLabels_exports,
        ComAtprotoModerationCreateReport: () => createReport_exports,
        ComAtprotoModerationDefs: () => defs_exports3,
        ComAtprotoRepoApplyWrites: () => applyWrites_exports,
        ComAtprotoRepoCreateRecord: () => createRecord_exports,
        ComAtprotoRepoDeleteRecord: () => deleteRecord_exports,
        ComAtprotoRepoDescribeRepo: () => describeRepo_exports,
        ComAtprotoRepoGetRecord: () => getRecord_exports2,
        ComAtprotoRepoListRecords: () => listRecords_exports,
        ComAtprotoRepoPutRecord: () => putRecord_exports,
        ComAtprotoRepoStrongRef: () => strongRef_exports,
        ComAtprotoRepoUploadBlob: () => uploadBlob_exports,
        ComAtprotoServerCreateAccount: () => createAccount_exports,
        ComAtprotoServerCreateAppPassword: () => createAppPassword_exports,
        ComAtprotoServerCreateInviteCode: () => createInviteCode_exports,
        ComAtprotoServerCreateInviteCodes: () => createInviteCodes_exports,
        ComAtprotoServerCreateSession: () => createSession_exports,
        ComAtprotoServerDefs: () => defs_exports4,
        ComAtprotoServerDeleteAccount: () => deleteAccount_exports,
        ComAtprotoServerDeleteSession: () => deleteSession_exports,
        ComAtprotoServerDescribeServer: () => describeServer_exports,
        ComAtprotoServerGetAccountInviteCodes: () => getAccountInviteCodes_exports,
        ComAtprotoServerGetSession: () => getSession_exports,
        ComAtprotoServerListAppPasswords: () => listAppPasswords_exports,
        ComAtprotoServerRefreshSession: () => refreshSession_exports,
        ComAtprotoServerRequestAccountDelete: () => requestAccountDelete_exports,
        ComAtprotoServerRequestPasswordReset: () => requestPasswordReset_exports,
        ComAtprotoServerResetPassword: () => resetPassword_exports,
        ComAtprotoServerRevokeAppPassword: () => revokeAppPassword_exports,
        ComAtprotoSyncGetBlob: () => getBlob_exports,
        ComAtprotoSyncGetBlocks: () => getBlocks_exports,
        ComAtprotoSyncGetCheckout: () => getCheckout_exports,
        ComAtprotoSyncGetHead: () => getHead_exports,
        ComAtprotoSyncGetLatestCommit: () => getLatestCommit_exports,
        ComAtprotoSyncGetRecord: () => getRecord_exports3,
        ComAtprotoSyncGetRepo: () => getRepo_exports2,
        ComAtprotoSyncListBlobs: () => listBlobs_exports,
        ComAtprotoSyncListRepos: () => listRepos_exports,
        ComAtprotoSyncNotifyOfUpdate: () => notifyOfUpdate_exports,
        ComAtprotoSyncRequestCrawl: () => requestCrawl_exports,
        ComAtprotoSyncSubscribeRepos: () => subscribeRepos_exports,
        ComNS: () => ComNS,
        EmbedNS: () => EmbedNS,
        FeedNS: () => FeedNS,
        FollowRecord: () => FollowRecord,
        GeneratorRecord: () => GeneratorRecord,
        GraphNS: () => GraphNS,
        IdentityNS: () => IdentityNS,
        LABELS: () => LABELS,
        LABEL_GROUPS: () => LABEL_GROUPS,
        LabelNS: () => LabelNS,
        LikeRecord: () => LikeRecord,
        ListRecord: () => ListRecord,
        ListblockRecord: () => ListblockRecord,
        ListitemRecord: () => ListitemRecord,
        ModerationDecision: () => ModerationDecision,
        ModerationNS: () => ModerationNS,
        NotificationNS: () => NotificationNS,
        PostRecord: () => PostRecord,
        ProfileRecord: () => ProfileRecord,
        RepoNS: () => RepoNS,
        RepostRecord: () => RepostRecord,
        RichText: () => RichText,
        RichTextSegment: () => RichTextSegment,
        RichtextNS: () => RichtextNS,
        ServerNS: () => ServerNS,
        SyncNS: () => SyncNS,
        ThreadgateRecord: () => ThreadgateRecord,
        UnicodeString: () => UnicodeString,
        UnspeccedNS: () => UnspeccedNS,
        default: () => AtpAgent,
        jsonStringToLex: () => jsonStringToLex,
        jsonToLex: () => jsonToLex,
        lexToJson: () => lexToJson,
        moderateFeedGenerator: () => moderateFeedGenerator,
        moderatePost: () => moderatePost,
        moderateProfile: () => moderateProfile,
        moderateUserList: () => moderateUserList,
        parseLanguage: () => parseLanguage,
        sanitizeRichText: () => sanitizeRichText,
        stringifyLex: () => stringifyLex
      });
      module.exports = __toCommonJS2(src_exports2);
      var ensureValidHandle = (handle2) => {
        if (!/^[a-zA-Z0-9.-]*$/.test(handle2)) {
          throw new InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
        }
        if (handle2.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
        const labels = handle2.split(".");
        if (labels.length < 2) {
          throw new InvalidHandleError("Handle domain needs at least two parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidHandleError("Handle parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidHandleError("Handle part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidHandleError("Handle parts can not start or end with hyphens");
          }
          if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {
            throw new InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
          }
        }
      };
      var InvalidHandleError = class extends Error {
      };
      var ensureValidDid = (did2) => {
        if (!/^[a-zA-Z0-9._:%-]*$/.test(did2)) {
          throw new InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
        }
        const parts = did2.split(":");
        if (parts.length < 3) {
          throw new InvalidDidError("DID requires prefix, method, and method-specific content");
        }
        if (parts[0] != "did") {
          throw new InvalidDidError('DID requires "did:" prefix');
        }
        if (!/^[a-z]+$/.test(parts[1])) {
          throw new InvalidDidError("DID method must be lower-case letters");
        }
        if (did2.endsWith(":") || did2.endsWith("%")) {
          throw new InvalidDidError('DID can not end with ":" or "%"');
        }
        if (did2.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      var InvalidDidError = class extends Error {
      };
      var NSID = class {
        constructor(nsid2) {
          this.segments = [];
          ensureValidNsid(nsid2);
          this.segments = nsid2.split(".");
        }
        static parse(nsid2) {
          return new NSID(nsid2);
        }
        static create(authority, name2) {
          const segments = [...authority.split(".").reverse(), name2].join(".");
          return new NSID(segments);
        }
        static isValid(nsid2) {
          try {
            NSID.parse(nsid2);
            return true;
          } catch (e) {
            return false;
          }
        }
        get authority() {
          return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
        }
        get name() {
          return this.segments.at(this.segments.length - 1);
        }
        toString() {
          return this.segments.join(".");
        }
      };
      var ensureValidNsid = (nsid2) => {
        const toCheck = nsid2;
        if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
          throw new InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
        }
        if (toCheck.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
        const labels = toCheck.split(".");
        if (labels.length < 3) {
          throw new InvalidNsidError("NSID needs at least three parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidNsidError("NSID parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidNsidError("NSID part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidNsidError("NSID parts can not start or end with hyphen");
          }
          if (/^[0-9]/.test(l) && i == 0) {
            throw new InvalidNsidError("NSID first part may not start with a digit");
          }
          if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {
            throw new InvalidNsidError("NSID name part must be only letters");
          }
        }
      };
      var InvalidNsidError = class extends Error {
      };
      var ensureValidAtUri = (uri2) => {
        const uriParts = uri2.split("#");
        if (uriParts.length > 2) {
          throw new Error('ATURI can have at most one "#", separating fragment out');
        }
        const fragmentPart = uriParts[1] || null;
        uri2 = uriParts[0];
        if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri2)) {
          throw new Error("Disallowed characters in ATURI (ASCII)");
        }
        const parts = uri2.split("/");
        if (parts.length >= 3 && (parts[0] != "at:" || parts[1].length != 0)) {
          throw new Error('ATURI must start with "at://"');
        }
        if (parts.length < 3) {
          throw new Error("ATURI requires at least method and authority sections");
        }
        try {
          ensureValidHandle(parts[2]);
        } catch {
          try {
            ensureValidDid(parts[2]);
          } catch {
            throw new Error("ATURI authority must be a valid handle or DID");
          }
        }
        if (parts.length >= 4) {
          if (parts[3].length == 0) {
            throw new Error("ATURI can not have a slash after authority without a path segment");
          }
          try {
            ensureValidNsid(parts[3]);
          } catch {
            throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
          }
        }
        if (parts.length >= 5) {
          if (parts[4].length == 0) {
            throw new Error("ATURI can not have a slash after collection, unless record key is provided");
          }
        }
        if (parts.length >= 6) {
          throw new Error("ATURI path can have at most two parts, and no trailing slash");
        }
        if (uriParts.length >= 2 && fragmentPart == null) {
          throw new Error("ATURI fragment must be non-empty and start with slash");
        }
        if (fragmentPart != null) {
          if (fragmentPart.length == 0 || fragmentPart[0] != "/") {
            throw new Error("ATURI fragment must be non-empty and start with slash");
          }
          if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
            throw new Error("Disallowed characters in ATURI fragment (ASCII)");
          }
        }
        if (uri2.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      var ATP_URI_REGEX = /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var AtUri = class {
        constructor(uri2, base3) {
          let parsed;
          if (base3) {
            parsed = parse(base3);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${base3}`);
            }
            const relativep = parseRelative(uri2);
            if (!relativep) {
              throw new Error(`Invalid path: ${uri2}`);
            }
            Object.assign(parsed, relativep);
          } else {
            parsed = parse(uri2);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${uri2}`);
            }
          }
          this.hash = parsed.hash;
          this.host = parsed.host;
          this.pathname = parsed.pathname;
          this.searchParams = parsed.searchParams;
        }
        static make(handleOrDid, collection, rkey) {
          let str = handleOrDid;
          if (collection)
            str += "/" + collection;
          if (rkey)
            str += "/" + rkey;
          return new AtUri(str);
        }
        get protocol() {
          return "at:";
        }
        get origin() {
          return `at://${this.host}`;
        }
        get hostname() {
          return this.host;
        }
        set hostname(v) {
          this.host = v;
        }
        get search() {
          return this.searchParams.toString();
        }
        set search(v) {
          this.searchParams = new URLSearchParams(v);
        }
        get collection() {
          return this.pathname.split("/").filter(Boolean)[0] || "";
        }
        set collection(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          parts[0] = v;
          this.pathname = parts.join("/");
        }
        get rkey() {
          return this.pathname.split("/").filter(Boolean)[1] || "";
        }
        set rkey(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          if (!parts[0])
            parts[0] = "undefined";
          parts[1] = v;
          this.pathname = parts.join("/");
        }
        get href() {
          return this.toString();
        }
        toString() {
          let path = this.pathname || "/";
          if (!path.startsWith("/")) {
            path = `/${path}`;
          }
          let qs = this.searchParams.toString();
          if (qs && !qs.startsWith("?")) {
            qs = `?${qs}`;
          }
          let hash = this.hash;
          if (hash && !hash.startsWith("#")) {
            hash = `#${hash}`;
          }
          return `at://${this.host}${path}${qs}${hash}`;
        }
      };
      function parse(str) {
        const match = ATP_URI_REGEX.exec(str);
        if (match) {
          return {
            hash: match[5] || "",
            host: match[2] || "",
            pathname: match[3] || "",
            searchParams: new URLSearchParams(match[4] || "")
          };
        }
        return void 0;
      }
      function parseRelative(str) {
        const match = RELATIVE_REGEX.exec(str);
        if (match) {
          return {
            hash: match[3] || "",
            pathname: match[1] || "",
            searchParams: new URLSearchParams(match[2] || "")
          };
        }
        return void 0;
      }
      var util;
      (function(util2) {
        util2.assertEqual = (val) => val;
        function assertIs(_arg) {
        }
        util2.assertIs = assertIs;
        function assertNever(_x2) {
          throw new Error();
        }
        util2.assertNever = assertNever;
        util2.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
            obj[item] = item;
          }
          return obj;
        };
        util2.getValidEnumValues = (obj) => {
          const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
          const filtered = {};
          for (const k of validKeys) {
            filtered[k] = obj[k];
          }
          return util2.objectValues(filtered);
        };
        util2.objectValues = (obj) => {
          return util2.objectKeys(obj).map(function(e) {
            return obj[e];
          });
        };
        util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object2) => {
          const keys = [];
          for (const key in object2) {
            if (Object.prototype.hasOwnProperty.call(object2, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
        util2.find = (arr, checker) => {
          for (const item of arr) {
            if (checker(item))
              return item;
          }
          return void 0;
        };
        util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
        function joinValues(array2, separator = " | ") {
          return array2.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
        }
        util2.joinValues = joinValues;
        util2.jsonStringifyReplacer = (_, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        };
      })(util || (util = {}));
      var objectUtil;
      (function(objectUtil2) {
        objectUtil2.mergeShapes = (first2, second) => {
          return {
            ...first2,
            ...second
          };
        };
      })(objectUtil || (objectUtil = {}));
      var ZodParsedType = util.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set"
      ]);
      var getParsedType = (data) => {
        const t = typeof data;
        switch (t) {
          case "undefined":
            return ZodParsedType.undefined;
          case "string":
            return ZodParsedType.string;
          case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
          case "boolean":
            return ZodParsedType.boolean;
          case "function":
            return ZodParsedType.function;
          case "bigint":
            return ZodParsedType.bigint;
          case "symbol":
            return ZodParsedType.symbol;
          case "object":
            if (Array.isArray(data)) {
              return ZodParsedType.array;
            }
            if (data === null) {
              return ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
              return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
              return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
              return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
              return ZodParsedType.date;
            }
            return ZodParsedType.object;
          default:
            return ZodParsedType.unknown;
        }
      };
      var ZodIssueCode = util.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of",
        "not_finite"
      ]);
      var quotelessJson = (obj) => {
        const json = JSON.stringify(obj, null, 2);
        return json.replace(/"([^"]+)":/g, "$1:");
      };
      var ZodError = class extends Error {
        constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
          } else {
            this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
        }
        get errors() {
          return this.issues;
        }
        format(_mapper) {
          const mapper = _mapper || function(issue) {
            return issue.message;
          };
          const fieldErrors = { _errors: [] };
          const processError = (error) => {
            for (const issue of error.issues) {
              if (issue.code === "invalid_union") {
                issue.unionErrors.map(processError);
              } else if (issue.code === "invalid_return_type") {
                processError(issue.returnTypeError);
              } else if (issue.code === "invalid_arguments") {
                processError(issue.argumentsError);
              } else if (issue.path.length === 0) {
                fieldErrors._errors.push(mapper(issue));
              } else {
                let curr = fieldErrors;
                let i = 0;
                while (i < issue.path.length) {
                  const el = issue.path[i];
                  const terminal = i === issue.path.length - 1;
                  if (!terminal) {
                    curr[el] = curr[el] || { _errors: [] };
                  } else {
                    curr[el] = curr[el] || { _errors: [] };
                    curr[el]._errors.push(mapper(issue));
                  }
                  curr = curr[el];
                  i++;
                }
              }
            }
          };
          processError(this);
          return fieldErrors;
        }
        toString() {
          return this.message;
        }
        get message() {
          return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
          return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
            if (sub.path.length > 0) {
              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
              fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
              formErrors.push(mapper(sub));
            }
          }
          return { formErrors, fieldErrors };
        }
        get formErrors() {
          return this.flatten();
        }
      };
      ZodError.create = (issues) => {
        const error = new ZodError(issues);
        return error;
      };
      var errorMap = (issue, _ctx) => {
        let message;
        switch (issue.code) {
          case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
              message = "Required";
            } else {
              message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
          case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
          case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
          case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
          case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
          case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
          case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
          case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
          case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
          case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
              if ("includes" in issue.validation) {
                message = `Invalid input: must include "${issue.validation.includes}"`;
                if (typeof issue.validation.position === "number") {
                  message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                }
              } else if ("startsWith" in issue.validation) {
                message = `Invalid input: must start with "${issue.validation.startsWith}"`;
              } else if ("endsWith" in issue.validation) {
                message = `Invalid input: must end with "${issue.validation.endsWith}"`;
              } else {
                util.assertNever(issue.validation);
              }
            } else if (issue.validation !== "regex") {
              message = `Invalid ${issue.validation}`;
            } else {
              message = "Invalid";
            }
            break;
          case ZodIssueCode.too_small:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else
              message = "Invalid input";
            break;
          case ZodIssueCode.too_big:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
              message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
              message = "Invalid input";
            break;
          case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
          case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
          case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
          case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
          default:
            message = _ctx.defaultError;
            util.assertNever(issue);
        }
        return { message };
      };
      var overrideErrorMap = errorMap;
      function setErrorMap(map) {
        overrideErrorMap = map;
      }
      function getErrorMap() {
        return overrideErrorMap;
      }
      var makeIssue = (params2) => {
        const { data, path, errorMaps, issueData } = params2;
        const fullPath = [...path, ...issueData.path || []];
        const fullIssue = {
          ...issueData,
          path: fullPath
        };
        let errorMessage = "";
        const maps = errorMaps.filter((m) => !!m).slice().reverse();
        for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message || errorMessage
        };
      };
      var EMPTY_PATH = [];
      function addIssueToContext(ctx, issueData) {
        const issue = makeIssue({
          issueData,
          data: ctx.data,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x)
        });
        ctx.common.issues.push(issue);
      }
      var ParseStatus = class {
        constructor() {
          this.value = "valid";
        }
        dirty() {
          if (this.value === "valid")
            this.value = "dirty";
        }
        abort() {
          if (this.value !== "aborted")
            this.value = "aborted";
        }
        static mergeArray(status, results) {
          const arrayValue = [];
          for (const s of results) {
            if (s.status === "aborted")
              return INVALID;
            if (s.status === "dirty")
              status.dirty();
            arrayValue.push(s.value);
          }
          return { status: status.value, value: arrayValue };
        }
        static async mergeObjectAsync(status, pairs) {
          const syncPairs = [];
          for (const pair of pairs) {
            syncPairs.push({
              key: await pair.key,
              value: await pair.value
            });
          }
          return ParseStatus.mergeObjectSync(status, syncPairs);
        }
        static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
              return INVALID;
            if (value.status === "aborted")
              return INVALID;
            if (key.status === "dirty")
              status.dirty();
            if (value.status === "dirty")
              status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
              finalObject[key.value] = value.value;
            }
          }
          return { status: status.value, value: finalObject };
        }
      };
      var INVALID = Object.freeze({
        status: "aborted"
      });
      var DIRTY = (value) => ({ status: "dirty", value });
      var OK = (value) => ({ status: "valid", value });
      var isAborted = (x) => x.status === "aborted";
      var isDirty = (x) => x.status === "dirty";
      var isValid = (x) => x.status === "valid";
      var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
      var errorUtil;
      (function(errorUtil2) {
        errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
        errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
      })(errorUtil || (errorUtil = {}));
      var ParseInputLazyPath = class {
        constructor(parent, value, path, key) {
          this._cachedPath = [];
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
        }
        get path() {
          if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
              this._cachedPath.push(...this._path, ...this._key);
            } else {
              this._cachedPath.push(...this._path, this._key);
            }
          }
          return this._cachedPath;
        }
      };
      var handleResult = (ctx, result) => {
        if (isValid(result)) {
          return { success: true, data: result.value };
        } else {
          if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
          }
          return {
            success: false,
            get error() {
              if (this._error)
                return this._error;
              const error = new ZodError(ctx.common.issues);
              this._error = error;
              return this._error;
            }
          };
        }
      };
      function processCreateParams(params2) {
        if (!params2)
          return {};
        const { errorMap: errorMap2, invalid_type_error, required_error, description } = params2;
        if (errorMap2 && (invalid_type_error || required_error)) {
          throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
        }
        if (errorMap2)
          return { errorMap: errorMap2, description };
        const customMap = (iss, ctx) => {
          if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
          if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
          }
          return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
        };
        return { errorMap: customMap, description };
      }
      var ZodType = class {
        constructor(def2) {
          this.spa = this.safeParseAsync;
          this._def = def2;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.brand = this.brand.bind(this);
          this.default = this.default.bind(this);
          this.catch = this.catch.bind(this);
          this.describe = this.describe.bind(this);
          this.pipe = this.pipe.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
        }
        get description() {
          return this._def.description;
        }
        _getType(input) {
          return getParsedType(input.data);
        }
        _getOrReturnCtx(input, ctx) {
          return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          };
        }
        _processInputParams(input) {
          return {
            status: new ParseStatus(),
            ctx: {
              common: input.parent.common,
              data: input.data,
              parsedType: getParsedType(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent
            }
          };
        }
        _parseSync(input) {
          const result = this._parse(input);
          if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
          }
          return result;
        }
        _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
        }
        parse(data, params2) {
          const result = this.safeParse(data, params2);
          if (result.success)
            return result.data;
          throw result.error;
        }
        safeParse(data, params2) {
          var _a;
          const ctx = {
            common: {
              issues: [],
              async: (_a = params2 === null || params2 === void 0 ? void 0 : params2.async) !== null && _a !== void 0 ? _a : false,
              contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap
            },
            path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
        }
        async parseAsync(data, params2) {
          const result = await this.safeParseAsync(data, params2);
          if (result.success)
            return result.data;
          throw result.error;
        }
        async safeParseAsync(data, params2) {
          const ctx = {
            common: {
              issues: [],
              contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap,
              async: true
            },
            path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
          };
          const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
          const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
          return handleResult(ctx, result);
        }
        refine(check, message) {
          const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
              return { message };
            } else if (typeof message === "function") {
              return message(val);
            } else {
              return message;
            }
          };
          return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
              code: ZodIssueCode.custom,
              ...getIssueProperties(val)
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then((data) => {
                if (!data) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            if (!result) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        refinement(check, refinementData) {
          return this._refinement((val, ctx) => {
            if (!check(val)) {
              ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
              return false;
            } else {
              return true;
            }
          });
        }
        _refinement(refinement) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement }
          });
        }
        superRefine(refinement) {
          return this._refinement(refinement);
        }
        optional() {
          return ZodOptional.create(this, this._def);
        }
        nullable() {
          return ZodNullable.create(this, this._def);
        }
        nullish() {
          return this.nullable().optional();
        }
        array() {
          return ZodArray.create(this, this._def);
        }
        promise() {
          return ZodPromise.create(this, this._def);
        }
        or(option) {
          return ZodUnion.create([this, option], this._def);
        }
        and(incoming) {
          return ZodIntersection.create(this, incoming, this._def);
        }
        transform(transform) {
          return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform }
          });
        }
        default(def2) {
          const defaultValueFunc = typeof def2 === "function" ? def2 : () => def2;
          return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
          });
        }
        brand() {
          return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
          });
        }
        catch(def2) {
          const catchValueFunc = typeof def2 === "function" ? def2 : () => def2;
          return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
          });
        }
        describe(description) {
          const This = this.constructor;
          return new This({
            ...this._def,
            description
          });
        }
        pipe(target2) {
          return ZodPipeline.create(this, target2);
        }
        isOptional() {
          return this.safeParse(void 0).success;
        }
        isNullable() {
          return this.safeParse(null).success;
        }
      };
      var cuidRegex = /^c[^\s-]{8,}$/i;
      var cuid2Regex = /^[a-z][a-z0-9]*$/;
      var ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
      var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
      var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
      var emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
      var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
      var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
      var datetimeRegex = (args) => {
        if (args.precision) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
          }
        } else if (args.precision === 0) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
          }
        } else {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
          }
        }
      };
      function isValidIP(ip, version2) {
        if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
          return true;
        }
        if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
          return true;
        }
        return false;
      }
      var ZodString = class extends ZodType {
        constructor() {
          super(...arguments);
          this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
          });
          this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
          this.trim = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }]
          });
          this.toLowerCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }]
          });
          this.toUpperCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }]
          });
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = String(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.string,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          const status = new ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.length < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.length > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "length") {
              const tooBig = input.data.length > check.value;
              const tooSmall = input.data.length < check.value;
              if (tooBig || tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                if (tooBig) {
                  addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                } else if (tooSmall) {
                  addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                }
                status.dirty();
              }
            } else if (check.kind === "email") {
              if (!emailRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "email",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "emoji") {
              if (!emojiRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "emoji",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "uuid") {
              if (!uuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "uuid",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid") {
              if (!cuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "cuid",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid2") {
              if (!cuid2Regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "cuid2",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ulid") {
              if (!ulidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "ulid",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "url") {
              try {
                new URL(input.data);
              } catch (_a) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "url",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "regex") {
              check.regex.lastIndex = 0;
              const testResult = check.regex.test(input.data);
              if (!testResult) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "regex",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "trim") {
              input.data = input.data.trim();
            } else if (check.kind === "includes") {
              if (!input.data.includes(check.value, check.position)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: { includes: check.value, position: check.position },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "toLowerCase") {
              input.data = input.data.toLowerCase();
            } else if (check.kind === "toUpperCase") {
              input.data = input.data.toUpperCase();
            } else if (check.kind === "startsWith") {
              if (!input.data.startsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: { startsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "endsWith") {
              if (!input.data.endsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: { endsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "datetime") {
              const regex = datetimeRegex(check);
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: "datetime",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ip") {
              if (!isValidIP(input.data, check.version)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "ip",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        _addCheck(check) {
          return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        email(message) {
          return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
        }
        url(message) {
          return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
        }
        emoji(message) {
          return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
        }
        uuid(message) {
          return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
        }
        cuid(message) {
          return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
        }
        cuid2(message) {
          return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
        }
        ulid(message) {
          return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
        }
        ip(options) {
          return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
        }
        datetime(options) {
          var _a;
          if (typeof options === "string") {
            return this._addCheck({
              kind: "datetime",
              precision: null,
              offset: false,
              message: options
            });
          }
          return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
          });
        }
        regex(regex, message) {
          return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil.errToObj(message)
          });
        }
        includes(value, options) {
          return this._addCheck({
            kind: "includes",
            value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
          });
        }
        startsWith(value, message) {
          return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil.errToObj(message)
          });
        }
        endsWith(value, message) {
          return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil.errToObj(message)
          });
        }
        min(minLength, message) {
          return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
          });
        }
        max(maxLength, message) {
          return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
          });
        }
        length(len, message) {
          return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message)
          });
        }
        get isDatetime() {
          return !!this._def.checks.find((ch) => ch.kind === "datetime");
        }
        get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isEmoji() {
          return !!this._def.checks.find((ch) => ch.kind === "emoji");
        }
        get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get isCUID2() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid2");
        }
        get isULID() {
          return !!this._def.checks.find((ch) => ch.kind === "ulid");
        }
        get isIP() {
          return !!this._def.checks.find((ch) => ch.kind === "ip");
        }
        get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      ZodString.create = (params2) => {
        var _a;
        return new ZodString({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,
          ...processCreateParams(params2)
        });
      };
      function floatSafeRemainder(val, step) {
        const valDecCount = (val.toString().split(".")[1] || "").length;
        const stepDecCount = (step.toString().split(".")[1] || "").length;
        const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
        const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
        const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
        return valInt % stepInt / Math.pow(10, decCount);
      }
      var ZodNumber = class extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = Number(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.number,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          let ctx = void 0;
          const status = new ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "int") {
              if (!util.isInteger(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: "integer",
                  received: "float",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (floatSafeRemainder(input.data, check.value) !== 0) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "finite") {
              if (!Number.isFinite(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.not_finite,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new ZodNumber({
            ...this._def,
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil.toString(message)
              }
            ]
          });
        }
        _addCheck(check) {
          return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        int(message) {
          return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
          });
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
          });
        }
        finite(message) {
          return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message)
          });
        }
        safe(message) {
          return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message)
          })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
        get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
        }
        get isFinite() {
          let max = null, min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
              return true;
            } else if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            } else if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return Number.isFinite(min) && Number.isFinite(max);
        }
      };
      ZodNumber.create = (params2) => {
        return new ZodNumber({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
          ...processCreateParams(params2)
        });
      };
      var ZodBigInt = class extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = BigInt(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.bigint) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.bigint,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          let ctx = void 0;
          const status = new ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  type: "bigint",
                  minimum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  type: "bigint",
                  maximum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (input.data % check.value !== BigInt(0)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new ZodBigInt({
            ...this._def,
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil.toString(message)
              }
            ]
          });
        }
        _addCheck(check) {
          return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      ZodBigInt.create = (params2) => {
        var _a;
        return new ZodBigInt({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,
          ...processCreateParams(params2)
        });
      };
      var ZodBoolean = class extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = Boolean(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.boolean,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodBoolean.create = (params2) => {
        return new ZodBoolean({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
          ...processCreateParams(params2)
        });
      };
      var ZodDate = class extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = new Date(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.date,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_date
            });
            return INVALID;
          }
          const status = new ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.getTime() < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  minimum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.getTime() > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  maximum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return {
            status: status.value,
            value: new Date(input.data.getTime())
          };
        }
        _addCheck(check) {
          return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        min(minDate, message) {
          return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
          });
        }
        max(maxDate, message) {
          return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
          });
        }
        get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min != null ? new Date(min) : null;
        }
        get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max != null ? new Date(max) : null;
        }
      };
      ZodDate.create = (params2) => {
        return new ZodDate({
          checks: [],
          coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,
          typeName: ZodFirstPartyTypeKind.ZodDate,
          ...processCreateParams(params2)
        });
      };
      var ZodSymbol = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.symbol,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodSymbol.create = (params2) => {
        return new ZodSymbol({
          typeName: ZodFirstPartyTypeKind.ZodSymbol,
          ...processCreateParams(params2)
        });
      };
      var ZodUndefined = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.undefined,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodUndefined.create = (params2) => {
        return new ZodUndefined({
          typeName: ZodFirstPartyTypeKind.ZodUndefined,
          ...processCreateParams(params2)
        });
      };
      var ZodNull = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.null,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodNull.create = (params2) => {
        return new ZodNull({
          typeName: ZodFirstPartyTypeKind.ZodNull,
          ...processCreateParams(params2)
        });
      };
      var ZodAny = class extends ZodType {
        constructor() {
          super(...arguments);
          this._any = true;
        }
        _parse(input) {
          return OK(input.data);
        }
      };
      ZodAny.create = (params2) => {
        return new ZodAny({
          typeName: ZodFirstPartyTypeKind.ZodAny,
          ...processCreateParams(params2)
        });
      };
      var ZodUnknown = class extends ZodType {
        constructor() {
          super(...arguments);
          this._unknown = true;
        }
        _parse(input) {
          return OK(input.data);
        }
      };
      ZodUnknown.create = (params2) => {
        return new ZodUnknown({
          typeName: ZodFirstPartyTypeKind.ZodUnknown,
          ...processCreateParams(params2)
        });
      };
      var ZodNever = class extends ZodType {
        _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
          });
          return INVALID;
        }
      };
      ZodNever.create = (params2) => {
        return new ZodNever({
          typeName: ZodFirstPartyTypeKind.ZodNever,
          ...processCreateParams(params2)
        });
      };
      var ZodVoid = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.void,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodVoid.create = (params2) => {
        return new ZodVoid({
          typeName: ZodFirstPartyTypeKind.ZodVoid,
          ...processCreateParams(params2)
        });
      };
      var ZodArray = class extends ZodType {
        _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def2 = this._def;
          if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.array,
              received: ctx.parsedType
            });
            return INVALID;
          }
          if (def2.exactLength !== null) {
            const tooBig = ctx.data.length > def2.exactLength.value;
            const tooSmall = ctx.data.length < def2.exactLength.value;
            if (tooBig || tooSmall) {
              addIssueToContext(ctx, {
                code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                minimum: tooSmall ? def2.exactLength.value : void 0,
                maximum: tooBig ? def2.exactLength.value : void 0,
                type: "array",
                inclusive: true,
                exact: true,
                message: def2.exactLength.message
              });
              status.dirty();
            }
          }
          if (def2.minLength !== null) {
            if (ctx.data.length < def2.minLength.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: def2.minLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def2.minLength.message
              });
              status.dirty();
            }
          }
          if (def2.maxLength !== null) {
            if (ctx.data.length > def2.maxLength.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: def2.maxLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def2.maxLength.message
              });
              status.dirty();
            }
          }
          if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
              return def2.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result2) => {
              return ParseStatus.mergeArray(status, result2);
            });
          }
          const result = [...ctx.data].map((item, i) => {
            return def2.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          });
          return ParseStatus.mergeArray(status, result);
        }
        get element() {
          return this._def.type;
        }
        min(minLength, message) {
          return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) }
          });
        }
        max(maxLength, message) {
          return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) }
          });
        }
        length(len, message) {
          return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) }
          });
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      ZodArray.create = (schema2, params2) => {
        return new ZodArray({
          type: schema2,
          minLength: null,
          maxLength: null,
          exactLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray,
          ...processCreateParams(params2)
        });
      };
      function deepPartialify(schema2) {
        if (schema2 instanceof ZodObject) {
          const newShape = {};
          for (const key in schema2.shape) {
            const fieldSchema = schema2.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
          }
          return new ZodObject({
            ...schema2._def,
            shape: () => newShape
          });
        } else if (schema2 instanceof ZodArray) {
          return new ZodArray({
            ...schema2._def,
            type: deepPartialify(schema2.element)
          });
        } else if (schema2 instanceof ZodOptional) {
          return ZodOptional.create(deepPartialify(schema2.unwrap()));
        } else if (schema2 instanceof ZodNullable) {
          return ZodNullable.create(deepPartialify(schema2.unwrap()));
        } else if (schema2 instanceof ZodTuple) {
          return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));
        } else {
          return schema2;
        }
      }
      var ZodObject = class extends ZodType {
        constructor() {
          super(...arguments);
          this._cached = null;
          this.nonstrict = this.passthrough;
          this.augment = this.extend;
        }
        _getCached() {
          if (this._cached !== null)
            return this._cached;
          const shape = this._def.shape();
          const keys = util.objectKeys(shape);
          return this._cached = { shape, keys };
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
              if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
              }
            }
          }
          const pairs = [];
          for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
              for (const key of extraKeys) {
                pairs.push({
                  key: { status: "valid", value: key },
                  value: { status: "valid", value: ctx.data[key] }
                });
              }
            } else if (unknownKeys === "strict") {
              if (extraKeys.length > 0) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.unrecognized_keys,
                  keys: extraKeys
                });
                status.dirty();
              }
            } else if (unknownKeys === "strip")
              ;
            else {
              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
          } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
              const value = ctx.data[key];
              pairs.push({
                key: { status: "valid", value: key },
                value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
              });
            }
          }
          if (ctx.common.async) {
            return Promise.resolve().then(async () => {
              const syncPairs = [];
              for (const pair of pairs) {
                const key = await pair.key;
                syncPairs.push({
                  key,
                  value: await pair.value,
                  alwaysSet: pair.alwaysSet
                });
              }
              return syncPairs;
            }).then((syncPairs) => {
              return ParseStatus.mergeObjectSync(status, syncPairs);
            });
          } else {
            return ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get shape() {
          return this._def.shape();
        }
        strict(message) {
          errorUtil.errToObj;
          return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
              errorMap: (issue, ctx) => {
                var _a, _b, _c, _d;
                const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                if (issue.code === "unrecognized_keys")
                  return {
                    message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                  };
                return {
                  message: defaultError
                };
              }
            } : {}
          });
        }
        strip() {
          return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
          });
        }
        passthrough() {
          return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
          });
        }
        extend(augmentation) {
          return new ZodObject({
            ...this._def,
            shape: () => ({
              ...this._def.shape(),
              ...augmentation
            })
          });
        }
        merge(merging) {
          const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
              ...this._def.shape(),
              ...merging._def.shape()
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject
          });
          return merged;
        }
        setKey(key, schema2) {
          return this.augment({ [key]: schema2 });
        }
        catchall(index) {
          return new ZodObject({
            ...this._def,
            catchall: index
          });
        }
        pick(mask) {
          const shape = {};
          util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
              shape[key] = this.shape[key];
            }
          });
          return new ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        omit(mask) {
          const shape = {};
          util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
              shape[key] = this.shape[key];
            }
          });
          return new ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        deepPartial() {
          return deepPartialify(this);
        }
        partial(mask) {
          const newShape = {};
          util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
              newShape[key] = fieldSchema;
            } else {
              newShape[key] = fieldSchema.optional();
            }
          });
          return new ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        required(mask) {
          const newShape = {};
          util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
              newShape[key] = this.shape[key];
            } else {
              const fieldSchema = this.shape[key];
              let newField = fieldSchema;
              while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
              }
              newShape[key] = newField;
            }
          });
          return new ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        keyof() {
          return createZodEnum(util.objectKeys(this.shape));
        }
      };
      ZodObject.create = (shape, params2) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params2)
        });
      };
      ZodObject.strictCreate = (shape, params2) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params2)
        });
      };
      ZodObject.lazycreate = (shape, params2) => {
        return new ZodObject({
          shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params2)
        });
      };
      var ZodUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
            for (const result of results) {
              if (result.result.status === "valid") {
                return result.result;
              }
            }
            for (const result of results) {
              if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
              }
            }
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union,
              unionErrors
            });
            return INVALID;
          }
          if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              return {
                result: await option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              };
            })).then(handleResults);
          } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options) {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              const result = option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              });
              if (result.status === "valid") {
                return result;
              } else if (result.status === "dirty" && !dirty) {
                dirty = { result, ctx: childCtx };
              }
              if (childCtx.common.issues.length) {
                issues.push(childCtx.common.issues);
              }
            }
            if (dirty) {
              ctx.common.issues.push(...dirty.ctx.common.issues);
              return dirty.result;
            }
            const unionErrors = issues.map((issues2) => new ZodError(issues2));
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union,
              unionErrors
            });
            return INVALID;
          }
        }
        get options() {
          return this._def.options;
        }
      };
      ZodUnion.create = (types, params2) => {
        return new ZodUnion({
          options: types,
          typeName: ZodFirstPartyTypeKind.ZodUnion,
          ...processCreateParams(params2)
        });
      };
      var getDiscriminator = (type) => {
        if (type instanceof ZodLazy) {
          return getDiscriminator(type.schema);
        } else if (type instanceof ZodEffects) {
          return getDiscriminator(type.innerType());
        } else if (type instanceof ZodLiteral) {
          return [type.value];
        } else if (type instanceof ZodEnum) {
          return type.options;
        } else if (type instanceof ZodNativeEnum) {
          return Object.keys(type.enum);
        } else if (type instanceof ZodDefault) {
          return getDiscriminator(type._def.innerType);
        } else if (type instanceof ZodUndefined) {
          return [void 0];
        } else if (type instanceof ZodNull) {
          return [null];
        } else {
          return null;
        }
      };
      var ZodDiscriminatedUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.optionsMap.get(discriminatorValue);
          if (!option) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union_discriminator,
              options: Array.from(this.optionsMap.keys()),
              path: [discriminator]
            });
            return INVALID;
          }
          if (ctx.common.async) {
            return option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          } else {
            return option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          }
        }
        get discriminator() {
          return this._def.discriminator;
        }
        get options() {
          return this._def.options;
        }
        get optionsMap() {
          return this._def.optionsMap;
        }
        static create(discriminator, options, params2) {
          const optionsMap = /* @__PURE__ */ new Map();
          for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
              throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
              if (optionsMap.has(value)) {
                throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
              }
              optionsMap.set(value, type);
            }
          }
          return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params2)
          });
        }
      };
      function mergeValues(a, b) {
        const aType = getParsedType(a);
        const bType = getParsedType(b);
        if (a === b) {
          return { valid: true, data: a };
        } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
          const bKeys = util.objectKeys(b);
          const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
          const newObj = { ...a, ...b };
          for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newObj[key] = sharedValue.data;
          }
          return { valid: true, data: newObj };
        } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
          if (a.length !== b.length) {
            return { valid: false };
          }
          const newArray = [];
          for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newArray.push(sharedValue.data);
          }
          return { valid: true, data: newArray };
        } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
          return { valid: true, data: a };
        } else {
          return { valid: false };
        }
      }
      var ZodIntersection = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
              return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_intersection_types
              });
              return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
              status.dirty();
            }
            return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
            return Promise.all([
              this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              }),
              this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              })
            ]).then(([left, right]) => handleParsed(left, right));
          } else {
            return handleParsed(this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }), this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }));
          }
        }
      };
      ZodIntersection.create = (left, right, params2) => {
        return new ZodIntersection({
          left,
          right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection,
          ...processCreateParams(params2)
        });
      };
      var ZodTuple = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.array,
              received: ctx.parsedType
            });
            return INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            return INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            status.dirty();
          }
          const items = [...ctx.data].map((item, itemIndex) => {
            const schema2 = this._def.items[itemIndex] || this._def.rest;
            if (!schema2)
              return null;
            return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          }).filter((x) => !!x);
          if (ctx.common.async) {
            return Promise.all(items).then((results) => {
              return ParseStatus.mergeArray(status, results);
            });
          } else {
            return ParseStatus.mergeArray(status, items);
          }
        }
        get items() {
          return this._def.items;
        }
        rest(rest) {
          return new ZodTuple({
            ...this._def,
            rest
          });
        }
      };
      ZodTuple.create = (schemas2, params2) => {
        if (!Array.isArray(schemas2)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple({
          items: schemas2,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null,
          ...processCreateParams(params2)
        });
      };
      var ZodRecord = class extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
            pairs.push({
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
            });
          }
          if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
          } else {
            return ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get element() {
          return this._def.valueType;
        }
        static create(first2, second, third) {
          if (second instanceof ZodType) {
            return new ZodRecord({
              keyType: first2,
              valueType: second,
              typeName: ZodFirstPartyTypeKind.ZodRecord,
              ...processCreateParams(third)
            });
          }
          return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first2,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
          });
        }
      };
      var ZodMap = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.map,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
            };
          });
          if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async () => {
              for (const pair of pairs) {
                const key = await pair.key;
                const value = await pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                  return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                  status.dirty();
                }
                finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
            });
          } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs) {
              const key = pair.key;
              const value = pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          }
        }
      };
      ZodMap.create = (keyType, valueType, params2) => {
        return new ZodMap({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap,
          ...processCreateParams(params2)
        });
      };
      var ZodSet = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.set,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const def2 = this._def;
          if (def2.minSize !== null) {
            if (ctx.data.size < def2.minSize.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: def2.minSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def2.minSize.message
              });
              status.dirty();
            }
          }
          if (def2.maxSize !== null) {
            if (ctx.data.size > def2.maxSize.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: def2.maxSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def2.maxSize.message
              });
              status.dirty();
            }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2) {
              if (element.status === "aborted")
                return INVALID;
              if (element.status === "dirty")
                status.dirty();
              parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
          if (ctx.common.async) {
            return Promise.all(elements).then((elements2) => finalizeSet(elements2));
          } else {
            return finalizeSet(elements);
          }
        }
        min(minSize, message) {
          return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) }
          });
        }
        max(maxSize, message) {
          return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) }
          });
        }
        size(size, message) {
          return this.min(size, message).max(size, message);
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      ZodSet.create = (valueType, params2) => {
        return new ZodSet({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet,
          ...processCreateParams(params2)
        });
      };
      var ZodFunction = class extends ZodType {
        constructor() {
          super(...arguments);
          this.validate = this.implement;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.function,
              received: ctx.parsedType
            });
            return INVALID;
          }
          function makeArgsIssue(args, error) {
            return makeIssue({
              data: args,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                getErrorMap(),
                errorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodIssueCode.invalid_arguments,
                argumentsError: error
              }
            });
          }
          function makeReturnsIssue(returns, error) {
            return makeIssue({
              data: returns,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                getErrorMap(),
                errorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodIssueCode.invalid_return_type,
                returnTypeError: error
              }
            });
          }
          const params2 = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args) => {
              const error = new ZodError([]);
              const parsedArgs = await this._def.args.parseAsync(args, params2).catch((e) => {
                error.addIssue(makeArgsIssue(args, e));
                throw error;
              });
              const result = await fn(...parsedArgs);
              const parsedReturns = await this._def.returns._def.type.parseAsync(result, params2).catch((e) => {
                error.addIssue(makeReturnsIssue(result, e));
                throw error;
              });
              return parsedReturns;
            });
          } else {
            return OK((...args) => {
              const parsedArgs = this._def.args.safeParse(args, params2);
              if (!parsedArgs.success) {
                throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
              }
              const result = fn(...parsedArgs.data);
              const parsedReturns = this._def.returns.safeParse(result, params2);
              if (!parsedReturns.success) {
                throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
              }
              return parsedReturns.data;
            });
          }
        }
        parameters() {
          return this._def.args;
        }
        returnType() {
          return this._def.returns;
        }
        args(...items) {
          return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
          });
        }
        returns(returnType) {
          return new ZodFunction({
            ...this._def,
            returns: returnType
          });
        }
        implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        static create(args, returns, params2) {
          return new ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params2)
          });
        }
      };
      var ZodLazy = class extends ZodType {
        get schema() {
          return this._def.getter();
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
      };
      ZodLazy.create = (getter, params2) => {
        return new ZodLazy({
          getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy,
          ...processCreateParams(params2)
        });
      };
      var ZodLiteral = class extends ZodType {
        _parse(input) {
          if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              received: ctx.data,
              code: ZodIssueCode.invalid_literal,
              expected: this._def.value
            });
            return INVALID;
          }
          return { status: "valid", value: input.data };
        }
        get value() {
          return this._def.value;
        }
      };
      ZodLiteral.create = (value, params2) => {
        return new ZodLiteral({
          value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral,
          ...processCreateParams(params2)
        });
      };
      function createZodEnum(values, params2) {
        return new ZodEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodEnum,
          ...processCreateParams(params2)
        });
      }
      var ZodEnum = class extends ZodType {
        _parse(input) {
          if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
              expected: util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodIssueCode.invalid_type
            });
            return INVALID;
          }
          if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
              received: ctx.data,
              code: ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return INVALID;
          }
          return OK(input.data);
        }
        get options() {
          return this._def.values;
        }
        get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        extract(values) {
          return ZodEnum.create(values);
        }
        exclude(values) {
          return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
        }
      };
      ZodEnum.create = createZodEnum;
      var ZodNativeEnum = class extends ZodType {
        _parse(input) {
          const nativeEnumValues = util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
              expected: util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodIssueCode.invalid_type
            });
            return INVALID;
          }
          if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
              received: ctx.data,
              code: ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return INVALID;
          }
          return OK(input.data);
        }
        get enum() {
          return this._def.values;
        }
      };
      ZodNativeEnum.create = (values, params2) => {
        return new ZodNativeEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
          ...processCreateParams(params2)
        });
      };
      var ZodPromise = class extends ZodType {
        unwrap() {
          return this._def.type;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.promise,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
          return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            });
          }));
        }
      };
      ZodPromise.create = (schema2, params2) => {
        return new ZodPromise({
          type: schema2,
          typeName: ZodFirstPartyTypeKind.ZodPromise,
          ...processCreateParams(params2)
        });
      };
      var ZodEffects = class extends ZodType {
        innerType() {
          return this._def.schema;
        }
        sourceType() {
          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
              return Promise.resolve(processed).then((processed2) => {
                return this._def.schema._parseAsync({
                  data: processed2,
                  path: ctx.path,
                  parent: ctx
                });
              });
            } else {
              return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
              });
            }
          }
          const checkCtx = {
            addIssue: (arg) => {
              addIssueToContext(ctx, arg);
              if (arg.fatal) {
                status.abort();
              } else {
                status.dirty();
              }
            },
            get path() {
              return ctx.path;
            }
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
              const result = effect.refinement(acc, checkCtx);
              if (ctx.common.async) {
                return Promise.resolve(result);
              }
              if (result instanceof Promise) {
                throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
              }
              return acc;
            };
            if (ctx.common.async === false) {
              const inner = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              executeRefinement(inner.value);
              return { status: status.value, value: inner.value };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
                if (inner.status === "aborted")
                  return INVALID;
                if (inner.status === "dirty")
                  status.dirty();
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value };
                });
              });
            }
          }
          if (effect.type === "transform") {
            if (ctx.common.async === false) {
              const base3 = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (!isValid(base3))
                return base3;
              const result = effect.transform(base3.value, checkCtx);
              if (result instanceof Promise) {
                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
              }
              return { status: status.value, value: result };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base3) => {
                if (!isValid(base3))
                  return base3;
                return Promise.resolve(effect.transform(base3.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
              });
            }
          }
          util.assertNever(effect);
        }
      };
      ZodEffects.create = (schema2, effect, params2) => {
        return new ZodEffects({
          schema: schema2,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect,
          ...processCreateParams(params2)
        });
      };
      ZodEffects.createWithPreprocess = (preprocess, schema2, params2) => {
        return new ZodEffects({
          schema: schema2,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          ...processCreateParams(params2)
        });
      };
      var ZodOptional = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.undefined) {
            return OK(void 0);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      ZodOptional.create = (type, params2) => {
        return new ZodOptional({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional,
          ...processCreateParams(params2)
        });
      };
      var ZodNullable = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.null) {
            return OK(null);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      ZodNullable.create = (type, params2) => {
        return new ZodNullable({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable,
          ...processCreateParams(params2)
        });
      };
      var ZodDefault = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        removeDefault() {
          return this._def.innerType;
        }
      };
      ZodDefault.create = (type, params2) => {
        return new ZodDefault({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodDefault,
          defaultValue: typeof params2.default === "function" ? params2.default : () => params2.default,
          ...processCreateParams(params2)
        });
      };
      var ZodCatch = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const newCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            }
          };
          const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
              ...newCtx
            }
          });
          if (isAsync(result)) {
            return result.then((result2) => {
              return {
                status: "valid",
                value: result2.status === "valid" ? result2.value : this._def.catchValue({
                  get error() {
                    return new ZodError(newCtx.common.issues);
                  },
                  input: newCtx.data
                })
              };
            });
          } else {
            return {
              status: "valid",
              value: result.status === "valid" ? result.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          }
        }
        removeCatch() {
          return this._def.innerType;
        }
      };
      ZodCatch.create = (type, params2) => {
        return new ZodCatch({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodCatch,
          catchValue: typeof params2.catch === "function" ? params2.catch : () => params2.catch,
          ...processCreateParams(params2)
        });
      };
      var ZodNaN = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.nan,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return { status: "valid", value: input.data };
        }
      };
      ZodNaN.create = (params2) => {
        return new ZodNaN({
          typeName: ZodFirstPartyTypeKind.ZodNaN,
          ...processCreateParams(params2)
        });
      };
      var BRAND = Symbol("zod_brand");
      var ZodBranded = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        unwrap() {
          return this._def.type;
        }
      };
      var ZodPipeline = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.common.async) {
            const handleAsync = async () => {
              const inResult = await this._def.in._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inResult.status === "aborted")
                return INVALID;
              if (inResult.status === "dirty") {
                status.dirty();
                return DIRTY(inResult.value);
              } else {
                return this._def.out._parseAsync({
                  data: inResult.value,
                  path: ctx.path,
                  parent: ctx
                });
              }
            };
            return handleAsync();
          } else {
            const inResult = this._def.in._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return {
                status: "dirty",
                value: inResult.value
              };
            } else {
              return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }
        }
        static create(a, b) {
          return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
          });
        }
      };
      var custom = (check, params2 = {}, fatal) => {
        if (check)
          return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
              const p = typeof params2 === "function" ? params2(data) : typeof params2 === "string" ? { message: params2 } : params2;
              const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
              const p2 = typeof p === "string" ? { message: p } : p;
              ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
          });
        return ZodAny.create();
      };
      var late = {
        object: ZodObject.lazycreate
      };
      var ZodFirstPartyTypeKind;
      (function(ZodFirstPartyTypeKind2) {
        ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
        ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
        ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
        ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
      var instanceOfType = (cls, params2 = {
        message: `Input not instance of ${cls.name}`
      }) => custom((data) => data instanceof cls, params2);
      var stringType = ZodString.create;
      var numberType = ZodNumber.create;
      var nanType = ZodNaN.create;
      var bigIntType = ZodBigInt.create;
      var booleanType = ZodBoolean.create;
      var dateType = ZodDate.create;
      var symbolType = ZodSymbol.create;
      var undefinedType = ZodUndefined.create;
      var nullType = ZodNull.create;
      var anyType = ZodAny.create;
      var unknownType = ZodUnknown.create;
      var neverType = ZodNever.create;
      var voidType = ZodVoid.create;
      var arrayType = ZodArray.create;
      var objectType = ZodObject.create;
      var strictObjectType = ZodObject.strictCreate;
      var unionType = ZodUnion.create;
      var discriminatedUnionType = ZodDiscriminatedUnion.create;
      var intersectionType = ZodIntersection.create;
      var tupleType = ZodTuple.create;
      var recordType = ZodRecord.create;
      var mapType = ZodMap.create;
      var setType = ZodSet.create;
      var functionType = ZodFunction.create;
      var lazyType = ZodLazy.create;
      var literalType = ZodLiteral.create;
      var enumType = ZodEnum.create;
      var nativeEnumType = ZodNativeEnum.create;
      var promiseType = ZodPromise.create;
      var effectsType = ZodEffects.create;
      var optionalType = ZodOptional.create;
      var nullableType = ZodNullable.create;
      var preprocessType = ZodEffects.createWithPreprocess;
      var pipelineType = ZodPipeline.create;
      var ostring = () => stringType().optional();
      var onumber = () => numberType().optional();
      var oboolean = () => booleanType().optional();
      var coerce2 = {
        string: (arg) => ZodString.create({ ...arg, coerce: true }),
        number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
        boolean: (arg) => ZodBoolean.create({
          ...arg,
          coerce: true
        }),
        bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
        date: (arg) => ZodDate.create({ ...arg, coerce: true })
      };
      var NEVER2 = INVALID;
      var z = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        defaultErrorMap: errorMap,
        setErrorMap,
        getErrorMap,
        makeIssue,
        EMPTY_PATH,
        addIssueToContext,
        ParseStatus,
        INVALID,
        DIRTY,
        OK,
        isAborted,
        isDirty,
        isValid,
        isAsync,
        get util() {
          return util;
        },
        get objectUtil() {
          return objectUtil;
        },
        ZodParsedType,
        getParsedType,
        ZodType,
        ZodString,
        ZodNumber,
        ZodBigInt,
        ZodBoolean,
        ZodDate,
        ZodSymbol,
        ZodUndefined,
        ZodNull,
        ZodAny,
        ZodUnknown,
        ZodNever,
        ZodVoid,
        ZodArray,
        ZodObject,
        ZodUnion,
        ZodDiscriminatedUnion,
        ZodIntersection,
        ZodTuple,
        ZodRecord,
        ZodMap,
        ZodSet,
        ZodFunction,
        ZodLazy,
        ZodLiteral,
        ZodEnum,
        ZodNativeEnum,
        ZodPromise,
        ZodEffects,
        ZodTransformer: ZodEffects,
        ZodOptional,
        ZodNullable,
        ZodDefault,
        ZodCatch,
        ZodNaN,
        BRAND,
        ZodBranded,
        ZodPipeline,
        custom,
        Schema: ZodType,
        ZodSchema: ZodType,
        late,
        get ZodFirstPartyTypeKind() {
          return ZodFirstPartyTypeKind;
        },
        coerce: coerce2,
        any: anyType,
        array: arrayType,
        bigint: bigIntType,
        boolean: booleanType,
        date: dateType,
        discriminatedUnion: discriminatedUnionType,
        effect: effectsType,
        "enum": enumType,
        "function": functionType,
        "instanceof": instanceOfType,
        intersection: intersectionType,
        lazy: lazyType,
        literal: literalType,
        map: mapType,
        nan: nanType,
        nativeEnum: nativeEnumType,
        never: neverType,
        "null": nullType,
        nullable: nullableType,
        number: numberType,
        object: objectType,
        oboolean,
        onumber,
        optional: optionalType,
        ostring,
        pipeline: pipelineType,
        preprocess: preprocessType,
        promise: promiseType,
        record: recordType,
        set: setType,
        strictObject: strictObjectType,
        string: stringType,
        symbol: symbolType,
        transformer: effectsType,
        tuple: tupleType,
        "undefined": undefinedType,
        union: unionType,
        unknown: unknownType,
        "void": voidType,
        NEVER: NEVER2,
        ZodIssueCode,
        quotelessJson,
        ZodError
      });
      var check_exports = {};
      __export2(check_exports, {
        assure: () => assure,
        is: () => is2,
        isObject: () => isObject
      });
      var is2 = (obj, def2) => {
        return def2.safeParse(obj).success;
      };
      var assure = (def2, obj) => {
        return def2.parse(obj);
      };
      var isObject = (obj) => {
        return typeof obj === "object" && obj !== null;
      };
      var encode_12 = encode6;
      var MSB2 = 128;
      var REST2 = 127;
      var MSBALL2 = ~REST2;
      var INT2 = Math.pow(2, 31);
      function encode6(num, out, offset) {
        out = out || [];
        offset = offset || 0;
        var oldOffset = offset;
        while (num >= INT2) {
          out[offset++] = num & 255 | MSB2;
          num /= 128;
        }
        while (num & MSBALL2) {
          out[offset++] = num & 255 | MSB2;
          num >>>= 7;
        }
        out[offset] = num | 0;
        encode6.bytes = offset - oldOffset + 1;
        return out;
      }
      var decode8 = read3;
      var MSB$12 = 128;
      var REST$12 = 127;
      function read3(buf2, offset) {
        var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
        do {
          if (counter >= l) {
            read3.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b = buf2[counter++];
          res += shift < 28 ? (b & REST$12) << shift : (b & REST$12) * Math.pow(2, shift);
          shift += 7;
        } while (b >= MSB$12);
        read3.bytes = counter - offset;
        return res;
      }
      var N12 = Math.pow(2, 7);
      var N22 = Math.pow(2, 14);
      var N32 = Math.pow(2, 21);
      var N42 = Math.pow(2, 28);
      var N52 = Math.pow(2, 35);
      var N62 = Math.pow(2, 42);
      var N72 = Math.pow(2, 49);
      var N82 = Math.pow(2, 56);
      var N92 = Math.pow(2, 63);
      var length2 = function(value) {
        return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
      };
      var varint5 = {
        encode: encode_12,
        decode: decode8,
        encodingLength: length2
      };
      var _brrp_varint2 = varint5;
      var varint_default2 = _brrp_varint2;
      var decode22 = (data, offset = 0) => {
        const code2 = varint_default2.decode(data, offset);
        return [
          code2,
          varint_default2.decode.bytes
        ];
      };
      var encodeTo2 = (int, target2, offset = 0) => {
        varint_default2.encode(int, target2, offset);
        return target2;
      };
      var encodingLength2 = (int) => {
        return varint_default2.encodingLength(int);
      };
      var empty2 = new Uint8Array(0);
      var equals4 = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      var coerce22 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
      var fromString2 = (str) => new TextEncoder().encode(str);
      var toString2 = (b) => new TextDecoder().decode(b);
      var create3 = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength2(code2);
        const digestOffset = sizeOffset + encodingLength2(size);
        const bytes2 = new Uint8Array(digestOffset + size);
        encodeTo2(code2, bytes2, 0);
        encodeTo2(size, bytes2, sizeOffset);
        bytes2.set(digest2, digestOffset);
        return new Digest2(code2, size, digest2, bytes2);
      };
      var decode32 = (multihash) => {
        const bytes2 = coerce22(multihash);
        const [code2, sizeOffset] = decode22(bytes2);
        const [size, digestOffset] = decode22(bytes2.subarray(sizeOffset));
        const digest2 = bytes2.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest2(code2, size, digest2, bytes2);
      };
      var equals22 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals4(a.bytes, b.bytes);
        }
      };
      var Digest2 = class {
        constructor(code2, size, digest2, bytes2) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes2;
        }
      };
      var base58_exports = {};
      __export2(base58_exports, {
        base58btc: () => base58btc2,
        base58flickr: () => base58flickr2
      });
      function base2(ALPHABET, name2) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode52(source) {
          if (source instanceof Uint8Array)
            ;
          else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
          } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
          }
          if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length22 = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length22) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length22 = i2;
            pbegin++;
          }
          var it2 = size - length22;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return new Uint8Array();
          }
          var psz = 0;
          if (source[psz] === " ") {
            return;
          }
          var zeroes = 0;
          var length22 = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length22) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length22 = i2;
            psz++;
          }
          if (source[psz] === " ") {
            return;
          }
          var it4 = size - length22;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = new Uint8Array(zeroes + (size - it4));
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode62(string3) {
          var buffer2 = decodeUnsafe(string3);
          if (buffer2) {
            return buffer2;
          }
          throw new Error(`Non-${name2} character`);
        }
        return {
          encode: encode52,
          decodeUnsafe,
          decode: decode62
        };
      }
      var src3 = base2;
      var _brrp__multiformats_scope_baseX2 = src3;
      var base_x_default2 = _brrp__multiformats_scope_baseX2;
      var Encoder3 = class {
        constructor(name2, prefix, baseEncode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes2) {
          if (bytes2 instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes2)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      var Decoder3 = class {
        constructor(name2, prefix, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder22) {
          return or2(this, decoder22);
        }
      };
      var ComposedDecoder2 = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder22) {
          return or2(this, decoder22);
        }
        decode(input) {
          const prefix = input[0];
          const decoder22 = this.decoders[prefix];
          if (decoder22) {
            return decoder22.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      var or2 = (left, right) => new ComposedDecoder2({
        ...left.decoders || { [left.prefix]: left },
        ...right.decoders || { [right.prefix]: right }
      });
      var Codec2 = class {
        constructor(name2, prefix, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder3(name2, prefix, baseEncode);
          this.decoder = new Decoder3(name2, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      var from2 = ({ name: name2, prefix, encode: encode52, decode: decode62 }) => new Codec2(name2, prefix, encode52, decode62);
      var baseX2 = ({ prefix, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode52, decode: decode62 } = base_x_default2(alphabet2, name2);
        return from2({
          prefix,
          name: name2,
          encode: encode52,
          decode: (text) => coerce22(decode62(text))
        });
      };
      var decode42 = (string3, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string3.length;
        while (string3[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string3[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      var encode22 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      var rfc46482 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from2({
          prefix,
          name: name2,
          encode(input) {
            return encode22(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode42(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
      var base58btc2 = baseX2({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      var base58flickr2 = baseX2({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
      var base32_exports = {};
      __export2(base32_exports, {
        base32: () => base322,
        base32hex: () => base32hex2,
        base32hexpad: () => base32hexpad2,
        base32hexpadupper: () => base32hexpadupper2,
        base32hexupper: () => base32hexupper2,
        base32pad: () => base32pad2,
        base32padupper: () => base32padupper2,
        base32upper: () => base32upper2,
        base32z: () => base32z2
      });
      var base322 = rfc46482({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      var base32upper2 = rfc46482({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      var base32pad2 = rfc46482({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      var base32padupper2 = rfc46482({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      var base32hex2 = rfc46482({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      var base32hexupper2 = rfc46482({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      var base32hexpad2 = rfc46482({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      var base32hexpadupper2 = rfc46482({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      var base32z2 = rfc46482({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
      var CID2 = class {
        constructor(version2, code2, multihash, bytes2) {
          this.code = code2;
          this.version = version2;
          this.multihash = multihash;
          this.bytes = bytes2;
          this.byteOffset = bytes2.byteOffset;
          this.byteLength = bytes2.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE2) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE2) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return CID2.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create3(code2, digest2);
              return CID2.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals22(this.multihash, other.multihash);
        }
        toString(base3) {
          const { bytes: bytes2, version: version2, _baseCache } = this;
          switch (version2) {
            case 0:
              return toStringV02(bytes2, _baseCache, base3 || base58btc2.encoder);
            default:
              return toStringV12(bytes2, _baseCache, base3 || base322.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate(/^0\.0/, IS_CID_DEPRECATION);
          return !!(value && (value[cidSymbol2] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof CID2) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version2, code: code2, multihash, bytes: bytes2 } = value;
            return new CID2(version2, code2, multihash, bytes2 || encodeCID2(version2, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol2] === true) {
            const { version: version2, multihash, code: code2 } = value;
            const digest2 = decode32(multihash);
            return CID2.create(version2, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version2, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version2) {
            case 0: {
              if (code2 !== DAG_PB_CODE2) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE2}) block encoding`);
              } else {
                return new CID2(version2, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes2 = encodeCID2(version2, code2, digest2.bytes);
              return new CID2(version2, code2, digest2, bytes2);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return CID2.create(0, DAG_PB_CODE2, digest2);
        }
        static createV1(code2, digest2) {
          return CID2.create(1, code2, digest2);
        }
        static decode(bytes2) {
          const [cid2, remainder] = CID2.decodeFirst(bytes2);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid2;
        }
        static decodeFirst(bytes2) {
          const specs = CID2.inspectBytes(bytes2);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce22(bytes2.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid2 = specs.version === 0 ? CID2.createV0(digest2) : CID2.createV1(specs.codec, digest2);
          return [
            cid2,
            bytes2.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length22] = decode22(initialBytes.subarray(offset));
            offset += length22;
            return i;
          };
          let version2 = next();
          let codec = DAG_PB_CODE2;
          if (version2 === 18) {
            version2 = 0;
            offset = 0;
          } else if (version2 === 1) {
            codec = next();
          }
          if (version2 !== 0 && version2 !== 1) {
            throw new RangeError(`Invalid CID version ${version2}`);
          }
          const prefixSize = offset;
          const multihashCode = next();
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version2,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base3) {
          const [prefix, bytes2] = parseCIDtoBytes2(source, base3);
          const cid2 = CID2.decode(bytes2);
          cid2._baseCache.set(prefix, source);
          return cid2;
        }
      };
      var parseCIDtoBytes2 = (source, base3) => {
        switch (source[0]) {
          case "Q": {
            const decoder22 = base3 || base58btc2;
            return [
              base58btc2.prefix,
              decoder22.decode(`${base58btc2.prefix}${source}`)
            ];
          }
          case base58btc2.prefix: {
            const decoder22 = base3 || base58btc2;
            return [
              base58btc2.prefix,
              decoder22.decode(source)
            ];
          }
          case base322.prefix: {
            const decoder22 = base3 || base322;
            return [
              base322.prefix,
              decoder22.decode(source)
            ];
          }
          default: {
            if (base3 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base3.decode(source)
            ];
          }
        }
      };
      var toStringV02 = (bytes2, cache2, base3) => {
        const { prefix } = base3;
        if (prefix !== base58btc2.prefix) {
          throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
        }
        const cid2 = cache2.get(prefix);
        if (cid2 == null) {
          const cid3 = base3.encode(bytes2).slice(1);
          cache2.set(prefix, cid3);
          return cid3;
        } else {
          return cid2;
        }
      };
      var toStringV12 = (bytes2, cache2, base3) => {
        const { prefix } = base3;
        const cid2 = cache2.get(prefix);
        if (cid2 == null) {
          const cid3 = base3.encode(bytes2);
          cache2.set(prefix, cid3);
          return cid3;
        } else {
          return cid2;
        }
      };
      var DAG_PB_CODE2 = 112;
      var SHA_256_CODE2 = 18;
      var encodeCID2 = (version2, code2, multihash) => {
        const codeOffset = encodingLength2(version2);
        const hashOffset = codeOffset + encodingLength2(code2);
        const bytes2 = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo2(version2, bytes2, 0);
        encodeTo2(code2, bytes2, codeOffset);
        bytes2.set(multihash, hashOffset);
        return bytes2;
      };
      var cidSymbol2 = Symbol.for("@ipld/js-cid/CID");
      var readonly = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      var hidden = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      var version = "0.0.0-dev";
      var deprecate = (range, message) => {
        if (range.test(version)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
      var identity_exports = {};
      __export2(identity_exports, {
        identity: () => identity
      });
      var identity = from2({
        prefix: "\0",
        name: "identity",
        encode: (buf2) => toString2(buf2),
        decode: (str) => fromString2(str)
      });
      var base2_exports = {};
      __export2(base2_exports, {
        base2: () => base22
      });
      var base22 = rfc46482({
        prefix: "0",
        name: "base2",
        alphabet: "01",
        bitsPerChar: 1
      });
      var base8_exports = {};
      __export2(base8_exports, {
        base8: () => base8
      });
      var base8 = rfc46482({
        prefix: "7",
        name: "base8",
        alphabet: "01234567",
        bitsPerChar: 3
      });
      var base10_exports = {};
      __export2(base10_exports, {
        base10: () => base10
      });
      var base10 = baseX2({
        prefix: "9",
        name: "base10",
        alphabet: "0123456789"
      });
      var base16_exports = {};
      __export2(base16_exports, {
        base16: () => base16,
        base16upper: () => base16upper
      });
      var base16 = rfc46482({
        prefix: "f",
        name: "base16",
        alphabet: "0123456789abcdef",
        bitsPerChar: 4
      });
      var base16upper = rfc46482({
        prefix: "F",
        name: "base16upper",
        alphabet: "0123456789ABCDEF",
        bitsPerChar: 4
      });
      var base36_exports = {};
      __export2(base36_exports, {
        base36: () => base36,
        base36upper: () => base36upper
      });
      var base36 = baseX2({
        prefix: "k",
        name: "base36",
        alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
      });
      var base36upper = baseX2({
        prefix: "K",
        name: "base36upper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      });
      var base64_exports = {};
      __export2(base64_exports, {
        base64: () => base64,
        base64pad: () => base64pad,
        base64url: () => base64url,
        base64urlpad: () => base64urlpad
      });
      var base64 = rfc46482({
        prefix: "m",
        name: "base64",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        bitsPerChar: 6
      });
      var base64pad = rfc46482({
        prefix: "M",
        name: "base64pad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        bitsPerChar: 6
      });
      var base64url = rfc46482({
        prefix: "u",
        name: "base64url",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        bitsPerChar: 6
      });
      var base64urlpad = rfc46482({
        prefix: "U",
        name: "base64urlpad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        bitsPerChar: 6
      });
      var base256emoji_exports = {};
      __export2(base256emoji_exports, {
        base256emoji: () => base256emoji
      });
      var alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
      var alphabetBytesToChars = alphabet.reduce((p, c, i) => {
        p[i] = c;
        return p;
      }, []);
      var alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
        p[c.codePointAt(0)] = i;
        return p;
      }, []);
      function encode32(data) {
        return data.reduce((p, c) => {
          p += alphabetBytesToChars[c];
          return p;
        }, "");
      }
      function decode52(str) {
        const byts = [];
        for (const char of str) {
          const byt = alphabetCharsToBytes[char.codePointAt(0)];
          if (byt === void 0) {
            throw new Error(`Non-base256emoji character: ${char}`);
          }
          byts.push(byt);
        }
        return new Uint8Array(byts);
      }
      var base256emoji = from2({
        prefix: "\u{1F680}",
        name: "base256emoji",
        encode: encode32,
        decode: decode52
      });
      var sha2_browser_exports = {};
      __export2(sha2_browser_exports, {
        sha256: () => sha256,
        sha512: () => sha512
      });
      var from22 = ({ name: name2, code: code2, encode: encode52 }) => new Hasher(name2, code2, encode52);
      var Hasher = class {
        constructor(name2, code2, encode52) {
          this.name = name2;
          this.code = code2;
          this.encode = encode52;
        }
        digest(input) {
          if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create3(this.code, result) : result.then((digest2) => create3(this.code, digest2));
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
      var sha256 = from22({
        name: "sha2-256",
        code: 18,
        encode: sha("SHA-256")
      });
      var sha512 = from22({
        name: "sha2-512",
        code: 19,
        encode: sha("SHA-512")
      });
      var identity_exports2 = {};
      __export2(identity_exports2, {
        identity: () => identity2
      });
      var code = 0;
      var name = "identity";
      var encode42 = coerce22;
      var digest = (input) => create3(code, encode42(input));
      var identity2 = {
        code,
        name,
        encode: encode42,
        digest
      };
      var textEncoder3 = new TextEncoder();
      var textDecoder2 = new TextDecoder();
      var bases = {
        ...identity_exports,
        ...base2_exports,
        ...base8_exports,
        ...base10_exports,
        ...base16_exports,
        ...base32_exports,
        ...base36_exports,
        ...base58_exports,
        ...base64_exports,
        ...base256emoji_exports
      };
      var hashes = {
        ...sha2_browser_exports,
        ...identity_exports2
      };
      function createCodec(name2, prefix, encode52, decode62) {
        return {
          name: name2,
          prefix,
          encoder: {
            name: name2,
            prefix,
            encode: encode52
          },
          decoder: { decode: decode62 }
        };
      }
      var string = createCodec("utf8", "u", (buf2) => {
        const decoder22 = new TextDecoder("utf8");
        return "u" + decoder22.decode(buf2);
      }, (str) => {
        const encoder2 = new TextEncoder();
        return encoder2.encode(str.substring(1));
      });
      var ascii = createCodec("ascii", "a", (buf2) => {
        let string3 = "a";
        for (let i = 0; i < buf2.length; i++) {
          string3 += String.fromCharCode(buf2[i]);
        }
        return string3;
      }, (str) => {
        str = str.substring(1);
        const buf2 = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
          buf2[i] = str.charCodeAt(i);
        }
        return buf2;
      });
      var BASES = {
        utf8: string,
        "utf-8": string,
        hex: bases.base16,
        latin1: ascii,
        ascii,
        binary: ascii,
        ...bases
      };
      var bases_default = BASES;
      function fromString22(string3, encoding = "utf8") {
        const base3 = bases_default[encoding];
        if (!base3) {
          throw new Error(`Unsupported encoding "${encoding}"`);
        }
        return base3.decoder.decode(`${base3.prefix}${string3}`);
      }
      function toString22(array2, encoding = "utf8") {
        const base3 = bases_default[encoding];
        if (!base3) {
          throw new Error(`Unsupported encoding "${encoding}"`);
        }
        return base3.encoder.encode(array2).substring(1);
      }
      var jsonToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => jsonToIpld(item));
        }
        if (val && typeof val === "object") {
          if (typeof val["$link"] === "string" && Object.keys(val).length === 1) {
            return CID2.parse(val["$link"]);
          }
          if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) {
            return fromString22(val["$bytes"], "base64");
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = jsonToIpld(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      var ipldToJson = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => ipldToJson(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof Uint8Array) {
            return {
              $bytes: toString22(val, "base64")
            };
          }
          if (CID2.asCID(val)) {
            return {
              $link: val.toString()
            };
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = ipldToJson(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      var cidSchema = z.any().refine((obj) => CID2.asCID(obj) !== null, {
        message: "Not a CID"
      }).transform((obj) => CID2.asCID(obj));
      var schema = {
        cid: cidSchema,
        bytes: z.instanceof(Uint8Array),
        string: z.string(),
        array: z.array(z.unknown()),
        map: z.record(z.string(), z.unknown()),
        unknown: z.unknown()
      };
      var def = {
        cid: {
          name: "cid",
          schema: schema.cid
        },
        bytes: {
          name: "bytes",
          schema: schema.bytes
        },
        string: {
          name: "string",
          schema: schema.string
        },
        map: {
          name: "map",
          schema: schema.map
        },
        unknown: {
          name: "unknown",
          schema: schema.unknown
        }
      };
      var SECOND = 1e3;
      var MINUTE = SECOND * 60;
      var HOUR = MINUTE * 60;
      var DAY = HOUR * 24;
      var import_graphemer = __toESM2(require_lib2());
      var utf8Len = (str) => {
        return new TextEncoder().encode(str).byteLength;
      };
      var graphemeLen = (str) => {
        const splitter = new import_graphemer.default();
        return splitter.countGraphemes(str);
      };
      var parseLanguage = (langTag) => {
        const parsed = langTag.match(bcp47Regexp);
        if (!parsed?.groups)
          return null;
        const parts = parsed.groups;
        return {
          grandfathered: parts.grandfathered,
          language: parts.language,
          extlang: parts.extlang,
          script: parts.script,
          region: parts.region,
          variant: parts.variant,
          extension: parts.extension,
          privateUse: parts.privateUseA || parts.privateUseB
        };
      };
      var validateLanguage = (langTag) => {
        return bcp47Regexp.test(langTag);
      };
      var bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
      var import_iso_datestring_validator = __toESM2(require_dist2());
      function datetime(path, value) {
        try {
          if (!(0, import_iso_datestring_validator.isValidISODateString)(value)) {
            throw new Error();
          }
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be an iso8601 formatted datetime`)
          };
        }
        return { success: true, value };
      }
      function uri(path, value) {
        const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
        if (!isUri) {
          return {
            success: false,
            error: new ValidationError(`${path} must be a uri`)
          };
        }
        return { success: true, value };
      }
      function atUri(path, value) {
        try {
          ensureValidAtUri(value);
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be a valid at-uri`)
          };
        }
        return { success: true, value };
      }
      function did(path, value) {
        try {
          ensureValidDid(value);
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be a valid did`)
          };
        }
        return { success: true, value };
      }
      function handle(path, value) {
        try {
          ensureValidHandle(value);
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be a valid handle`)
          };
        }
        return { success: true, value };
      }
      function atIdentifier(path, value) {
        const isDid = did(path, value);
        if (!isDid.success) {
          const isHandle2 = handle(path, value);
          if (!isHandle2.success) {
            return {
              success: false,
              error: new ValidationError(`${path} must be a valid did or a handle`)
            };
          }
        }
        return { success: true, value };
      }
      function nsid(path, value) {
        try {
          ensureValidNsid(value);
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be a valid nsid`)
          };
        }
        return { success: true, value };
      }
      function cid(path, value) {
        try {
          CID2.parse(value);
        } catch {
          return {
            success: false,
            error: new ValidationError(`${path} must be a cid string`)
          };
        }
        return { success: true, value };
      }
      function language(path, value) {
        if (validateLanguage(value)) {
          return { success: true, value };
        }
        return {
          success: false,
          error: new ValidationError(`${path} must be a well-formed BCP 47 language tag`)
        };
      }
      function validate(lexicons2, path, def2, value) {
        switch (def2.type) {
          case "boolean":
            return boolean(lexicons2, path, def2, value);
          case "integer":
            return integer(lexicons2, path, def2, value);
          case "string":
            return string2(lexicons2, path, def2, value);
          case "bytes":
            return bytes(lexicons2, path, def2, value);
          case "cid-link":
            return cidLink(lexicons2, path, def2, value);
          case "unknown":
            return unknown(lexicons2, path, def2, value);
          default:
            return {
              success: false,
              error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)
            };
        }
      }
      function boolean(lexicons2, path, def2, value) {
        def2 = def2;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def2.default === "boolean") {
            return { success: true, value: def2.default };
          }
          return {
            success: false,
            error: new ValidationError(`${path} must be a boolean`)
          };
        } else if (type !== "boolean") {
          return {
            success: false,
            error: new ValidationError(`${path} must be a boolean`)
          };
        }
        if (typeof def2.const === "boolean") {
          if (value !== def2.const) {
            return {
              success: false,
              error: new ValidationError(`${path} must be ${def2.const}`)
            };
          }
        }
        return { success: true, value };
      }
      function integer(lexicons2, path, def2, value) {
        def2 = def2;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def2.default === "number") {
            return { success: true, value: def2.default };
          }
          return {
            success: false,
            error: new ValidationError(`${path} must be an integer`)
          };
        } else if (!Number.isInteger(value)) {
          return {
            success: false,
            error: new ValidationError(`${path} must be an integer`)
          };
        }
        if (typeof def2.const === "number") {
          if (value !== def2.const) {
            return {
              success: false,
              error: new ValidationError(`${path} must be ${def2.const}`)
            };
          }
        }
        if (Array.isArray(def2.enum)) {
          if (!def2.enum.includes(value)) {
            return {
              success: false,
              error: new ValidationError(`${path} must be one of (${def2.enum.join("|")})`)
            };
          }
        }
        if (typeof def2.maximum === "number") {
          if (value > def2.maximum) {
            return {
              success: false,
              error: new ValidationError(`${path} can not be greater than ${def2.maximum}`)
            };
          }
        }
        if (typeof def2.minimum === "number") {
          if (value < def2.minimum) {
            return {
              success: false,
              error: new ValidationError(`${path} can not be less than ${def2.minimum}`)
            };
          }
        }
        return { success: true, value };
      }
      function string2(lexicons2, path, def2, value) {
        def2 = def2;
        if (typeof value === "undefined") {
          if (typeof def2.default === "string") {
            return { success: true, value: def2.default };
          }
          return {
            success: false,
            error: new ValidationError(`${path} must be a string`)
          };
        } else if (typeof value !== "string") {
          return {
            success: false,
            error: new ValidationError(`${path} must be a string`)
          };
        }
        if (typeof def2.const === "string") {
          if (value !== def2.const) {
            return {
              success: false,
              error: new ValidationError(`${path} must be ${def2.const}`)
            };
          }
        }
        if (Array.isArray(def2.enum)) {
          if (!def2.enum.includes(value)) {
            return {
              success: false,
              error: new ValidationError(`${path} must be one of (${def2.enum.join("|")})`)
            };
          }
        }
        if (typeof def2.maxLength === "number") {
          if (utf8Len(value) > def2.maxLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be longer than ${def2.maxLength} characters`)
            };
          }
        }
        if (typeof def2.minLength === "number") {
          if (utf8Len(value) < def2.minLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be shorter than ${def2.minLength} characters`)
            };
          }
        }
        if (typeof def2.maxGraphemes === "number") {
          if (graphemeLen(value) > def2.maxGraphemes) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be longer than ${def2.maxGraphemes} graphemes`)
            };
          }
        }
        if (typeof def2.minGraphemes === "number") {
          if (graphemeLen(value) < def2.minGraphemes) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be shorter than ${def2.minGraphemes} graphemes`)
            };
          }
        }
        if (typeof def2.format === "string") {
          switch (def2.format) {
            case "datetime":
              return datetime(path, value);
            case "uri":
              return uri(path, value);
            case "at-uri":
              return atUri(path, value);
            case "did":
              return did(path, value);
            case "handle":
              return handle(path, value);
            case "at-identifier":
              return atIdentifier(path, value);
            case "nsid":
              return nsid(path, value);
            case "cid":
              return cid(path, value);
            case "language":
              return language(path, value);
          }
        }
        return { success: true, value };
      }
      function bytes(lexicons2, path, def2, value) {
        def2 = def2;
        if (!value || !(value instanceof Uint8Array)) {
          return {
            success: false,
            error: new ValidationError(`${path} must be a byte array`)
          };
        }
        if (typeof def2.maxLength === "number") {
          if (value.byteLength > def2.maxLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be larger than ${def2.maxLength} bytes`)
            };
          }
        }
        if (typeof def2.minLength === "number") {
          if (value.byteLength < def2.minLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not be smaller than ${def2.minLength} bytes`)
            };
          }
        }
        return { success: true, value };
      }
      function cidLink(lexicons2, path, def2, value) {
        if (CID2.asCID(value) === null) {
          return {
            success: false,
            error: new ValidationError(`${path} must be a CID`)
          };
        }
        return { success: true, value };
      }
      function unknown(lexicons2, path, def2, value) {
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new ValidationError(`${path} must be an object`)
          };
        }
        return { success: true, value };
      }
      var typedJsonBlobRef = z.object({
        $type: z.literal("blob"),
        ref: schema.cid,
        mimeType: z.string(),
        size: z.number()
      }).strict();
      var untypedJsonBlobRef = z.object({
        cid: z.string(),
        mimeType: z.string()
      }).strict();
      var jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef]);
      var BlobRef = class {
        constructor(ref, mimeType, size, original) {
          this.ref = ref;
          this.mimeType = mimeType;
          this.size = size;
          this.original = original ?? {
            $type: "blob",
            ref,
            mimeType,
            size
          };
        }
        static asBlobRef(obj) {
          if (check_exports.is(obj, jsonBlobRef)) {
            return BlobRef.fromJsonRef(obj);
          }
          return null;
        }
        static fromJsonRef(json) {
          if (check_exports.is(json, typedJsonBlobRef)) {
            return new BlobRef(json.ref, json.mimeType, json.size);
          } else {
            return new BlobRef(CID2.parse(json.cid), json.mimeType, -1, json);
          }
        }
        ipld() {
          return {
            $type: "blob",
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
          };
        }
        toJSON() {
          return ipldToJson(this.ipld());
        }
      };
      function blob(lexicons2, path, def2, value) {
        if (!value || !(value instanceof BlobRef)) {
          return {
            success: false,
            error: new ValidationError(`${path} should be a blob ref`)
          };
        }
        return { success: true, value };
      }
      function validate2(lexicons2, path, def2, value) {
        switch (def2.type) {
          case "boolean":
            return boolean(lexicons2, path, def2, value);
          case "integer":
            return integer(lexicons2, path, def2, value);
          case "string":
            return string2(lexicons2, path, def2, value);
          case "bytes":
            return bytes(lexicons2, path, def2, value);
          case "cid-link":
            return cidLink(lexicons2, path, def2, value);
          case "unknown":
            return unknown(lexicons2, path, def2, value);
          case "object":
            return object(lexicons2, path, def2, value);
          case "array":
            return array(lexicons2, path, def2, value);
          case "blob":
            return blob(lexicons2, path, def2, value);
          default:
            return {
              success: false,
              error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)
            };
        }
      }
      function array(lexicons2, path, def2, value) {
        if (!Array.isArray(value)) {
          return {
            success: false,
            error: new ValidationError(`${path} must be an array`)
          };
        }
        if (typeof def2.maxLength === "number") {
          if (value.length > def2.maxLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not have more than ${def2.maxLength} elements`)
            };
          }
        }
        if (typeof def2.minLength === "number") {
          if (value.length < def2.minLength) {
            return {
              success: false,
              error: new ValidationError(`${path} must not have fewer than ${def2.minLength} elements`)
            };
          }
        }
        const itemsDef = def2.items;
        for (let i = 0; i < value.length; i++) {
          const itemValue = value[i];
          const itemPath = `${path}/${i}`;
          const res = validateOneOf(lexicons2, itemPath, itemsDef, itemValue);
          if (!res.success) {
            return res;
          }
        }
        return { success: true, value };
      }
      function object(lexicons2, path, def2, value) {
        def2 = def2;
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new ValidationError(`${path} must be an object`)
          };
        }
        const requiredProps = new Set(def2.required);
        const nullableProps = new Set(def2.nullable);
        let resultValue = value;
        if (typeof def2.properties === "object") {
          for (const key in def2.properties) {
            if (value[key] === null && nullableProps.has(key)) {
              continue;
            }
            const propDef = def2.properties[key];
            const propPath = `${path}/${key}`;
            const validated = validateOneOf(lexicons2, propPath, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = { ...value };
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      function toLexUri(str, baseUri) {
        if (str.split("#").length > 2) {
          throw new Error("Uri can only have one hash segment");
        }
        if (str.startsWith("lex:")) {
          return str;
        }
        if (str.startsWith("#")) {
          if (!baseUri) {
            throw new Error(`Unable to resolve uri without anchor: ${str}`);
          }
          return `${baseUri}${str}`;
        }
        return `lex:${str}`;
      }
      function validateOneOf(lexicons2, path, def2, value, mustBeObj = false) {
        let error;
        let concreteDefs;
        if (def2.type === "union") {
          if (!isDiscriminatedObject(value)) {
            return {
              success: false,
              error: new ValidationError(`${path} must be an object which includes the "$type" property`)
            };
          }
          if (!refsContainType(def2.refs, value.$type)) {
            if (def2.closed) {
              return {
                success: false,
                error: new ValidationError(`${path} $type must be one of ${def2.refs.join(", ")}`)
              };
            }
            return { success: true, value };
          } else {
            concreteDefs = toConcreteTypes(lexicons2, {
              type: "ref",
              ref: value.$type
            });
          }
        } else {
          concreteDefs = toConcreteTypes(lexicons2, def2);
        }
        for (const concreteDef of concreteDefs) {
          const result = mustBeObj ? object(lexicons2, path, concreteDef, value) : validate2(lexicons2, path, concreteDef, value);
          if (result.success) {
            return result;
          }
          error ?? (error = result.error);
        }
        if (concreteDefs.length > 1) {
          return {
            success: false,
            error: new ValidationError(`${path} did not match any of the expected definitions`)
          };
        }
        return { success: false, error };
      }
      function assertValidOneOf(lexicons2, path, def2, value, mustBeObj = false) {
        const res = validateOneOf(lexicons2, path, def2, value, mustBeObj);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      function toConcreteTypes(lexicons2, def2) {
        if (def2.type === "ref") {
          return [lexicons2.getDefOrThrow(def2.ref)];
        } else if (def2.type === "union") {
          return def2.refs.map((ref) => lexicons2.getDefOrThrow(ref)).flat();
        } else {
          return [def2];
        }
      }
      function requiredPropertiesRefinement(object2, ctx) {
        if (object2.required === void 0) {
          return;
        }
        if (!Array.isArray(object2.required)) {
          ctx.addIssue({
            code: z.ZodIssueCode.invalid_type,
            received: typeof object2.required,
            expected: "array"
          });
          return;
        }
        if (object2.properties === void 0) {
          if (object2.required.length > 0) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: `Required fields defined but no properties defined`
            });
          }
          return;
        }
        for (const field of object2.required) {
          if (object2.properties[field] === void 0) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: `Required field "${field}" not defined`
            });
          }
        }
      }
      var refsContainType = (refs, type) => {
        const lexUri = toLexUri(type);
        if (refs.includes(lexUri)) {
          return true;
        }
        if (lexUri.endsWith("#main")) {
          return refs.includes(lexUri.replace("#main", ""));
        } else {
          return refs.includes(lexUri + "#main");
        }
      };
      var lexBoolean = z.object({
        type: z.literal("boolean"),
        description: z.string().optional(),
        default: z.boolean().optional(),
        const: z.boolean().optional()
      }).strict();
      var lexInteger = z.object({
        type: z.literal("integer"),
        description: z.string().optional(),
        default: z.number().int().optional(),
        minimum: z.number().int().optional(),
        maximum: z.number().int().optional(),
        enum: z.number().int().array().optional(),
        const: z.number().int().optional()
      }).strict();
      var lexStringFormat = z.enum([
        "datetime",
        "uri",
        "at-uri",
        "did",
        "handle",
        "at-identifier",
        "nsid",
        "cid",
        "language"
      ]);
      var lexString = z.object({
        type: z.literal("string"),
        format: lexStringFormat.optional(),
        description: z.string().optional(),
        default: z.string().optional(),
        minLength: z.number().int().optional(),
        maxLength: z.number().int().optional(),
        minGraphemes: z.number().int().optional(),
        maxGraphemes: z.number().int().optional(),
        enum: z.string().array().optional(),
        const: z.string().optional(),
        knownValues: z.string().array().optional()
      }).strict();
      var lexUnknown = z.object({
        type: z.literal("unknown"),
        description: z.string().optional()
      }).strict();
      var lexPrimitive = z.discriminatedUnion("type", [
        lexBoolean,
        lexInteger,
        lexString,
        lexUnknown
      ]);
      var lexBytes = z.object({
        type: z.literal("bytes"),
        description: z.string().optional(),
        maxLength: z.number().optional(),
        minLength: z.number().optional()
      }).strict();
      var lexCidLink = z.object({
        type: z.literal("cid-link"),
        description: z.string().optional()
      }).strict();
      var lexIpldType = z.discriminatedUnion("type", [lexBytes, lexCidLink]);
      var lexRef = z.object({
        type: z.literal("ref"),
        description: z.string().optional(),
        ref: z.string()
      }).strict();
      var lexRefUnion = z.object({
        type: z.literal("union"),
        description: z.string().optional(),
        refs: z.string().array(),
        closed: z.boolean().optional()
      }).strict();
      var lexRefVariant = z.discriminatedUnion("type", [lexRef, lexRefUnion]);
      var lexBlob = z.object({
        type: z.literal("blob"),
        description: z.string().optional(),
        accept: z.string().array().optional(),
        maxSize: z.number().optional()
      }).strict();
      var lexArray = z.object({
        type: z.literal("array"),
        description: z.string().optional(),
        items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),
        minLength: z.number().int().optional(),
        maxLength: z.number().int().optional()
      }).strict();
      var lexPrimitiveArray = lexArray.merge(z.object({
        items: lexPrimitive
      }).strict());
      var lexToken = z.object({
        type: z.literal("token"),
        description: z.string().optional()
      }).strict();
      var lexObject = z.object({
        type: z.literal("object"),
        description: z.string().optional(),
        required: z.string().array().optional(),
        nullable: z.string().array().optional(),
        properties: z.record(z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive]))
      }).strict().superRefine(requiredPropertiesRefinement);
      var lexXrpcParameters = z.object({
        type: z.literal("params"),
        description: z.string().optional(),
        required: z.string().array().optional(),
        properties: z.record(z.union([lexPrimitive, lexPrimitiveArray]))
      }).strict().superRefine(requiredPropertiesRefinement);
      var lexXrpcBody = z.object({
        description: z.string().optional(),
        encoding: z.string(),
        schema: z.union([lexRefVariant, lexObject]).optional()
      }).strict();
      var lexXrpcSubscriptionMessage = z.object({
        description: z.string().optional(),
        schema: z.union([lexRefVariant, lexObject]).optional()
      }).strict();
      var lexXrpcError = z.object({
        name: z.string(),
        description: z.string().optional()
      }).strict();
      var lexXrpcQuery = z.object({
        type: z.literal("query"),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        output: lexXrpcBody.optional(),
        errors: lexXrpcError.array().optional()
      }).strict();
      var lexXrpcProcedure = z.object({
        type: z.literal("procedure"),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        input: lexXrpcBody.optional(),
        output: lexXrpcBody.optional(),
        errors: lexXrpcError.array().optional()
      }).strict();
      var lexXrpcSubscription = z.object({
        type: z.literal("subscription"),
        description: z.string().optional(),
        parameters: lexXrpcParameters.optional(),
        message: lexXrpcSubscriptionMessage.optional(),
        errors: lexXrpcError.array().optional()
      }).strict();
      var lexRecord = z.object({
        type: z.literal("record"),
        description: z.string().optional(),
        key: z.string().optional(),
        record: lexObject
      }).strict();
      var lexUserType = z.custom((val) => {
        if (!val || typeof val !== "object") {
          return;
        }
        if (val["type"] === void 0) {
          return;
        }
        switch (val["type"]) {
          case "record":
            return lexRecord.parse(val);
          case "query":
            return lexXrpcQuery.parse(val);
          case "procedure":
            return lexXrpcProcedure.parse(val);
          case "subscription":
            return lexXrpcSubscription.parse(val);
          case "blob":
            return lexBlob.parse(val);
          case "array":
            return lexArray.parse(val);
          case "token":
            return lexToken.parse(val);
          case "object":
            return lexObject.parse(val);
          case "boolean":
            return lexBoolean.parse(val);
          case "integer":
            return lexInteger.parse(val);
          case "string":
            return lexString.parse(val);
          case "bytes":
            return lexBytes.parse(val);
          case "cid-link":
            return lexCidLink.parse(val);
          case "unknown":
            return lexUnknown.parse(val);
        }
      }, (val) => {
        if (!val || typeof val !== "object") {
          return {
            message: "Must be an object",
            fatal: true
          };
        }
        if (val["type"] === void 0) {
          return {
            message: "Must have a type",
            fatal: true
          };
        }
        return {
          message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
          fatal: true
        };
      });
      var lexiconDoc = z.object({
        lexicon: z.literal(1),
        id: z.string().refine((v) => NSID.isValid(v), {
          message: "Must be a valid NSID"
        }),
        revision: z.number().optional(),
        description: z.string().optional(),
        defs: z.record(lexUserType)
      }).strict().superRefine((doc, ctx) => {
        for (const defId in doc.defs) {
          const def2 = doc.defs[defId];
          if (defId !== "main" && (def2.type === "record" || def2.type === "procedure" || def2.type === "query" || def2.type === "subscription")) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: `Records, procedures, queries, and subscriptions must be the main definition.`
            });
          }
        }
      });
      function isObj(obj) {
        return obj !== null && typeof obj === "object";
      }
      function hasProp(data, prop) {
        return prop in data;
      }
      var discriminatedObject = z.object({ $type: z.string() });
      function isDiscriminatedObject(value) {
        return discriminatedObject.safeParse(value).success;
      }
      var LexiconDocMalformedError = class extends Error {
        constructor(message, schemaDef, issues) {
          super(message);
          this.schemaDef = schemaDef;
          this.issues = issues;
          this.schemaDef = schemaDef;
          this.issues = issues;
        }
      };
      var ValidationError = class extends Error {
      };
      var InvalidLexiconError = class extends Error {
      };
      var LexiconDefNotFoundError = class extends Error {
      };
      function params(lexicons2, path, def2, val) {
        const value = val && typeof val === "object" ? val : {};
        const requiredProps = new Set(def2.required ?? []);
        let resultValue = value;
        if (typeof def2.properties === "object") {
          for (const key in def2.properties) {
            const propDef = def2.properties[key];
            const validated = propDef.type === "array" ? array(lexicons2, key, propDef, value[key]) : validate(lexicons2, key, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = { ...value };
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      function assertValidRecord(lexicons2, def2, value) {
        const res = object(lexicons2, "Record", def2.record, value);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      function assertValidXrpcParams(lexicons2, def2, value) {
        if (def2.parameters) {
          const res = params(lexicons2, "Params", def2.parameters, value);
          if (!res.success)
            throw res.error;
          return res.value;
        }
      }
      function assertValidXrpcInput(lexicons2, def2, value) {
        if (def2.input?.schema) {
          return assertValidOneOf(lexicons2, "Input", def2.input.schema, value, true);
        }
      }
      function assertValidXrpcOutput(lexicons2, def2, value) {
        if (def2.output?.schema) {
          return assertValidOneOf(lexicons2, "Output", def2.output.schema, value, true);
        }
      }
      function assertValidXrpcMessage(lexicons2, def2, value) {
        if (def2.message?.schema) {
          return assertValidOneOf(lexicons2, "Message", def2.message.schema, value, true);
        }
      }
      var Lexicons = class {
        constructor(docs) {
          this.docs = /* @__PURE__ */ new Map();
          this.defs = /* @__PURE__ */ new Map();
          if (docs?.length) {
            for (const doc of docs) {
              this.add(doc);
            }
          }
        }
        add(doc) {
          try {
            lexiconDoc.parse(doc);
          } catch (e) {
            if (e instanceof ZodError) {
              throw new LexiconDocMalformedError(`Failed to parse schema definition ${doc.id}`, doc, e.issues);
            } else {
              throw e;
            }
          }
          const validatedDoc = doc;
          const uri2 = toLexUri(validatedDoc.id);
          if (this.docs.has(uri2)) {
            throw new Error(`${uri2} has already been registered`);
          }
          resolveRefUris(validatedDoc, uri2);
          this.docs.set(uri2, validatedDoc);
          for (const [defUri, def2] of iterDefs(validatedDoc)) {
            this.defs.set(defUri, def2);
          }
        }
        remove(uri2) {
          uri2 = toLexUri(uri2);
          const doc = this.docs.get(uri2);
          if (!doc) {
            throw new Error(`Unable to remove "${uri2}": does not exist`);
          }
          for (const [defUri, _def] of iterDefs(doc)) {
            this.defs.delete(defUri);
          }
          this.docs.delete(uri2);
        }
        get(uri2) {
          uri2 = toLexUri(uri2);
          return this.docs.get(uri2);
        }
        getDef(uri2) {
          uri2 = toLexUri(uri2);
          return this.defs.get(uri2);
        }
        getDefOrThrow(uri2, types) {
          const def2 = this.getDef(uri2);
          if (!def2) {
            throw new LexiconDefNotFoundError(`Lexicon not found: ${uri2}`);
          }
          if (types && !types.includes(def2.type)) {
            throw new InvalidLexiconError(`Not a ${types.join(" or ")} lexicon: ${uri2}`);
          }
          return def2;
        }
        validate(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, ["record", "object"]);
          if (!isObj(value)) {
            throw new ValidationError(`Value must be an object`);
          }
          if (def2.type === "record") {
            return object(this, "Record", def2.record, value);
          } else if (def2.type === "object") {
            return object(this, "Object", def2, value);
          } else {
            throw new InvalidLexiconError("Definition must be a record or object");
          }
        }
        assertValidRecord(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, ["record"]);
          if (!isObj(value)) {
            throw new ValidationError(`Record must be an object`);
          }
          if (!hasProp(value, "$type") || typeof value.$type !== "string") {
            throw new ValidationError(`Record/$type must be a string`);
          }
          const $type = value.$type || "";
          if (toLexUri($type) !== lexUri) {
            throw new ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
          }
          return assertValidRecord(this, def2, value);
        }
        assertValidXrpcParams(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, [
            "query",
            "procedure",
            "subscription"
          ]);
          return assertValidXrpcParams(this, def2, value);
        }
        assertValidXrpcInput(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, ["procedure"]);
          return assertValidXrpcInput(this, def2, value);
        }
        assertValidXrpcOutput(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, ["query", "procedure"]);
          return assertValidXrpcOutput(this, def2, value);
        }
        assertValidXrpcMessage(lexUri, value) {
          lexUri = toLexUri(lexUri);
          const def2 = this.getDefOrThrow(lexUri, ["subscription"]);
          return assertValidXrpcMessage(this, def2, value);
        }
        resolveLexUri(lexUri, ref) {
          lexUri = toLexUri(lexUri);
          return toLexUri(ref, lexUri);
        }
      };
      function* iterDefs(doc) {
        for (const defId in doc.defs) {
          yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
          if (defId === "main") {
            yield [`lex:${doc.id}`, doc.defs[defId]];
          }
        }
      }
      function resolveRefUris(obj, baseUri) {
        for (const k in obj) {
          if (obj.type === "ref") {
            obj.ref = toLexUri(obj.ref, baseUri);
          } else if (obj.type === "union") {
            obj.refs = obj.refs.map((ref) => toLexUri(ref, baseUri));
          } else if (Array.isArray(obj[k])) {
            obj[k] = obj[k].map((item) => {
              if (typeof item === "string") {
                return item.startsWith("#") ? toLexUri(item, baseUri) : item;
              } else if (item && typeof item === "object") {
                return resolveRefUris(item, baseUri);
              }
              return item;
            });
          } else if (obj[k] && typeof obj[k] === "object") {
            obj[k] = resolveRefUris(obj[k], baseUri);
          }
        }
        return obj;
      }
      var lexToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => lexToIpld(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof BlobRef) {
            return val.original;
          }
          if (CID2.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = lexToIpld(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      var ipldToLex = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => ipldToLex(item));
        }
        if (val && typeof val === "object") {
          if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && check_exports.is(val, jsonBlobRef)) {
            return BlobRef.fromJsonRef(val);
          }
          if (CID2.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = ipldToLex(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      var lexToJson = (val) => {
        return ipldToJson(lexToIpld(val));
      };
      var stringifyLex = (val) => {
        return JSON.stringify(lexToJson(val));
      };
      var jsonToLex = (val) => {
        return ipldToLex(jsonToIpld(val));
      };
      var jsonStringToLex = (val) => {
        return jsonToLex(JSON.parse(val));
      };
      var errorResponseBody = z.object({
        error: z.string().optional(),
        message: z.string().optional()
      });
      var ResponseType = /* @__PURE__ */ ((ResponseType2) => {
        ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
        ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
        ResponseType2[ResponseType2["Success"] = 200] = "Success";
        ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
        ResponseType2[ResponseType2["AuthRequired"] = 401] = "AuthRequired";
        ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
        ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
        ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
        ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
        ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
        ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
        ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
        ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
        ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
        return ResponseType2;
      })(ResponseType || {});
      var ResponseTypeNames = {
        [
          2
          /* InvalidResponse */
        ]: "InvalidResponse",
        [
          200
          /* Success */
        ]: "Success",
        [
          400
          /* InvalidRequest */
        ]: "InvalidRequest",
        [
          401
          /* AuthRequired */
        ]: "AuthenticationRequired",
        [
          403
          /* Forbidden */
        ]: "Forbidden",
        [
          404
          /* XRPCNotSupported */
        ]: "XRPCNotSupported",
        [
          413
          /* PayloadTooLarge */
        ]: "PayloadTooLarge",
        [
          429
          /* RateLimitExceeded */
        ]: "RateLimitExceeded",
        [
          500
          /* InternalServerError */
        ]: "InternalServerError",
        [
          501
          /* MethodNotImplemented */
        ]: "MethodNotImplemented",
        [
          502
          /* UpstreamFailure */
        ]: "UpstreamFailure",
        [
          503
          /* NotEnoughResources */
        ]: "NotEnoughResources",
        [
          504
          /* UpstreamTimeout */
        ]: "UpstreamTimeout"
      };
      var ResponseTypeStrings = {
        [
          2
          /* InvalidResponse */
        ]: "Invalid Response",
        [
          200
          /* Success */
        ]: "Success",
        [
          400
          /* InvalidRequest */
        ]: "Invalid Request",
        [
          401
          /* AuthRequired */
        ]: "Authentication Required",
        [
          403
          /* Forbidden */
        ]: "Forbidden",
        [
          404
          /* XRPCNotSupported */
        ]: "XRPC Not Supported",
        [
          413
          /* PayloadTooLarge */
        ]: "Payload Too Large",
        [
          429
          /* RateLimitExceeded */
        ]: "Rate Limit Exceeded",
        [
          500
          /* InternalServerError */
        ]: "Internal Server Error",
        [
          501
          /* MethodNotImplemented */
        ]: "Method Not Implemented",
        [
          502
          /* UpstreamFailure */
        ]: "Upstream Failure",
        [
          503
          /* NotEnoughResources */
        ]: "Not Enough Resources",
        [
          504
          /* UpstreamTimeout */
        ]: "Upstream Timeout"
      };
      var XRPCResponse = class {
        constructor(data, headers) {
          this.data = data;
          this.headers = headers;
          this.success = true;
        }
      };
      var XRPCError = class extends Error {
        constructor(status, error, message, headers) {
          super(message || error || ResponseTypeStrings[status]);
          this.status = status;
          this.error = error;
          this.success = false;
          if (!this.error) {
            this.error = ResponseTypeNames[status];
          }
          this.headers = headers;
        }
      };
      var XRPCInvalidResponseError = class extends XRPCError {
        constructor(lexiconNsid, validationError, responseBody) {
          super(2, ResponseTypeStrings[
            2
            /* InvalidResponse */
          ], `The server gave an invalid response and may be out of date.`);
          this.lexiconNsid = lexiconNsid;
          this.validationError = validationError;
          this.responseBody = responseBody;
        }
      };
      function getMethodSchemaHTTPMethod(schema2) {
        if (schema2.type === "procedure") {
          return "post";
        }
        return "get";
      }
      function constructMethodCallUri(nsid2, schema2, serviceUri, params2) {
        const uri2 = new URL(serviceUri);
        uri2.pathname = `/xrpc/${nsid2}`;
        if (params2) {
          for (const [key, value] of Object.entries(params2)) {
            const paramSchema = schema2.parameters?.properties?.[key];
            if (!paramSchema) {
              throw new Error(`Invalid query parameter: ${key}`);
            }
            if (value !== void 0) {
              if (paramSchema.type === "array") {
                const vals = [];
                vals.concat(value).forEach((val) => {
                  uri2.searchParams.append(key, encodeQueryParam(paramSchema.items.type, val));
                });
              } else {
                uri2.searchParams.set(key, encodeQueryParam(paramSchema.type, value));
              }
            }
          }
        }
        return uri2.toString();
      }
      function encodeQueryParam(type, value) {
        if (type === "string" || type === "unknown") {
          return String(value);
        }
        if (type === "float") {
          return String(Number(value));
        } else if (type === "integer") {
          return String(Number(value) | 0);
        } else if (type === "boolean") {
          return value ? "true" : "false";
        } else if (type === "datetime") {
          if (value instanceof Date) {
            return value.toISOString();
          }
          return String(value);
        }
        throw new Error(`Unsupported query param type: ${type}`);
      }
      function normalizeHeaders(headers) {
        const normalized = {};
        for (const [header, value] of Object.entries(headers)) {
          normalized[header.toLowerCase()] = value;
        }
        return normalized;
      }
      function constructMethodCallHeaders(schema2, data, opts) {
        const headers = opts?.headers || {};
        if (schema2.type === "procedure") {
          if (opts?.encoding) {
            headers["Content-Type"] = opts.encoding;
          }
          if (data && typeof data === "object") {
            if (!headers["Content-Type"]) {
              headers["Content-Type"] = "application/json";
            }
          }
        }
        return headers;
      }
      function encodeMethodCallBody(headers, data) {
        if (!headers["content-type"] || typeof data === "undefined") {
          return void 0;
        }
        if (data instanceof ArrayBuffer) {
          return data;
        }
        if (headers["content-type"].startsWith("text/")) {
          return new TextEncoder().encode(data.toString());
        }
        if (headers["content-type"].startsWith("application/json")) {
          return new TextEncoder().encode(stringifyLex(data));
        }
        return data;
      }
      function httpResponseCodeToEnum(status) {
        let resCode;
        if (status in ResponseType) {
          resCode = status;
        } else if (status >= 100 && status < 200) {
          resCode = 404;
        } else if (status >= 200 && status < 300) {
          resCode = 200;
        } else if (status >= 300 && status < 400) {
          resCode = 404;
        } else if (status >= 400 && status < 500) {
          resCode = 400;
        } else {
          resCode = 500;
        }
        return resCode;
      }
      function httpResponseBodyParse(mimeType, data) {
        if (mimeType) {
          if (mimeType.includes("application/json") && data?.byteLength) {
            try {
              const str = new TextDecoder().decode(data);
              return jsonStringToLex(str);
            } catch (e) {
              throw new XRPCError(2, `Failed to parse response body: ${String(e)}`);
            }
          }
          if (mimeType.startsWith("text/") && data?.byteLength) {
            try {
              return new TextDecoder().decode(data);
            } catch (e) {
              throw new XRPCError(2, `Failed to parse response body: ${String(e)}`);
            }
          }
        }
        if (data instanceof ArrayBuffer) {
          return new Uint8Array(data);
        }
        return data;
      }
      var Client = class {
        constructor() {
          this.fetch = defaultFetchHandler;
          this.lex = new Lexicons();
        }
        async call(serviceUri, methodNsid, params2, data, opts) {
          return this.service(serviceUri).call(methodNsid, params2, data, opts);
        }
        service(serviceUri) {
          return new ServiceClient(this, serviceUri);
        }
        addLexicon(doc) {
          this.lex.add(doc);
        }
        addLexicons(docs) {
          for (const doc of docs) {
            this.addLexicon(doc);
          }
        }
        removeLexicon(uri2) {
          this.lex.remove(uri2);
        }
      };
      var ServiceClient = class {
        constructor(baseClient, serviceUri) {
          this.headers = {};
          this.baseClient = baseClient;
          this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
        }
        setHeader(key, value) {
          this.headers[key] = value;
        }
        unsetHeader(key) {
          delete this.headers[key];
        }
        async call(methodNsid, params2, data, opts) {
          const def2 = this.baseClient.lex.getDefOrThrow(methodNsid);
          if (!def2 || def2.type !== "query" && def2.type !== "procedure") {
            throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
          }
          const httpMethod = getMethodSchemaHTTPMethod(def2);
          const httpUri = constructMethodCallUri(methodNsid, def2, this.uri, params2);
          const httpHeaders = constructMethodCallHeaders(def2, data, {
            headers: {
              ...this.headers,
              ...opts?.headers
            },
            encoding: opts?.encoding
          });
          const res = await this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);
          const resCode = httpResponseCodeToEnum(res.status);
          if (resCode === 200) {
            try {
              this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);
            } catch (e) {
              if (e instanceof ValidationError) {
                throw new XRPCInvalidResponseError(methodNsid, e, res.body);
              } else {
                throw e;
              }
            }
            return new XRPCResponse(res.body, res.headers);
          } else {
            if (res.body && isErrorResponseBody(res.body)) {
              throw new XRPCError(resCode, res.body.error, res.body.message, res.headers);
            } else {
              throw new XRPCError(resCode);
            }
          }
        }
      };
      async function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {
        try {
          const headers = normalizeHeaders(httpHeaders);
          const reqInit = {
            method: httpMethod,
            headers,
            body: encodeMethodCallBody(headers, httpReqBody),
            duplex: "half"
          };
          const res = await fetch(httpUri, reqInit);
          const resBody = await res.arrayBuffer();
          return {
            status: res.status,
            headers: Object.fromEntries(res.headers.entries()),
            body: httpResponseBodyParse(res.headers.get("content-type"), resBody)
          };
        } catch (e) {
          throw new XRPCError(1, String(e));
        }
      }
      function isErrorResponseBody(v) {
        return errorResponseBody.safeParse(v).success;
      }
      var defaultInst = new Client();
      var schemaDict = {
        ComAtprotoAdminDefs: {
          lexicon: 1,
          id: "com.atproto.admin.defs",
          defs: {
            actionView: {
              type: "object",
              required: [
                "id",
                "action",
                "subject",
                "subjectBlobCids",
                "reason",
                "createdBy",
                "createdAt",
                "resolvedReportIds"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                action: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionType"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long this action was meant to be in effect before automatically expiring."
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                createLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                negateLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                reason: {
                  type: "string"
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                reversal: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionReversal"
                },
                resolvedReportIds: {
                  type: "array",
                  items: {
                    type: "integer"
                  }
                }
              }
            },
            actionViewDetail: {
              type: "object",
              required: [
                "id",
                "action",
                "subject",
                "subjectBlobs",
                "reason",
                "createdBy",
                "createdAt",
                "resolvedReports"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                action: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionType"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long this action was meant to be in effect before automatically expiring."
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoView",
                    "lex:com.atproto.admin.defs#repoViewNotFound",
                    "lex:com.atproto.admin.defs#recordView",
                    "lex:com.atproto.admin.defs#recordViewNotFound"
                  ]
                },
                subjectBlobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#blobView"
                  }
                },
                createLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                negateLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                reason: {
                  type: "string"
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                reversal: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionReversal"
                },
                resolvedReports: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#reportView"
                  }
                }
              }
            },
            actionViewCurrent: {
              type: "object",
              required: ["id", "action"],
              properties: {
                id: {
                  type: "integer"
                },
                action: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionType"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long this action was meant to be in effect before automatically expiring."
                }
              }
            },
            actionReversal: {
              type: "object",
              required: ["reason", "createdBy", "createdAt"],
              properties: {
                reason: {
                  type: "string"
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            actionType: {
              type: "string",
              knownValues: [
                "lex:com.atproto.admin.defs#takedown",
                "lex:com.atproto.admin.defs#flag",
                "lex:com.atproto.admin.defs#acknowledge",
                "lex:com.atproto.admin.defs#escalate"
              ]
            },
            takedown: {
              type: "token",
              description: "Moderation action type: Takedown. Indicates that content should not be served by the PDS."
            },
            flag: {
              type: "token",
              description: "Moderation action type: Flag. Indicates that the content was reviewed and considered to violate PDS rules, but may still be served."
            },
            acknowledge: {
              type: "token",
              description: "Moderation action type: Acknowledge. Indicates that the content was reviewed and not considered to violate PDS rules."
            },
            escalate: {
              type: "token",
              description: "Moderation action type: Escalate. Indicates that the content has been flagged for additional review."
            },
            reportView: {
              type: "object",
              required: [
                "id",
                "reasonType",
                "subject",
                "reportedBy",
                "createdAt",
                "resolvedByActionIds"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                reasonType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                },
                reason: {
                  type: "string"
                },
                subjectRepoHandle: {
                  type: "string"
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                reportedBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                resolvedByActionIds: {
                  type: "array",
                  items: {
                    type: "integer"
                  }
                }
              }
            },
            reportViewDetail: {
              type: "object",
              required: [
                "id",
                "reasonType",
                "subject",
                "reportedBy",
                "createdAt",
                "resolvedByActions"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                reasonType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                },
                reason: {
                  type: "string"
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoView",
                    "lex:com.atproto.admin.defs#repoViewNotFound",
                    "lex:com.atproto.admin.defs#recordView",
                    "lex:com.atproto.admin.defs#recordViewNotFound"
                  ]
                },
                reportedBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                resolvedByActions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#actionView"
                  }
                }
              }
            },
            repoView: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#moderation"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoViewDetail: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#moderationDetail"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoViewNotFound: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            repoRef: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            recordView: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobCids",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#moderation"
                },
                repo: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#repoView"
                }
              }
            },
            recordViewDetail: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobs",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#blobView"
                  }
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#moderationDetail"
                },
                repo: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#repoView"
                }
              }
            },
            recordViewNotFound: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            moderation: {
              type: "object",
              properties: {
                currentAction: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionViewCurrent"
                }
              }
            },
            moderationDetail: {
              type: "object",
              required: ["actions", "reports"],
              properties: {
                currentAction: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionViewCurrent"
                },
                actions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#actionView"
                  }
                },
                reports: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#reportView"
                  }
                }
              }
            },
            blobView: {
              type: "object",
              required: ["cid", "mimeType", "size", "createdAt"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                mimeType: {
                  type: "string"
                },
                size: {
                  type: "integer"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                details: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#imageDetails",
                    "lex:com.atproto.admin.defs#videoDetails"
                  ]
                },
                moderation: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#moderation"
                }
              }
            },
            imageDetails: {
              type: "object",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                }
              }
            },
            videoDetails: {
              type: "object",
              required: ["width", "height", "length"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                },
                length: {
                  type: "integer"
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.disableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Disable an account from receiving new invite codes, but does not invalidate existing codes",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Additionally add a note describing why the invites were disabled"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.disableInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Disable some set of codes and/or all codes associated with a set of users",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminEnableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.enableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Re-enable an accounts ability to receive invite codes",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Additionally add a note describing why the invites were enabled"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.getInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Admin view of invite codes",
              parameters: {
                type: "params",
                properties: {
                  sort: {
                    type: "string",
                    knownValues: ["recent", "usage"],
                    default: "recent"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 500,
                    default: 100
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetModerationAction: {
          lexicon: 1,
          id: "com.atproto.admin.getModerationAction",
          defs: {
            main: {
              type: "query",
              description: "View details about a moderation action.",
              parameters: {
                type: "params",
                required: ["id"],
                properties: {
                  id: {
                    type: "integer"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionViewDetail"
                }
              }
            }
          }
        },
        ComAtprotoAdminGetModerationActions: {
          lexicon: 1,
          id: "com.atproto.admin.getModerationActions",
          defs: {
            main: {
              type: "query",
              description: "List moderation actions related to a subject.",
              parameters: {
                type: "params",
                properties: {
                  subject: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actions"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#actionView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetModerationReport: {
          lexicon: 1,
          id: "com.atproto.admin.getModerationReport",
          defs: {
            main: {
              type: "query",
              description: "View details about a moderation report.",
              parameters: {
                type: "params",
                required: ["id"],
                properties: {
                  id: {
                    type: "integer"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#reportViewDetail"
                }
              }
            }
          }
        },
        ComAtprotoAdminGetModerationReports: {
          lexicon: 1,
          id: "com.atproto.admin.getModerationReports",
          defs: {
            main: {
              type: "query",
              description: "List moderation reports related to a subject.",
              parameters: {
                type: "params",
                properties: {
                  subject: {
                    type: "string"
                  },
                  ignoreSubjects: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  actionedBy: {
                    type: "string",
                    format: "did",
                    description: "Get all reports that were actioned by a specific moderator"
                  },
                  reporters: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "Filter reports made by one or more DIDs"
                  },
                  resolved: {
                    type: "boolean"
                  },
                  actionType: {
                    type: "string",
                    knownValues: [
                      "com.atproto.admin.defs#takedown",
                      "com.atproto.admin.defs#flag",
                      "com.atproto.admin.defs#acknowledge",
                      "com.atproto.admin.defs#escalate"
                    ]
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  reverse: {
                    type: "boolean",
                    description: "Reverse the order of the returned records? when true, returns reports in chronological order"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["reports"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    reports: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#reportView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetRecord: {
          lexicon: 1,
          id: "com.atproto.admin.getRecord",
          defs: {
            main: {
              type: "query",
              description: "View details about a record.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#recordViewDetail"
                }
              },
              errors: [
                {
                  name: "RecordNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoAdminGetRepo: {
          lexicon: 1,
          id: "com.atproto.admin.getRepo",
          defs: {
            main: {
              type: "query",
              description: "View details about a repository.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#repoViewDetail"
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoAdminResolveModerationReports: {
          lexicon: 1,
          id: "com.atproto.admin.resolveModerationReports",
          defs: {
            main: {
              type: "procedure",
              description: "Resolve moderation reports by an action.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actionId", "reportIds", "createdBy"],
                  properties: {
                    actionId: {
                      type: "integer"
                    },
                    reportIds: {
                      type: "array",
                      items: {
                        type: "integer"
                      }
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionView"
                }
              }
            }
          }
        },
        ComAtprotoAdminReverseModerationAction: {
          lexicon: 1,
          id: "com.atproto.admin.reverseModerationAction",
          defs: {
            main: {
              type: "procedure",
              description: "Reverse a moderation action.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id", "reason", "createdBy"],
                  properties: {
                    id: {
                      type: "integer"
                    },
                    reason: {
                      type: "string"
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionView"
                }
              }
            }
          }
        },
        ComAtprotoAdminSearchRepos: {
          lexicon: 1,
          id: "com.atproto.admin.searchRepos",
          defs: {
            main: {
              type: "query",
              description: "Find repositories based on a search term.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string"
                  },
                  invitedBy: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#repoView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminSendEmail: {
          lexicon: 1,
          id: "com.atproto.admin.sendEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Send email to a user's primary email address",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["recipientDid", "content"],
                  properties: {
                    recipientDid: {
                      type: "string",
                      format: "did"
                    },
                    content: {
                      type: "string"
                    },
                    subject: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["sent"],
                  properties: {
                    sent: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminTakeModerationAction: {
          lexicon: 1,
          id: "com.atproto.admin.takeModerationAction",
          defs: {
            main: {
              type: "procedure",
              description: "Take a moderation action on a repo.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["action", "subject", "reason", "createdBy"],
                  properties: {
                    action: {
                      type: "string",
                      knownValues: [
                        "com.atproto.admin.defs#takedown",
                        "com.atproto.admin.defs#flag",
                        "com.atproto.admin.defs#acknowledge"
                      ]
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    subjectBlobCids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    },
                    createLabelVals: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    negateLabelVals: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    reason: {
                      type: "string"
                    },
                    durationInHours: {
                      type: "integer",
                      description: "Indicates how long this action was meant to be in effect before automatically expiring."
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#actionView"
                }
              },
              errors: [
                {
                  name: "SubjectHasAction"
                }
              ]
            }
          }
        },
        ComAtprotoAdminUpdateAccountEmail: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's email",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account", "email"],
                  properties: {
                    account: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountHandle: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's handle",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "handle"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityResolveHandle: {
          lexicon: 1,
          id: "com.atproto.identity.resolveHandle",
          defs: {
            main: {
              type: "query",
              description: "Provides the DID of a repo.",
              parameters: {
                type: "params",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "The handle to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityUpdateHandle: {
          lexicon: 1,
          id: "com.atproto.identity.updateHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Updates the handle of the account",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelDefs: {
          lexicon: 1,
          id: "com.atproto.label.defs",
          defs: {
            label: {
              type: "object",
              description: "Metadata tag on an atproto resource (eg, repo or record)",
              required: ["src", "uri", "val", "cts"],
              properties: {
                src: {
                  type: "string",
                  format: "did",
                  description: "DID of the actor who created this label"
                },
                uri: {
                  type: "string",
                  format: "uri",
                  description: "AT URI of the record, repository (account), or other resource which this label applies to"
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "optionally, CID specifying the specific version of 'uri' resource this label applies to"
                },
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "the short string name of the value or type of this label"
                },
                neg: {
                  type: "boolean",
                  description: "if true, this is a negation label, overwriting a previous label"
                },
                cts: {
                  type: "string",
                  format: "datetime",
                  description: "timestamp when this label was created"
                }
              }
            },
            selfLabels: {
              type: "object",
              description: "Metadata tags on an atproto record, published by the author within the record.",
              required: ["values"],
              properties: {
                values: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#selfLabel"
                  },
                  maxLength: 10
                }
              }
            },
            selfLabel: {
              type: "object",
              description: "Metadata tag on an atproto record, published by the author within the record. Note -- schemas should use #selfLabels, not #selfLabel.",
              required: ["val"],
              properties: {
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "the short string name of the value or type of this label"
                }
              }
            }
          }
        },
        ComAtprotoLabelQueryLabels: {
          lexicon: 1,
          id: "com.atproto.label.queryLabels",
          defs: {
            main: {
              type: "query",
              description: "Find labels relevant to the provided URI patterns.",
              parameters: {
                type: "params",
                required: ["uriPatterns"],
                properties: {
                  uriPatterns: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI"
                  },
                  sources: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    },
                    description: "Optional list of label sources (DIDs) to filter on"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelSubscribeLabels: {
          lexicon: 1,
          id: "com.atproto.label.subscribeLabels",
          defs: {
            main: {
              type: "subscription",
              description: "Subscribe to label updates",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.label.subscribeLabels#labels",
                    "lex:com.atproto.label.subscribeLabels#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                }
              ]
            },
            labels: {
              type: "object",
              required: ["seq", "labels"],
              properties: {
                seq: {
                  type: "integer"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoModerationCreateReport: {
          lexicon: 1,
          id: "com.atproto.moderation.createReport",
          defs: {
            main: {
              type: "procedure",
              description: "Report a repo or a record.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["reasonType", "subject"],
                  properties: {
                    reasonType: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string"
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt"
                  ],
                  properties: {
                    id: {
                      type: "integer"
                    },
                    reasonType: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string"
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    reportedBy: {
                      type: "string",
                      format: "did"
                    },
                    createdAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoModerationDefs: {
          lexicon: 1,
          id: "com.atproto.moderation.defs",
          defs: {
            reasonType: {
              type: "string",
              knownValues: [
                "com.atproto.moderation.defs#reasonSpam",
                "com.atproto.moderation.defs#reasonViolation",
                "com.atproto.moderation.defs#reasonMisleading",
                "com.atproto.moderation.defs#reasonSexual",
                "com.atproto.moderation.defs#reasonRude",
                "com.atproto.moderation.defs#reasonOther"
              ]
            },
            reasonSpam: {
              type: "token",
              description: "Spam: frequent unwanted promotion, replies, mentions"
            },
            reasonViolation: {
              type: "token",
              description: "Direct violation of server rules, laws, terms of service"
            },
            reasonMisleading: {
              type: "token",
              description: "Misleading identity, affiliation, or content"
            },
            reasonSexual: {
              type: "token",
              description: "Unwanted or mislabeled sexual content"
            },
            reasonRude: {
              type: "token",
              description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
            },
            reasonOther: {
              type: "token",
              description: "Other: reports not falling under another report category"
            }
          }
        },
        ComAtprotoRepoApplyWrites: {
          lexicon: 1,
          id: "com.atproto.repo.applyWrites",
          defs: {
            main: {
              type: "procedure",
              description: "Apply a batch transaction of creates, updates, and deletes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "writes"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Validate the records?"
                    },
                    writes: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:com.atproto.repo.applyWrites#create",
                          "lex:com.atproto.repo.applyWrites#update",
                          "lex:com.atproto.repo.applyWrites#delete"
                        ],
                        closed: true
                      }
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            },
            create: {
              type: "object",
              description: "Create a new record.",
              required: ["collection", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  maxLength: 15
                },
                value: {
                  type: "unknown"
                }
              }
            },
            update: {
              type: "object",
              description: "Update an existing record.",
              required: ["collection", "rkey", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                },
                value: {
                  type: "unknown"
                }
              }
            },
            delete: {
              type: "object",
              description: "Delete an existing record.",
              required: ["collection", "rkey"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoRepoCreateRecord: {
          lexicon: 1,
          id: "com.atproto.repo.createRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Create a new record.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "record"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The key of the record.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Validate the record?"
                    },
                    record: {
                      type: "unknown",
                      description: "The record to create."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by cid."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoDeleteRecord: {
          lexicon: 1,
          id: "com.atproto.repo.deleteRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a record, or ensure it doesn't exist.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The key of the record."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by cid."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by cid."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoDescribeRepo: {
          lexicon: 1,
          id: "com.atproto.repo.describeRepo",
          defs: {
            main: {
              type: "query",
              description: "Get information about the repo, including the list of collections.",
              parameters: {
                type: "params",
                required: ["repo"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "handle",
                    "did",
                    "didDoc",
                    "collections",
                    "handleIsCorrect"
                  ],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    collections: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "nsid"
                      }
                    },
                    handleIsCorrect: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoGetRecord: {
          lexicon: 1,
          id: "com.atproto.repo.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get a record.",
              parameters: {
                type: "params",
                required: ["repo", "collection", "rkey"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The key of the record."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the version of the record. If not specified, then return the most recent version."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "value"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    value: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoListRecords: {
          lexicon: 1,
          id: "com.atproto.repo.listRecords",
          defs: {
            main: {
              type: "query",
              description: "List a range of records in a collection.",
              parameters: {
                type: "params",
                required: ["repo", "collection"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record type."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50,
                    description: "The number of records to return."
                  },
                  cursor: {
                    type: "string"
                  },
                  rkeyStart: {
                    type: "string",
                    description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
                  },
                  rkeyEnd: {
                    type: "string",
                    description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
                  },
                  reverse: {
                    type: "boolean",
                    description: "Reverse the order of the returned records?"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["records"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    records: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listRecords#record"
                      }
                    }
                  }
                }
              }
            },
            record: {
              type: "object",
              required: ["uri", "cid", "value"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                }
              }
            }
          }
        },
        ComAtprotoRepoPutRecord: {
          lexicon: 1,
          id: "com.atproto.repo.putRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Write a record, creating or updating it as needed.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey", "record"],
                  nullable: ["swapRecord"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The key of the record.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Validate the record?"
                    },
                    record: {
                      type: "unknown",
                      description: "The record to write."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by cid."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by cid."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoStrongRef: {
          lexicon: 1,
          id: "com.atproto.repo.strongRef",
          description: "A URI with a content-hash fingerprint.",
          defs: {
            main: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          }
        },
        ComAtprotoRepoUploadBlob: {
          lexicon: 1,
          id: "com.atproto.repo.uploadBlob",
          defs: {
            main: {
              type: "procedure",
              description: "Upload a new blob to be added to repo in a later request.",
              input: {
                encoding: "*/*"
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blob"],
                  properties: {
                    blob: {
                      type: "blob"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateAccount: {
          lexicon: 1,
          id: "com.atproto.server.createAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Create an account.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle", "email", "password"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    inviteCode: {
                      type: "string"
                    },
                    password: {
                      type: "string"
                    },
                    recoveryKey: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidHandle"
                },
                {
                  name: "InvalidPassword"
                },
                {
                  name: "InvalidInviteCode"
                },
                {
                  name: "HandleNotAvailable"
                },
                {
                  name: "UnsupportedDomain"
                },
                {
                  name: "UnresolvableDid"
                },
                {
                  name: "IncompatibleDidDoc"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.createAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Create an app-specific password.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.server.createAppPassword#appPassword"
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "password", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                password: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCode: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCode",
          defs: {
            main: {
              type: "procedure",
              description: "Create an invite code.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["useCount"],
                  properties: {
                    useCount: {
                      type: "integer"
                    },
                    forAccount: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["code"],
                  properties: {
                    code: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Create an invite code.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codeCount", "useCount"],
                  properties: {
                    codeCount: {
                      type: "integer",
                      default: 1
                    },
                    useCount: {
                      type: "integer"
                    },
                    forAccounts: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "did"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                      }
                    }
                  }
                }
              }
            },
            accountCodes: {
              type: "object",
              required: ["account", "codes"],
              properties: {
                account: {
                  type: "string"
                },
                codes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateSession: {
          lexicon: 1,
          id: "com.atproto.server.createSession",
          defs: {
            main: {
              type: "procedure",
              description: "Create an authentication session.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["identifier", "password"],
                  properties: {
                    identifier: {
                      type: "string",
                      description: "Handle or other identifier supported by the server for the authenticating user."
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerDefs: {
          lexicon: 1,
          id: "com.atproto.server.defs",
          defs: {
            inviteCode: {
              type: "object",
              required: [
                "code",
                "available",
                "disabled",
                "forAccount",
                "createdBy",
                "createdAt",
                "uses"
              ],
              properties: {
                code: {
                  type: "string"
                },
                available: {
                  type: "integer"
                },
                disabled: {
                  type: "boolean"
                },
                forAccount: {
                  type: "string"
                },
                createdBy: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                uses: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCodeUse"
                  }
                }
              }
            },
            inviteCodeUse: {
              type: "object",
              required: ["usedBy", "usedAt"],
              properties: {
                usedBy: {
                  type: "string",
                  format: "did"
                },
                usedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.server.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a user account with a token and password.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password", "token"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeleteSession: {
          lexicon: 1,
          id: "com.atproto.server.deleteSession",
          defs: {
            main: {
              type: "procedure",
              description: "Delete the current session."
            }
          }
        },
        ComAtprotoServerDescribeServer: {
          lexicon: 1,
          id: "com.atproto.server.describeServer",
          defs: {
            main: {
              type: "query",
              description: "Get a document describing the service's accounts configuration.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["availableUserDomains"],
                  properties: {
                    inviteCodeRequired: {
                      type: "boolean"
                    },
                    availableUserDomains: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    links: {
                      type: "ref",
                      ref: "lex:com.atproto.server.describeServer#links"
                    }
                  }
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoServerGetAccountInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.getAccountInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get all invite codes for a given account",
              parameters: {
                type: "params",
                properties: {
                  includeUsed: {
                    type: "boolean",
                    default: true
                  },
                  createAvailable: {
                    type: "boolean",
                    default: true
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "DuplicateCreate"
                }
              ]
            }
          }
        },
        ComAtprotoServerGetSession: {
          lexicon: 1,
          id: "com.atproto.server.getSession",
          defs: {
            main: {
              type: "query",
              description: "Get information about the current session.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle", "did"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerListAppPasswords: {
          lexicon: 1,
          id: "com.atproto.server.listAppPasswords",
          defs: {
            main: {
              type: "query",
              description: "List all app-specific passwords.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["passwords"],
                  properties: {
                    passwords: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerRefreshSession: {
          lexicon: 1,
          id: "com.atproto.server.refreshSession",
          defs: {
            main: {
              type: "procedure",
              description: "Refresh an authentication session.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerRequestAccountDelete: {
          lexicon: 1,
          id: "com.atproto.server.requestAccountDelete",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account deletion via email."
            }
          }
        },
        ComAtprotoServerRequestPasswordReset: {
          lexicon: 1,
          id: "com.atproto.server.requestPasswordReset",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account password reset via email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerResetPassword: {
          lexicon: 1,
          id: "com.atproto.server.resetPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Reset a user account password using a token.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token", "password"],
                  properties: {
                    token: {
                      type: "string"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerRevokeAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.revokeAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Revoke an app-specific password by name.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncGetBlob: {
          lexicon: 1,
          id: "com.atproto.sync.getBlob",
          defs: {
            main: {
              type: "query",
              description: "Get a blob associated with a given repo.",
              parameters: {
                type: "params",
                required: ["did", "cid"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the blob to fetch"
                  }
                }
              },
              output: {
                encoding: "*/*"
              }
            }
          }
        },
        ComAtprotoSyncGetBlocks: {
          lexicon: 1,
          id: "com.atproto.sync.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Gets blocks from a given repo.",
              parameters: {
                type: "params",
                required: ["did", "cids"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  cids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetCheckout: {
          lexicon: 1,
          id: "com.atproto.sync.getCheckout",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetHead: {
          lexicon: 1,
          id: "com.atproto.sync.getHead",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HeadNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetLatestCommit: {
          lexicon: 1,
          id: "com.atproto.sync.getLatestCommit",
          defs: {
            main: {
              type: "query",
              description: "Gets the current commit CID & revision of the repo.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cid", "rev"],
                  properties: {
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    rev: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRecord: {
          lexicon: 1,
          id: "com.atproto.sync.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Gets blocks needed for existence or non-existence of record.",
              parameters: {
                type: "params",
                required: ["did", "collection", "rkey"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid"
                  },
                  rkey: {
                    type: "string"
                  },
                  commit: {
                    type: "string",
                    format: "cid",
                    description: "An optional past commit CID."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetRepo: {
          lexicon: 1,
          id: "com.atproto.sync.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Gets the did's repo, optionally catching up from a specific revision.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "The revision of the repo to catch up from."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncListBlobs: {
          lexicon: 1,
          id: "com.atproto.sync.listBlobs",
          defs: {
            main: {
              type: "query",
              description: "List blob cids since some revision",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "Optional revision of the repo to list blobs since"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cids"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    cids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncListRepos: {
          lexicon: 1,
          id: "com.atproto.sync.listRepos",
          defs: {
            main: {
              type: "query",
              description: "List dids and root cids of hosted repos",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listRepos#repo"
                      }
                    }
                  }
                }
              }
            },
            repo: {
              type: "object",
              required: ["did", "head"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                head: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          }
        },
        ComAtprotoSyncNotifyOfUpdate: {
          lexicon: 1,
          id: "com.atproto.sync.notifyOfUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Notify a crawling service of a recent update. Often when a long break between updates causes the connection with the crawling service to break.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the service that is notifying of update."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncRequestCrawl: {
          lexicon: 1,
          id: "com.atproto.sync.requestCrawl",
          defs: {
            main: {
              type: "procedure",
              description: "Request a service to persistently crawl hosted repos.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the service that is requesting to be crawled."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncSubscribeRepos: {
          lexicon: 1,
          id: "com.atproto.sync.subscribeRepos",
          defs: {
            main: {
              type: "subscription",
              description: "Subscribe to repo updates",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.sync.subscribeRepos#commit",
                    "lex:com.atproto.sync.subscribeRepos#handle",
                    "lex:com.atproto.sync.subscribeRepos#migrate",
                    "lex:com.atproto.sync.subscribeRepos#tombstone",
                    "lex:com.atproto.sync.subscribeRepos#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                },
                {
                  name: "ConsumerTooSlow"
                }
              ]
            },
            commit: {
              type: "object",
              required: [
                "seq",
                "rebase",
                "tooBig",
                "repo",
                "commit",
                "rev",
                "since",
                "blocks",
                "ops",
                "blobs",
                "time"
              ],
              nullable: ["prev", "since"],
              properties: {
                seq: {
                  type: "integer"
                },
                rebase: {
                  type: "boolean"
                },
                tooBig: {
                  type: "boolean"
                },
                repo: {
                  type: "string",
                  format: "did"
                },
                commit: {
                  type: "cid-link"
                },
                prev: {
                  type: "cid-link"
                },
                rev: {
                  type: "string",
                  description: "The rev of the emitted commit"
                },
                since: {
                  type: "string",
                  description: "The rev of the last emitted commit from this repo"
                },
                blocks: {
                  type: "bytes",
                  description: "CAR file containing relevant blocks",
                  maxLength: 1e6
                },
                ops: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.sync.subscribeRepos#repoOp"
                  },
                  maxLength: 200
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "cid-link"
                  }
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            handle: {
              type: "object",
              required: ["seq", "did", "handle", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            migrate: {
              type: "object",
              required: ["seq", "did", "migrateTo", "time"],
              nullable: ["migrateTo"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                migrateTo: {
                  type: "string"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            tombstone: {
              type: "object",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            },
            repoOp: {
              type: "object",
              description: "A repo operation, ie a write of a single record. For creates and updates, cid is the record's CID as of this operation. For deletes, it's null.",
              required: ["action", "path", "cid"],
              nullable: ["cid"],
              properties: {
                action: {
                  type: "string",
                  knownValues: ["create", "update", "delete"]
                },
                path: {
                  type: "string"
                },
                cid: {
                  type: "cid-link"
                }
              }
            }
          }
        },
        AppBskyActorDefs: {
          lexicon: 1,
          id: "app.bsky.actor.defs",
          description: "A reference to an actor in the network.",
          defs: {
            profileViewBasic: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                avatar: {
                  type: "string"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileView: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileViewDetailed: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                banner: {
                  type: "string"
                },
                followersCount: {
                  type: "integer"
                },
                followsCount: {
                  type: "integer"
                },
                postsCount: {
                  type: "integer"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            viewerState: {
              type: "object",
              properties: {
                muted: {
                  type: "boolean"
                },
                mutedByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                blockedBy: {
                  type: "boolean"
                },
                blocking: {
                  type: "string",
                  format: "at-uri"
                },
                following: {
                  type: "string",
                  format: "at-uri"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            preferences: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.actor.defs#adultContentPref",
                  "lex:app.bsky.actor.defs#contentLabelPref",
                  "lex:app.bsky.actor.defs#savedFeedsPref",
                  "lex:app.bsky.actor.defs#personalDetailsPref",
                  "lex:app.bsky.actor.defs#feedViewPref",
                  "lex:app.bsky.actor.defs#threadViewPref"
                ]
              }
            },
            adultContentPref: {
              type: "object",
              required: ["enabled"],
              properties: {
                enabled: {
                  type: "boolean",
                  default: false
                }
              }
            },
            contentLabelPref: {
              type: "object",
              required: ["label", "visibility"],
              properties: {
                label: {
                  type: "string"
                },
                visibility: {
                  type: "string",
                  knownValues: ["show", "warn", "hide"]
                }
              }
            },
            savedFeedsPref: {
              type: "object",
              required: ["pinned", "saved"],
              properties: {
                pinned: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                saved: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            },
            personalDetailsPref: {
              type: "object",
              properties: {
                birthDate: {
                  type: "string",
                  format: "datetime",
                  description: "The birth date of the owner of the account."
                }
              }
            },
            feedViewPref: {
              type: "object",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  description: "The URI of the feed, or an identifier which describes the feed."
                },
                hideReplies: {
                  type: "boolean",
                  description: "Hide replies in the feed."
                },
                hideRepliesByUnfollowed: {
                  type: "boolean",
                  description: "Hide replies in the feed if they are not by followed users."
                },
                hideRepliesByLikeCount: {
                  type: "integer",
                  description: "Hide replies in the feed if they do not have this number of likes."
                },
                hideReposts: {
                  type: "boolean",
                  description: "Hide reposts in the feed."
                },
                hideQuotePosts: {
                  type: "boolean",
                  description: "Hide quote posts in the feed."
                }
              }
            },
            threadViewPref: {
              type: "object",
              properties: {
                sort: {
                  type: "string",
                  description: "Sorting mode.",
                  knownValues: ["oldest", "newest", "most-likes", "random"]
                },
                prioritizeFollowedUsers: {
                  type: "boolean",
                  description: "Show followed users at the top of all replies."
                }
              }
            }
          }
        },
        AppBskyActorGetPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.getPreferences",
          defs: {
            main: {
              type: "query",
              description: "Get private preferences attached to the account.",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetProfile: {
          lexicon: 1,
          id: "app.bsky.actor.getProfile",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                }
              }
            }
          }
        },
        AppBskyActorGetProfiles: {
          lexicon: 1,
          id: "app.bsky.actor.getProfiles",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["actors"],
                properties: {
                  actors: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-identifier"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["profiles"],
                  properties: {
                    profiles: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetSuggestions: {
          lexicon: 1,
          id: "app.bsky.actor.getSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of actors suggested for following. Used in discovery UIs.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorProfile: {
          lexicon: 1,
          id: "app.bsky.actor.profile",
          defs: {
            main: {
              type: "record",
              key: "literal:self",
              record: {
                type: "object",
                properties: {
                  displayName: {
                    type: "string",
                    maxGraphemes: 64,
                    maxLength: 640
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 256,
                    maxLength: 2560
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  banner: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  }
                }
              }
            }
          }
        },
        AppBskyActorPutPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.putPreferences",
          defs: {
            main: {
              type: "procedure",
              description: "Sets the private preferences attached to the account.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActors: {
          lexicon: 1,
          id: "app.bsky.actor.searchActors",
          defs: {
            main: {
              type: "query",
              description: "Find actors matching search criteria.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActorsTypeahead: {
          lexicon: 1,
          id: "app.bsky.actor.searchActorsTypeahead",
          defs: {
            main: {
              type: "query",
              description: "Find actor suggestions for a search term.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyEmbedExternal: {
          lexicon: 1,
          id: "app.bsky.embed.external",
          description: "A representation of some externally linked content, embedded in another form of content",
          defs: {
            main: {
              type: "object",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#external"
                }
              }
            },
            external: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                }
              }
            },
            view: {
              type: "object",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#viewExternal"
                }
              }
            },
            viewExternal: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyEmbedImages: {
          lexicon: 1,
          id: "app.bsky.embed.images",
          description: "A set of images embedded in some other form of content",
          defs: {
            main: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#image"
                  },
                  maxLength: 4
                }
              }
            },
            image: {
              type: "object",
              required: ["image", "alt"],
              properties: {
                image: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                },
                alt: {
                  type: "string"
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            },
            aspectRatio: {
              type: "object",
              description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer",
                  minimum: 1
                },
                height: {
                  type: "integer",
                  minimum: 1
                }
              }
            },
            view: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#viewImage"
                  },
                  maxLength: 4
                }
              }
            },
            viewImage: {
              type: "object",
              required: ["thumb", "fullsize", "alt"],
              properties: {
                thumb: {
                  type: "string"
                },
                fullsize: {
                  type: "string"
                },
                alt: {
                  type: "string"
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            }
          }
        },
        AppBskyEmbedRecord: {
          lexicon: 1,
          id: "app.bsky.embed.record",
          description: "A representation of a record embedded in another form of content",
          defs: {
            main: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            view: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.record#viewRecord",
                    "lex:app.bsky.embed.record#viewNotFound",
                    "lex:app.bsky.embed.record#viewBlocked",
                    "lex:app.bsky.feed.defs#generatorView",
                    "lex:app.bsky.graph.defs#listView"
                  ]
                }
              }
            },
            viewRecord: {
              type: "object",
              required: ["uri", "cid", "author", "value", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                value: {
                  type: "unknown"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                embeds: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images#view",
                      "lex:app.bsky.embed.external#view",
                      "lex:app.bsky.embed.record#view",
                      "lex:app.bsky.embed.recordWithMedia#view"
                    ]
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            viewNotFound: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            viewBlocked: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            }
          }
        },
        AppBskyEmbedRecordWithMedia: {
          lexicon: 1,
          id: "app.bsky.embed.recordWithMedia",
          description: "A representation of a record embedded in another form of content, alongside other compatible embeds",
          defs: {
            main: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record"
                },
                media: {
                  type: "union",
                  refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.external"]
                }
              }
            },
            view: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record#view"
                },
                media: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view"
                  ]
                }
              }
            }
          }
        },
        AppBskyFeedDefs: {
          lexicon: 1,
          id: "app.bsky.feed.defs",
          defs: {
            postView: {
              type: "object",
              required: ["uri", "cid", "author", "record", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                record: {
                  type: "unknown"
                },
                embed: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view",
                    "lex:app.bsky.embed.record#view",
                    "lex:app.bsky.embed.recordWithMedia#view"
                  ]
                },
                replyCount: {
                  type: "integer"
                },
                repostCount: {
                  type: "integer"
                },
                likeCount: {
                  type: "integer"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                threadgate: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadgateView"
                }
              }
            },
            viewerState: {
              type: "object",
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                },
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            feedViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                reply: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#replyRef"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#reasonRepost"]
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                }
              }
            },
            reasonRepost: {
              type: "object",
              required: ["by", "indexedAt"],
              properties: {
                by: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            threadViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                replies: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.defs#threadViewPost",
                      "lex:app.bsky.feed.defs#notFoundPost",
                      "lex:app.bsky.feed.defs#blockedPost"
                    ]
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#viewerThreadState"
                }
              }
            },
            notFoundPost: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            blockedPost: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            },
            blockedAuthor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                }
              }
            },
            viewerThreadState: {
              type: "object",
              properties: {
                canReply: {
                  type: "boolean"
                }
              }
            },
            generatorView: {
              type: "object",
              required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                displayName: {
                  type: "string"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            generatorViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonFeedPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "string",
                  format: "at-uri"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost"]
                }
              }
            },
            skeletonReasonRepost: {
              type: "object",
              required: ["repost"],
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            threadgateView: {
              type: "object",
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listViewBasic"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedDescribeFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.describeFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Returns information about a given feed generator including TOS & offered feed URIs",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "feeds"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                      }
                    },
                    links: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                    }
                  }
                }
              }
            },
            feed: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.generator",
          defs: {
            main: {
              type: "record",
              description: "A declaration of the existence of a feed generator",
              key: "any",
              record: {
                type: "object",
                required: ["did", "displayName", "createdAt"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  displayName: {
                    type: "string",
                    maxGraphemes: 24,
                    maxLength: 240
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getActorFeeds",
          defs: {
            main: {
              type: "query",
              description: "Retrieve a list of feeds created by a given actor",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getActorLikes",
          defs: {
            main: {
              type: "query",
              description: "A view of the posts liked by an actor.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetAuthorFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getAuthorFeed",
          defs: {
            main: {
              type: "query",
              description: "A view of an actor's feed.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  filter: {
                    type: "string",
                    knownValues: [
                      "posts_with_replies",
                      "posts_no_replies",
                      "posts_with_media"
                    ],
                    default: "posts_with_replies"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getFeed",
          defs: {
            main: {
              type: "query",
              description: "Compose and hydrate a feed from a user's selected feed generator",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a specific feed offered by a feed generator, such as its online status",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["view", "isOnline", "isValid"],
                  properties: {
                    view: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    },
                    isOnline: {
                      type: "boolean"
                    },
                    isValid: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of feed generators",
              parameters: {
                type: "params",
                required: ["feeds"],
                properties: {
                  feeds: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedSkeleton: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedSkeleton",
          defs: {
            main: {
              type: "query",
              description: "A skeleton of a feed provided by a feed generator",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getLikes",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "likes"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    likes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.getLikes#like"
                      }
                    }
                  }
                }
              }
            },
            like: {
              type: "object",
              required: ["indexedAt", "createdAt", "actor"],
              properties: {
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                actor: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            }
          }
        },
        AppBskyFeedGetListFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getListFeed",
          defs: {
            main: {
              type: "query",
              description: "A view of a recent posts from actors in a list",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownList"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPostThread: {
          lexicon: 1,
          id: "app.bsky.feed.getPostThread",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  depth: {
                    type: "integer",
                    default: 6,
                    minimum: 0,
                    maximum: 1e3
                  },
                  parentHeight: {
                    type: "integer",
                    default: 80,
                    minimum: 0,
                    maximum: 1e3
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["thread"],
                  properties: {
                    thread: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.defs#threadViewPost",
                        "lex:app.bsky.feed.defs#notFoundPost",
                        "lex:app.bsky.feed.defs#blockedPost"
                      ]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "NotFound"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPosts: {
          lexicon: 1,
          id: "app.bsky.feed.getPosts",
          defs: {
            main: {
              type: "query",
              description: "A view of an actor's feed.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetRepostedBy: {
          lexicon: 1,
          id: "app.bsky.feed.getRepostedBy",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "repostedBy"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    repostedBy: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetSuggestedFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getSuggestedFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested feeds for the viewer.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetTimeline: {
          lexicon: 1,
          id: "app.bsky.feed.getTimeline",
          defs: {
            main: {
              type: "query",
              description: "A view of the user's home timeline.",
              parameters: {
                type: "params",
                properties: {
                  algorithm: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedLike: {
          lexicon: 1,
          id: "app.bsky.feed.like",
          defs: {
            main: {
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedPost: {
          lexicon: 1,
          id: "app.bsky.feed.post",
          defs: {
            main: {
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["text", "createdAt"],
                properties: {
                  text: {
                    type: "string",
                    maxLength: 3e3,
                    maxGraphemes: 300
                  },
                  entities: {
                    type: "array",
                    description: "Deprecated: replaced by app.bsky.richtext.facet.",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.post#entity"
                    }
                  },
                  facets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  reply: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.post#replyRef"
                  },
                  embed: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images",
                      "lex:app.bsky.embed.external",
                      "lex:app.bsky.embed.record",
                      "lex:app.bsky.embed.recordWithMedia"
                    ]
                  },
                  langs: {
                    type: "array",
                    maxLength: 3,
                    items: {
                      type: "string",
                      format: "language"
                    }
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                parent: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            entity: {
              type: "object",
              description: "Deprecated: use facets instead.",
              required: ["index", "type", "value"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#textSlice"
                },
                type: {
                  type: "string",
                  description: "Expected values are 'mention' and 'link'."
                },
                value: {
                  type: "string"
                }
              }
            },
            textSlice: {
              type: "object",
              description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
              required: ["start", "end"],
              properties: {
                start: {
                  type: "integer",
                  minimum: 0
                },
                end: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyFeedRepost: {
          lexicon: 1,
          id: "app.bsky.feed.repost",
          defs: {
            main: {
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedThreadgate: {
          lexicon: 1,
          id: "app.bsky.feed.threadgate",
          defs: {
            main: {
              type: "record",
              key: "tid",
              description: "Defines interaction gating rules for a thread. The rkey of the threadgate record should match the rkey of the thread's root post.",
              record: {
                type: "object",
                required: ["post", "createdAt"],
                properties: {
                  post: {
                    type: "string",
                    format: "at-uri"
                  },
                  allow: {
                    type: "array",
                    maxLength: 5,
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.threadgate#mentionRule",
                        "lex:app.bsky.feed.threadgate#followingRule",
                        "lex:app.bsky.feed.threadgate#listRule"
                      ]
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            mentionRule: {
              type: "object",
              description: "Allow replies from actors mentioned in your post.",
              properties: {}
            },
            followingRule: {
              type: "object",
              description: "Allow replies from actors you follow.",
              properties: {}
            },
            listRule: {
              type: "object",
              description: "Allow replies from actors on a list.",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphBlock: {
          lexicon: 1,
          id: "app.bsky.graph.block",
          defs: {
            main: {
              type: "record",
              description: "A block.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphDefs: {
          lexicon: 1,
          id: "app.bsky.graph.defs",
          defs: {
            listViewBasic: {
              type: "object",
              required: ["uri", "cid", "name", "purpose"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                avatar: {
                  type: "string"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listView: {
              type: "object",
              required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listItemView: {
              type: "object",
              required: ["subject"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            },
            listPurpose: {
              type: "string",
              knownValues: [
                "app.bsky.graph.defs#modlist",
                "app.bsky.graph.defs#curatelist"
              ]
            },
            modlist: {
              type: "token",
              description: "A list of actors to apply an aggregate moderation action (mute/block) on"
            },
            curatelist: {
              type: "token",
              description: "A list of actors used for curation purposes such as list feeds or interaction gating"
            },
            listViewerState: {
              type: "object",
              properties: {
                muted: {
                  type: "boolean"
                },
                blocked: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphFollow: {
          lexicon: 1,
          id: "app.bsky.graph.follow",
          defs: {
            main: {
              type: "record",
              description: "A social follow.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Who is the requester's account blocking?",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blocks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blocks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollowers: {
          lexicon: 1,
          id: "app.bsky.graph.getFollowers",
          defs: {
            main: {
              type: "query",
              description: "Who is following an actor?",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "followers"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    followers: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollows: {
          lexicon: 1,
          id: "app.bsky.graph.getFollows",
          defs: {
            main: {
              type: "query",
              description: "Who is an actor following?",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "follows"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    follows: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetList: {
          lexicon: 1,
          id: "app.bsky.graph.getList",
          defs: {
            main: {
              type: "query",
              description: "Fetch a list of actors",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list", "items"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    list: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listItemView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getListBlocks",
          defs: {
            main: {
              type: "query",
              description: "Which lists is the requester's account blocking?",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getListMutes",
          defs: {
            main: {
              type: "query",
              description: "Which lists is the requester's account muting?",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetLists: {
          lexicon: 1,
          id: "app.bsky.graph.getLists",
          defs: {
            main: {
              type: "query",
              description: "Fetch a list of lists that belong to an actor",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getMutes",
          defs: {
            main: {
              type: "query",
              description: "Who does the viewer mute?",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["mutes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    mutes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetSuggestedFollowsByActor: {
          lexicon: 1,
          id: "app.bsky.graph.getSuggestedFollowsByActor",
          defs: {
            main: {
              type: "query",
              description: "Get suggested follows related to a given actor.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphList: {
          lexicon: 1,
          id: "app.bsky.graph.list",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a list of actors.",
              key: "tid",
              record: {
                type: "object",
                required: ["name", "purpose", "createdAt"],
                properties: {
                  purpose: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listPurpose"
                  },
                  name: {
                    type: "string",
                    maxLength: 64,
                    minLength: 1
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListblock: {
          lexicon: 1,
          id: "app.bsky.graph.listblock",
          defs: {
            main: {
              type: "record",
              description: "A block of an entire list of actors.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "at-uri"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListitem: {
          lexicon: 1,
          id: "app.bsky.graph.listitem",
          defs: {
            main: {
              type: "record",
              description: "An item under a declared list of actors",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "list", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  list: {
                    type: "string",
                    format: "at-uri"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.muteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Mute an actor by did or handle.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.muteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Mute a list of actors.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Unmute an actor by did or handle.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Unmute a list of actors.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationGetUnreadCount: {
          lexicon: 1,
          id: "app.bsky.notification.getUnreadCount",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                properties: {
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["count"],
                  properties: {
                    count: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationListNotifications: {
          lexicon: 1,
          id: "app.bsky.notification.listNotifications",
          defs: {
            main: {
              type: "query",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["notifications"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    notifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.notification.listNotifications#notification"
                      }
                    }
                  }
                }
              }
            },
            notification: {
              type: "object",
              required: [
                "uri",
                "cid",
                "author",
                "reason",
                "record",
                "isRead",
                "indexedAt"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                reason: {
                  type: "string",
                  description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
                  knownValues: [
                    "like",
                    "repost",
                    "follow",
                    "mention",
                    "reply",
                    "quote"
                  ]
                },
                reasonSubject: {
                  type: "string",
                  format: "at-uri"
                },
                record: {
                  type: "unknown"
                },
                isRead: {
                  type: "boolean"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationRegisterPush: {
          lexicon: 1,
          id: "app.bsky.notification.registerPush",
          defs: {
            main: {
              type: "procedure",
              description: "Register for push notifications with a service",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["serviceDid", "token", "platform", "appId"],
                  properties: {
                    serviceDid: {
                      type: "string",
                      format: "did"
                    },
                    token: {
                      type: "string"
                    },
                    platform: {
                      type: "string",
                      knownValues: ["ios", "android", "web"]
                    },
                    appId: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationUpdateSeen: {
          lexicon: 1,
          id: "app.bsky.notification.updateSeen",
          defs: {
            main: {
              type: "procedure",
              description: "Notify server that the user has seen notifications.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["seenAt"],
                  properties: {
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyRichtextFacet: {
          lexicon: 1,
          id: "app.bsky.richtext.facet",
          defs: {
            main: {
              type: "object",
              required: ["index", "features"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet#byteSlice"
                },
                features: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.richtext.facet#mention",
                      "lex:app.bsky.richtext.facet#link"
                    ]
                  }
                }
              }
            },
            mention: {
              type: "object",
              description: "A facet feature for actor mentions.",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            link: {
              type: "object",
              description: "A facet feature for links.",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            byteSlice: {
              type: "object",
              description: "A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.",
              required: ["byteStart", "byteEnd"],
              properties: {
                byteStart: {
                  type: "integer",
                  minimum: 0
                },
                byteEnd: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyUnspeccedApplyLabels: {
          lexicon: 1,
          id: "app.bsky.unspecced.applyLabels",
          defs: {
            main: {
              type: "procedure",
              description: "Allow a labeler to apply labels directly.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetPopular: {
          lexicon: 1,
          id: "app.bsky.unspecced.getPopular",
          defs: {
            main: {
              type: "query",
              description: "An unspecced view of globally popular items",
              parameters: {
                type: "params",
                properties: {
                  includeNsfw: {
                    type: "boolean",
                    default: false
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetPopularFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.unspecced.getPopularFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "An unspecced view of globally popular feed generators",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  query: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTimelineSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTimelineSkeleton",
          defs: {
            main: {
              type: "query",
              description: "A skeleton of a timeline - UNSPECCED & WILL GO AWAY SOON",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        }
      };
      var schemas = Object.values(schemaDict);
      var lexicons = new Lexicons(schemas);
      var disableAccountInvites_exports = {};
      __export2(disableAccountInvites_exports, {
        toKnownErr: () => toKnownErr
      });
      function toKnownErr(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var disableInviteCodes_exports = {};
      __export2(disableInviteCodes_exports, {
        toKnownErr: () => toKnownErr2
      });
      function toKnownErr2(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var enableAccountInvites_exports = {};
      __export2(enableAccountInvites_exports, {
        toKnownErr: () => toKnownErr3
      });
      function toKnownErr3(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getInviteCodes_exports = {};
      __export2(getInviteCodes_exports, {
        toKnownErr: () => toKnownErr4
      });
      function toKnownErr4(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getModerationAction_exports = {};
      __export2(getModerationAction_exports, {
        toKnownErr: () => toKnownErr5
      });
      function toKnownErr5(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getModerationActions_exports = {};
      __export2(getModerationActions_exports, {
        toKnownErr: () => toKnownErr6
      });
      function toKnownErr6(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getModerationReport_exports = {};
      __export2(getModerationReport_exports, {
        toKnownErr: () => toKnownErr7
      });
      function toKnownErr7(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getModerationReports_exports = {};
      __export2(getModerationReports_exports, {
        toKnownErr: () => toKnownErr8
      });
      function toKnownErr8(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getRecord_exports = {};
      __export2(getRecord_exports, {
        RecordNotFoundError: () => RecordNotFoundError,
        toKnownErr: () => toKnownErr9
      });
      var RecordNotFoundError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr9(e) {
        if (e instanceof XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
        }
        return e;
      }
      var getRepo_exports = {};
      __export2(getRepo_exports, {
        RepoNotFoundError: () => RepoNotFoundError,
        toKnownErr: () => toKnownErr10
      });
      var RepoNotFoundError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr10(e) {
        if (e instanceof XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
      var resolveModerationReports_exports = {};
      __export2(resolveModerationReports_exports, {
        toKnownErr: () => toKnownErr11
      });
      function toKnownErr11(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var reverseModerationAction_exports = {};
      __export2(reverseModerationAction_exports, {
        toKnownErr: () => toKnownErr12
      });
      function toKnownErr12(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var searchRepos_exports = {};
      __export2(searchRepos_exports, {
        toKnownErr: () => toKnownErr13
      });
      function toKnownErr13(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var sendEmail_exports = {};
      __export2(sendEmail_exports, {
        toKnownErr: () => toKnownErr14
      });
      function toKnownErr14(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var takeModerationAction_exports = {};
      __export2(takeModerationAction_exports, {
        SubjectHasActionError: () => SubjectHasActionError,
        toKnownErr: () => toKnownErr15
      });
      var SubjectHasActionError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr15(e) {
        if (e instanceof XRPCError) {
          if (e.error === "SubjectHasAction")
            return new SubjectHasActionError(e);
        }
        return e;
      }
      var updateAccountEmail_exports = {};
      __export2(updateAccountEmail_exports, {
        toKnownErr: () => toKnownErr16
      });
      function toKnownErr16(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var updateAccountHandle_exports = {};
      __export2(updateAccountHandle_exports, {
        toKnownErr: () => toKnownErr17
      });
      function toKnownErr17(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var resolveHandle_exports = {};
      __export2(resolveHandle_exports, {
        toKnownErr: () => toKnownErr18
      });
      function toKnownErr18(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var updateHandle_exports = {};
      __export2(updateHandle_exports, {
        toKnownErr: () => toKnownErr19
      });
      function toKnownErr19(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var queryLabels_exports = {};
      __export2(queryLabels_exports, {
        toKnownErr: () => toKnownErr20
      });
      function toKnownErr20(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var createReport_exports = {};
      __export2(createReport_exports, {
        toKnownErr: () => toKnownErr21
      });
      function toKnownErr21(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var applyWrites_exports = {};
      __export2(applyWrites_exports, {
        InvalidSwapError: () => InvalidSwapError,
        isCreate: () => isCreate,
        isDelete: () => isDelete,
        isUpdate: () => isUpdate,
        toKnownErr: () => toKnownErr22,
        validateCreate: () => validateCreate,
        validateDelete: () => validateDelete,
        validateUpdate: () => validateUpdate
      });
      function isObj2(v) {
        return typeof v === "object" && v !== null;
      }
      function hasProp2(data, prop) {
        return prop in data;
      }
      var InvalidSwapError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr22(e) {
        if (e instanceof XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      function isCreate(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#create";
      }
      function validateCreate(v) {
        return lexicons.validate("com.atproto.repo.applyWrites#create", v);
      }
      function isUpdate(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#update";
      }
      function validateUpdate(v) {
        return lexicons.validate("com.atproto.repo.applyWrites#update", v);
      }
      function isDelete(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.repo.applyWrites#delete";
      }
      function validateDelete(v) {
        return lexicons.validate("com.atproto.repo.applyWrites#delete", v);
      }
      var createRecord_exports = {};
      __export2(createRecord_exports, {
        InvalidSwapError: () => InvalidSwapError2,
        toKnownErr: () => toKnownErr23
      });
      var InvalidSwapError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr23(e) {
        if (e instanceof XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError2(e);
        }
        return e;
      }
      var deleteRecord_exports = {};
      __export2(deleteRecord_exports, {
        InvalidSwapError: () => InvalidSwapError3,
        toKnownErr: () => toKnownErr24
      });
      var InvalidSwapError3 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr24(e) {
        if (e instanceof XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError3(e);
        }
        return e;
      }
      var describeRepo_exports = {};
      __export2(describeRepo_exports, {
        toKnownErr: () => toKnownErr25
      });
      function toKnownErr25(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getRecord_exports2 = {};
      __export2(getRecord_exports2, {
        toKnownErr: () => toKnownErr26
      });
      function toKnownErr26(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var listRecords_exports = {};
      __export2(listRecords_exports, {
        isRecord: () => isRecord,
        toKnownErr: () => toKnownErr27,
        validateRecord: () => validateRecord
      });
      function toKnownErr27(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isRecord(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.repo.listRecords#record";
      }
      function validateRecord(v) {
        return lexicons.validate("com.atproto.repo.listRecords#record", v);
      }
      var putRecord_exports = {};
      __export2(putRecord_exports, {
        InvalidSwapError: () => InvalidSwapError4,
        toKnownErr: () => toKnownErr28
      });
      var InvalidSwapError4 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr28(e) {
        if (e instanceof XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError4(e);
        }
        return e;
      }
      var uploadBlob_exports = {};
      __export2(uploadBlob_exports, {
        toKnownErr: () => toKnownErr29
      });
      function toKnownErr29(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var createAccount_exports = {};
      __export2(createAccount_exports, {
        HandleNotAvailableError: () => HandleNotAvailableError,
        IncompatibleDidDocError: () => IncompatibleDidDocError,
        InvalidHandleError: () => InvalidHandleError2,
        InvalidInviteCodeError: () => InvalidInviteCodeError,
        InvalidPasswordError: () => InvalidPasswordError,
        UnresolvableDidError: () => UnresolvableDidError,
        UnsupportedDomainError: () => UnsupportedDomainError,
        toKnownErr: () => toKnownErr30
      });
      var InvalidHandleError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var InvalidPasswordError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var InvalidInviteCodeError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var HandleNotAvailableError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var UnsupportedDomainError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var UnresolvableDidError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var IncompatibleDidDocError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr30(e) {
        if (e instanceof XRPCError) {
          if (e.error === "InvalidHandle")
            return new InvalidHandleError2(e);
          if (e.error === "InvalidPassword")
            return new InvalidPasswordError(e);
          if (e.error === "InvalidInviteCode")
            return new InvalidInviteCodeError(e);
          if (e.error === "HandleNotAvailable")
            return new HandleNotAvailableError(e);
          if (e.error === "UnsupportedDomain")
            return new UnsupportedDomainError(e);
          if (e.error === "UnresolvableDid")
            return new UnresolvableDidError(e);
          if (e.error === "IncompatibleDidDoc")
            return new IncompatibleDidDocError(e);
        }
        return e;
      }
      var createAppPassword_exports = {};
      __export2(createAppPassword_exports, {
        AccountTakedownError: () => AccountTakedownError,
        isAppPassword: () => isAppPassword,
        toKnownErr: () => toKnownErr31,
        validateAppPassword: () => validateAppPassword
      });
      var AccountTakedownError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr31(e) {
        if (e instanceof XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      function isAppPassword(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.createAppPassword#appPassword";
      }
      function validateAppPassword(v) {
        return lexicons.validate("com.atproto.server.createAppPassword#appPassword", v);
      }
      var createInviteCode_exports = {};
      __export2(createInviteCode_exports, {
        toKnownErr: () => toKnownErr32
      });
      function toKnownErr32(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var createInviteCodes_exports = {};
      __export2(createInviteCodes_exports, {
        isAccountCodes: () => isAccountCodes,
        toKnownErr: () => toKnownErr33,
        validateAccountCodes: () => validateAccountCodes
      });
      function toKnownErr33(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isAccountCodes(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.createInviteCodes#accountCodes";
      }
      function validateAccountCodes(v) {
        return lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", v);
      }
      var createSession_exports = {};
      __export2(createSession_exports, {
        AccountTakedownError: () => AccountTakedownError2,
        toKnownErr: () => toKnownErr34
      });
      var AccountTakedownError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr34(e) {
        if (e instanceof XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError2(e);
        }
        return e;
      }
      var deleteAccount_exports = {};
      __export2(deleteAccount_exports, {
        ExpiredTokenError: () => ExpiredTokenError,
        InvalidTokenError: () => InvalidTokenError,
        toKnownErr: () => toKnownErr35
      });
      var ExpiredTokenError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var InvalidTokenError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr35(e) {
        if (e instanceof XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
      var deleteSession_exports = {};
      __export2(deleteSession_exports, {
        toKnownErr: () => toKnownErr36
      });
      function toKnownErr36(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var describeServer_exports = {};
      __export2(describeServer_exports, {
        isLinks: () => isLinks,
        toKnownErr: () => toKnownErr37,
        validateLinks: () => validateLinks
      });
      function toKnownErr37(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isLinks(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.describeServer#links";
      }
      function validateLinks(v) {
        return lexicons.validate("com.atproto.server.describeServer#links", v);
      }
      var getAccountInviteCodes_exports = {};
      __export2(getAccountInviteCodes_exports, {
        DuplicateCreateError: () => DuplicateCreateError,
        toKnownErr: () => toKnownErr38
      });
      var DuplicateCreateError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr38(e) {
        if (e instanceof XRPCError) {
          if (e.error === "DuplicateCreate")
            return new DuplicateCreateError(e);
        }
        return e;
      }
      var getSession_exports = {};
      __export2(getSession_exports, {
        toKnownErr: () => toKnownErr39
      });
      function toKnownErr39(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var listAppPasswords_exports = {};
      __export2(listAppPasswords_exports, {
        AccountTakedownError: () => AccountTakedownError3,
        isAppPassword: () => isAppPassword2,
        toKnownErr: () => toKnownErr40,
        validateAppPassword: () => validateAppPassword2
      });
      var AccountTakedownError3 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr40(e) {
        if (e instanceof XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError3(e);
        }
        return e;
      }
      function isAppPassword2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.listAppPasswords#appPassword";
      }
      function validateAppPassword2(v) {
        return lexicons.validate("com.atproto.server.listAppPasswords#appPassword", v);
      }
      var refreshSession_exports = {};
      __export2(refreshSession_exports, {
        AccountTakedownError: () => AccountTakedownError4,
        toKnownErr: () => toKnownErr41
      });
      var AccountTakedownError4 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr41(e) {
        if (e instanceof XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError4(e);
        }
        return e;
      }
      var requestAccountDelete_exports = {};
      __export2(requestAccountDelete_exports, {
        toKnownErr: () => toKnownErr42
      });
      function toKnownErr42(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var requestPasswordReset_exports = {};
      __export2(requestPasswordReset_exports, {
        toKnownErr: () => toKnownErr43
      });
      function toKnownErr43(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var resetPassword_exports = {};
      __export2(resetPassword_exports, {
        ExpiredTokenError: () => ExpiredTokenError2,
        InvalidTokenError: () => InvalidTokenError2,
        toKnownErr: () => toKnownErr44
      });
      var ExpiredTokenError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var InvalidTokenError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr44(e) {
        if (e instanceof XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError2(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError2(e);
        }
        return e;
      }
      var revokeAppPassword_exports = {};
      __export2(revokeAppPassword_exports, {
        toKnownErr: () => toKnownErr45
      });
      function toKnownErr45(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getBlob_exports = {};
      __export2(getBlob_exports, {
        toKnownErr: () => toKnownErr46
      });
      function toKnownErr46(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getBlocks_exports = {};
      __export2(getBlocks_exports, {
        toKnownErr: () => toKnownErr47
      });
      function toKnownErr47(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getCheckout_exports = {};
      __export2(getCheckout_exports, {
        toKnownErr: () => toKnownErr48
      });
      function toKnownErr48(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getHead_exports = {};
      __export2(getHead_exports, {
        HeadNotFoundError: () => HeadNotFoundError,
        toKnownErr: () => toKnownErr49
      });
      var HeadNotFoundError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr49(e) {
        if (e instanceof XRPCError) {
          if (e.error === "HeadNotFound")
            return new HeadNotFoundError(e);
        }
        return e;
      }
      var getLatestCommit_exports = {};
      __export2(getLatestCommit_exports, {
        RepoNotFoundError: () => RepoNotFoundError2,
        toKnownErr: () => toKnownErr50
      });
      var RepoNotFoundError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr50(e) {
        if (e instanceof XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError2(e);
        }
        return e;
      }
      var getRecord_exports3 = {};
      __export2(getRecord_exports3, {
        toKnownErr: () => toKnownErr51
      });
      function toKnownErr51(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getRepo_exports2 = {};
      __export2(getRepo_exports2, {
        toKnownErr: () => toKnownErr52
      });
      function toKnownErr52(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var listBlobs_exports = {};
      __export2(listBlobs_exports, {
        toKnownErr: () => toKnownErr53
      });
      function toKnownErr53(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var listRepos_exports = {};
      __export2(listRepos_exports, {
        isRepo: () => isRepo,
        toKnownErr: () => toKnownErr54,
        validateRepo: () => validateRepo
      });
      function toKnownErr54(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isRepo(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.listRepos#repo";
      }
      function validateRepo(v) {
        return lexicons.validate("com.atproto.sync.listRepos#repo", v);
      }
      var notifyOfUpdate_exports = {};
      __export2(notifyOfUpdate_exports, {
        toKnownErr: () => toKnownErr55
      });
      function toKnownErr55(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var requestCrawl_exports = {};
      __export2(requestCrawl_exports, {
        toKnownErr: () => toKnownErr56
      });
      function toKnownErr56(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getPreferences_exports = {};
      __export2(getPreferences_exports, {
        toKnownErr: () => toKnownErr57
      });
      function toKnownErr57(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getProfile_exports = {};
      __export2(getProfile_exports, {
        toKnownErr: () => toKnownErr58
      });
      function toKnownErr58(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getProfiles_exports = {};
      __export2(getProfiles_exports, {
        toKnownErr: () => toKnownErr59
      });
      function toKnownErr59(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getSuggestions_exports = {};
      __export2(getSuggestions_exports, {
        toKnownErr: () => toKnownErr60
      });
      function toKnownErr60(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var putPreferences_exports = {};
      __export2(putPreferences_exports, {
        toKnownErr: () => toKnownErr61
      });
      function toKnownErr61(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var searchActors_exports = {};
      __export2(searchActors_exports, {
        toKnownErr: () => toKnownErr62
      });
      function toKnownErr62(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var searchActorsTypeahead_exports = {};
      __export2(searchActorsTypeahead_exports, {
        toKnownErr: () => toKnownErr63
      });
      function toKnownErr63(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var describeFeedGenerator_exports = {};
      __export2(describeFeedGenerator_exports, {
        isFeed: () => isFeed,
        isLinks: () => isLinks2,
        toKnownErr: () => toKnownErr64,
        validateFeed: () => validateFeed,
        validateLinks: () => validateLinks2
      });
      function toKnownErr64(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isFeed(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#feed";
      }
      function validateFeed(v) {
        return lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", v);
      }
      function isLinks2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#links";
      }
      function validateLinks2(v) {
        return lexicons.validate("app.bsky.feed.describeFeedGenerator#links", v);
      }
      var getActorFeeds_exports = {};
      __export2(getActorFeeds_exports, {
        toKnownErr: () => toKnownErr65
      });
      function toKnownErr65(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getActorLikes_exports = {};
      __export2(getActorLikes_exports, {
        BlockedActorError: () => BlockedActorError,
        BlockedByActorError: () => BlockedByActorError,
        toKnownErr: () => toKnownErr66
      });
      var BlockedActorError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var BlockedByActorError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr66(e) {
        if (e instanceof XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
      var getAuthorFeed_exports = {};
      __export2(getAuthorFeed_exports, {
        BlockedActorError: () => BlockedActorError2,
        BlockedByActorError: () => BlockedByActorError2,
        toKnownErr: () => toKnownErr67
      });
      var BlockedActorError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      var BlockedByActorError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr67(e) {
        if (e instanceof XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError2(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError2(e);
        }
        return e;
      }
      var getFeed_exports = {};
      __export2(getFeed_exports, {
        UnknownFeedError: () => UnknownFeedError,
        toKnownErr: () => toKnownErr68
      });
      var UnknownFeedError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr68(e) {
        if (e instanceof XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
      var getFeedGenerator_exports = {};
      __export2(getFeedGenerator_exports, {
        toKnownErr: () => toKnownErr69
      });
      function toKnownErr69(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getFeedGenerators_exports = {};
      __export2(getFeedGenerators_exports, {
        toKnownErr: () => toKnownErr70
      });
      function toKnownErr70(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getFeedSkeleton_exports = {};
      __export2(getFeedSkeleton_exports, {
        UnknownFeedError: () => UnknownFeedError2,
        toKnownErr: () => toKnownErr71
      });
      var UnknownFeedError2 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr71(e) {
        if (e instanceof XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError2(e);
        }
        return e;
      }
      var getLikes_exports = {};
      __export2(getLikes_exports, {
        isLike: () => isLike,
        toKnownErr: () => toKnownErr72,
        validateLike: () => validateLike
      });
      function toKnownErr72(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isLike(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.getLikes#like";
      }
      function validateLike(v) {
        return lexicons.validate("app.bsky.feed.getLikes#like", v);
      }
      var getListFeed_exports = {};
      __export2(getListFeed_exports, {
        UnknownListError: () => UnknownListError,
        toKnownErr: () => toKnownErr73
      });
      var UnknownListError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr73(e) {
        if (e instanceof XRPCError) {
          if (e.error === "UnknownList")
            return new UnknownListError(e);
        }
        return e;
      }
      var getPostThread_exports = {};
      __export2(getPostThread_exports, {
        NotFoundError: () => NotFoundError,
        toKnownErr: () => toKnownErr74
      });
      var NotFoundError = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr74(e) {
        if (e instanceof XRPCError) {
          if (e.error === "NotFound")
            return new NotFoundError(e);
        }
        return e;
      }
      var getPosts_exports = {};
      __export2(getPosts_exports, {
        toKnownErr: () => toKnownErr75
      });
      function toKnownErr75(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getRepostedBy_exports = {};
      __export2(getRepostedBy_exports, {
        toKnownErr: () => toKnownErr76
      });
      function toKnownErr76(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getSuggestedFeeds_exports = {};
      __export2(getSuggestedFeeds_exports, {
        toKnownErr: () => toKnownErr77
      });
      function toKnownErr77(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getTimeline_exports = {};
      __export2(getTimeline_exports, {
        toKnownErr: () => toKnownErr78
      });
      function toKnownErr78(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getBlocks_exports2 = {};
      __export2(getBlocks_exports2, {
        toKnownErr: () => toKnownErr79
      });
      function toKnownErr79(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getFollowers_exports = {};
      __export2(getFollowers_exports, {
        toKnownErr: () => toKnownErr80
      });
      function toKnownErr80(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getFollows_exports = {};
      __export2(getFollows_exports, {
        toKnownErr: () => toKnownErr81
      });
      function toKnownErr81(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getList_exports = {};
      __export2(getList_exports, {
        toKnownErr: () => toKnownErr82
      });
      function toKnownErr82(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getListBlocks_exports = {};
      __export2(getListBlocks_exports, {
        toKnownErr: () => toKnownErr83
      });
      function toKnownErr83(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getListMutes_exports = {};
      __export2(getListMutes_exports, {
        toKnownErr: () => toKnownErr84
      });
      function toKnownErr84(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getLists_exports = {};
      __export2(getLists_exports, {
        toKnownErr: () => toKnownErr85
      });
      function toKnownErr85(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getMutes_exports = {};
      __export2(getMutes_exports, {
        toKnownErr: () => toKnownErr86
      });
      function toKnownErr86(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getSuggestedFollowsByActor_exports = {};
      __export2(getSuggestedFollowsByActor_exports, {
        toKnownErr: () => toKnownErr87
      });
      function toKnownErr87(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var muteActor_exports = {};
      __export2(muteActor_exports, {
        toKnownErr: () => toKnownErr88
      });
      function toKnownErr88(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var muteActorList_exports = {};
      __export2(muteActorList_exports, {
        toKnownErr: () => toKnownErr89
      });
      function toKnownErr89(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var unmuteActor_exports = {};
      __export2(unmuteActor_exports, {
        toKnownErr: () => toKnownErr90
      });
      function toKnownErr90(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var unmuteActorList_exports = {};
      __export2(unmuteActorList_exports, {
        toKnownErr: () => toKnownErr91
      });
      function toKnownErr91(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getUnreadCount_exports = {};
      __export2(getUnreadCount_exports, {
        toKnownErr: () => toKnownErr92
      });
      function toKnownErr92(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var listNotifications_exports = {};
      __export2(listNotifications_exports, {
        isNotification: () => isNotification,
        toKnownErr: () => toKnownErr93,
        validateNotification: () => validateNotification
      });
      function toKnownErr93(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      function isNotification(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.notification.listNotifications#notification";
      }
      function validateNotification(v) {
        return lexicons.validate("app.bsky.notification.listNotifications#notification", v);
      }
      var registerPush_exports = {};
      __export2(registerPush_exports, {
        toKnownErr: () => toKnownErr94
      });
      function toKnownErr94(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var updateSeen_exports = {};
      __export2(updateSeen_exports, {
        toKnownErr: () => toKnownErr95
      });
      function toKnownErr95(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var applyLabels_exports = {};
      __export2(applyLabels_exports, {
        toKnownErr: () => toKnownErr96
      });
      function toKnownErr96(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getPopular_exports = {};
      __export2(getPopular_exports, {
        toKnownErr: () => toKnownErr97
      });
      function toKnownErr97(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getPopularFeedGenerators_exports = {};
      __export2(getPopularFeedGenerators_exports, {
        toKnownErr: () => toKnownErr98
      });
      function toKnownErr98(e) {
        if (e instanceof XRPCError) {
        }
        return e;
      }
      var getTimelineSkeleton_exports = {};
      __export2(getTimelineSkeleton_exports, {
        UnknownFeedError: () => UnknownFeedError3,
        toKnownErr: () => toKnownErr99
      });
      var UnknownFeedError3 = class extends XRPCError {
        constructor(src22) {
          super(src22.status, src22.error, src22.message, src22.headers);
        }
      };
      function toKnownErr99(e) {
        if (e instanceof XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError3(e);
        }
        return e;
      }
      var defs_exports = {};
      __export2(defs_exports, {
        ACKNOWLEDGE: () => ACKNOWLEDGE,
        ESCALATE: () => ESCALATE,
        FLAG: () => FLAG,
        TAKEDOWN: () => TAKEDOWN,
        isActionReversal: () => isActionReversal,
        isActionView: () => isActionView,
        isActionViewCurrent: () => isActionViewCurrent,
        isActionViewDetail: () => isActionViewDetail,
        isBlobView: () => isBlobView,
        isImageDetails: () => isImageDetails,
        isModeration: () => isModeration,
        isModerationDetail: () => isModerationDetail,
        isRecordView: () => isRecordView,
        isRecordViewDetail: () => isRecordViewDetail,
        isRecordViewNotFound: () => isRecordViewNotFound,
        isRepoRef: () => isRepoRef,
        isRepoView: () => isRepoView,
        isRepoViewDetail: () => isRepoViewDetail,
        isRepoViewNotFound: () => isRepoViewNotFound,
        isReportView: () => isReportView,
        isReportViewDetail: () => isReportViewDetail,
        isVideoDetails: () => isVideoDetails,
        validateActionReversal: () => validateActionReversal,
        validateActionView: () => validateActionView,
        validateActionViewCurrent: () => validateActionViewCurrent,
        validateActionViewDetail: () => validateActionViewDetail,
        validateBlobView: () => validateBlobView,
        validateImageDetails: () => validateImageDetails,
        validateModeration: () => validateModeration,
        validateModerationDetail: () => validateModerationDetail,
        validateRecordView: () => validateRecordView,
        validateRecordViewDetail: () => validateRecordViewDetail,
        validateRecordViewNotFound: () => validateRecordViewNotFound,
        validateRepoRef: () => validateRepoRef,
        validateRepoView: () => validateRepoView,
        validateRepoViewDetail: () => validateRepoViewDetail,
        validateRepoViewNotFound: () => validateRepoViewNotFound,
        validateReportView: () => validateReportView,
        validateReportViewDetail: () => validateReportViewDetail,
        validateVideoDetails: () => validateVideoDetails
      });
      function isActionView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionView";
      }
      function validateActionView(v) {
        return lexicons.validate("com.atproto.admin.defs#actionView", v);
      }
      function isActionViewDetail(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionViewDetail";
      }
      function validateActionViewDetail(v) {
        return lexicons.validate("com.atproto.admin.defs#actionViewDetail", v);
      }
      function isActionViewCurrent(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionViewCurrent";
      }
      function validateActionViewCurrent(v) {
        return lexicons.validate("com.atproto.admin.defs#actionViewCurrent", v);
      }
      function isActionReversal(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#actionReversal";
      }
      function validateActionReversal(v) {
        return lexicons.validate("com.atproto.admin.defs#actionReversal", v);
      }
      var TAKEDOWN = "com.atproto.admin.defs#takedown";
      var FLAG = "com.atproto.admin.defs#flag";
      var ACKNOWLEDGE = "com.atproto.admin.defs#acknowledge";
      var ESCALATE = "com.atproto.admin.defs#escalate";
      function isReportView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#reportView";
      }
      function validateReportView(v) {
        return lexicons.validate("com.atproto.admin.defs#reportView", v);
      }
      function isReportViewDetail(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#reportViewDetail";
      }
      function validateReportViewDetail(v) {
        return lexicons.validate("com.atproto.admin.defs#reportViewDetail", v);
      }
      function isRepoView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoView";
      }
      function validateRepoView(v) {
        return lexicons.validate("com.atproto.admin.defs#repoView", v);
      }
      function isRepoViewDetail(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoViewDetail";
      }
      function validateRepoViewDetail(v) {
        return lexicons.validate("com.atproto.admin.defs#repoViewDetail", v);
      }
      function isRepoViewNotFound(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoViewNotFound";
      }
      function validateRepoViewNotFound(v) {
        return lexicons.validate("com.atproto.admin.defs#repoViewNotFound", v);
      }
      function isRepoRef(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#repoRef";
      }
      function validateRepoRef(v) {
        return lexicons.validate("com.atproto.admin.defs#repoRef", v);
      }
      function isRecordView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordView";
      }
      function validateRecordView(v) {
        return lexicons.validate("com.atproto.admin.defs#recordView", v);
      }
      function isRecordViewDetail(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordViewDetail";
      }
      function validateRecordViewDetail(v) {
        return lexicons.validate("com.atproto.admin.defs#recordViewDetail", v);
      }
      function isRecordViewNotFound(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#recordViewNotFound";
      }
      function validateRecordViewNotFound(v) {
        return lexicons.validate("com.atproto.admin.defs#recordViewNotFound", v);
      }
      function isModeration(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#moderation";
      }
      function validateModeration(v) {
        return lexicons.validate("com.atproto.admin.defs#moderation", v);
      }
      function isModerationDetail(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#moderationDetail";
      }
      function validateModerationDetail(v) {
        return lexicons.validate("com.atproto.admin.defs#moderationDetail", v);
      }
      function isBlobView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#blobView";
      }
      function validateBlobView(v) {
        return lexicons.validate("com.atproto.admin.defs#blobView", v);
      }
      function isImageDetails(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#imageDetails";
      }
      function validateImageDetails(v) {
        return lexicons.validate("com.atproto.admin.defs#imageDetails", v);
      }
      function isVideoDetails(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.admin.defs#videoDetails";
      }
      function validateVideoDetails(v) {
        return lexicons.validate("com.atproto.admin.defs#videoDetails", v);
      }
      var defs_exports2 = {};
      __export2(defs_exports2, {
        isLabel: () => isLabel,
        isSelfLabel: () => isSelfLabel,
        isSelfLabels: () => isSelfLabels,
        validateLabel: () => validateLabel,
        validateSelfLabel: () => validateSelfLabel,
        validateSelfLabels: () => validateSelfLabels
      });
      function isLabel(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#label";
      }
      function validateLabel(v) {
        return lexicons.validate("com.atproto.label.defs#label", v);
      }
      function isSelfLabels(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#selfLabels";
      }
      function validateSelfLabels(v) {
        return lexicons.validate("com.atproto.label.defs#selfLabels", v);
      }
      function isSelfLabel(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.label.defs#selfLabel";
      }
      function validateSelfLabel(v) {
        return lexicons.validate("com.atproto.label.defs#selfLabel", v);
      }
      var subscribeLabels_exports = {};
      __export2(subscribeLabels_exports, {
        isInfo: () => isInfo,
        isLabels: () => isLabels,
        validateInfo: () => validateInfo,
        validateLabels: () => validateLabels
      });
      function isLabels(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#labels";
      }
      function validateLabels(v) {
        return lexicons.validate("com.atproto.label.subscribeLabels#labels", v);
      }
      function isInfo(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#info";
      }
      function validateInfo(v) {
        return lexicons.validate("com.atproto.label.subscribeLabels#info", v);
      }
      var defs_exports3 = {};
      __export2(defs_exports3, {
        REASONMISLEADING: () => REASONMISLEADING,
        REASONOTHER: () => REASONOTHER,
        REASONRUDE: () => REASONRUDE,
        REASONSEXUAL: () => REASONSEXUAL,
        REASONSPAM: () => REASONSPAM,
        REASONVIOLATION: () => REASONVIOLATION
      });
      var REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
      var REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
      var REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
      var REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
      var REASONRUDE = "com.atproto.moderation.defs#reasonRude";
      var REASONOTHER = "com.atproto.moderation.defs#reasonOther";
      var strongRef_exports = {};
      __export2(strongRef_exports, {
        isMain: () => isMain,
        validateMain: () => validateMain
      });
      function isMain(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "com.atproto.repo.strongRef#main" || v.$type === "com.atproto.repo.strongRef");
      }
      function validateMain(v) {
        return lexicons.validate("com.atproto.repo.strongRef#main", v);
      }
      var defs_exports4 = {};
      __export2(defs_exports4, {
        isInviteCode: () => isInviteCode,
        isInviteCodeUse: () => isInviteCodeUse,
        validateInviteCode: () => validateInviteCode,
        validateInviteCodeUse: () => validateInviteCodeUse
      });
      function isInviteCode(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.defs#inviteCode";
      }
      function validateInviteCode(v) {
        return lexicons.validate("com.atproto.server.defs#inviteCode", v);
      }
      function isInviteCodeUse(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.server.defs#inviteCodeUse";
      }
      function validateInviteCodeUse(v) {
        return lexicons.validate("com.atproto.server.defs#inviteCodeUse", v);
      }
      var subscribeRepos_exports = {};
      __export2(subscribeRepos_exports, {
        isCommit: () => isCommit,
        isHandle: () => isHandle,
        isInfo: () => isInfo2,
        isMigrate: () => isMigrate,
        isRepoOp: () => isRepoOp,
        isTombstone: () => isTombstone,
        validateCommit: () => validateCommit,
        validateHandle: () => validateHandle,
        validateInfo: () => validateInfo2,
        validateMigrate: () => validateMigrate,
        validateRepoOp: () => validateRepoOp,
        validateTombstone: () => validateTombstone
      });
      function isCommit(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#commit";
      }
      function validateCommit(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#commit", v);
      }
      function isHandle(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#handle";
      }
      function validateHandle(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#handle", v);
      }
      function isMigrate(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#migrate";
      }
      function validateMigrate(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#migrate", v);
      }
      function isTombstone(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#tombstone";
      }
      function validateTombstone(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", v);
      }
      function isInfo2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#info";
      }
      function validateInfo2(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#info", v);
      }
      function isRepoOp(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#repoOp";
      }
      function validateRepoOp(v) {
        return lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", v);
      }
      var defs_exports5 = {};
      __export2(defs_exports5, {
        isAdultContentPref: () => isAdultContentPref,
        isContentLabelPref: () => isContentLabelPref,
        isFeedViewPref: () => isFeedViewPref,
        isPersonalDetailsPref: () => isPersonalDetailsPref,
        isProfileView: () => isProfileView,
        isProfileViewBasic: () => isProfileViewBasic,
        isProfileViewDetailed: () => isProfileViewDetailed,
        isSavedFeedsPref: () => isSavedFeedsPref,
        isThreadViewPref: () => isThreadViewPref,
        isViewerState: () => isViewerState,
        validateAdultContentPref: () => validateAdultContentPref,
        validateContentLabelPref: () => validateContentLabelPref,
        validateFeedViewPref: () => validateFeedViewPref,
        validatePersonalDetailsPref: () => validatePersonalDetailsPref,
        validateProfileView: () => validateProfileView,
        validateProfileViewBasic: () => validateProfileViewBasic,
        validateProfileViewDetailed: () => validateProfileViewDetailed,
        validateSavedFeedsPref: () => validateSavedFeedsPref,
        validateThreadViewPref: () => validateThreadViewPref,
        validateViewerState: () => validateViewerState
      });
      function isProfileViewBasic(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewBasic";
      }
      function validateProfileViewBasic(v) {
        return lexicons.validate("app.bsky.actor.defs#profileViewBasic", v);
      }
      function isProfileView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileView";
      }
      function validateProfileView(v) {
        return lexicons.validate("app.bsky.actor.defs#profileView", v);
      }
      function isProfileViewDetailed(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewDetailed";
      }
      function validateProfileViewDetailed(v) {
        return lexicons.validate("app.bsky.actor.defs#profileViewDetailed", v);
      }
      function isViewerState(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#viewerState";
      }
      function validateViewerState(v) {
        return lexicons.validate("app.bsky.actor.defs#viewerState", v);
      }
      function isAdultContentPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#adultContentPref";
      }
      function validateAdultContentPref(v) {
        return lexicons.validate("app.bsky.actor.defs#adultContentPref", v);
      }
      function isContentLabelPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#contentLabelPref";
      }
      function validateContentLabelPref(v) {
        return lexicons.validate("app.bsky.actor.defs#contentLabelPref", v);
      }
      function isSavedFeedsPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#savedFeedsPref";
      }
      function validateSavedFeedsPref(v) {
        return lexicons.validate("app.bsky.actor.defs#savedFeedsPref", v);
      }
      function isPersonalDetailsPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#personalDetailsPref";
      }
      function validatePersonalDetailsPref(v) {
        return lexicons.validate("app.bsky.actor.defs#personalDetailsPref", v);
      }
      function isFeedViewPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#feedViewPref";
      }
      function validateFeedViewPref(v) {
        return lexicons.validate("app.bsky.actor.defs#feedViewPref", v);
      }
      function isThreadViewPref(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.actor.defs#threadViewPref";
      }
      function validateThreadViewPref(v) {
        return lexicons.validate("app.bsky.actor.defs#threadViewPref", v);
      }
      var profile_exports = {};
      __export2(profile_exports, {
        isRecord: () => isRecord2,
        validateRecord: () => validateRecord2
      });
      function isRecord2(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.actor.profile#main" || v.$type === "app.bsky.actor.profile");
      }
      function validateRecord2(v) {
        return lexicons.validate("app.bsky.actor.profile#main", v);
      }
      var external_exports = {};
      __export2(external_exports, {
        isExternal: () => isExternal,
        isMain: () => isMain2,
        isView: () => isView,
        isViewExternal: () => isViewExternal,
        validateExternal: () => validateExternal,
        validateMain: () => validateMain2,
        validateView: () => validateView,
        validateViewExternal: () => validateViewExternal
      });
      function isMain2(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.embed.external#main" || v.$type === "app.bsky.embed.external");
      }
      function validateMain2(v) {
        return lexicons.validate("app.bsky.embed.external#main", v);
      }
      function isExternal(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#external";
      }
      function validateExternal(v) {
        return lexicons.validate("app.bsky.embed.external#external", v);
      }
      function isView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#view";
      }
      function validateView(v) {
        return lexicons.validate("app.bsky.embed.external#view", v);
      }
      function isViewExternal(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.external#viewExternal";
      }
      function validateViewExternal(v) {
        return lexicons.validate("app.bsky.embed.external#viewExternal", v);
      }
      var images_exports = {};
      __export2(images_exports, {
        isAspectRatio: () => isAspectRatio,
        isImage: () => isImage,
        isMain: () => isMain3,
        isView: () => isView2,
        isViewImage: () => isViewImage,
        validateAspectRatio: () => validateAspectRatio,
        validateImage: () => validateImage,
        validateMain: () => validateMain3,
        validateView: () => validateView2,
        validateViewImage: () => validateViewImage
      });
      function isMain3(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.embed.images#main" || v.$type === "app.bsky.embed.images");
      }
      function validateMain3(v) {
        return lexicons.validate("app.bsky.embed.images#main", v);
      }
      function isImage(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#image";
      }
      function validateImage(v) {
        return lexicons.validate("app.bsky.embed.images#image", v);
      }
      function isAspectRatio(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#aspectRatio";
      }
      function validateAspectRatio(v) {
        return lexicons.validate("app.bsky.embed.images#aspectRatio", v);
      }
      function isView2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#view";
      }
      function validateView2(v) {
        return lexicons.validate("app.bsky.embed.images#view", v);
      }
      function isViewImage(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.images#viewImage";
      }
      function validateViewImage(v) {
        return lexicons.validate("app.bsky.embed.images#viewImage", v);
      }
      var record_exports = {};
      __export2(record_exports, {
        isMain: () => isMain4,
        isView: () => isView3,
        isViewBlocked: () => isViewBlocked,
        isViewNotFound: () => isViewNotFound,
        isViewRecord: () => isViewRecord,
        validateMain: () => validateMain4,
        validateView: () => validateView3,
        validateViewBlocked: () => validateViewBlocked,
        validateViewNotFound: () => validateViewNotFound,
        validateViewRecord: () => validateViewRecord
      });
      function isMain4(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.embed.record#main" || v.$type === "app.bsky.embed.record");
      }
      function validateMain4(v) {
        return lexicons.validate("app.bsky.embed.record#main", v);
      }
      function isView3(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#view";
      }
      function validateView3(v) {
        return lexicons.validate("app.bsky.embed.record#view", v);
      }
      function isViewRecord(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewRecord";
      }
      function validateViewRecord(v) {
        return lexicons.validate("app.bsky.embed.record#viewRecord", v);
      }
      function isViewNotFound(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewNotFound";
      }
      function validateViewNotFound(v) {
        return lexicons.validate("app.bsky.embed.record#viewNotFound", v);
      }
      function isViewBlocked(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.record#viewBlocked";
      }
      function validateViewBlocked(v) {
        return lexicons.validate("app.bsky.embed.record#viewBlocked", v);
      }
      var recordWithMedia_exports = {};
      __export2(recordWithMedia_exports, {
        isMain: () => isMain5,
        isView: () => isView4,
        validateMain: () => validateMain5,
        validateView: () => validateView4
      });
      function isMain5(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.embed.recordWithMedia#main" || v.$type === "app.bsky.embed.recordWithMedia");
      }
      function validateMain5(v) {
        return lexicons.validate("app.bsky.embed.recordWithMedia#main", v);
      }
      function isView4(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.embed.recordWithMedia#view";
      }
      function validateView4(v) {
        return lexicons.validate("app.bsky.embed.recordWithMedia#view", v);
      }
      var defs_exports6 = {};
      __export2(defs_exports6, {
        isBlockedAuthor: () => isBlockedAuthor,
        isBlockedPost: () => isBlockedPost,
        isFeedViewPost: () => isFeedViewPost,
        isGeneratorView: () => isGeneratorView,
        isGeneratorViewerState: () => isGeneratorViewerState,
        isNotFoundPost: () => isNotFoundPost,
        isPostView: () => isPostView,
        isReasonRepost: () => isReasonRepost,
        isReplyRef: () => isReplyRef,
        isSkeletonFeedPost: () => isSkeletonFeedPost,
        isSkeletonReasonRepost: () => isSkeletonReasonRepost,
        isThreadViewPost: () => isThreadViewPost,
        isThreadgateView: () => isThreadgateView,
        isViewerState: () => isViewerState2,
        isViewerThreadState: () => isViewerThreadState,
        validateBlockedAuthor: () => validateBlockedAuthor,
        validateBlockedPost: () => validateBlockedPost,
        validateFeedViewPost: () => validateFeedViewPost,
        validateGeneratorView: () => validateGeneratorView,
        validateGeneratorViewerState: () => validateGeneratorViewerState,
        validateNotFoundPost: () => validateNotFoundPost,
        validatePostView: () => validatePostView,
        validateReasonRepost: () => validateReasonRepost,
        validateReplyRef: () => validateReplyRef,
        validateSkeletonFeedPost: () => validateSkeletonFeedPost,
        validateSkeletonReasonRepost: () => validateSkeletonReasonRepost,
        validateThreadViewPost: () => validateThreadViewPost,
        validateThreadgateView: () => validateThreadgateView,
        validateViewerState: () => validateViewerState2,
        validateViewerThreadState: () => validateViewerThreadState
      });
      function isPostView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#postView";
      }
      function validatePostView(v) {
        return lexicons.validate("app.bsky.feed.defs#postView", v);
      }
      function isViewerState2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#viewerState";
      }
      function validateViewerState2(v) {
        return lexicons.validate("app.bsky.feed.defs#viewerState", v);
      }
      function isFeedViewPost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#feedViewPost";
      }
      function validateFeedViewPost(v) {
        return lexicons.validate("app.bsky.feed.defs#feedViewPost", v);
      }
      function isReplyRef(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#replyRef";
      }
      function validateReplyRef(v) {
        return lexicons.validate("app.bsky.feed.defs#replyRef", v);
      }
      function isReasonRepost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#reasonRepost";
      }
      function validateReasonRepost(v) {
        return lexicons.validate("app.bsky.feed.defs#reasonRepost", v);
      }
      function isThreadViewPost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#threadViewPost";
      }
      function validateThreadViewPost(v) {
        return lexicons.validate("app.bsky.feed.defs#threadViewPost", v);
      }
      function isNotFoundPost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#notFoundPost";
      }
      function validateNotFoundPost(v) {
        return lexicons.validate("app.bsky.feed.defs#notFoundPost", v);
      }
      function isBlockedPost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#blockedPost";
      }
      function validateBlockedPost(v) {
        return lexicons.validate("app.bsky.feed.defs#blockedPost", v);
      }
      function isBlockedAuthor(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#blockedAuthor";
      }
      function validateBlockedAuthor(v) {
        return lexicons.validate("app.bsky.feed.defs#blockedAuthor", v);
      }
      function isViewerThreadState(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#viewerThreadState";
      }
      function validateViewerThreadState(v) {
        return lexicons.validate("app.bsky.feed.defs#viewerThreadState", v);
      }
      function isGeneratorView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#generatorView";
      }
      function validateGeneratorView(v) {
        return lexicons.validate("app.bsky.feed.defs#generatorView", v);
      }
      function isGeneratorViewerState(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#generatorViewerState";
      }
      function validateGeneratorViewerState(v) {
        return lexicons.validate("app.bsky.feed.defs#generatorViewerState", v);
      }
      function isSkeletonFeedPost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonFeedPost";
      }
      function validateSkeletonFeedPost(v) {
        return lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", v);
      }
      function isSkeletonReasonRepost(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonReasonRepost";
      }
      function validateSkeletonReasonRepost(v) {
        return lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", v);
      }
      function isThreadgateView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.defs#threadgateView";
      }
      function validateThreadgateView(v) {
        return lexicons.validate("app.bsky.feed.defs#threadgateView", v);
      }
      var generator_exports = {};
      __export2(generator_exports, {
        isRecord: () => isRecord3,
        validateRecord: () => validateRecord3
      });
      function isRecord3(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.feed.generator#main" || v.$type === "app.bsky.feed.generator");
      }
      function validateRecord3(v) {
        return lexicons.validate("app.bsky.feed.generator#main", v);
      }
      var like_exports = {};
      __export2(like_exports, {
        isRecord: () => isRecord4,
        validateRecord: () => validateRecord4
      });
      function isRecord4(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.feed.like#main" || v.$type === "app.bsky.feed.like");
      }
      function validateRecord4(v) {
        return lexicons.validate("app.bsky.feed.like#main", v);
      }
      var post_exports = {};
      __export2(post_exports, {
        isEntity: () => isEntity,
        isRecord: () => isRecord5,
        isReplyRef: () => isReplyRef2,
        isTextSlice: () => isTextSlice,
        validateEntity: () => validateEntity,
        validateRecord: () => validateRecord5,
        validateReplyRef: () => validateReplyRef2,
        validateTextSlice: () => validateTextSlice
      });
      function isRecord5(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.feed.post#main" || v.$type === "app.bsky.feed.post");
      }
      function validateRecord5(v) {
        return lexicons.validate("app.bsky.feed.post#main", v);
      }
      function isReplyRef2(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#replyRef";
      }
      function validateReplyRef2(v) {
        return lexicons.validate("app.bsky.feed.post#replyRef", v);
      }
      function isEntity(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#entity";
      }
      function validateEntity(v) {
        return lexicons.validate("app.bsky.feed.post#entity", v);
      }
      function isTextSlice(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.post#textSlice";
      }
      function validateTextSlice(v) {
        return lexicons.validate("app.bsky.feed.post#textSlice", v);
      }
      var repost_exports = {};
      __export2(repost_exports, {
        isRecord: () => isRecord6,
        validateRecord: () => validateRecord6
      });
      function isRecord6(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.feed.repost#main" || v.$type === "app.bsky.feed.repost");
      }
      function validateRecord6(v) {
        return lexicons.validate("app.bsky.feed.repost#main", v);
      }
      var threadgate_exports = {};
      __export2(threadgate_exports, {
        isFollowingRule: () => isFollowingRule,
        isListRule: () => isListRule,
        isMentionRule: () => isMentionRule,
        isRecord: () => isRecord7,
        validateFollowingRule: () => validateFollowingRule,
        validateListRule: () => validateListRule,
        validateMentionRule: () => validateMentionRule,
        validateRecord: () => validateRecord7
      });
      function isRecord7(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.feed.threadgate#main" || v.$type === "app.bsky.feed.threadgate");
      }
      function validateRecord7(v) {
        return lexicons.validate("app.bsky.feed.threadgate#main", v);
      }
      function isMentionRule(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.threadgate#mentionRule";
      }
      function validateMentionRule(v) {
        return lexicons.validate("app.bsky.feed.threadgate#mentionRule", v);
      }
      function isFollowingRule(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.threadgate#followingRule";
      }
      function validateFollowingRule(v) {
        return lexicons.validate("app.bsky.feed.threadgate#followingRule", v);
      }
      function isListRule(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.feed.threadgate#listRule";
      }
      function validateListRule(v) {
        return lexicons.validate("app.bsky.feed.threadgate#listRule", v);
      }
      var block_exports = {};
      __export2(block_exports, {
        isRecord: () => isRecord8,
        validateRecord: () => validateRecord8
      });
      function isRecord8(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.graph.block#main" || v.$type === "app.bsky.graph.block");
      }
      function validateRecord8(v) {
        return lexicons.validate("app.bsky.graph.block#main", v);
      }
      var defs_exports7 = {};
      __export2(defs_exports7, {
        CURATELIST: () => CURATELIST,
        MODLIST: () => MODLIST,
        isListItemView: () => isListItemView,
        isListView: () => isListView,
        isListViewBasic: () => isListViewBasic,
        isListViewerState: () => isListViewerState,
        validateListItemView: () => validateListItemView,
        validateListView: () => validateListView,
        validateListViewBasic: () => validateListViewBasic,
        validateListViewerState: () => validateListViewerState
      });
      function isListViewBasic(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listViewBasic";
      }
      function validateListViewBasic(v) {
        return lexicons.validate("app.bsky.graph.defs#listViewBasic", v);
      }
      function isListView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listView";
      }
      function validateListView(v) {
        return lexicons.validate("app.bsky.graph.defs#listView", v);
      }
      function isListItemView(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listItemView";
      }
      function validateListItemView(v) {
        return lexicons.validate("app.bsky.graph.defs#listItemView", v);
      }
      var MODLIST = "app.bsky.graph.defs#modlist";
      var CURATELIST = "app.bsky.graph.defs#curatelist";
      function isListViewerState(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.graph.defs#listViewerState";
      }
      function validateListViewerState(v) {
        return lexicons.validate("app.bsky.graph.defs#listViewerState", v);
      }
      var follow_exports = {};
      __export2(follow_exports, {
        isRecord: () => isRecord9,
        validateRecord: () => validateRecord9
      });
      function isRecord9(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.graph.follow#main" || v.$type === "app.bsky.graph.follow");
      }
      function validateRecord9(v) {
        return lexicons.validate("app.bsky.graph.follow#main", v);
      }
      var list_exports = {};
      __export2(list_exports, {
        isRecord: () => isRecord10,
        validateRecord: () => validateRecord10
      });
      function isRecord10(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.graph.list#main" || v.$type === "app.bsky.graph.list");
      }
      function validateRecord10(v) {
        return lexicons.validate("app.bsky.graph.list#main", v);
      }
      var listblock_exports = {};
      __export2(listblock_exports, {
        isRecord: () => isRecord11,
        validateRecord: () => validateRecord11
      });
      function isRecord11(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.graph.listblock#main" || v.$type === "app.bsky.graph.listblock");
      }
      function validateRecord11(v) {
        return lexicons.validate("app.bsky.graph.listblock#main", v);
      }
      var listitem_exports = {};
      __export2(listitem_exports, {
        isRecord: () => isRecord12,
        validateRecord: () => validateRecord12
      });
      function isRecord12(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.graph.listitem#main" || v.$type === "app.bsky.graph.listitem");
      }
      function validateRecord12(v) {
        return lexicons.validate("app.bsky.graph.listitem#main", v);
      }
      var facet_exports = {};
      __export2(facet_exports, {
        isByteSlice: () => isByteSlice,
        isLink: () => isLink,
        isMain: () => isMain6,
        isMention: () => isMention,
        validateByteSlice: () => validateByteSlice,
        validateLink: () => validateLink,
        validateMain: () => validateMain6,
        validateMention: () => validateMention
      });
      function isMain6(v) {
        return isObj2(v) && hasProp2(v, "$type") && (v.$type === "app.bsky.richtext.facet#main" || v.$type === "app.bsky.richtext.facet");
      }
      function validateMain6(v) {
        return lexicons.validate("app.bsky.richtext.facet#main", v);
      }
      function isMention(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#mention";
      }
      function validateMention(v) {
        return lexicons.validate("app.bsky.richtext.facet#mention", v);
      }
      function isLink(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#link";
      }
      function validateLink(v) {
        return lexicons.validate("app.bsky.richtext.facet#link", v);
      }
      function isByteSlice(v) {
        return isObj2(v) && hasProp2(v, "$type") && v.$type === "app.bsky.richtext.facet#byteSlice";
      }
      function validateByteSlice(v) {
        return lexicons.validate("app.bsky.richtext.facet#byteSlice", v);
      }
      var COM_ATPROTO_ADMIN = {
        DefsTakedown: "com.atproto.admin.defs#takedown",
        DefsFlag: "com.atproto.admin.defs#flag",
        DefsAcknowledge: "com.atproto.admin.defs#acknowledge",
        DefsEscalate: "com.atproto.admin.defs#escalate"
      };
      var COM_ATPROTO_MODERATION = {
        DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
        DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
        DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
        DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
        DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
        DefsReasonOther: "com.atproto.moderation.defs#reasonOther"
      };
      var APP_BSKY_GRAPH = {
        DefsModlist: "app.bsky.graph.defs#modlist",
        DefsCuratelist: "app.bsky.graph.defs#curatelist"
      };
      var AtpBaseClient = class {
        constructor() {
          this.xrpc = new Client();
          this.xrpc.addLexicons(schemas);
        }
        service(serviceUri) {
          return new AtpServiceClient(this, this.xrpc.service(serviceUri));
        }
      };
      var AtpServiceClient = class {
        constructor(baseClient, xrpcService) {
          this._baseClient = baseClient;
          this.xrpc = xrpcService;
          this.com = new ComNS(this);
          this.app = new AppNS(this);
        }
        setHeader(key, value) {
          this.xrpc.setHeader(key, value);
        }
      };
      var ComNS = class {
        constructor(service) {
          this._service = service;
          this.atproto = new AtprotoNS(service);
        }
      };
      var AtprotoNS = class {
        constructor(service) {
          this._service = service;
          this.admin = new AdminNS(service);
          this.identity = new IdentityNS(service);
          this.label = new LabelNS(service);
          this.moderation = new ModerationNS(service);
          this.repo = new RepoNS(service);
          this.server = new ServerNS(service);
          this.sync = new SyncNS(service);
        }
      };
      var AdminNS = class {
        constructor(service) {
          this._service = service;
        }
        disableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableAccountInvites", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr(e);
          });
        }
        disableInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableInviteCodes", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr2(e);
          });
        }
        enableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.enableAccountInvites", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr3(e);
          });
        }
        getInviteCodes(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getInviteCodes", params2, void 0, opts).catch((e) => {
            throw toKnownErr4(e);
          });
        }
        getModerationAction(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getModerationAction", params2, void 0, opts).catch((e) => {
            throw toKnownErr5(e);
          });
        }
        getModerationActions(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getModerationActions", params2, void 0, opts).catch((e) => {
            throw toKnownErr6(e);
          });
        }
        getModerationReport(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getModerationReport", params2, void 0, opts).catch((e) => {
            throw toKnownErr7(e);
          });
        }
        getModerationReports(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getModerationReports", params2, void 0, opts).catch((e) => {
            throw toKnownErr8(e);
          });
        }
        getRecord(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getRecord", params2, void 0, opts).catch((e) => {
            throw toKnownErr9(e);
          });
        }
        getRepo(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.getRepo", params2, void 0, opts).catch((e) => {
            throw toKnownErr10(e);
          });
        }
        resolveModerationReports(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.resolveModerationReports", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr11(e);
          });
        }
        reverseModerationAction(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.reverseModerationAction", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr12(e);
          });
        }
        searchRepos(params2, opts) {
          return this._service.xrpc.call("com.atproto.admin.searchRepos", params2, void 0, opts).catch((e) => {
            throw toKnownErr13(e);
          });
        }
        sendEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.sendEmail", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr14(e);
          });
        }
        takeModerationAction(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.takeModerationAction", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr15(e);
          });
        }
        updateAccountEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountEmail", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr16(e);
          });
        }
        updateAccountHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountHandle", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr17(e);
          });
        }
      };
      var IdentityNS = class {
        constructor(service) {
          this._service = service;
        }
        resolveHandle(params2, opts) {
          return this._service.xrpc.call("com.atproto.identity.resolveHandle", params2, void 0, opts).catch((e) => {
            throw toKnownErr18(e);
          });
        }
        updateHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.updateHandle", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr19(e);
          });
        }
      };
      var LabelNS = class {
        constructor(service) {
          this._service = service;
        }
        queryLabels(params2, opts) {
          return this._service.xrpc.call("com.atproto.label.queryLabels", params2, void 0, opts).catch((e) => {
            throw toKnownErr20(e);
          });
        }
      };
      var ModerationNS = class {
        constructor(service) {
          this._service = service;
        }
        createReport(data, opts) {
          return this._service.xrpc.call("com.atproto.moderation.createReport", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr21(e);
          });
        }
      };
      var RepoNS = class {
        constructor(service) {
          this._service = service;
        }
        applyWrites(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.applyWrites", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr22(e);
          });
        }
        createRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.createRecord", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr23(e);
          });
        }
        deleteRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.deleteRecord", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr24(e);
          });
        }
        describeRepo(params2, opts) {
          return this._service.xrpc.call("com.atproto.repo.describeRepo", params2, void 0, opts).catch((e) => {
            throw toKnownErr25(e);
          });
        }
        getRecord(params2, opts) {
          return this._service.xrpc.call("com.atproto.repo.getRecord", params2, void 0, opts).catch((e) => {
            throw toKnownErr26(e);
          });
        }
        listRecords(params2, opts) {
          return this._service.xrpc.call("com.atproto.repo.listRecords", params2, void 0, opts).catch((e) => {
            throw toKnownErr27(e);
          });
        }
        putRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.putRecord", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr28(e);
          });
        }
        uploadBlob(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.uploadBlob", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr29(e);
          });
        }
      };
      var ServerNS = class {
        constructor(service) {
          this._service = service;
        }
        createAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAccount", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr30(e);
          });
        }
        createAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAppPassword", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr31(e);
          });
        }
        createInviteCode(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCode", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr32(e);
          });
        }
        createInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCodes", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr33(e);
          });
        }
        createSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createSession", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr34(e);
          });
        }
        deleteAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteAccount", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr35(e);
          });
        }
        deleteSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteSession", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr36(e);
          });
        }
        describeServer(params2, opts) {
          return this._service.xrpc.call("com.atproto.server.describeServer", params2, void 0, opts).catch((e) => {
            throw toKnownErr37(e);
          });
        }
        getAccountInviteCodes(params2, opts) {
          return this._service.xrpc.call("com.atproto.server.getAccountInviteCodes", params2, void 0, opts).catch((e) => {
            throw toKnownErr38(e);
          });
        }
        getSession(params2, opts) {
          return this._service.xrpc.call("com.atproto.server.getSession", params2, void 0, opts).catch((e) => {
            throw toKnownErr39(e);
          });
        }
        listAppPasswords(params2, opts) {
          return this._service.xrpc.call("com.atproto.server.listAppPasswords", params2, void 0, opts).catch((e) => {
            throw toKnownErr40(e);
          });
        }
        refreshSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.refreshSession", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr41(e);
          });
        }
        requestAccountDelete(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestAccountDelete", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr42(e);
          });
        }
        requestPasswordReset(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestPasswordReset", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr43(e);
          });
        }
        resetPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.resetPassword", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr44(e);
          });
        }
        revokeAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.revokeAppPassword", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr45(e);
          });
        }
      };
      var SyncNS = class {
        constructor(service) {
          this._service = service;
        }
        getBlob(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlob", params2, void 0, opts).catch((e) => {
            throw toKnownErr46(e);
          });
        }
        getBlocks(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlocks", params2, void 0, opts).catch((e) => {
            throw toKnownErr47(e);
          });
        }
        getCheckout(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getCheckout", params2, void 0, opts).catch((e) => {
            throw toKnownErr48(e);
          });
        }
        getHead(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getHead", params2, void 0, opts).catch((e) => {
            throw toKnownErr49(e);
          });
        }
        getLatestCommit(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getLatestCommit", params2, void 0, opts).catch((e) => {
            throw toKnownErr50(e);
          });
        }
        getRecord(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRecord", params2, void 0, opts).catch((e) => {
            throw toKnownErr51(e);
          });
        }
        getRepo(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRepo", params2, void 0, opts).catch((e) => {
            throw toKnownErr52(e);
          });
        }
        listBlobs(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.listBlobs", params2, void 0, opts).catch((e) => {
            throw toKnownErr53(e);
          });
        }
        listRepos(params2, opts) {
          return this._service.xrpc.call("com.atproto.sync.listRepos", params2, void 0, opts).catch((e) => {
            throw toKnownErr54(e);
          });
        }
        notifyOfUpdate(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.notifyOfUpdate", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr55(e);
          });
        }
        requestCrawl(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.requestCrawl", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr56(e);
          });
        }
      };
      var AppNS = class {
        constructor(service) {
          this._service = service;
          this.bsky = new BskyNS(service);
        }
      };
      var BskyNS = class {
        constructor(service) {
          this._service = service;
          this.actor = new ActorNS(service);
          this.embed = new EmbedNS(service);
          this.feed = new FeedNS(service);
          this.graph = new GraphNS(service);
          this.notification = new NotificationNS(service);
          this.richtext = new RichtextNS(service);
          this.unspecced = new UnspeccedNS(service);
        }
      };
      var ActorNS = class {
        constructor(service) {
          this._service = service;
          this.profile = new ProfileRecord(service);
        }
        getPreferences(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.getPreferences", params2, void 0, opts).catch((e) => {
            throw toKnownErr57(e);
          });
        }
        getProfile(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfile", params2, void 0, opts).catch((e) => {
            throw toKnownErr58(e);
          });
        }
        getProfiles(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfiles", params2, void 0, opts).catch((e) => {
            throw toKnownErr59(e);
          });
        }
        getSuggestions(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.getSuggestions", params2, void 0, opts).catch((e) => {
            throw toKnownErr60(e);
          });
        }
        putPreferences(data, opts) {
          return this._service.xrpc.call("app.bsky.actor.putPreferences", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr61(e);
          });
        }
        searchActors(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActors", params2, void 0, opts).catch((e) => {
            throw toKnownErr62(e);
          });
        }
        searchActorsTypeahead(params2, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActorsTypeahead", params2, void 0, opts).catch((e) => {
            throw toKnownErr63(e);
          });
        }
      };
      var ProfileRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.actor.profile",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.actor.profile",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.actor.profile";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.actor.profile", rkey: "self", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.profile", ...params2 }, { headers });
        }
      };
      var EmbedNS = class {
        constructor(service) {
          this._service = service;
        }
      };
      var FeedNS = class {
        constructor(service) {
          this._service = service;
          this.generator = new GeneratorRecord(service);
          this.like = new LikeRecord(service);
          this.post = new PostRecord(service);
          this.repost = new RepostRecord(service);
          this.threadgate = new ThreadgateRecord(service);
        }
        describeFeedGenerator(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.describeFeedGenerator", params2, void 0, opts).catch((e) => {
            throw toKnownErr64(e);
          });
        }
        getActorFeeds(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorFeeds", params2, void 0, opts).catch((e) => {
            throw toKnownErr65(e);
          });
        }
        getActorLikes(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorLikes", params2, void 0, opts).catch((e) => {
            throw toKnownErr66(e);
          });
        }
        getAuthorFeed(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getAuthorFeed", params2, void 0, opts).catch((e) => {
            throw toKnownErr67(e);
          });
        }
        getFeed(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeed", params2, void 0, opts).catch((e) => {
            throw toKnownErr68(e);
          });
        }
        getFeedGenerator(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerator", params2, void 0, opts).catch((e) => {
            throw toKnownErr69(e);
          });
        }
        getFeedGenerators(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerators", params2, void 0, opts).catch((e) => {
            throw toKnownErr70(e);
          });
        }
        getFeedSkeleton(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedSkeleton", params2, void 0, opts).catch((e) => {
            throw toKnownErr71(e);
          });
        }
        getLikes(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getLikes", params2, void 0, opts).catch((e) => {
            throw toKnownErr72(e);
          });
        }
        getListFeed(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getListFeed", params2, void 0, opts).catch((e) => {
            throw toKnownErr73(e);
          });
        }
        getPostThread(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPostThread", params2, void 0, opts).catch((e) => {
            throw toKnownErr74(e);
          });
        }
        getPosts(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPosts", params2, void 0, opts).catch((e) => {
            throw toKnownErr75(e);
          });
        }
        getRepostedBy(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getRepostedBy", params2, void 0, opts).catch((e) => {
            throw toKnownErr76(e);
          });
        }
        getSuggestedFeeds(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getSuggestedFeeds", params2, void 0, opts).catch((e) => {
            throw toKnownErr77(e);
          });
        }
        getTimeline(params2, opts) {
          return this._service.xrpc.call("app.bsky.feed.getTimeline", params2, void 0, opts).catch((e) => {
            throw toKnownErr78(e);
          });
        }
      };
      var GeneratorRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.generator",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.generator",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.feed.generator";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.generator", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.generator", ...params2 }, { headers });
        }
      };
      var LikeRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.like",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.like",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.feed.like";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.like", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.like", ...params2 }, { headers });
        }
      };
      var PostRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.post",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.post",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.feed.post";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.post", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.post", ...params2 }, { headers });
        }
      };
      var RepostRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.repost",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.repost",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.feed.repost";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.repost", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.repost", ...params2 }, { headers });
        }
      };
      var ThreadgateRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.feed.threadgate",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.feed.threadgate",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.feed.threadgate";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.threadgate", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.threadgate", ...params2 }, { headers });
        }
      };
      var GraphNS = class {
        constructor(service) {
          this._service = service;
          this.block = new BlockRecord(service);
          this.follow = new FollowRecord(service);
          this.list = new ListRecord(service);
          this.listblock = new ListblockRecord(service);
          this.listitem = new ListitemRecord(service);
        }
        getBlocks(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getBlocks", params2, void 0, opts).catch((e) => {
            throw toKnownErr79(e);
          });
        }
        getFollowers(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollowers", params2, void 0, opts).catch((e) => {
            throw toKnownErr80(e);
          });
        }
        getFollows(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollows", params2, void 0, opts).catch((e) => {
            throw toKnownErr81(e);
          });
        }
        getList(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getList", params2, void 0, opts).catch((e) => {
            throw toKnownErr82(e);
          });
        }
        getListBlocks(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListBlocks", params2, void 0, opts).catch((e) => {
            throw toKnownErr83(e);
          });
        }
        getListMutes(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListMutes", params2, void 0, opts).catch((e) => {
            throw toKnownErr84(e);
          });
        }
        getLists(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getLists", params2, void 0, opts).catch((e) => {
            throw toKnownErr85(e);
          });
        }
        getMutes(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getMutes", params2, void 0, opts).catch((e) => {
            throw toKnownErr86(e);
          });
        }
        getSuggestedFollowsByActor(params2, opts) {
          return this._service.xrpc.call("app.bsky.graph.getSuggestedFollowsByActor", params2, void 0, opts).catch((e) => {
            throw toKnownErr87(e);
          });
        }
        muteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActor", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr88(e);
          });
        }
        muteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActorList", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr89(e);
          });
        }
        unmuteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActor", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr90(e);
          });
        }
        unmuteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActorList", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr91(e);
          });
        }
      };
      var BlockRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.block",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.block",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.graph.block";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.block", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.block", ...params2 }, { headers });
        }
      };
      var FollowRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.follow",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.follow",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.graph.follow";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.follow", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.follow", ...params2 }, { headers });
        }
      };
      var ListRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.list",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.list",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.graph.list";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.list", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.list", ...params2 }, { headers });
        }
      };
      var ListblockRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.listblock",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.listblock",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.graph.listblock";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listblock", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listblock", ...params2 }, { headers });
        }
      };
      var ListitemRecord = class {
        constructor(service) {
          this._service = service;
        }
        async list(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.listRecords", {
            collection: "app.bsky.graph.listitem",
            ...params2
          });
          return res.data;
        }
        async get(params2) {
          const res = await this._service.xrpc.call("com.atproto.repo.getRecord", {
            collection: "app.bsky.graph.listitem",
            ...params2
          });
          return res.data;
        }
        async create(params2, record, headers) {
          record.$type = "app.bsky.graph.listitem";
          const res = await this._service.xrpc.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listitem", ...params2, record }, { encoding: "application/json", headers });
          return res.data;
        }
        async delete(params2, headers) {
          await this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listitem", ...params2 }, { headers });
        }
      };
      var NotificationNS = class {
        constructor(service) {
          this._service = service;
        }
        getUnreadCount(params2, opts) {
          return this._service.xrpc.call("app.bsky.notification.getUnreadCount", params2, void 0, opts).catch((e) => {
            throw toKnownErr92(e);
          });
        }
        listNotifications(params2, opts) {
          return this._service.xrpc.call("app.bsky.notification.listNotifications", params2, void 0, opts).catch((e) => {
            throw toKnownErr93(e);
          });
        }
        registerPush(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.registerPush", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr94(e);
          });
        }
        updateSeen(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.updateSeen", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr95(e);
          });
        }
      };
      var RichtextNS = class {
        constructor(service) {
          this._service = service;
        }
      };
      var UnspeccedNS = class {
        constructor(service) {
          this._service = service;
        }
        applyLabels(data, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.applyLabels", opts?.qp, data, opts).catch((e) => {
            throw toKnownErr96(e);
          });
        }
        getPopular(params2, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getPopular", params2, void 0, opts).catch((e) => {
            throw toKnownErr97(e);
          });
        }
        getPopularFeedGenerators(params2, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getPopularFeedGenerators", params2, void 0, opts).catch((e) => {
            throw toKnownErr98(e);
          });
        }
        getTimelineSkeleton(params2, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getTimelineSkeleton", params2, void 0, opts).catch((e) => {
            throw toKnownErr99(e);
          });
        }
      };
      var REFRESH_SESSION = "com.atproto.server.refreshSession";
      var _AtpAgent = class {
        constructor(opts) {
          this.uploadBlob = (data, opts2) => this.api.com.atproto.repo.uploadBlob(data, opts2);
          this.resolveHandle = (params2, opts2) => this.api.com.atproto.identity.resolveHandle(params2, opts2);
          this.updateHandle = (data, opts2) => this.api.com.atproto.identity.updateHandle(data, opts2);
          this.createModerationReport = (data, opts2) => this.api.com.atproto.moderation.createReport(data, opts2);
          this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);
          this._persistSession = opts.persistSession;
          this._baseClient = new AtpBaseClient();
          this._baseClient.xrpc.fetch = this._fetch.bind(this);
          this.api = this._baseClient.service(opts.service);
        }
        get com() {
          return this.api.com;
        }
        static configure(opts) {
          _AtpAgent.fetch = opts.fetch;
        }
        get hasSession() {
          return !!this.session;
        }
        setPersistSessionHandler(handler) {
          this._persistSession = handler;
        }
        async createAccount(opts) {
          try {
            const res = await this.api.com.atproto.server.createAccount({
              handle: opts.handle,
              password: opts.password,
              email: opts.email,
              inviteCode: opts.inviteCode
            });
            this.session = {
              accessJwt: res.data.accessJwt,
              refreshJwt: res.data.refreshJwt,
              handle: res.data.handle,
              did: res.data.did,
              email: opts.email
            };
            return res;
          } catch (e) {
            this.session = void 0;
            throw e;
          } finally {
            if (this.session) {
              this._persistSession?.("create", this.session);
            } else {
              this._persistSession?.("create-failed", void 0);
            }
          }
        }
        async login(opts) {
          try {
            const res = await this.api.com.atproto.server.createSession({
              identifier: opts.identifier,
              password: opts.password
            });
            this.session = {
              accessJwt: res.data.accessJwt,
              refreshJwt: res.data.refreshJwt,
              handle: res.data.handle,
              did: res.data.did,
              email: res.data.email
            };
            return res;
          } catch (e) {
            this.session = void 0;
            throw e;
          } finally {
            if (this.session) {
              this._persistSession?.("create", this.session);
            } else {
              this._persistSession?.("create-failed", void 0);
            }
          }
        }
        async resumeSession(session) {
          try {
            this.session = session;
            const res = await this.api.com.atproto.server.getSession();
            if (!res.success || res.data.did !== this.session.did) {
              throw new Error("Invalid session");
            }
            this.session.email = res.data.email;
            this.session.handle = res.data.handle;
            return res;
          } catch (e) {
            this.session = void 0;
            throw e;
          } finally {
            if (this.session) {
              this._persistSession?.("create", this.session);
            } else {
              this._persistSession?.("create-failed", void 0);
            }
          }
        }
        _addAuthHeader(reqHeaders) {
          if (!reqHeaders.authorization && this.session?.accessJwt) {
            return {
              ...reqHeaders,
              authorization: `Bearer ${this.session.accessJwt}`
            };
          }
          return reqHeaders;
        }
        async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
          if (!_AtpAgent.fetch) {
            throw new Error("AtpAgent fetch() method not configured");
          }
          await this._refreshSessionPromise;
          let res = await _AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);
          if (isErrorResponse(res, ["ExpiredToken"]) && this.session?.refreshJwt) {
            await this._refreshSession();
            res = await _AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);
          }
          return res;
        }
        async _refreshSession() {
          if (this._refreshSessionPromise) {
            return this._refreshSessionPromise;
          }
          this._refreshSessionPromise = this._refreshSessionInner();
          try {
            await this._refreshSessionPromise;
          } finally {
            this._refreshSessionPromise = void 0;
          }
        }
        async _refreshSessionInner() {
          if (!_AtpAgent.fetch) {
            throw new Error("AtpAgent fetch() method not configured");
          }
          if (!this.session?.refreshJwt) {
            return;
          }
          const url = new URL(this.service.origin);
          url.pathname = `/xrpc/${REFRESH_SESSION}`;
          const res = await _AtpAgent.fetch(url.toString(), "POST", {
            authorization: `Bearer ${this.session.refreshJwt}`
          }, void 0);
          if (isErrorResponse(res, ["ExpiredToken", "InvalidToken"])) {
            this.session = void 0;
            this._persistSession?.("expired", void 0);
          } else if (isNewSessionObject(this._baseClient, res.body)) {
            this.session = {
              accessJwt: res.body.accessJwt,
              refreshJwt: res.body.refreshJwt,
              handle: res.body.handle,
              did: res.body.did
            };
            this._persistSession?.("update", this.session);
          }
        }
      };
      var AtpAgent = _AtpAgent;
      AtpAgent.fetch = defaultFetchHandler;
      function isErrorObject(v) {
        return errorResponseBody.safeParse(v).success;
      }
      function isErrorResponse(res, errorNames) {
        if (res.status !== 400) {
          return false;
        }
        if (!isErrorObject(res.body)) {
          return false;
        }
        return typeof res.body.error === "string" && errorNames.includes(res.body.error);
      }
      function isNewSessionObject(client, v) {
        try {
          client.xrpc.lex.assertValidXrpcOutput("com.atproto.server.refreshSession", v);
          return true;
        } catch {
          return false;
        }
      }
      var encoder = new TextEncoder();
      var decoder2 = new TextDecoder();
      var UnicodeString = class {
        constructor(utf16) {
          this.utf16 = utf16;
          this.utf8 = encoder.encode(utf16);
        }
        get length() {
          return this.utf8.byteLength;
        }
        get graphemeLength() {
          if (!this._graphemeLen) {
            this._graphemeLen = graphemeLen(this.utf16);
          }
          return this._graphemeLen;
        }
        slice(start, end) {
          return decoder2.decode(this.utf8.slice(start, end));
        }
        utf16IndexToUtf8Index(i) {
          return encoder.encode(this.utf16.slice(0, i)).byteLength;
        }
        toString() {
          return this.utf16;
        }
      };
      var EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
      var REPLACEMENT_STR = "\n\n";
      function sanitizeRichText(richText, opts) {
        if (opts.cleanNewlines) {
          richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
        }
        return richText;
      }
      function clean(richText, targetRegexp, replacementString) {
        richText = richText.clone();
        let match = richText.unicodeText.utf16.match(targetRegexp);
        while (match && typeof match.index !== "undefined") {
          const oldText = richText.unicodeText;
          const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
          const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length;
          richText.delete(removeStartIndex, removeEndIndex);
          if (richText.unicodeText.utf16 === oldText.utf16) {
            break;
          }
          richText.insert(removeStartIndex, replacementString);
          match = richText.unicodeText.utf16.match(targetRegexp);
        }
        return richText;
      }
      var tlds_default = [
        "aaa",
        "aarp",
        "abarth",
        "abb",
        "abbott",
        "abbvie",
        "abc",
        "able",
        "abogado",
        "abudhabi",
        "ac",
        "academy",
        "accenture",
        "accountant",
        "accountants",
        "aco",
        "actor",
        "ad",
        "ads",
        "adult",
        "ae",
        "aeg",
        "aero",
        "aetna",
        "af",
        "afl",
        "africa",
        "ag",
        "agakhan",
        "agency",
        "ai",
        "aig",
        "airbus",
        "airforce",
        "airtel",
        "akdn",
        "al",
        "alfaromeo",
        "alibaba",
        "alipay",
        "allfinanz",
        "allstate",
        "ally",
        "alsace",
        "alstom",
        "am",
        "amazon",
        "americanexpress",
        "americanfamily",
        "amex",
        "amfam",
        "amica",
        "amsterdam",
        "analytics",
        "android",
        "anquan",
        "anz",
        "ao",
        "aol",
        "apartments",
        "app",
        "apple",
        "aq",
        "aquarelle",
        "ar",
        "arab",
        "aramco",
        "archi",
        "army",
        "arpa",
        "art",
        "arte",
        "as",
        "asda",
        "asia",
        "associates",
        "at",
        "athleta",
        "attorney",
        "au",
        "auction",
        "audi",
        "audible",
        "audio",
        "auspost",
        "author",
        "auto",
        "autos",
        "avianca",
        "aw",
        "aws",
        "ax",
        "axa",
        "az",
        "azure",
        "ba",
        "baby",
        "baidu",
        "banamex",
        "bananarepublic",
        "band",
        "bank",
        "bar",
        "barcelona",
        "barclaycard",
        "barclays",
        "barefoot",
        "bargains",
        "baseball",
        "basketball",
        "bauhaus",
        "bayern",
        "bb",
        "bbc",
        "bbt",
        "bbva",
        "bcg",
        "bcn",
        "bd",
        "be",
        "beats",
        "beauty",
        "beer",
        "bentley",
        "berlin",
        "best",
        "bestbuy",
        "bet",
        "bf",
        "bg",
        "bh",
        "bharti",
        "bi",
        "bible",
        "bid",
        "bike",
        "bing",
        "bingo",
        "bio",
        "biz",
        "bj",
        "black",
        "blackfriday",
        "blockbuster",
        "blog",
        "bloomberg",
        "blue",
        "bm",
        "bms",
        "bmw",
        "bn",
        "bnpparibas",
        "bo",
        "boats",
        "boehringer",
        "bofa",
        "bom",
        "bond",
        "boo",
        "book",
        "booking",
        "bosch",
        "bostik",
        "boston",
        "bot",
        "boutique",
        "box",
        "br",
        "bradesco",
        "bridgestone",
        "broadway",
        "broker",
        "brother",
        "brussels",
        "bs",
        "bt",
        "build",
        "builders",
        "business",
        "buy",
        "buzz",
        "bv",
        "bw",
        "by",
        "bz",
        "bzh",
        "ca",
        "cab",
        "cafe",
        "cal",
        "call",
        "calvinklein",
        "cam",
        "camera",
        "camp",
        "canon",
        "capetown",
        "capital",
        "capitalone",
        "car",
        "caravan",
        "cards",
        "care",
        "career",
        "careers",
        "cars",
        "casa",
        "case",
        "cash",
        "casino",
        "cat",
        "catering",
        "catholic",
        "cba",
        "cbn",
        "cbre",
        "cbs",
        "cc",
        "cd",
        "center",
        "ceo",
        "cern",
        "cf",
        "cfa",
        "cfd",
        "cg",
        "ch",
        "chanel",
        "channel",
        "charity",
        "chase",
        "chat",
        "cheap",
        "chintai",
        "christmas",
        "chrome",
        "church",
        "ci",
        "cipriani",
        "circle",
        "cisco",
        "citadel",
        "citi",
        "citic",
        "city",
        "cityeats",
        "ck",
        "cl",
        "claims",
        "cleaning",
        "click",
        "clinic",
        "clinique",
        "clothing",
        "cloud",
        "club",
        "clubmed",
        "cm",
        "cn",
        "co",
        "coach",
        "codes",
        "coffee",
        "college",
        "cologne",
        "com",
        "comcast",
        "commbank",
        "community",
        "company",
        "compare",
        "computer",
        "comsec",
        "condos",
        "construction",
        "consulting",
        "contact",
        "contractors",
        "cooking",
        "cookingchannel",
        "cool",
        "coop",
        "corsica",
        "country",
        "coupon",
        "coupons",
        "courses",
        "cpa",
        "cr",
        "credit",
        "creditcard",
        "creditunion",
        "cricket",
        "crown",
        "crs",
        "cruise",
        "cruises",
        "cu",
        "cuisinella",
        "cv",
        "cw",
        "cx",
        "cy",
        "cymru",
        "cyou",
        "cz",
        "dabur",
        "dad",
        "dance",
        "data",
        "date",
        "dating",
        "datsun",
        "day",
        "dclk",
        "dds",
        "de",
        "deal",
        "dealer",
        "deals",
        "degree",
        "delivery",
        "dell",
        "deloitte",
        "delta",
        "democrat",
        "dental",
        "dentist",
        "desi",
        "design",
        "dev",
        "dhl",
        "diamonds",
        "diet",
        "digital",
        "direct",
        "directory",
        "discount",
        "discover",
        "dish",
        "diy",
        "dj",
        "dk",
        "dm",
        "dnp",
        "do",
        "docs",
        "doctor",
        "dog",
        "domains",
        "dot",
        "download",
        "drive",
        "dtv",
        "dubai",
        "dunlop",
        "dupont",
        "durban",
        "dvag",
        "dvr",
        "dz",
        "earth",
        "eat",
        "ec",
        "eco",
        "edeka",
        "edu",
        "education",
        "ee",
        "eg",
        "email",
        "emerck",
        "energy",
        "engineer",
        "engineering",
        "enterprises",
        "epson",
        "equipment",
        "er",
        "ericsson",
        "erni",
        "es",
        "esq",
        "estate",
        "et",
        "etisalat",
        "eu",
        "eurovision",
        "eus",
        "events",
        "exchange",
        "expert",
        "exposed",
        "express",
        "extraspace",
        "fage",
        "fail",
        "fairwinds",
        "faith",
        "family",
        "fan",
        "fans",
        "farm",
        "farmers",
        "fashion",
        "fast",
        "fedex",
        "feedback",
        "ferrari",
        "ferrero",
        "fi",
        "fiat",
        "fidelity",
        "fido",
        "film",
        "final",
        "finance",
        "financial",
        "fire",
        "firestone",
        "firmdale",
        "fish",
        "fishing",
        "fit",
        "fitness",
        "fj",
        "fk",
        "flickr",
        "flights",
        "flir",
        "florist",
        "flowers",
        "fly",
        "fm",
        "fo",
        "foo",
        "food",
        "foodnetwork",
        "football",
        "ford",
        "forex",
        "forsale",
        "forum",
        "foundation",
        "fox",
        "fr",
        "free",
        "fresenius",
        "frl",
        "frogans",
        "frontdoor",
        "frontier",
        "ftr",
        "fujitsu",
        "fun",
        "fund",
        "furniture",
        "futbol",
        "fyi",
        "ga",
        "gal",
        "gallery",
        "gallo",
        "gallup",
        "game",
        "games",
        "gap",
        "garden",
        "gay",
        "gb",
        "gbiz",
        "gd",
        "gdn",
        "ge",
        "gea",
        "gent",
        "genting",
        "george",
        "gf",
        "gg",
        "ggee",
        "gh",
        "gi",
        "gift",
        "gifts",
        "gives",
        "giving",
        "gl",
        "glass",
        "gle",
        "global",
        "globo",
        "gm",
        "gmail",
        "gmbh",
        "gmo",
        "gmx",
        "gn",
        "godaddy",
        "gold",
        "goldpoint",
        "golf",
        "goo",
        "goodyear",
        "goog",
        "google",
        "gop",
        "got",
        "gov",
        "gp",
        "gq",
        "gr",
        "grainger",
        "graphics",
        "gratis",
        "green",
        "gripe",
        "grocery",
        "group",
        "gs",
        "gt",
        "gu",
        "guardian",
        "gucci",
        "guge",
        "guide",
        "guitars",
        "guru",
        "gw",
        "gy",
        "hair",
        "hamburg",
        "hangout",
        "haus",
        "hbo",
        "hdfc",
        "hdfcbank",
        "health",
        "healthcare",
        "help",
        "helsinki",
        "here",
        "hermes",
        "hgtv",
        "hiphop",
        "hisamitsu",
        "hitachi",
        "hiv",
        "hk",
        "hkt",
        "hm",
        "hn",
        "hockey",
        "holdings",
        "holiday",
        "homedepot",
        "homegoods",
        "homes",
        "homesense",
        "honda",
        "horse",
        "hospital",
        "host",
        "hosting",
        "hot",
        "hoteles",
        "hotels",
        "hotmail",
        "house",
        "how",
        "hr",
        "hsbc",
        "ht",
        "hu",
        "hughes",
        "hyatt",
        "hyundai",
        "ibm",
        "icbc",
        "ice",
        "icu",
        "id",
        "ie",
        "ieee",
        "ifm",
        "ikano",
        "il",
        "im",
        "imamat",
        "imdb",
        "immo",
        "immobilien",
        "in",
        "inc",
        "industries",
        "infiniti",
        "info",
        "ing",
        "ink",
        "institute",
        "insurance",
        "insure",
        "int",
        "international",
        "intuit",
        "investments",
        "io",
        "ipiranga",
        "iq",
        "ir",
        "irish",
        "is",
        "ismaili",
        "ist",
        "istanbul",
        "it",
        "itau",
        "itv",
        "jaguar",
        "java",
        "jcb",
        "je",
        "jeep",
        "jetzt",
        "jewelry",
        "jio",
        "jll",
        "jm",
        "jmp",
        "jnj",
        "jo",
        "jobs",
        "joburg",
        "jot",
        "joy",
        "jp",
        "jpmorgan",
        "jprs",
        "juegos",
        "juniper",
        "kaufen",
        "kddi",
        "ke",
        "kerryhotels",
        "kerrylogistics",
        "kerryproperties",
        "kfh",
        "kg",
        "kh",
        "ki",
        "kia",
        "kids",
        "kim",
        "kinder",
        "kindle",
        "kitchen",
        "kiwi",
        "km",
        "kn",
        "koeln",
        "komatsu",
        "kosher",
        "kp",
        "kpmg",
        "kpn",
        "kr",
        "krd",
        "kred",
        "kuokgroup",
        "kw",
        "ky",
        "kyoto",
        "kz",
        "la",
        "lacaixa",
        "lamborghini",
        "lamer",
        "lancaster",
        "lancia",
        "land",
        "landrover",
        "lanxess",
        "lasalle",
        "lat",
        "latino",
        "latrobe",
        "law",
        "lawyer",
        "lb",
        "lc",
        "lds",
        "lease",
        "leclerc",
        "lefrak",
        "legal",
        "lego",
        "lexus",
        "lgbt",
        "li",
        "lidl",
        "life",
        "lifeinsurance",
        "lifestyle",
        "lighting",
        "like",
        "lilly",
        "limited",
        "limo",
        "lincoln",
        "linde",
        "link",
        "lipsy",
        "live",
        "living",
        "lk",
        "llc",
        "llp",
        "loan",
        "loans",
        "locker",
        "locus",
        "loft",
        "lol",
        "london",
        "lotte",
        "lotto",
        "love",
        "lpl",
        "lplfinancial",
        "lr",
        "ls",
        "lt",
        "ltd",
        "ltda",
        "lu",
        "lundbeck",
        "luxe",
        "luxury",
        "lv",
        "ly",
        "ma",
        "macys",
        "madrid",
        "maif",
        "maison",
        "makeup",
        "man",
        "management",
        "mango",
        "map",
        "market",
        "marketing",
        "markets",
        "marriott",
        "marshalls",
        "maserati",
        "mattel",
        "mba",
        "mc",
        "mckinsey",
        "md",
        "me",
        "med",
        "media",
        "meet",
        "melbourne",
        "meme",
        "memorial",
        "men",
        "menu",
        "merckmsd",
        "mg",
        "mh",
        "miami",
        "microsoft",
        "mil",
        "mini",
        "mint",
        "mit",
        "mitsubishi",
        "mk",
        "ml",
        "mlb",
        "mls",
        "mm",
        "mma",
        "mn",
        "mo",
        "mobi",
        "mobile",
        "moda",
        "moe",
        "moi",
        "mom",
        "monash",
        "money",
        "monster",
        "mormon",
        "mortgage",
        "moscow",
        "moto",
        "motorcycles",
        "mov",
        "movie",
        "mp",
        "mq",
        "mr",
        "ms",
        "msd",
        "mt",
        "mtn",
        "mtr",
        "mu",
        "museum",
        "music",
        "mutual",
        "mv",
        "mw",
        "mx",
        "my",
        "mz",
        "na",
        "nab",
        "nagoya",
        "name",
        "natura",
        "navy",
        "nba",
        "nc",
        "ne",
        "nec",
        "net",
        "netbank",
        "netflix",
        "network",
        "neustar",
        "new",
        "news",
        "next",
        "nextdirect",
        "nexus",
        "nf",
        "nfl",
        "ng",
        "ngo",
        "nhk",
        "ni",
        "nico",
        "nike",
        "nikon",
        "ninja",
        "nissan",
        "nissay",
        "nl",
        "no",
        "nokia",
        "northwesternmutual",
        "norton",
        "now",
        "nowruz",
        "nowtv",
        "np",
        "nr",
        "nra",
        "nrw",
        "ntt",
        "nu",
        "nyc",
        "nz",
        "obi",
        "observer",
        "office",
        "okinawa",
        "olayan",
        "olayangroup",
        "oldnavy",
        "ollo",
        "om",
        "omega",
        "one",
        "ong",
        "onl",
        "online",
        "ooo",
        "open",
        "oracle",
        "orange",
        "org",
        "organic",
        "origins",
        "osaka",
        "otsuka",
        "ott",
        "ovh",
        "pa",
        "page",
        "panasonic",
        "paris",
        "pars",
        "partners",
        "parts",
        "party",
        "passagens",
        "pay",
        "pccw",
        "pe",
        "pet",
        "pf",
        "pfizer",
        "pg",
        "ph",
        "pharmacy",
        "phd",
        "philips",
        "phone",
        "photo",
        "photography",
        "photos",
        "physio",
        "pics",
        "pictet",
        "pictures",
        "pid",
        "pin",
        "ping",
        "pink",
        "pioneer",
        "pizza",
        "pk",
        "pl",
        "place",
        "play",
        "playstation",
        "plumbing",
        "plus",
        "pm",
        "pn",
        "pnc",
        "pohl",
        "poker",
        "politie",
        "porn",
        "post",
        "pr",
        "pramerica",
        "praxi",
        "press",
        "prime",
        "pro",
        "prod",
        "productions",
        "prof",
        "progressive",
        "promo",
        "properties",
        "property",
        "protection",
        "pru",
        "prudential",
        "ps",
        "pt",
        "pub",
        "pw",
        "pwc",
        "py",
        "qa",
        "qpon",
        "quebec",
        "quest",
        "racing",
        "radio",
        "re",
        "read",
        "realestate",
        "realtor",
        "realty",
        "recipes",
        "red",
        "redstone",
        "redumbrella",
        "rehab",
        "reise",
        "reisen",
        "reit",
        "reliance",
        "ren",
        "rent",
        "rentals",
        "repair",
        "report",
        "republican",
        "rest",
        "restaurant",
        "review",
        "reviews",
        "rexroth",
        "rich",
        "richardli",
        "ricoh",
        "ril",
        "rio",
        "rip",
        "ro",
        "rocher",
        "rocks",
        "rodeo",
        "rogers",
        "room",
        "rs",
        "rsvp",
        "ru",
        "rugby",
        "ruhr",
        "run",
        "rw",
        "rwe",
        "ryukyu",
        "sa",
        "saarland",
        "safe",
        "safety",
        "sakura",
        "sale",
        "salon",
        "samsclub",
        "samsung",
        "sandvik",
        "sandvikcoromant",
        "sanofi",
        "sap",
        "sarl",
        "sas",
        "save",
        "saxo",
        "sb",
        "sbi",
        "sbs",
        "sc",
        "sca",
        "scb",
        "schaeffler",
        "schmidt",
        "scholarships",
        "school",
        "schule",
        "schwarz",
        "science",
        "scot",
        "sd",
        "se",
        "search",
        "seat",
        "secure",
        "security",
        "seek",
        "select",
        "sener",
        "services",
        "ses",
        "seven",
        "sew",
        "sex",
        "sexy",
        "sfr",
        "sg",
        "sh",
        "shangrila",
        "sharp",
        "shaw",
        "shell",
        "shia",
        "shiksha",
        "shoes",
        "shop",
        "shopping",
        "shouji",
        "show",
        "showtime",
        "si",
        "silk",
        "sina",
        "singles",
        "site",
        "sj",
        "sk",
        "ski",
        "skin",
        "sky",
        "skype",
        "sl",
        "sling",
        "sm",
        "smart",
        "smile",
        "sn",
        "sncf",
        "so",
        "soccer",
        "social",
        "softbank",
        "software",
        "sohu",
        "solar",
        "solutions",
        "song",
        "sony",
        "soy",
        "spa",
        "space",
        "sport",
        "spot",
        "sr",
        "srl",
        "ss",
        "st",
        "stada",
        "staples",
        "star",
        "statebank",
        "statefarm",
        "stc",
        "stcgroup",
        "stockholm",
        "storage",
        "store",
        "stream",
        "studio",
        "study",
        "style",
        "su",
        "sucks",
        "supplies",
        "supply",
        "support",
        "surf",
        "surgery",
        "suzuki",
        "sv",
        "swatch",
        "swiss",
        "sx",
        "sy",
        "sydney",
        "systems",
        "sz",
        "tab",
        "taipei",
        "talk",
        "taobao",
        "target",
        "tatamotors",
        "tatar",
        "tattoo",
        "tax",
        "taxi",
        "tc",
        "tci",
        "td",
        "tdk",
        "team",
        "tech",
        "technology",
        "tel",
        "temasek",
        "tennis",
        "teva",
        "tf",
        "tg",
        "th",
        "thd",
        "theater",
        "theatre",
        "tiaa",
        "tickets",
        "tienda",
        "tiffany",
        "tips",
        "tires",
        "tirol",
        "tj",
        "tjmaxx",
        "tjx",
        "tk",
        "tkmaxx",
        "tl",
        "tm",
        "tmall",
        "tn",
        "to",
        "today",
        "tokyo",
        "tools",
        "top",
        "toray",
        "toshiba",
        "total",
        "tours",
        "town",
        "toyota",
        "toys",
        "tr",
        "trade",
        "trading",
        "training",
        "travel",
        "travelchannel",
        "travelers",
        "travelersinsurance",
        "trust",
        "trv",
        "tt",
        "tube",
        "tui",
        "tunes",
        "tushu",
        "tv",
        "tvs",
        "tw",
        "tz",
        "ua",
        "ubank",
        "ubs",
        "ug",
        "uk",
        "unicom",
        "university",
        "uno",
        "uol",
        "ups",
        "us",
        "uy",
        "uz",
        "va",
        "vacations",
        "vana",
        "vanguard",
        "vc",
        "ve",
        "vegas",
        "ventures",
        "verisign",
        "verm\xF6gensberater",
        "verm\xF6gensberatung",
        "versicherung",
        "vet",
        "vg",
        "vi",
        "viajes",
        "video",
        "vig",
        "viking",
        "villas",
        "vin",
        "vip",
        "virgin",
        "visa",
        "vision",
        "viva",
        "vivo",
        "vlaanderen",
        "vn",
        "vodka",
        "volkswagen",
        "volvo",
        "vote",
        "voting",
        "voto",
        "voyage",
        "vu",
        "vuelos",
        "wales",
        "walmart",
        "walter",
        "wang",
        "wanggou",
        "watch",
        "watches",
        "weather",
        "weatherchannel",
        "webcam",
        "weber",
        "website",
        "wed",
        "wedding",
        "weibo",
        "weir",
        "wf",
        "whoswho",
        "wien",
        "wiki",
        "williamhill",
        "win",
        "windows",
        "wine",
        "winners",
        "wme",
        "wolterskluwer",
        "woodside",
        "work",
        "works",
        "world",
        "wow",
        "ws",
        "wtc",
        "wtf",
        "xbox",
        "xerox",
        "xfinity",
        "xihuan",
        "xin",
        "xxx",
        "xyz",
        "yachts",
        "yahoo",
        "yamaxun",
        "yandex",
        "ye",
        "yodobashi",
        "yoga",
        "yokohama",
        "you",
        "youtube",
        "yt",
        "yun",
        "za",
        "zappos",
        "zara",
        "zero",
        "zip",
        "zm",
        "zone",
        "zuerich",
        "zw",
        "\u03B5\u03BB",
        "\u03B5\u03C5",
        "\u0431\u0433",
        "\u0431\u0435\u043B",
        "\u0434\u0435\u0442\u0438",
        "\u0435\u044E",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
        "\u043A\u043E\u043C",
        "\u043C\u043A\u0434",
        "\u043C\u043E\u043D",
        "\u043C\u043E\u0441\u043A\u0432\u0430",
        "\u043E\u043D\u043B\u0430\u0439\u043D",
        "\u043E\u0440\u0433",
        "\u0440\u0443\u0441",
        "\u0440\u0444",
        "\u0441\u0430\u0439\u0442",
        "\u0441\u0440\u0431",
        "\u0443\u043A\u0440",
        "\u049B\u0430\u0437",
        "\u0570\u0561\u0575",
        "\u05D9\u05E9\u05E8\u05D0\u05DC",
        "\u05E7\u05D5\u05DD",
        "\u0627\u0628\u0648\u0638\u0628\u064A",
        "\u0627\u062A\u0635\u0627\u0644\u0627\u062A",
        "\u0627\u0631\u0627\u0645\u0643\u0648",
        "\u0627\u0644\u0627\u0631\u062F\u0646",
        "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
        "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
        "\u0627\u0644\u0639\u0644\u064A\u0627\u0646",
        "\u0627\u0644\u0645\u063A\u0631\u0628",
        "\u0627\u0645\u0627\u0631\u0627\u062A",
        "\u0627\u06CC\u0631\u0627\u0646",
        "\u0628\u0627\u0631\u062A",
        "\u0628\u0627\u0632\u0627\u0631",
        "\u0628\u064A\u062A\u0643",
        "\u0628\u06BE\u0627\u0631\u062A",
        "\u062A\u0648\u0646\u0633",
        "\u0633\u0648\u062F\u0627\u0646",
        "\u0633\u0648\u0631\u064A\u0629",
        "\u0634\u0628\u0643\u0629",
        "\u0639\u0631\u0627\u0642",
        "\u0639\u0631\u0628",
        "\u0639\u0645\u0627\u0646",
        "\u0641\u0644\u0633\u0637\u064A\u0646",
        "\u0642\u0637\u0631",
        "\u0643\u0627\u062B\u0648\u0644\u064A\u0643",
        "\u0643\u0648\u0645",
        "\u0645\u0635\u0631",
        "\u0645\u0644\u064A\u0633\u064A\u0627",
        "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627",
        "\u0645\u0648\u0642\u0639",
        "\u0647\u0645\u0631\u0627\u0647",
        "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
        "\u0680\u0627\u0631\u062A",
        "\u0915\u0949\u092E",
        "\u0928\u0947\u091F",
        "\u092D\u093E\u0930\u0924",
        "\u092D\u093E\u0930\u0924\u092E\u094D",
        "\u092D\u093E\u0930\u094B\u0924",
        "\u0938\u0902\u0917\u0920\u0928",
        "\u09AC\u09BE\u0982\u09B2\u09BE",
        "\u09AD\u09BE\u09B0\u09A4",
        "\u09AD\u09BE\u09F0\u09A4",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u0AAD\u0ABE\u0AB0\u0AA4",
        "\u0B2D\u0B3E\u0B30\u0B24",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
        "\u0CAD\u0CBE\u0CB0\u0CA4",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
        "\u0DBD\u0D82\u0D9A\u0DCF",
        "\u0E04\u0E2D\u0E21",
        "\u0E44\u0E17\u0E22",
        "\u0EA5\u0EB2\u0EA7",
        "\u10D2\u10D4",
        "\u307F\u3093\u306A",
        "\u30A2\u30DE\u30BE\u30F3",
        "\u30AF\u30E9\u30A6\u30C9",
        "\u30B0\u30FC\u30B0\u30EB",
        "\u30B3\u30E0",
        "\u30B9\u30C8\u30A2",
        "\u30BB\u30FC\u30EB",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
        "\u30DD\u30A4\u30F3\u30C8",
        "\u4E16\u754C",
        "\u4E2D\u4FE1",
        "\u4E2D\u56FD",
        "\u4E2D\u570B",
        "\u4E2D\u6587\u7F51",
        "\u4E9A\u9A6C\u900A",
        "\u4F01\u4E1A",
        "\u4F5B\u5C71",
        "\u4FE1\u606F",
        "\u5065\u5EB7",
        "\u516B\u5366",
        "\u516C\u53F8",
        "\u516C\u76CA",
        "\u53F0\u6E7E",
        "\u53F0\u7063",
        "\u5546\u57CE",
        "\u5546\u5E97",
        "\u5546\u6807",
        "\u5609\u91CC",
        "\u5609\u91CC\u5927\u9152\u5E97",
        "\u5728\u7EBF",
        "\u5927\u62FF",
        "\u5929\u4E3B\u6559",
        "\u5A31\u4E50",
        "\u5BB6\u96FB",
        "\u5E7F\u4E1C",
        "\u5FAE\u535A",
        "\u6148\u5584",
        "\u6211\u7231\u4F60",
        "\u624B\u673A",
        "\u62DB\u8058",
        "\u653F\u52A1",
        "\u653F\u5E9C",
        "\u65B0\u52A0\u5761",
        "\u65B0\u95FB",
        "\u65F6\u5C1A",
        "\u66F8\u7C4D",
        "\u673A\u6784",
        "\u6DE1\u9A6C\u9521",
        "\u6E38\u620F",
        "\u6FB3\u9580",
        "\u70B9\u770B",
        "\u79FB\u52A8",
        "\u7EC4\u7EC7\u673A\u6784",
        "\u7F51\u5740",
        "\u7F51\u5E97",
        "\u7F51\u7AD9",
        "\u7F51\u7EDC",
        "\u8054\u901A",
        "\u8BFA\u57FA\u4E9A",
        "\u8C37\u6B4C",
        "\u8D2D\u7269",
        "\u901A\u8CA9",
        "\u96C6\u56E2",
        "\u96FB\u8A0A\u76C8\u79D1",
        "\u98DE\u5229\u6D66",
        "\u98DF\u54C1",
        "\u9910\u5385",
        "\u9999\u683C\u91CC\u62C9",
        "\u9999\u6E2F",
        "\uB2F7\uB137",
        "\uB2F7\uCEF4",
        "\uC0BC\uC131",
        "\uD55C\uAD6D"
      ];
      function detectFacets(text) {
        let match;
        const facets = [];
        {
          const re = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
          while (match = re.exec(text.utf16)) {
            if (!isValidDomain(match[3]) && !match[3].endsWith(".test")) {
              continue;
            }
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(start),
                byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#mention",
                  did: match[3]
                }
              ]
            });
          }
        }
        {
          const re = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
          while (match = re.exec(text.utf16)) {
            let uri2 = match[2];
            if (!uri2.startsWith("http")) {
              const domain = match.groups?.domain;
              if (!domain || !isValidDomain(domain)) {
                continue;
              }
              uri2 = `https://${uri2}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = { start, end: start + match[2].length };
            if (/[.,;!?]$/.test(uri2)) {
              uri2 = uri2.slice(0, -1);
              index.end--;
            }
            if (/[)]$/.test(uri2) && !uri2.includes("(")) {
              uri2 = uri2.slice(0, -1);
              index.end--;
            }
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index.start),
                byteEnd: text.utf16IndexToUtf8Index(index.end)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#link",
                  uri: uri2
                }
              ]
            });
          }
        }
        return facets.length > 0 ? facets : void 0;
      }
      function isValidDomain(str) {
        return !!tlds_default.find((tld) => {
          const i = str.lastIndexOf(tld);
          if (i === -1) {
            return false;
          }
          return str.charAt(i - 1) === "." && i === str.length - tld.length;
        });
      }
      var RichTextSegment = class {
        constructor(text, facet) {
          this.text = text;
          this.facet = facet;
        }
        get link() {
          const link = this.facet?.features.find(facet_exports.isLink);
          if (facet_exports.isLink(link)) {
            return link;
          }
          return void 0;
        }
        isLink() {
          return !!this.link;
        }
        get mention() {
          const mention = this.facet?.features.find(facet_exports.isMention);
          if (facet_exports.isMention(mention)) {
            return mention;
          }
          return void 0;
        }
        isMention() {
          return !!this.mention;
        }
      };
      var RichText = class {
        constructor(props, opts) {
          this.unicodeText = new UnicodeString(props.text);
          this.facets = props.facets;
          if (!this.facets?.length && props.entities?.length) {
            this.facets = entitiesToFacets(this.unicodeText, props.entities);
          }
          if (this.facets) {
            this.facets.sort(facetSort);
          }
          if (opts?.cleanNewlines) {
            sanitizeRichText(this, { cleanNewlines: true }).copyInto(this);
          }
        }
        get text() {
          return this.unicodeText.toString();
        }
        get length() {
          return this.unicodeText.length;
        }
        get graphemeLength() {
          return this.unicodeText.graphemeLength;
        }
        clone() {
          return new RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
          });
        }
        copyInto(target2) {
          target2.unicodeText = this.unicodeText;
          target2.facets = cloneDeep(this.facets);
        }
        *segments() {
          const facets = this.facets || [];
          if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
          }
          let textCursor = 0;
          let facetCursor = 0;
          do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) {
              yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            } else if (textCursor > currFacet.index.byteStart) {
              facetCursor++;
              continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
              const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
              if (!subtext.trim()) {
                yield new RichTextSegment(subtext);
              } else {
                yield new RichTextSegment(subtext, currFacet);
              }
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
          } while (facetCursor < facets.length);
          if (textCursor < this.unicodeText.length) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
          }
        }
        insert(insertIndex, insertText) {
          this.unicodeText = new UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
          if (!this.facets?.length) {
            return this;
          }
          const numCharsAdded = insertText.length;
          for (const ent of this.facets) {
            if (insertIndex <= ent.index.byteStart) {
              ent.index.byteStart += numCharsAdded;
              ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
              ent.index.byteEnd += numCharsAdded;
            }
          }
          return this;
        }
        delete(removeStartIndex, removeEndIndex) {
          this.unicodeText = new UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
          if (!this.facets?.length) {
            return this;
          }
          const numCharsRemoved = removeEndIndex - removeStartIndex;
          for (const ent of this.facets) {
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
              ent.index.byteStart = 0;
              ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) {
            } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
              ent.index.byteEnd = removeStartIndex;
            } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteStart = removeStartIndex;
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
              ent.index.byteStart -= numCharsRemoved;
              ent.index.byteEnd -= numCharsRemoved;
            }
          }
          this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
          return this;
        }
        async detectFacets(agent) {
          this.facets = detectFacets(this.unicodeText);
          if (this.facets) {
            for (const facet of this.facets) {
              for (const feature of facet.features) {
                if (facet_exports.isMention(feature)) {
                  const did2 = await agent.resolveHandle({ handle: feature.did }).catch((_) => void 0).then((res) => res?.data.did);
                  feature.did = did2 || "";
                }
              }
            }
            this.facets.sort(facetSort);
          }
        }
        detectFacetsWithoutResolution() {
          this.facets = detectFacets(this.unicodeText);
          if (this.facets) {
            this.facets.sort(facetSort);
          }
        }
      };
      var facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
      function entitiesToFacets(text, entities) {
        const facets = [];
        for (const ent of entities) {
          if (ent.type === "link") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [{ $type: "app.bsky.richtext.facet#link", uri: ent.value }]
            });
          } else if (ent.type === "mention") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [
                { $type: "app.bsky.richtext.facet#mention", did: ent.value }
              ]
            });
          }
        }
        return facets;
      }
      function cloneDeep(v) {
        if (typeof v === "undefined") {
          return v;
        }
        return JSON.parse(JSON.stringify(v));
      }
      var ModerationDecision = class {
        constructor(cause = void 0, alert = false, blur = false, blurMedia = false, filter = false, noOverride = false, additionalCauses = [], did2 = "") {
          this.cause = cause;
          this.alert = alert;
          this.blur = blur;
          this.blurMedia = blurMedia;
          this.filter = filter;
          this.noOverride = noOverride;
          this.additionalCauses = additionalCauses;
          this.did = did2;
        }
        static noop() {
          return new ModerationDecision();
        }
      };
      var LABELS = {
        "!hide": {
          id: "!hide",
          preferences: ["hide"],
          flags: ["no-override"],
          onwarn: "blur",
          groupId: "system",
          configurable: false,
          strings: {
            settings: {
              en: {
                name: "Moderator Hide",
                description: "Moderator has chosen to hide the content."
              }
            },
            account: {
              en: {
                name: "Content Blocked",
                description: "This account has been hidden by the moderators."
              }
            },
            content: {
              en: {
                name: "Content Blocked",
                description: "This content has been hidden by the moderators."
              }
            }
          }
        },
        "!no-promote": {
          id: "!no-promote",
          preferences: ["hide"],
          flags: [],
          onwarn: null,
          groupId: "system",
          configurable: false,
          strings: {
            settings: {
              en: {
                name: "Moderator Filter",
                description: "Moderator has chosen to filter the content from feeds."
              }
            },
            account: {
              en: {
                name: "N/A",
                description: "N/A"
              }
            },
            content: {
              en: {
                name: "N/A",
                description: "N/A"
              }
            }
          }
        },
        "!warn": {
          id: "!warn",
          preferences: ["warn"],
          flags: [],
          onwarn: "blur",
          groupId: "system",
          configurable: false,
          strings: {
            settings: {
              en: {
                name: "Moderator Warn",
                description: "Moderator has chosen to set a general warning on the content."
              }
            },
            account: {
              en: {
                name: "Content Warning",
                description: "This account has received a general warning from moderators."
              }
            },
            content: {
              en: {
                name: "Content Warning",
                description: "This content has received a general warning from moderators."
              }
            }
          }
        },
        "dmca-violation": {
          id: "dmca-violation",
          preferences: ["hide"],
          flags: ["no-override"],
          onwarn: "blur",
          groupId: "legal",
          configurable: false,
          strings: {
            settings: {
              en: {
                name: "Copyright Violation",
                description: "The content has received a DMCA takedown request."
              }
            },
            account: {
              en: {
                name: "Copyright Violation",
                description: "This account has received a DMCA takedown request. It will be restored if the concerns can be resolved."
              }
            },
            content: {
              en: {
                name: "Copyright Violation",
                description: "This content has received a DMCA takedown request. It will be restored if the concerns can be resolved."
              }
            }
          }
        },
        doxxing: {
          id: "doxxing",
          preferences: ["hide"],
          flags: ["no-override"],
          onwarn: "blur",
          groupId: "legal",
          configurable: false,
          strings: {
            settings: {
              en: {
                name: "Doxxing",
                description: "Information that reveals private information about someone which has been shared without the consent of the subject."
              }
            },
            account: {
              en: {
                name: "Doxxing",
                description: "This account has been reported to publish private information about someone without their consent. This report is currently under review."
              }
            },
            content: {
              en: {
                name: "Doxxing",
                description: "This content has been reported to include private information about someone without their consent."
              }
            }
          }
        },
        porn: {
          id: "porn",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "sexual",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Pornography",
                description: "Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes)."
              }
            },
            account: {
              en: {
                name: "Adult Content",
                description: "This account contains imagery of full-frontal nudity or explicit sexual activity."
              }
            },
            content: {
              en: {
                name: "Adult Content",
                description: "This content contains imagery of full-frontal nudity or explicit sexual activity."
              }
            }
          }
        },
        sexual: {
          id: "sexual",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "sexual",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Sexually Suggestive",
                description: 'Content that does not meet the level of "pornography", but is still sexual. Some common examples have been selfies and "hornyposting" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.'
              }
            },
            account: {
              en: {
                name: "Suggestive Content",
                description: "This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress."
              }
            },
            content: {
              en: {
                name: "Suggestive Content",
                description: "This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress."
              }
            }
          }
        },
        nudity: {
          id: "nudity",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "sexual",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Nudity",
                description: 'Nudity which is not sexual, or that is primarily "artistic" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. "Erotic photography" is likely to end up in sexual or porn.'
              }
            },
            account: {
              en: {
                name: "Adult Content",
                description: "This account contains imagery which portrays nudity in a non-sexual or artistic setting."
              }
            },
            content: {
              en: {
                name: "Adult Content",
                description: "This content contains imagery which portrays nudity in a non-sexual or artistic setting."
              }
            }
          }
        },
        nsfl: {
          id: "nsfl",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "violence",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "NSFL",
                description: `"Not Suitable For Life." This includes graphic images like the infamous "goatse" (don't look it up).`
              }
            },
            account: {
              en: {
                name: "Graphic Imagery (NSFL)",
                description: 'This account contains graphic images which are often referred to as "Not Suitable For Life."'
              }
            },
            content: {
              en: {
                name: "Graphic Imagery (NSFL)",
                description: 'This content contains graphic images which are often referred to as "Not Suitable For Life."'
              }
            }
          }
        },
        corpse: {
          id: "corpse",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "violence",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Corpse",
                description: "Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings."
              }
            },
            account: {
              en: {
                name: "Graphic Imagery (Corpse)",
                description: "This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets."
              }
            },
            content: {
              en: {
                name: "Graphic Imagery (Corpse)",
                description: "This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets."
              }
            }
          }
        },
        gore: {
          id: "gore",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "violence",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Gore",
                description: "Intended for shocking images, typically involving blood or visible wounds."
              }
            },
            account: {
              en: {
                name: "Graphic Imagery (Gore)",
                description: "This account contains shocking images involving blood or visible wounds."
              }
            },
            content: {
              en: {
                name: "Graphic Imagery (Gore)",
                description: "This content contains shocking images involving blood or visible wounds."
              }
            }
          }
        },
        torture: {
          id: "torture",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur",
          groupId: "violence",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Torture",
                description: "Depictions of torture of a human or animal (animal cruelty)."
              }
            },
            account: {
              en: {
                name: "Graphic Imagery (Torture)",
                description: "This account contains depictions of torture of a human or animal."
              }
            },
            content: {
              en: {
                name: "Graphic Imagery (Torture)",
                description: "This content contains depictions of torture of a human or animal."
              }
            }
          }
        },
        "self-harm": {
          id: "self-harm",
          preferences: ["ignore", "warn", "hide"],
          flags: ["adult"],
          onwarn: "blur-media",
          groupId: "violence",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Self-Harm",
                description: "A visual depiction (photo or figurative) of cutting, suicide, or similar."
              }
            },
            account: {
              en: {
                name: "Graphic Imagery (Self-Harm)",
                description: "This account includes depictions of cutting, suicide, or other forms of self-harm."
              }
            },
            content: {
              en: {
                name: "Graphic Imagery (Self-Harm)",
                description: "This content includes depictions of cutting, suicide, or other forms of self-harm."
              }
            }
          }
        },
        "intolerant-race": {
          id: "intolerant-race",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Racial Intolerance",
                description: "Hateful or intolerant content related to race."
              }
            },
            account: {
              en: {
                name: "Intolerance (Racial)",
                description: "This account includes hateful or intolerant content related to race."
              }
            },
            content: {
              en: {
                name: "Intolerance (Racial)",
                description: "This content includes hateful or intolerant views related to race."
              }
            }
          }
        },
        "intolerant-gender": {
          id: "intolerant-gender",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Gender Intolerance",
                description: "Hateful or intolerant content related to gender or gender identity."
              }
            },
            account: {
              en: {
                name: "Intolerance (Gender)",
                description: "This account includes hateful or intolerant content related to gender or gender identity."
              }
            },
            content: {
              en: {
                name: "Intolerance (Gender)",
                description: "This content includes hateful or intolerant views related to gender or gender identity."
              }
            }
          }
        },
        "intolerant-sexual-orientation": {
          id: "intolerant-sexual-orientation",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Sexual Orientation Intolerance",
                description: "Hateful or intolerant content related to sexual preferences."
              }
            },
            account: {
              en: {
                name: "Intolerance (Orientation)",
                description: "This account includes hateful or intolerant content related to sexual preferences."
              }
            },
            content: {
              en: {
                name: "Intolerance (Orientation)",
                description: "This content includes hateful or intolerant views related to sexual preferences."
              }
            }
          }
        },
        "intolerant-religion": {
          id: "intolerant-religion",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Religious Intolerance",
                description: "Hateful or intolerant content related to religious views or practices."
              }
            },
            account: {
              en: {
                name: "Intolerance (Religious)",
                description: "This account includes hateful or intolerant content related to religious views or practices."
              }
            },
            content: {
              en: {
                name: "Intolerance (Religious)",
                description: "This content includes hateful or intolerant views related to religious views or practices."
              }
            }
          }
        },
        intolerant: {
          id: "intolerant",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Intolerance",
                description: "A catchall for hateful or intolerant content which is not covered elsewhere."
              }
            },
            account: {
              en: {
                name: "Intolerance",
                description: "This account includes hateful or intolerant content."
              }
            },
            content: {
              en: {
                name: "Intolerance",
                description: "This content includes hateful or intolerant views."
              }
            }
          }
        },
        "icon-intolerant": {
          id: "icon-intolerant",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur-media",
          groupId: "intolerance",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Intolerant Iconography",
                description: "Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc)."
              }
            },
            account: {
              en: {
                name: "Intolerant Iconography",
                description: "This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes."
              }
            },
            content: {
              en: {
                name: "Intolerant Iconography",
                description: "This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes."
              }
            }
          }
        },
        threat: {
          id: "threat",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "rude",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Threats",
                description: "Statements or imagery published with the intent to threaten, intimidate, or harm."
              }
            },
            account: {
              en: {
                name: "Threats",
                description: "The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others."
              }
            },
            content: {
              en: {
                name: "Threats",
                description: "The moderators believe this content was published with the intent to threaten, intimidate, or harm others."
              }
            }
          }
        },
        spoiler: {
          id: "spoiler",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "curation",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Spoiler",
                description: "Discussion about film, TV, etc which gives away plot points."
              }
            },
            account: {
              en: {
                name: "Spoiler Warning",
                description: "This account contains discussion about film, TV, etc which gives away plot points."
              }
            },
            content: {
              en: {
                name: "Spoiler Warning",
                description: "This content contains discussion about film, TV, etc which gives away plot points."
              }
            }
          }
        },
        spam: {
          id: "spam",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "spam",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Spam",
                description: "Repeat, low-quality messages which are clearly not designed to add to a conversation or space."
              }
            },
            account: {
              en: {
                name: "Spam",
                description: "This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space."
              }
            },
            content: {
              en: {
                name: "Spam",
                description: "This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space."
              }
            }
          }
        },
        "account-security": {
          id: "account-security",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "misinfo",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Security Concerns",
                description: "Content designed to hijack user accounts such as a phishing attack."
              }
            },
            account: {
              en: {
                name: "Security Warning",
                description: "This account has published content designed to hijack user accounts such as a phishing attack."
              }
            },
            content: {
              en: {
                name: "Security Warning",
                description: "This content is designed to hijack user accounts such as a phishing attack."
              }
            }
          }
        },
        "net-abuse": {
          id: "net-abuse",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "blur",
          groupId: "misinfo",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Network Attacks",
                description: "Content designed to attack network systems such as denial-of-service attacks."
              }
            },
            account: {
              en: {
                name: "Network Attack Warning",
                description: "This account has published content designed to attack network systems such as denial-of-service attacks."
              }
            },
            content: {
              en: {
                name: "Network Attack Warning",
                description: "This content is designed to attack network systems such as denial-of-service attacks."
              }
            }
          }
        },
        impersonation: {
          id: "impersonation",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "alert",
          groupId: "misinfo",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Impersonation",
                description: "Accounts which falsely assert some identity."
              }
            },
            account: {
              en: {
                name: "Impersonation Warning",
                description: "The moderators believe this account is lying about their identity."
              }
            },
            content: {
              en: {
                name: "Impersonation Warning",
                description: "The moderators believe this account is lying about their identity."
              }
            }
          }
        },
        scam: {
          id: "scam",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "alert",
          groupId: "misinfo",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Scam",
                description: "Fraudulent content."
              }
            },
            account: {
              en: {
                name: "Scam Warning",
                description: "The moderators believe this account publishes fraudulent content."
              }
            },
            content: {
              en: {
                name: "Scam Warning",
                description: "The moderators believe this is fraudulent content."
              }
            }
          }
        },
        misleading: {
          id: "misleading",
          preferences: ["ignore", "warn", "hide"],
          flags: [],
          onwarn: "alert",
          groupId: "misinfo",
          configurable: true,
          strings: {
            settings: {
              en: {
                name: "Misleading",
                description: "Accounts which share misleading information."
              }
            },
            account: {
              en: {
                name: "Misleading",
                description: "The moderators believe this account is spreading misleading information."
              }
            },
            content: {
              en: {
                name: "Misleading",
                description: "The moderators believe this account is spreading misleading information."
              }
            }
          }
        }
      };
      var ModerationCauseAccumulator = class {
        constructor() {
          this.did = "";
          this.causes = [];
        }
        setDid(did2) {
          this.did = did2;
        }
        addBlocking(blocking) {
          if (blocking) {
            this.causes.push({
              type: "blocking",
              source: { type: "user" },
              priority: 3
            });
          }
        }
        addBlockedBy(blockedBy) {
          if (blockedBy) {
            this.causes.push({
              type: "blocked-by",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addBlockOther(blockOther) {
          if (blockOther) {
            this.causes.push({
              type: "block-other",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addLabel(label, opts) {
          const labelDef = LABELS[label.val];
          if (!labelDef) {
            return;
          }
          const isSelf = label.src === this.did;
          const labeler = isSelf ? void 0 : opts.labelers.find((s) => s.labeler.did === label.src);
          let labelPref = "ignore";
          if (!labelDef.configurable) {
            labelPref = labelDef.preferences[0];
          } else if (labelDef.flags.includes("adult") && !opts.adultContentEnabled) {
            labelPref = "hide";
          } else if (labeler?.labels[label.val]) {
            labelPref = labeler.labels[label.val];
          } else if (opts.labels[label.val]) {
            labelPref = opts.labels[label.val];
          }
          if (labelPref === "ignore") {
            return;
          }
          let priority;
          if (labelDef.flags.includes("no-override")) {
            priority = 1;
          } else if (labelPref === "hide") {
            priority = 2;
          } else if (labelDef.onwarn === "blur") {
            priority = 5;
          } else if (labelDef.onwarn === "blur-media") {
            priority = 7;
          } else {
            priority = 8;
          }
          this.causes.push({
            type: "label",
            source: isSelf || !labeler ? { type: "user" } : { type: "labeler", labeler: labeler.labeler },
            label,
            labelDef,
            setting: labelPref,
            priority
          });
        }
        addMuted(muted) {
          if (muted) {
            this.causes.push({
              type: "muted",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedByList(mutedByList) {
          if (mutedByList) {
            this.causes.push({
              type: "muted",
              source: { type: "list", list: mutedByList },
              priority: 6
            });
          }
        }
        finalizeDecision(opts) {
          const mod = new ModerationDecision();
          mod.did = this.did;
          if (!this.causes.length) {
            return mod;
          }
          this.causes.sort((a, b) => a.priority - b.priority);
          mod.cause = this.causes[0];
          mod.additionalCauses = this.causes.slice(1);
          if (mod.cause.type === "blocking" || mod.cause.type === "blocked-by" || mod.cause.type === "block-other") {
            mod.filter = true;
            mod.blur = true;
            mod.noOverride = true;
          } else if (mod.cause.type === "muted") {
            mod.filter = true;
            mod.blur = true;
          } else if (mod.cause.type === "label") {
            if (mod.cause.setting === "hide") {
              mod.filter = true;
            }
            switch (mod.cause.labelDef.onwarn) {
              case "alert":
                mod.alert = true;
                break;
              case "blur":
                mod.blur = true;
                break;
              case "blur-media":
                mod.blurMedia = true;
                break;
              case null:
                break;
            }
            if (mod.cause.labelDef.flags.includes("no-override")) {
              mod.noOverride = true;
            } else if (mod.cause.labelDef.flags.includes("adult") && !opts.adultContentEnabled) {
              mod.noOverride = true;
            }
          }
          return mod;
        }
      };
      function decideAccount(subject, opts) {
        const acc = new ModerationCauseAccumulator();
        acc.setDid(subject.did);
        if (subject.viewer?.muted) {
          if (subject.viewer?.mutedByList) {
            acc.addMutedByList(subject.viewer?.mutedByList);
          } else {
            acc.addMuted(subject.viewer?.muted);
          }
        }
        acc.addBlocking(subject.viewer?.blocking);
        acc.addBlockedBy(subject.viewer?.blockedBy);
        for (const label of filterAccountLabels(subject.labels)) {
          acc.addLabel(label, opts);
        }
        return acc.finalizeDecision(opts);
      }
      function filterAccountLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => !label.uri.endsWith("/app.bsky.actor.profile/self"));
      }
      function decideProfile(subject, opts) {
        const acc = new ModerationCauseAccumulator();
        acc.setDid(subject.did);
        for (const label of filterProfileLabels(subject.labels)) {
          acc.addLabel(label, opts);
        }
        return acc.finalizeDecision(opts);
      }
      function filterProfileLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => label.uri.endsWith("/app.bsky.actor.profile/self"));
      }
      function decidePost(subject, opts) {
        const acc = new ModerationCauseAccumulator();
        acc.setDid(subject.author.did);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel(label, opts);
          }
        }
        return acc.finalizeDecision(opts);
      }
      function decideQuotedPost(subject, opts) {
        const acc = new ModerationCauseAccumulator();
        if (record_exports.isViewRecord(subject.record)) {
          acc.setDid(subject.record.author.did);
          if (subject.record.labels?.length) {
            for (const label of subject.record.labels) {
              acc.addLabel(label, opts);
            }
          }
        } else if (record_exports.isViewBlocked(subject.record)) {
          acc.setDid(subject.record.author.did);
          if (subject.record.author.viewer?.blocking) {
            acc.addBlocking(subject.record.author.viewer?.blocking);
          } else if (subject.record.author.viewer?.blockedBy) {
            acc.addBlockedBy(subject.record.author.viewer?.blockedBy);
          } else {
            acc.addBlockOther(true);
          }
        }
        return acc.finalizeDecision(opts);
      }
      function decideQuotedPostAccount(subject, opts) {
        if (record_exports.isViewRecord(subject.record)) {
          return decideAccount(subject.record.author, opts);
        }
        return ModerationDecision.noop();
      }
      function decideQuotedPostWithMedia(subject, opts) {
        const acc = new ModerationCauseAccumulator();
        if (record_exports.isViewRecord(subject.record.record)) {
          acc.setDid(subject.record.record.author.did);
          if (subject.record.record.labels?.length) {
            for (const label of subject.record.record.labels) {
              acc.addLabel(label, opts);
            }
          }
        } else if (record_exports.isViewBlocked(subject.record.record)) {
          acc.setDid(subject.record.record.author.did);
          if (subject.record.record.author.viewer?.blocking) {
            acc.addBlocking(subject.record.record.author.viewer?.blocking);
          } else if (subject.record.record.author.viewer?.blockedBy) {
            acc.addBlockedBy(subject.record.record.author.viewer?.blockedBy);
          } else {
            acc.addBlockOther(true);
          }
        }
        return acc.finalizeDecision(opts);
      }
      function decideQuotedPostWithMediaAccount(subject, opts) {
        if (record_exports.isViewRecord(subject.record.record)) {
          return decideAccount(subject.record.record.author, opts);
        }
        return ModerationDecision.noop();
      }
      function decideFeedGenerator(subject, opts) {
        return ModerationDecision.noop();
      }
      function decideUserList(subject, opts) {
        return ModerationDecision.noop();
      }
      function takeHighestPriorityDecision(...decisions) {
        const filtered = decisions.filter((d) => !!d);
        if (filtered.length === 0) {
          return ModerationDecision.noop();
        }
        filtered.sort((a, b) => {
          if (a.cause && b.cause) {
            return a.cause.priority - b.cause.priority;
          }
          if (a.cause) {
            return -1;
          }
          if (b.cause) {
            return 1;
          }
          return 0;
        });
        return filtered[0];
      }
      function downgradeDecision(decision, to) {
        decision.filter = false;
        decision.noOverride = false;
        if (to === "noop") {
          decision.blur = false;
          decision.blurMedia = false;
          decision.alert = false;
          delete decision.cause;
        } else if (to === "alert") {
          decision.blur = false;
          decision.blurMedia = false;
          decision.alert = true;
        }
      }
      function isModerationDecisionNoop(decision, { ignoreFilter } = { ignoreFilter: false }) {
        if (!decision) {
          return true;
        }
        if (decision.alert) {
          return false;
        }
        if (decision.blur) {
          return false;
        }
        if (decision.filter && !ignoreFilter) {
          return false;
        }
        return true;
      }
      function isQuotedPost(embed) {
        return Boolean(embed && record_exports.isView(embed));
      }
      function isQuotedPostWithMedia(embed) {
        return Boolean(embed && recordWithMedia_exports.isView(embed));
      }
      function toModerationUI(decision) {
        return {
          cause: decision.cause,
          filter: decision.filter,
          blur: decision.blur,
          alert: decision.alert,
          noOverride: decision.noOverride
        };
      }
      function moderateProfile(subject, opts) {
        const account = decideAccount(subject, opts);
        const profile = decideProfile(subject, opts);
        if (account.blurMedia) {
          account.blur = true;
        }
        profile.filter = false;
        if (!isModerationDecisionNoop(account) && account.did === opts.userDid) {
          downgradeDecision(account, "alert");
        }
        if (!isModerationDecisionNoop(profile) && profile.did === opts.userDid) {
          downgradeDecision(profile, "alert");
        }
        let avatarBlur = false;
        let avatarNoOverride = false;
        if ((account.blur || account.blurMedia) && account.cause?.type !== "muted") {
          avatarBlur = true;
          avatarNoOverride = account.noOverride || profile.noOverride;
        } else if (profile.blur || profile.blurMedia) {
          avatarBlur = true;
          avatarNoOverride = account.noOverride || profile.noOverride;
        }
        if (account.cause?.type === "blocking" || account.cause?.type === "blocked-by" || account.cause?.type === "muted") {
          account.blur = false;
          account.noOverride = false;
        }
        return {
          decisions: { account, profile },
          account: account.filter || account.blur || account.alert ? toModerationUI(account) : {},
          profile: profile.filter || profile.blur || profile.alert ? toModerationUI(profile) : {},
          avatar: {
            blur: avatarBlur,
            alert: account.alert || profile.alert,
            noOverride: avatarNoOverride
          }
        };
      }
      function moderatePost(subject, opts) {
        const post = decidePost(subject, opts);
        const account = decideAccount(subject.author, opts);
        const profile = decideProfile(subject.author, opts);
        let quote;
        let quotedAccount;
        if (isQuotedPost(subject.embed)) {
          quote = decideQuotedPost(subject.embed, opts);
          quotedAccount = decideQuotedPostAccount(subject.embed, opts);
        } else if (isQuotedPostWithMedia(subject.embed)) {
          quote = decideQuotedPostWithMedia(subject.embed, opts);
          quotedAccount = decideQuotedPostWithMediaAccount(subject.embed, opts);
        }
        if (quote?.blurMedia) {
          quote.blur = true;
        }
        if (!isModerationDecisionNoop(post) && post.did === opts.userDid) {
          downgradeDecision(post, "blur");
        }
        if (account.cause && account.did === opts.userDid) {
          downgradeDecision(account, "noop");
        }
        if (profile.cause && profile.did === opts.userDid) {
          downgradeDecision(profile, "noop");
        }
        if (quote && !isModerationDecisionNoop(quote) && quote.did === opts.userDid) {
          downgradeDecision(quote, "blur");
        }
        if (quotedAccount && !isModerationDecisionNoop(quotedAccount) && quotedAccount.did === opts.userDid) {
          downgradeDecision(quotedAccount, "noop");
        }
        const mergedForFeed = takeHighestPriorityDecision(post, account, quote, quotedAccount);
        const mergedForView = takeHighestPriorityDecision(post, account);
        const mergedQuote = takeHighestPriorityDecision(quote, quotedAccount);
        let blurAvatar = false;
        if ((account.blur || account.blurMedia) && account.cause?.type !== "muted") {
          blurAvatar = true;
        } else if ((profile.blur || profile.blurMedia) && profile.cause?.type !== "muted") {
          blurAvatar = true;
        }
        return {
          decisions: { post, account, profile, quote, quotedAccount },
          content: {
            cause: !isModerationDecisionNoop(mergedForView) ? mergedForView.cause : mergedForFeed.filter ? mergedForFeed.cause : void 0,
            filter: mergedForFeed.filter,
            blur: mergedForView.blur,
            alert: mergedForView.alert,
            noOverride: mergedForView.noOverride
          },
          avatar: {
            blur: blurAvatar,
            alert: account.alert || profile.alert,
            noOverride: account.noOverride || profile.noOverride
          },
          embed: !isModerationDecisionNoop(mergedQuote, { ignoreFilter: true }) ? {
            cause: mergedQuote.cause,
            blur: mergedQuote.blur,
            alert: mergedQuote.alert,
            noOverride: mergedQuote.noOverride
          } : account.blurMedia ? {
            cause: account.cause,
            blur: true,
            noOverride: account.noOverride
          } : post.blurMedia ? {
            cause: post.cause,
            blur: true,
            noOverride: post.noOverride
          } : {}
        };
      }
      function moderateFeedGenerator(subject, opts) {
        const feedGenerator = decideFeedGenerator(subject, opts);
        const account = decideAccount(subject.creator, opts);
        const profile = decideProfile(subject.creator, opts);
        const merged = takeHighestPriorityDecision(feedGenerator, account);
        return {
          decisions: { feedGenerator, account, profile },
          content: {
            cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,
            filter: merged.filter,
            blur: merged.blur,
            alert: merged.alert,
            noOverride: merged.noOverride
          },
          avatar: {
            blur: account.blurMedia || profile.blurMedia,
            alert: account.alert,
            noOverride: account.noOverride || profile.noOverride
          }
        };
      }
      function moderateUserList(subject, opts) {
        const userList = decideUserList(subject, opts);
        const account = defs_exports5.isProfileViewBasic(subject.creator) ? decideAccount(subject.creator, opts) : ModerationDecision.noop();
        const profile = defs_exports5.isProfileViewBasic(subject.creator) ? decideProfile(subject.creator, opts) : ModerationDecision.noop();
        const merged = takeHighestPriorityDecision(userList, account);
        return {
          decisions: { userList, account, profile },
          content: {
            cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,
            filter: merged.filter,
            blur: merged.blur,
            alert: merged.alert,
            noOverride: merged.noOverride
          },
          avatar: {
            blur: account.blurMedia || profile.blurMedia,
            alert: account.alert,
            noOverride: account.noOverride || profile.noOverride
          }
        };
      }
      var LABEL_GROUPS = {
        system: {
          id: "system",
          configurable: false,
          labels: [LABELS["!hide"], LABELS["!no-promote"], LABELS["!warn"]],
          strings: {
            settings: {
              en: {
                name: "System",
                description: "Moderator overrides for special cases."
              }
            }
          }
        },
        legal: {
          id: "legal",
          configurable: false,
          labels: [LABELS["dmca-violation"], LABELS["doxxing"]],
          strings: {
            settings: {
              en: {
                name: "Legal",
                description: "Content removed for legal reasons."
              }
            }
          }
        },
        sexual: {
          id: "sexual",
          configurable: true,
          labels: [LABELS["porn"], LABELS["sexual"], LABELS["nudity"]],
          strings: {
            settings: {
              en: {
                name: "Adult Content",
                description: "Content which is sexual in nature."
              }
            }
          }
        },
        violence: {
          id: "violence",
          configurable: true,
          labels: [
            LABELS["nsfl"],
            LABELS["corpse"],
            LABELS["gore"],
            LABELS["torture"],
            LABELS["self-harm"]
          ],
          strings: {
            settings: {
              en: {
                name: "Violence",
                description: "Content which is violent or deeply disturbing."
              }
            }
          }
        },
        intolerance: {
          id: "intolerance",
          configurable: true,
          labels: [
            LABELS["intolerant-race"],
            LABELS["intolerant-gender"],
            LABELS["intolerant-sexual-orientation"],
            LABELS["intolerant-religion"],
            LABELS["intolerant"],
            LABELS["icon-intolerant"]
          ],
          strings: {
            settings: {
              en: {
                name: "Intolerance",
                description: "Content or behavior which is hateful or intolerant toward a group of people."
              }
            }
          }
        },
        rude: {
          id: "rude",
          configurable: true,
          labels: [LABELS["threat"]],
          strings: {
            settings: {
              en: {
                name: "Rude",
                description: "Behavior which is rude toward other users."
              }
            }
          }
        },
        curation: {
          id: "curation",
          configurable: true,
          labels: [LABELS["spoiler"]],
          strings: {
            settings: {
              en: {
                name: "Curational",
                description: "Subjective moderation geared towards curating a more positive environment."
              }
            }
          }
        },
        spam: {
          id: "spam",
          configurable: true,
          labels: [LABELS["spam"]],
          strings: {
            settings: {
              en: {
                name: "Spam",
                description: "Content which doesn't add to the conversation."
              }
            }
          }
        },
        misinfo: {
          id: "misinfo",
          configurable: true,
          labels: [
            LABELS["account-security"],
            LABELS["net-abuse"],
            LABELS["impersonation"],
            LABELS["scam"],
            LABELS["misleading"]
          ],
          strings: {
            settings: {
              en: {
                name: "Misinformation",
                description: "Content which misleads or defrauds users."
              }
            }
          }
        }
      };
      var FEED_VIEW_PREF_DEFAULTS = {
        hideReplies: false,
        hideRepliesByUnfollowed: false,
        hideRepliesByLikeCount: 0,
        hideReposts: false,
        hideQuotePosts: false
      };
      var THREAD_VIEW_PREF_DEFAULTS = {
        sort: "oldest",
        prioritizeFollowedUsers: true
      };
      var BskyAgent = class extends AtpAgent {
        constructor() {
          super(...arguments);
          this.getTimeline = (params2, opts) => this.api.app.bsky.feed.getTimeline(params2, opts);
          this.getAuthorFeed = (params2, opts) => this.api.app.bsky.feed.getAuthorFeed(params2, opts);
          this.getActorLikes = (params2, opts) => this.api.app.bsky.feed.getActorLikes(params2, opts);
          this.getPostThread = (params2, opts) => this.api.app.bsky.feed.getPostThread(params2, opts);
          this.getPost = (params2) => this.api.app.bsky.feed.post.get(params2);
          this.getPosts = (params2, opts) => this.api.app.bsky.feed.getPosts(params2, opts);
          this.getLikes = (params2, opts) => this.api.app.bsky.feed.getLikes(params2, opts);
          this.getRepostedBy = (params2, opts) => this.api.app.bsky.feed.getRepostedBy(params2, opts);
          this.getFollows = (params2, opts) => this.api.app.bsky.graph.getFollows(params2, opts);
          this.getFollowers = (params2, opts) => this.api.app.bsky.graph.getFollowers(params2, opts);
          this.getProfile = (params2, opts) => this.api.app.bsky.actor.getProfile(params2, opts);
          this.getProfiles = (params2, opts) => this.api.app.bsky.actor.getProfiles(params2, opts);
          this.getSuggestions = (params2, opts) => this.api.app.bsky.actor.getSuggestions(params2, opts);
          this.searchActors = (params2, opts) => this.api.app.bsky.actor.searchActors(params2, opts);
          this.searchActorsTypeahead = (params2, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params2, opts);
          this.listNotifications = (params2, opts) => this.api.app.bsky.notification.listNotifications(params2, opts);
          this.countUnreadNotifications = (params2, opts) => this.api.app.bsky.notification.getUnreadCount(params2, opts);
        }
        get app() {
          return this.api.app;
        }
        async post(record) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          record.createdAt = record.createdAt || (/* @__PURE__ */ new Date()).toISOString();
          return this.api.app.bsky.feed.post.create({ repo: this.session.did }, record);
        }
        async deletePost(postUri) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          const postUrip = new AtUri(postUri);
          return await this.api.app.bsky.feed.post.delete({
            repo: postUrip.hostname,
            rkey: postUrip.rkey
          });
        }
        async like(uri2, cid2) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          return await this.api.app.bsky.feed.like.create({ repo: this.session.did }, {
            subject: { uri: uri2, cid: cid2 },
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteLike(likeUri) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          const likeUrip = new AtUri(likeUri);
          return await this.api.app.bsky.feed.like.delete({
            repo: likeUrip.hostname,
            rkey: likeUrip.rkey
          });
        }
        async repost(uri2, cid2) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          return await this.api.app.bsky.feed.repost.create({ repo: this.session.did }, {
            subject: { uri: uri2, cid: cid2 },
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteRepost(repostUri) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          const repostUrip = new AtUri(repostUri);
          return await this.api.app.bsky.feed.repost.delete({
            repo: repostUrip.hostname,
            rkey: repostUrip.rkey
          });
        }
        async follow(subjectDid) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          return await this.api.app.bsky.graph.follow.create({ repo: this.session.did }, {
            subject: subjectDid,
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          });
        }
        async deleteFollow(followUri) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          const followUrip = new AtUri(followUri);
          return await this.api.app.bsky.graph.follow.delete({
            repo: followUrip.hostname,
            rkey: followUrip.rkey
          });
        }
        async upsertProfile(updateFn) {
          if (!this.session) {
            throw new Error("Not logged in");
          }
          let retriesRemaining = 5;
          while (retriesRemaining >= 0) {
            const existing = await this.com.atproto.repo.getRecord({
              repo: this.session.did,
              collection: "app.bsky.actor.profile",
              rkey: "self"
            }).catch((_) => void 0);
            const updated = await updateFn(existing?.data.value);
            if (updated) {
              updated.$type = "app.bsky.actor.profile";
            }
            const validation = profile_exports.validateRecord(updated);
            if (!validation.success) {
              throw validation.error;
            }
            try {
              await this.com.atproto.repo.putRecord({
                repo: this.session.did,
                collection: "app.bsky.actor.profile",
                rkey: "self",
                record: updated,
                swapRecord: existing?.data.cid || null
              });
            } catch (e) {
              if (retriesRemaining > 0 && e instanceof putRecord_exports.InvalidSwapError) {
                retriesRemaining--;
                continue;
              } else {
                throw e;
              }
            }
            break;
          }
        }
        async mute(actor) {
          return this.api.app.bsky.graph.muteActor({ actor });
        }
        async unmute(actor) {
          return this.api.app.bsky.graph.unmuteActor({ actor });
        }
        async updateSeenNotifications(seenAt) {
          seenAt = seenAt || (/* @__PURE__ */ new Date()).toISOString();
          return this.api.app.bsky.notification.updateSeen({
            seenAt
          });
        }
        async getPreferences() {
          const prefs = {
            feeds: {
              saved: void 0,
              pinned: void 0
            },
            feedViewPrefs: {
              home: {
                ...FEED_VIEW_PREF_DEFAULTS
              }
            },
            threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },
            adultContentEnabled: false,
            contentLabels: {},
            birthDate: void 0
          };
          const res = await this.app.bsky.actor.getPreferences({});
          for (const pref of res.data.preferences) {
            if (defs_exports5.isAdultContentPref(pref) && defs_exports5.validateAdultContentPref(pref).success) {
              prefs.adultContentEnabled = pref.enabled;
            } else if (defs_exports5.isContentLabelPref(pref) && defs_exports5.validateAdultContentPref(pref).success) {
              let value = pref.visibility;
              if (value === "show") {
                value = "ignore";
              }
              if (value === "ignore" || value === "warn" || value === "hide") {
                prefs.contentLabels[pref.label] = value;
              }
            } else if (defs_exports5.isSavedFeedsPref(pref) && defs_exports5.validateSavedFeedsPref(pref).success) {
              prefs.feeds.saved = pref.saved;
              prefs.feeds.pinned = pref.pinned;
            } else if (defs_exports5.isPersonalDetailsPref(pref) && defs_exports5.validatePersonalDetailsPref(pref).success) {
              if (pref.birthDate) {
                prefs.birthDate = new Date(pref.birthDate);
              }
            } else if (defs_exports5.isFeedViewPref(pref) && defs_exports5.validateFeedViewPref(pref).success) {
              const { $type, feed, ...v } = pref;
              prefs.feedViewPrefs[pref.feed] = { ...FEED_VIEW_PREF_DEFAULTS, ...v };
            } else if (defs_exports5.isThreadViewPref(pref) && defs_exports5.validateThreadViewPref(pref).success) {
              const { $type, ...v } = pref;
              prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v };
            }
          }
          return prefs;
        }
        async setSavedFeeds(saved, pinned) {
          return updateFeedPreferences(this, () => ({
            saved,
            pinned
          }));
        }
        async addSavedFeed(v) {
          return updateFeedPreferences(this, (saved, pinned) => ({
            saved: [...saved.filter((uri2) => uri2 !== v), v],
            pinned
          }));
        }
        async removeSavedFeed(v) {
          return updateFeedPreferences(this, (saved, pinned) => ({
            saved: saved.filter((uri2) => uri2 !== v),
            pinned: pinned.filter((uri2) => uri2 !== v)
          }));
        }
        async addPinnedFeed(v) {
          return updateFeedPreferences(this, (saved, pinned) => ({
            saved: [...saved.filter((uri2) => uri2 !== v), v],
            pinned: [...pinned.filter((uri2) => uri2 !== v), v]
          }));
        }
        async removePinnedFeed(v) {
          return updateFeedPreferences(this, (saved, pinned) => ({
            saved,
            pinned: pinned.filter((uri2) => uri2 !== v)
          }));
        }
        async setAdultContentEnabled(v) {
          await updatePreferences(this, (prefs) => {
            let adultContentPref = prefs.findLast((pref) => defs_exports5.isAdultContentPref(pref) && defs_exports5.validateAdultContentPref(pref).success);
            if (adultContentPref) {
              adultContentPref.enabled = v;
            } else {
              adultContentPref = {
                $type: "app.bsky.actor.defs#adultContentPref",
                enabled: v
              };
            }
            return prefs.filter((pref) => !defs_exports5.isAdultContentPref(pref)).concat([adultContentPref]);
          });
        }
        async setContentLabelPref(key, value) {
          if (value === "show") {
            value = "ignore";
          }
          await updatePreferences(this, (prefs) => {
            let labelPref = prefs.findLast((pref) => defs_exports5.isContentLabelPref(pref) && defs_exports5.validateAdultContentPref(pref).success && pref.label === key);
            if (labelPref) {
              labelPref.visibility = value;
            } else {
              labelPref = {
                $type: "app.bsky.actor.defs#contentLabelPref",
                label: key,
                visibility: value
              };
            }
            return prefs.filter((pref) => !defs_exports5.isContentLabelPref(pref) || pref.label !== key).concat([labelPref]);
          });
        }
        async setPersonalDetails({
          birthDate
        }) {
          birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
          await updatePreferences(this, (prefs) => {
            let personalDetailsPref = prefs.findLast((pref) => defs_exports5.isPersonalDetailsPref(pref) && defs_exports5.validatePersonalDetailsPref(pref).success);
            if (personalDetailsPref) {
              personalDetailsPref.birthDate = birthDate;
            } else {
              personalDetailsPref = {
                $type: "app.bsky.actor.defs#personalDetailsPref",
                birthDate
              };
            }
            return prefs.filter((pref) => !defs_exports5.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
          });
        }
        async setFeedViewPrefs(feed, pref) {
          await updatePreferences(this, (prefs) => {
            const existing = prefs.findLast((pref2) => defs_exports5.isFeedViewPref(pref2) && defs_exports5.validateFeedViewPref(pref2).success && pref2.feed === feed);
            if (existing) {
              pref = { ...existing, ...pref };
            }
            return prefs.filter((p) => !defs_exports5.isFeedViewPref(pref) || p.feed !== feed).concat([{ ...pref, $type: "app.bsky.actor.defs#feedViewPref", feed }]);
          });
        }
        async setThreadViewPrefs(pref) {
          await updatePreferences(this, (prefs) => {
            const existing = prefs.findLast((pref2) => defs_exports5.isThreadViewPref(pref2) && defs_exports5.validateThreadViewPref(pref2).success);
            if (existing) {
              pref = { ...existing, ...pref };
            }
            return prefs.filter((p) => !defs_exports5.isThreadViewPref(p)).concat([{ ...pref, $type: "app.bsky.actor.defs#threadViewPref" }]);
          });
        }
      };
      async function updatePreferences(agent, cb) {
        const res = await agent.app.bsky.actor.getPreferences({});
        const newPrefs = cb(res.data.preferences);
        if (newPrefs === false) {
          return;
        }
        await agent.app.bsky.actor.putPreferences({
          preferences: newPrefs
        });
      }
      async function updateFeedPreferences(agent, cb) {
        let res;
        await updatePreferences(agent, (prefs) => {
          let feedsPref = prefs.findLast((pref) => defs_exports5.isSavedFeedsPref(pref) && defs_exports5.validateSavedFeedsPref(pref).success);
          if (feedsPref) {
            res = cb(feedsPref.saved, feedsPref.pinned);
            feedsPref.saved = res.saved;
            feedsPref.pinned = res.pinned;
          } else {
            res = cb([], []);
            feedsPref = {
              $type: "app.bsky.actor.defs#savedFeedsPref",
              saved: res.saved,
              pinned: res.pinned
            };
          }
          return prefs.filter((pref) => !defs_exports5.isSavedFeedsPref(pref)).concat([feedsPref]);
        });
        return res;
      }
    }
  });

  // node_modules/cborg/lib/is.js
  function is(value) {
    if (value === null) {
      return "null";
    }
    if (value === void 0) {
      return "undefined";
    }
    if (value === true || value === false) {
      return "boolean";
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
      return typeOf;
    }
    if (typeOf === "function") {
      return "Function";
    }
    if (Array.isArray(value)) {
      return "Array";
    }
    if (isBuffer(value)) {
      return "Buffer";
    }
    const objectType = getObjectType(value);
    if (objectType) {
      return objectType;
    }
    return "Object";
  }
  function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
  }
  function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
      return objectTypeName;
    }
    return void 0;
  }
  var typeofs, objectTypeNames;
  var init_is = __esm({
    "node_modules/cborg/lib/is.js"() {
      typeofs = [
        "string",
        "number",
        "bigint",
        "symbol"
      ];
      objectTypeNames = [
        "Function",
        "Generator",
        "AsyncGenerator",
        "GeneratorFunction",
        "AsyncGeneratorFunction",
        "AsyncFunction",
        "Observable",
        "Array",
        "Buffer",
        "Object",
        "RegExp",
        "Date",
        "Error",
        "Map",
        "Set",
        "WeakMap",
        "WeakSet",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "DataView",
        "Promise",
        "URL",
        "HTMLElement",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
    }
  });

  // node_modules/cborg/lib/token.js
  var Type, Token;
  var init_token = __esm({
    "node_modules/cborg/lib/token.js"() {
      Type = class {
        /**
         * @param {number} major
         * @param {string} name
         * @param {boolean} terminal
         */
        constructor(major, name, terminal) {
          this.major = major;
          this.majorEncoded = major << 5;
          this.name = name;
          this.terminal = terminal;
        }
        /* c8 ignore next 3 */
        toString() {
          return `Type[${this.major}].${this.name}`;
        }
        /**
         * @param {Type} typ
         * @returns {number}
         */
        compare(typ) {
          return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
        }
      };
      Type.uint = new Type(0, "uint", true);
      Type.negint = new Type(1, "negint", true);
      Type.bytes = new Type(2, "bytes", true);
      Type.string = new Type(3, "string", true);
      Type.array = new Type(4, "array", false);
      Type.map = new Type(5, "map", false);
      Type.tag = new Type(6, "tag", false);
      Type.float = new Type(7, "float", true);
      Type.false = new Type(7, "false", true);
      Type.true = new Type(7, "true", true);
      Type.null = new Type(7, "null", true);
      Type.undefined = new Type(7, "undefined", true);
      Type.break = new Type(7, "break", true);
      Token = class {
        /**
         * @param {Type} type
         * @param {any} [value]
         * @param {number} [encodedLength]
         */
        constructor(type, value, encodedLength) {
          this.type = type;
          this.value = value;
          this.encodedLength = encodedLength;
          this.encodedBytes = void 0;
          this.byteValue = void 0;
        }
        /* c8 ignore next 3 */
        toString() {
          return `Token[${this.type}].${this.value}`;
        }
      };
    }
  });

  // node_modules/cborg/lib/byte-utils.js
  function isBuffer2(buf2) {
    return useBuffer && globalThis.Buffer.isBuffer(buf2);
  }
  function asU8A(buf2) {
    if (!(buf2 instanceof Uint8Array)) {
      return Uint8Array.from(buf2);
    }
    return isBuffer2(buf2) ? new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength) : buf2;
  }
  function compare(b1, b2) {
    if (isBuffer2(b1) && isBuffer2(b2)) {
      return b1.compare(b2);
    }
    for (let i = 0; i < b1.length; i++) {
      if (b1[i] === b2[i]) {
        continue;
      }
      return b1[i] < b2[i] ? -1 : 1;
    }
    return 0;
  }
  function utf8ToBytes(str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
      let c = str.charCodeAt(i);
      if (c < 128) {
        out[p++] = c;
      } else if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
        c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
        out[p++] = c >> 18 | 240;
        out[p++] = c >> 12 & 63 | 128;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
    return out;
  }
  function utf8Slice(buf2, offset, end) {
    const res = [];
    while (offset < end) {
      const firstByte = buf2[offset];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (offset + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf2[offset + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            fourthByte = buf2[offset + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  var useBuffer, textDecoder, textEncoder, toString, fromString, fromArray, slice, concat, alloc, MAX_ARGUMENTS_LENGTH;
  var init_byte_utils = __esm({
    "node_modules/cborg/lib/byte-utils.js"() {
      useBuffer = globalThis.process && // @ts-ignore
      !globalThis.process.browser && // @ts-ignore
      globalThis.Buffer && // @ts-ignore
      typeof globalThis.Buffer.isBuffer === "function";
      textDecoder = new TextDecoder();
      textEncoder = new TextEncoder();
      toString = useBuffer ? (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array} bytes
         * @param {number} start
         * @param {number} end
         */
        (bytes, start, end) => {
          return end - start > 64 ? (
            // eslint-disable-line operator-linebreak
            // @ts-ignore
            globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8")
          ) : utf8Slice(bytes, start, end);
        }
      ) : (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array} bytes
         * @param {number} start
         * @param {number} end
         */
        (bytes, start, end) => {
          return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
        }
      );
      fromString = useBuffer ? (
        // eslint-disable-line operator-linebreak
        /**
         * @param {string} string
         */
        (string) => {
          return string.length > 64 ? (
            // eslint-disable-line operator-linebreak
            // @ts-ignore
            globalThis.Buffer.from(string)
          ) : utf8ToBytes(string);
        }
      ) : (
        // eslint-disable-line operator-linebreak
        /**
         * @param {string} string
         */
        (string) => {
          return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);
        }
      );
      fromArray = (arr) => {
        return Uint8Array.from(arr);
      };
      slice = useBuffer ? (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array} bytes
         * @param {number} start
         * @param {number} end
         */
        (bytes, start, end) => {
          if (isBuffer2(bytes)) {
            return new Uint8Array(bytes.subarray(start, end));
          }
          return bytes.slice(start, end);
        }
      ) : (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array} bytes
         * @param {number} start
         * @param {number} end
         */
        (bytes, start, end) => {
          return bytes.slice(start, end);
        }
      );
      concat = useBuffer ? (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array[]} chunks
         * @param {number} length
         * @returns {Uint8Array}
         */
        (chunks, length2) => {
          chunks = chunks.map((c) => c instanceof Uint8Array ? c : (
            // eslint-disable-line operator-linebreak
            // @ts-ignore
            globalThis.Buffer.from(c)
          ));
          return asU8A(globalThis.Buffer.concat(chunks, length2));
        }
      ) : (
        // eslint-disable-line operator-linebreak
        /**
         * @param {Uint8Array[]} chunks
         * @param {number} length
         * @returns {Uint8Array}
         */
        (chunks, length2) => {
          const out = new Uint8Array(length2);
          let off = 0;
          for (let b of chunks) {
            if (off + b.length > out.length) {
              b = b.subarray(0, out.length - off);
            }
            out.set(b, off);
            off += b.length;
          }
          return out;
        }
      );
      alloc = useBuffer ? (
        // eslint-disable-line operator-linebreak
        /**
         * @param {number} size
         * @returns {Uint8Array}
         */
        (size) => {
          return globalThis.Buffer.allocUnsafe(size);
        }
      ) : (
        // eslint-disable-line operator-linebreak
        /**
         * @param {number} size
         * @returns {Uint8Array}
         */
        (size) => {
          return new Uint8Array(size);
        }
      );
      MAX_ARGUMENTS_LENGTH = 4096;
    }
  });

  // node_modules/cborg/lib/bl.js
  var defaultChunkSize, Bl;
  var init_bl = __esm({
    "node_modules/cborg/lib/bl.js"() {
      init_byte_utils();
      defaultChunkSize = 256;
      Bl = class {
        /**
         * @param {number} [chunkSize]
         */
        constructor(chunkSize = defaultChunkSize) {
          this.chunkSize = chunkSize;
          this.cursor = 0;
          this.maxCursor = -1;
          this.chunks = [];
          this._initReuseChunk = null;
        }
        reset() {
          this.cursor = 0;
          this.maxCursor = -1;
          if (this.chunks.length) {
            this.chunks = [];
          }
          if (this._initReuseChunk !== null) {
            this.chunks.push(this._initReuseChunk);
            this.maxCursor = this._initReuseChunk.length - 1;
          }
        }
        /**
         * @param {Uint8Array|number[]} bytes
         */
        push(bytes) {
          let topChunk = this.chunks[this.chunks.length - 1];
          const newMax = this.cursor + bytes.length;
          if (newMax <= this.maxCursor + 1) {
            const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
            topChunk.set(bytes, chunkPos);
          } else {
            if (topChunk) {
              const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
              if (chunkPos < topChunk.length) {
                this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
                this.maxCursor = this.cursor - 1;
              }
            }
            if (bytes.length < 64 && bytes.length < this.chunkSize) {
              topChunk = alloc(this.chunkSize);
              this.chunks.push(topChunk);
              this.maxCursor += topChunk.length;
              if (this._initReuseChunk === null) {
                this._initReuseChunk = topChunk;
              }
              topChunk.set(bytes, 0);
            } else {
              this.chunks.push(bytes);
              this.maxCursor += bytes.length;
            }
          }
          this.cursor += bytes.length;
        }
        /**
         * @param {boolean} [reset]
         * @returns {Uint8Array}
         */
        toBytes(reset = false) {
          let byts;
          if (this.chunks.length === 1) {
            const chunk = this.chunks[0];
            if (reset && this.cursor > chunk.length / 2) {
              byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
              this._initReuseChunk = null;
              this.chunks = [];
            } else {
              byts = slice(chunk, 0, this.cursor);
            }
          } else {
            byts = concat(this.chunks, this.cursor);
          }
          if (reset) {
            this.reset();
          }
          return byts;
        }
      };
    }
  });

  // node_modules/cborg/lib/common.js
  function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
      throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
  }
  var decodeErrPrefix, encodeErrPrefix, uintMinorPrefixBytes;
  var init_common = __esm({
    "node_modules/cborg/lib/common.js"() {
      decodeErrPrefix = "CBOR decode error:";
      encodeErrPrefix = "CBOR encode error:";
      uintMinorPrefixBytes = [];
      uintMinorPrefixBytes[23] = 1;
      uintMinorPrefixBytes[24] = 2;
      uintMinorPrefixBytes[25] = 3;
      uintMinorPrefixBytes[26] = 5;
      uintMinorPrefixBytes[27] = 9;
    }
  });

  // node_modules/cborg/lib/0uint.js
  function readUint8(data, offset, options) {
    assertEnoughData(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint16(data, offset, options) {
    assertEnoughData(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint32(data, offset, options) {
    assertEnoughData(data, offset, 4);
    const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint64(data, offset, options) {
    assertEnoughData(data, offset, 8);
    const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
      return Number(value);
    }
    if (options.allowBigInt === true) {
      return value;
    }
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
  }
  function decodeUint8(data, pos, _minor, options) {
    return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
  }
  function decodeUint16(data, pos, _minor, options) {
    return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
  }
  function decodeUint32(data, pos, _minor, options) {
    return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
  }
  function decodeUint64(data, pos, _minor, options) {
    return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
  }
  function encodeUint(buf2, token) {
    return encodeUintValue(buf2, 0, token.value);
  }
  function encodeUintValue(buf2, major, uint) {
    if (uint < uintBoundaries[0]) {
      const nuint = Number(uint);
      buf2.push([major | nuint]);
    } else if (uint < uintBoundaries[1]) {
      const nuint = Number(uint);
      buf2.push([major | 24, nuint]);
    } else if (uint < uintBoundaries[2]) {
      const nuint = Number(uint);
      buf2.push([major | 25, nuint >>> 8, nuint & 255]);
    } else if (uint < uintBoundaries[3]) {
      const nuint = Number(uint);
      buf2.push([major | 26, nuint >>> 24 & 255, nuint >>> 16 & 255, nuint >>> 8 & 255, nuint & 255]);
    } else {
      const buint = BigInt(uint);
      if (buint < uintBoundaries[4]) {
        const set = [major | 27, 0, 0, 0, 0, 0, 0, 0];
        let lo = Number(buint & BigInt(4294967295));
        let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
        set[8] = lo & 255;
        lo = lo >> 8;
        set[7] = lo & 255;
        lo = lo >> 8;
        set[6] = lo & 255;
        lo = lo >> 8;
        set[5] = lo & 255;
        set[4] = hi & 255;
        hi = hi >> 8;
        set[3] = hi & 255;
        hi = hi >> 8;
        set[2] = hi & 255;
        hi = hi >> 8;
        set[1] = hi & 255;
        buf2.push(set);
      } else {
        throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
      }
    }
  }
  var uintBoundaries;
  var init_uint = __esm({
    "node_modules/cborg/lib/0uint.js"() {
      init_token();
      init_common();
      uintBoundaries = [24, 256, 65536, 4294967296, BigInt("18446744073709551616")];
      encodeUint.encodedSize = function encodedSize(token) {
        return encodeUintValue.encodedSize(token.value);
      };
      encodeUintValue.encodedSize = function encodedSize2(uint) {
        if (uint < uintBoundaries[0]) {
          return 1;
        }
        if (uint < uintBoundaries[1]) {
          return 2;
        }
        if (uint < uintBoundaries[2]) {
          return 3;
        }
        if (uint < uintBoundaries[3]) {
          return 5;
        }
        return 9;
      };
      encodeUint.compareTokens = function compareTokens(tok1, tok2) {
        return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : (
          /* c8 ignore next */
          0
        );
      };
    }
  });

  // node_modules/cborg/lib/1negint.js
  function decodeNegint8(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
  }
  function decodeNegint16(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
  }
  function decodeNegint32(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
  }
  function decodeNegint64(data, pos, _minor, options) {
    const int = readUint64(data, pos + 1, options);
    if (typeof int !== "bigint") {
      const value = -1 - int;
      if (value >= Number.MIN_SAFE_INTEGER) {
        return new Token(Type.negint, value, 9);
      }
    }
    if (options.allowBigInt !== true) {
      throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
    }
    return new Token(Type.negint, neg1b - BigInt(int), 9);
  }
  function encodeNegint(buf2, token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    encodeUintValue(buf2, token.type.majorEncoded, unsigned);
  }
  var neg1b, pos1b;
  var init_negint = __esm({
    "node_modules/cborg/lib/1negint.js"() {
      init_token();
      init_uint();
      init_common();
      neg1b = BigInt(-1);
      pos1b = BigInt(1);
      encodeNegint.encodedSize = function encodedSize3(token) {
        const negint = token.value;
        const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
        if (unsigned < uintBoundaries[0]) {
          return 1;
        }
        if (unsigned < uintBoundaries[1]) {
          return 2;
        }
        if (unsigned < uintBoundaries[2]) {
          return 3;
        }
        if (unsigned < uintBoundaries[3]) {
          return 5;
        }
        return 9;
      };
      encodeNegint.compareTokens = function compareTokens2(tok1, tok2) {
        return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : (
          /* c8 ignore next */
          0
        );
      };
    }
  });

  // node_modules/cborg/lib/2bytes.js
  function toToken(data, pos, prefix, length2) {
    assertEnoughData(data, pos, prefix + length2);
    const buf2 = slice(data, pos + prefix, pos + prefix + length2);
    return new Token(Type.bytes, buf2, prefix + length2);
  }
  function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
  }
  function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeBytes64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l);
  }
  function tokenBytes(token) {
    if (token.encodedBytes === void 0) {
      token.encodedBytes = token.type === Type.string ? fromString(token.value) : token.value;
    }
    return token.encodedBytes;
  }
  function encodeBytes(buf2, token) {
    const bytes = tokenBytes(token);
    encodeUintValue(buf2, token.type.majorEncoded, bytes.length);
    buf2.push(bytes);
  }
  function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);
  }
  var init_bytes2 = __esm({
    "node_modules/cborg/lib/2bytes.js"() {
      init_token();
      init_common();
      init_uint();
      init_byte_utils();
      encodeBytes.encodedSize = function encodedSize4(token) {
        const bytes = tokenBytes(token);
        return encodeUintValue.encodedSize(bytes.length) + bytes.length;
      };
      encodeBytes.compareTokens = function compareTokens3(tok1, tok2) {
        return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
      };
    }
  });

  // node_modules/cborg/lib/3string.js
  function toToken2(data, pos, prefix, length2, options) {
    const totLength = prefix + length2;
    assertEnoughData(data, pos, totLength);
    const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
      tok.byteValue = slice(data, pos + prefix, pos + totLength);
    }
    return tok;
  }
  function decodeStringCompact(data, pos, minor, options) {
    return toToken2(data, pos, 1, minor, options);
  }
  function decodeString8(data, pos, _minor, options) {
    return toToken2(data, pos, 2, readUint8(data, pos + 1, options), options);
  }
  function decodeString16(data, pos, _minor, options) {
    return toToken2(data, pos, 3, readUint16(data, pos + 1, options), options);
  }
  function decodeString32(data, pos, _minor, options) {
    return toToken2(data, pos, 5, readUint32(data, pos + 1, options), options);
  }
  function decodeString64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
    }
    return toToken2(data, pos, 9, l, options);
  }
  var encodeString;
  var init_string = __esm({
    "node_modules/cborg/lib/3string.js"() {
      init_token();
      init_common();
      init_uint();
      init_bytes2();
      init_byte_utils();
      encodeString = encodeBytes;
    }
  });

  // node_modules/cborg/lib/4array.js
  function toToken3(_data, _pos, prefix, length2) {
    return new Token(Type.array, length2, prefix);
  }
  function decodeArrayCompact(data, pos, minor, _options) {
    return toToken3(data, pos, 1, minor);
  }
  function decodeArray8(data, pos, _minor, options) {
    return toToken3(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeArray16(data, pos, _minor, options) {
    return toToken3(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeArray32(data, pos, _minor, options) {
    return toToken3(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeArray64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
    }
    return toToken3(data, pos, 9, l);
  }
  function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken3(data, pos, 1, Infinity);
  }
  function encodeArray(buf2, token) {
    encodeUintValue(buf2, Type.array.majorEncoded, token.value);
  }
  var init_array = __esm({
    "node_modules/cborg/lib/4array.js"() {
      init_token();
      init_uint();
      init_common();
      encodeArray.compareTokens = encodeUint.compareTokens;
      encodeArray.encodedSize = function encodedSize5(token) {
        return encodeUintValue.encodedSize(token.value);
      };
    }
  });

  // node_modules/cborg/lib/5map.js
  function toToken4(_data, _pos, prefix, length2) {
    return new Token(Type.map, length2, prefix);
  }
  function decodeMapCompact(data, pos, minor, _options) {
    return toToken4(data, pos, 1, minor);
  }
  function decodeMap8(data, pos, _minor, options) {
    return toToken4(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeMap16(data, pos, _minor, options) {
    return toToken4(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeMap32(data, pos, _minor, options) {
    return toToken4(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeMap64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
    }
    return toToken4(data, pos, 9, l);
  }
  function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken4(data, pos, 1, Infinity);
  }
  function encodeMap(buf2, token) {
    encodeUintValue(buf2, Type.map.majorEncoded, token.value);
  }
  var init_map = __esm({
    "node_modules/cborg/lib/5map.js"() {
      init_token();
      init_uint();
      init_common();
      encodeMap.compareTokens = encodeUint.compareTokens;
      encodeMap.encodedSize = function encodedSize6(token) {
        return encodeUintValue.encodedSize(token.value);
      };
    }
  });

  // node_modules/cborg/lib/6tag.js
  function decodeTagCompact(_data, _pos, minor, _options) {
    return new Token(Type.tag, minor, 1);
  }
  function decodeTag8(data, pos, _minor, options) {
    return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
  }
  function decodeTag16(data, pos, _minor, options) {
    return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
  }
  function decodeTag32(data, pos, _minor, options) {
    return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
  }
  function decodeTag64(data, pos, _minor, options) {
    return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
  }
  function encodeTag(buf2, token) {
    encodeUintValue(buf2, Type.tag.majorEncoded, token.value);
  }
  var init_tag = __esm({
    "node_modules/cborg/lib/6tag.js"() {
      init_token();
      init_uint();
      encodeTag.compareTokens = encodeUint.compareTokens;
      encodeTag.encodedSize = function encodedSize7(token) {
        return encodeUintValue.encodedSize(token.value);
      };
    }
  });

  // node_modules/cborg/lib/7float.js
  function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
      throw new Error(`${decodeErrPrefix} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
      return new Token(Type.null, null, 1);
    }
    return new Token(Type.undefined, void 0, 1);
  }
  function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return new Token(Type.break, void 0, 1);
  }
  function createToken(value, bytes, options) {
    if (options) {
      if (options.allowNaN === false && Number.isNaN(value)) {
        throw new Error(`${decodeErrPrefix} NaN values are not supported`);
      }
      if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
        throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
      }
    }
    return new Token(Type.float, value, bytes);
  }
  function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
  }
  function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
  }
  function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
  }
  function encodeFloat(buf2, token, options) {
    const float = token.value;
    if (float === false) {
      buf2.push([Type.float.majorEncoded | MINOR_FALSE]);
    } else if (float === true) {
      buf2.push([Type.float.majorEncoded | MINOR_TRUE]);
    } else if (float === null) {
      buf2.push([Type.float.majorEncoded | MINOR_NULL]);
    } else if (float === void 0) {
      buf2.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
    } else {
      let decoded;
      let success = false;
      if (!options || options.float64 !== true) {
        encodeFloat16(float);
        decoded = readFloat16(ui8a, 1);
        if (float === decoded || Number.isNaN(float)) {
          ui8a[0] = 249;
          buf2.push(ui8a.slice(0, 3));
          success = true;
        } else {
          encodeFloat32(float);
          decoded = readFloat32(ui8a, 1);
          if (float === decoded) {
            ui8a[0] = 250;
            buf2.push(ui8a.slice(0, 5));
            success = true;
          }
        }
      }
      if (!success) {
        encodeFloat64(float);
        decoded = readFloat64(ui8a, 1);
        ui8a[0] = 251;
        buf2.push(ui8a.slice(0, 9));
      }
    }
  }
  function encodeFloat16(inp) {
    if (inp === Infinity) {
      dataView.setUint16(0, 31744, false);
    } else if (inp === -Infinity) {
      dataView.setUint16(0, 64512, false);
    } else if (Number.isNaN(inp)) {
      dataView.setUint16(0, 32256, false);
    } else {
      dataView.setFloat32(0, inp);
      const valu32 = dataView.getUint32(0);
      const exponent = (valu32 & 2139095040) >> 23;
      const mantissa = valu32 & 8388607;
      if (exponent === 255) {
        dataView.setUint16(0, 31744, false);
      } else if (exponent === 0) {
        dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
      } else {
        const logicalExponent = exponent - 127;
        if (logicalExponent < -24) {
          dataView.setUint16(0, 0);
        } else if (logicalExponent < -14) {
          dataView.setUint16(0, (valu32 & 2147483648) >> 16 | /* sign bit */
          1 << 24 + logicalExponent, false);
        } else {
          dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
        }
      }
    }
  }
  function readFloat16(ui8a2, pos) {
    if (ui8a2.length - pos < 2) {
      throw new Error(`${decodeErrPrefix} not enough data for float16`);
    }
    const half = (ui8a2[pos] << 8) + ui8a2[pos + 1];
    if (half === 31744) {
      return Infinity;
    }
    if (half === 64512) {
      return -Infinity;
    }
    if (half === 32256) {
      return NaN;
    }
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) {
      val = mant * 2 ** -24;
    } else if (exp !== 31) {
      val = (mant + 1024) * 2 ** (exp - 25);
    } else {
      val = mant === 0 ? Infinity : NaN;
    }
    return half & 32768 ? -val : val;
  }
  function encodeFloat32(inp) {
    dataView.setFloat32(0, inp, false);
  }
  function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) {
      throw new Error(`${decodeErrPrefix} not enough data for float32`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 4).getFloat32(0, false);
  }
  function encodeFloat64(inp) {
    dataView.setFloat64(0, inp, false);
  }
  function readFloat64(ui8a2, pos) {
    if (ui8a2.length - pos < 8) {
      throw new Error(`${decodeErrPrefix} not enough data for float64`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 8).getFloat64(0, false);
  }
  var MINOR_FALSE, MINOR_TRUE, MINOR_NULL, MINOR_UNDEFINED, buffer, dataView, ui8a;
  var init_float = __esm({
    "node_modules/cborg/lib/7float.js"() {
      init_token();
      init_common();
      init_uint();
      MINOR_FALSE = 20;
      MINOR_TRUE = 21;
      MINOR_NULL = 22;
      MINOR_UNDEFINED = 23;
      encodeFloat.encodedSize = function encodedSize8(token, options) {
        const float = token.value;
        if (float === false || float === true || float === null || float === void 0) {
          return 1;
        }
        if (!options || options.float64 !== true) {
          encodeFloat16(float);
          let decoded = readFloat16(ui8a, 1);
          if (float === decoded || Number.isNaN(float)) {
            return 3;
          }
          encodeFloat32(float);
          decoded = readFloat32(ui8a, 1);
          if (float === decoded) {
            return 5;
          }
        }
        return 9;
      };
      buffer = new ArrayBuffer(9);
      dataView = new DataView(buffer, 1);
      ui8a = new Uint8Array(buffer, 0);
      encodeFloat.compareTokens = encodeUint.compareTokens;
    }
  });

  // node_modules/cborg/lib/jump.js
  function invalidMinor(data, pos, minor) {
    throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
  }
  function errorer(msg) {
    return () => {
      throw new Error(`${decodeErrPrefix} ${msg}`);
    };
  }
  function quickEncodeToken(token) {
    switch (token.type) {
      case Type.false:
        return fromArray([244]);
      case Type.true:
        return fromArray([245]);
      case Type.null:
        return fromArray([246]);
      case Type.bytes:
        if (!token.value.length) {
          return fromArray([64]);
        }
        return;
      case Type.string:
        if (token.value === "") {
          return fromArray([96]);
        }
        return;
      case Type.array:
        if (token.value === 0) {
          return fromArray([128]);
        }
        return;
      case Type.map:
        if (token.value === 0) {
          return fromArray([160]);
        }
        return;
      case Type.uint:
        if (token.value < 24) {
          return fromArray([Number(token.value)]);
        }
        return;
      case Type.negint:
        if (token.value >= -24) {
          return fromArray([31 - Number(token.value)]);
        }
    }
  }
  var jump, quick;
  var init_jump = __esm({
    "node_modules/cborg/lib/jump.js"() {
      init_token();
      init_uint();
      init_negint();
      init_bytes2();
      init_string();
      init_array();
      init_map();
      init_tag();
      init_float();
      init_common();
      init_byte_utils();
      jump = [];
      for (let i = 0; i <= 23; i++) {
        jump[i] = invalidMinor;
      }
      jump[24] = decodeUint8;
      jump[25] = decodeUint16;
      jump[26] = decodeUint32;
      jump[27] = decodeUint64;
      jump[28] = invalidMinor;
      jump[29] = invalidMinor;
      jump[30] = invalidMinor;
      jump[31] = invalidMinor;
      for (let i = 32; i <= 55; i++) {
        jump[i] = invalidMinor;
      }
      jump[56] = decodeNegint8;
      jump[57] = decodeNegint16;
      jump[58] = decodeNegint32;
      jump[59] = decodeNegint64;
      jump[60] = invalidMinor;
      jump[61] = invalidMinor;
      jump[62] = invalidMinor;
      jump[63] = invalidMinor;
      for (let i = 64; i <= 87; i++) {
        jump[i] = decodeBytesCompact;
      }
      jump[88] = decodeBytes8;
      jump[89] = decodeBytes16;
      jump[90] = decodeBytes32;
      jump[91] = decodeBytes64;
      jump[92] = invalidMinor;
      jump[93] = invalidMinor;
      jump[94] = invalidMinor;
      jump[95] = errorer("indefinite length bytes/strings are not supported");
      for (let i = 96; i <= 119; i++) {
        jump[i] = decodeStringCompact;
      }
      jump[120] = decodeString8;
      jump[121] = decodeString16;
      jump[122] = decodeString32;
      jump[123] = decodeString64;
      jump[124] = invalidMinor;
      jump[125] = invalidMinor;
      jump[126] = invalidMinor;
      jump[127] = errorer("indefinite length bytes/strings are not supported");
      for (let i = 128; i <= 151; i++) {
        jump[i] = decodeArrayCompact;
      }
      jump[152] = decodeArray8;
      jump[153] = decodeArray16;
      jump[154] = decodeArray32;
      jump[155] = decodeArray64;
      jump[156] = invalidMinor;
      jump[157] = invalidMinor;
      jump[158] = invalidMinor;
      jump[159] = decodeArrayIndefinite;
      for (let i = 160; i <= 183; i++) {
        jump[i] = decodeMapCompact;
      }
      jump[184] = decodeMap8;
      jump[185] = decodeMap16;
      jump[186] = decodeMap32;
      jump[187] = decodeMap64;
      jump[188] = invalidMinor;
      jump[189] = invalidMinor;
      jump[190] = invalidMinor;
      jump[191] = decodeMapIndefinite;
      for (let i = 192; i <= 215; i++) {
        jump[i] = decodeTagCompact;
      }
      jump[216] = decodeTag8;
      jump[217] = decodeTag16;
      jump[218] = decodeTag32;
      jump[219] = decodeTag64;
      jump[220] = invalidMinor;
      jump[221] = invalidMinor;
      jump[222] = invalidMinor;
      jump[223] = invalidMinor;
      for (let i = 224; i <= 243; i++) {
        jump[i] = errorer("simple values are not supported");
      }
      jump[244] = invalidMinor;
      jump[245] = invalidMinor;
      jump[246] = invalidMinor;
      jump[247] = decodeUndefined;
      jump[248] = errorer("simple values are not supported");
      jump[249] = decodeFloat16;
      jump[250] = decodeFloat32;
      jump[251] = decodeFloat64;
      jump[252] = invalidMinor;
      jump[253] = invalidMinor;
      jump[254] = invalidMinor;
      jump[255] = decodeBreak;
      quick = [];
      for (let i = 0; i < 24; i++) {
        quick[i] = new Token(Type.uint, i, 1);
      }
      for (let i = -1; i >= -24; i--) {
        quick[31 - i] = new Token(Type.negint, i, 1);
      }
      quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
      quick[96] = new Token(Type.string, "", 1);
      quick[128] = new Token(Type.array, 0, 1);
      quick[160] = new Token(Type.map, 0, 1);
      quick[244] = new Token(Type.false, false, 1);
      quick[245] = new Token(Type.true, true, 1);
      quick[246] = new Token(Type.null, null, 1);
    }
  });

  // node_modules/cborg/lib/encode.js
  function makeCborEncoders() {
    const encoders = [];
    encoders[Type.uint.major] = encodeUint;
    encoders[Type.negint.major] = encodeNegint;
    encoders[Type.bytes.major] = encodeBytes;
    encoders[Type.string.major] = encodeString;
    encoders[Type.array.major] = encodeArray;
    encoders[Type.map.major] = encodeMap;
    encoders[Type.tag.major] = encodeTag;
    encoders[Type.float.major] = encodeFloat;
    return encoders;
  }
  function objectToTokens(obj, options = {}, refStack) {
    const typ = is(obj);
    const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */
    options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === "function") {
      const tokens = customTypeEncoder(obj, typ, options, refStack);
      if (tokens != null) {
        return tokens;
      }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
      throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
  }
  function sortMapEntries(entries, options) {
    if (options.mapSorter) {
      entries.sort(options.mapSorter);
    }
  }
  function mapSorter(e1, e2) {
    const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
    const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
    if (keyToken1.type !== keyToken2.type) {
      return keyToken1.type.compare(keyToken2.type);
    }
    const major = keyToken1.type.major;
    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
    if (tcmp === 0) {
      console.warn("WARNING: complex key types used, CBOR key sorting guarantees are gone");
    }
    return tcmp;
  }
  function tokensToEncoded(buf2, tokens, encoders, options) {
    if (Array.isArray(tokens)) {
      for (const token of tokens) {
        tokensToEncoded(buf2, token, encoders, options);
      }
    } else {
      encoders[tokens.type.major](buf2, tokens, options);
    }
  }
  function encodeCustom(data, encoders, options) {
    const tokens = objectToTokens(data, options);
    if (!Array.isArray(tokens) && options.quickEncodeToken) {
      const quickBytes = options.quickEncodeToken(tokens);
      if (quickBytes) {
        return quickBytes;
      }
      const encoder = encoders[tokens.type.major];
      if (encoder.encodedSize) {
        const size = encoder.encodedSize(tokens, options);
        const buf2 = new Bl(size);
        encoder(buf2, tokens, options);
        if (buf2.chunks.length !== 1) {
          throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);
        }
        return asU8A(buf2.chunks[0]);
      }
    }
    buf.reset();
    tokensToEncoded(buf, tokens, encoders, options);
    return buf.toBytes(true);
  }
  function encode3(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    return encodeCustom(data, cborEncoders, options);
  }
  var defaultEncodeOptions, cborEncoders, buf, Ref, simpleTokens, typeEncoders;
  var init_encode = __esm({
    "node_modules/cborg/lib/encode.js"() {
      init_is();
      init_token();
      init_bl();
      init_common();
      init_jump();
      init_byte_utils();
      init_uint();
      init_negint();
      init_bytes2();
      init_string();
      init_array();
      init_map();
      init_tag();
      init_float();
      defaultEncodeOptions = {
        float64: false,
        mapSorter,
        quickEncodeToken
      };
      cborEncoders = makeCborEncoders();
      buf = new Bl();
      Ref = class _Ref {
        /**
         * @param {object|any[]} obj
         * @param {Reference|undefined} parent
         */
        constructor(obj, parent) {
          this.obj = obj;
          this.parent = parent;
        }
        /**
         * @param {object|any[]} obj
         * @returns {boolean}
         */
        includes(obj) {
          let p = this;
          do {
            if (p.obj === obj) {
              return true;
            }
          } while (p = p.parent);
          return false;
        }
        /**
         * @param {Reference|undefined} stack
         * @param {object|any[]} obj
         * @returns {Reference}
         */
        static createCheck(stack, obj) {
          if (stack && stack.includes(obj)) {
            throw new Error(`${encodeErrPrefix} object contains circular references`);
          }
          return new _Ref(obj, stack);
        }
      };
      simpleTokens = {
        null: new Token(Type.null, null),
        undefined: new Token(Type.undefined, void 0),
        true: new Token(Type.true, true),
        false: new Token(Type.false, false),
        emptyArray: new Token(Type.array, 0),
        emptyMap: new Token(Type.map, 0)
      };
      typeEncoders = {
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        number(obj, _typ, _options, _refStack) {
          if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
            return new Token(Type.float, obj);
          } else if (obj >= 0) {
            return new Token(Type.uint, obj);
          } else {
            return new Token(Type.negint, obj);
          }
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        bigint(obj, _typ, _options, _refStack) {
          if (obj >= BigInt(0)) {
            return new Token(Type.uint, obj);
          } else {
            return new Token(Type.negint, obj);
          }
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        Uint8Array(obj, _typ, _options, _refStack) {
          return new Token(Type.bytes, obj);
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        string(obj, _typ, _options, _refStack) {
          return new Token(Type.string, obj);
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        boolean(obj, _typ, _options, _refStack) {
          return obj ? simpleTokens.true : simpleTokens.false;
        },
        /**
         * @param {any} _obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        null(_obj2, _typ, _options, _refStack) {
          return simpleTokens.null;
        },
        /**
         * @param {any} _obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        undefined(_obj2, _typ, _options, _refStack) {
          return simpleTokens.undefined;
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        ArrayBuffer(obj, _typ, _options, _refStack) {
          return new Token(Type.bytes, new Uint8Array(obj));
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} _options
         * @param {Reference} [_refStack]
         * @returns {TokenOrNestedTokens}
         */
        DataView(obj, _typ, _options, _refStack) {
          return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
        },
        /**
         * @param {any} obj
         * @param {string} _typ
         * @param {EncodeOptions} options
         * @param {Reference} [refStack]
         * @returns {TokenOrNestedTokens}
         */
        Array(obj, _typ, options, refStack) {
          if (!obj.length) {
            if (options.addBreakTokens === true) {
              return [simpleTokens.emptyArray, new Token(Type.break)];
            }
            return simpleTokens.emptyArray;
          }
          refStack = Ref.createCheck(refStack, obj);
          const entries = [];
          let i = 0;
          for (const e of obj) {
            entries[i++] = objectToTokens(e, options, refStack);
          }
          if (options.addBreakTokens) {
            return [new Token(Type.array, obj.length), entries, new Token(Type.break)];
          }
          return [new Token(Type.array, obj.length), entries];
        },
        /**
         * @param {any} obj
         * @param {string} typ
         * @param {EncodeOptions} options
         * @param {Reference} [refStack]
         * @returns {TokenOrNestedTokens}
         */
        Object(obj, typ, options, refStack) {
          const isMap = typ !== "Object";
          const keys = isMap ? obj.keys() : Object.keys(obj);
          const length2 = isMap ? obj.size : keys.length;
          if (!length2) {
            if (options.addBreakTokens === true) {
              return [simpleTokens.emptyMap, new Token(Type.break)];
            }
            return simpleTokens.emptyMap;
          }
          refStack = Ref.createCheck(refStack, obj);
          const entries = [];
          let i = 0;
          for (const key of keys) {
            entries[i++] = [
              objectToTokens(key, options, refStack),
              objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
            ];
          }
          sortMapEntries(entries, options);
          if (options.addBreakTokens) {
            return [new Token(Type.map, length2), entries, new Token(Type.break)];
          }
          return [new Token(Type.map, length2), entries];
        }
      };
      typeEncoders.Map = typeEncoders.Object;
      typeEncoders.Buffer = typeEncoders.Uint8Array;
      for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" ")) {
        typeEncoders[`${typ}Array`] = typeEncoders.DataView;
      }
    }
  });

  // node_modules/cborg/lib/decode.js
  function tokenToArray(token, tokeniser, options) {
    const arr = [];
    for (let i = 0; i < token.value; i++) {
      const value = tokensToObject(tokeniser, options);
      if (value === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
      }
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token.value})`);
      }
      arr[i] = value;
    }
    return arr;
  }
  function tokenToMap(token, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? void 0 : {};
    const m = useMaps ? /* @__PURE__ */ new Map() : void 0;
    for (let i = 0; i < token.value; i++) {
      const key = tokensToObject(tokeniser, options);
      if (key === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
      }
      if (key === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token.value})`);
      }
      if (useMaps !== true && typeof key !== "string") {
        throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
      }
      if (options.rejectDuplicateMapKeys === true) {
        if (useMaps && m.has(key) || !useMaps && key in obj) {
          throw new Error(`${decodeErrPrefix} found repeat map key "${key}"`);
        }
      }
      const value = tokensToObject(tokeniser, options);
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token.value})`);
      }
      if (useMaps) {
        m.set(key, value);
      } else {
        obj[key] = value;
      }
    }
    return useMaps ? m : obj;
  }
  function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) {
      return DONE;
    }
    const token = tokeniser.next();
    if (token.type === Type.break) {
      return BREAK;
    }
    if (token.type.terminal) {
      return token.value;
    }
    if (token.type === Type.array) {
      return tokenToArray(token, tokeniser, options);
    }
    if (token.type === Type.map) {
      return tokenToMap(token, tokeniser, options);
    }
    if (token.type === Type.tag) {
      if (options.tags && typeof options.tags[token.value] === "function") {
        const tagged = tokensToObject(tokeniser, options);
        return options.tags[token.value](tagged);
      }
      throw new Error(`${decodeErrPrefix} tag not supported (${token.value})`);
    }
    throw new Error("unsupported");
  }
  function decodeFirst(data, options) {
    if (!(data instanceof Uint8Array)) {
      throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
      throw new Error(`${decodeErrPrefix} did not find any content to decode`);
    }
    if (decoded === BREAK) {
      throw new Error(`${decodeErrPrefix} got unexpected break`);
    }
    return [decoded, data.subarray(tokeniser.pos())];
  }
  function decode5(data, options) {
    const [decoded, remainder] = decodeFirst(data, options);
    if (remainder.length > 0) {
      throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
    }
    return decoded;
  }
  var defaultDecodeOptions, Tokeniser, DONE, BREAK;
  var init_decode = __esm({
    "node_modules/cborg/lib/decode.js"() {
      init_common();
      init_token();
      init_jump();
      defaultDecodeOptions = {
        strict: false,
        allowIndefinite: true,
        allowUndefined: true,
        allowBigInt: true
      };
      Tokeniser = class {
        /**
         * @param {Uint8Array} data
         * @param {DecodeOptions} options
         */
        constructor(data, options = {}) {
          this._pos = 0;
          this.data = data;
          this.options = options;
        }
        pos() {
          return this._pos;
        }
        done() {
          return this._pos >= this.data.length;
        }
        next() {
          const byt = this.data[this._pos];
          let token = quick[byt];
          if (token === void 0) {
            const decoder2 = jump[byt];
            if (!decoder2) {
              throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
            }
            const minor = byt & 31;
            token = decoder2(this.data, this._pos, minor, this.options);
          }
          this._pos += token.encodedLength;
          return token;
        }
      };
      DONE = Symbol.for("DONE");
      BREAK = Symbol.for("BREAK");
    }
  });

  // node_modules/cborg/cborg.js
  var init_cborg = __esm({
    "node_modules/cborg/cborg.js"() {
      init_encode();
      init_decode();
      init_token();
    }
  });

  // node_modules/@ipld/car/node_modules/@ipld/dag-cbor/src/index.js
  function cidEncoder(obj) {
    if (obj.asCID !== obj && obj["/"] !== obj.bytes) {
      return null;
    }
    const cid = CID.asCID(obj);
    if (!cid) {
      return null;
    }
    const bytes = new Uint8Array(cid.bytes.byteLength + 1);
    bytes.set(cid.bytes, 1);
    return [
      new Token(Type.tag, CID_CBOR_TAG),
      new Token(Type.bytes, bytes)
    ];
  }
  function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
  }
  function numberEncoder(num) {
    if (Number.isNaN(num)) {
      throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
      throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
  }
  function cidDecoder(bytes) {
    if (bytes[0] !== 0) {
      throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID.decode(bytes.subarray(1));
  }
  var CID_CBOR_TAG, encodeOptions, decodeOptions, encode4, decode6;
  var init_src2 = __esm({
    "node_modules/@ipld/car/node_modules/@ipld/dag-cbor/src/index.js"() {
      init_cborg();
      init_cid();
      CID_CBOR_TAG = 42;
      encodeOptions = {
        float64: true,
        typeEncoders: {
          Object: cidEncoder,
          undefined: undefinedEncoder,
          number: numberEncoder
        }
      };
      decodeOptions = {
        allowIndefinite: false,
        coerceUndefinedToNull: true,
        allowNaN: false,
        allowInfinity: false,
        allowBigInt: true,
        // this will lead to BigInt for ints outside of
        // safe-integer range, which may surprise users
        strict: true,
        useMaps: false,
        rejectDuplicateMapKeys: true,
        /** @type {import('cborg').TagDecoder[]} */
        tags: []
      };
      decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
      encode4 = (node) => encode3(node, encodeOptions);
      decode6 = (data) => decode5(data, decodeOptions);
    }
  });

  // node_modules/varint/encode.js
  var require_encode = __commonJS({
    "node_modules/varint/encode.js"(exports, module) {
      module.exports = encode6;
      var MSB2 = 128;
      var REST2 = 127;
      var MSBALL2 = ~REST2;
      var INT2 = Math.pow(2, 31);
      function encode6(num, out, offset) {
        if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
          encode6.bytes = 0;
          throw new RangeError("Could not encode varint");
        }
        out = out || [];
        offset = offset || 0;
        var oldOffset = offset;
        while (num >= INT2) {
          out[offset++] = num & 255 | MSB2;
          num /= 128;
        }
        while (num & MSBALL2) {
          out[offset++] = num & 255 | MSB2;
          num >>>= 7;
        }
        out[offset] = num | 0;
        encode6.bytes = offset - oldOffset + 1;
        return out;
      }
    }
  });

  // node_modules/varint/decode.js
  var require_decode = __commonJS({
    "node_modules/varint/decode.js"(exports, module) {
      module.exports = read3;
      var MSB2 = 128;
      var REST2 = 127;
      function read3(buf2, offset) {
        var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
        do {
          if (counter >= l || shift > 49) {
            read3.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b = buf2[counter++];
          res += shift < 28 ? (b & REST2) << shift : (b & REST2) * Math.pow(2, shift);
          shift += 7;
        } while (b >= MSB2);
        read3.bytes = counter - offset;
        return res;
      }
    }
  });

  // node_modules/varint/length.js
  var require_length = __commonJS({
    "node_modules/varint/length.js"(exports, module) {
      var N12 = Math.pow(2, 7);
      var N22 = Math.pow(2, 14);
      var N32 = Math.pow(2, 21);
      var N42 = Math.pow(2, 28);
      var N52 = Math.pow(2, 35);
      var N62 = Math.pow(2, 42);
      var N72 = Math.pow(2, 49);
      var N82 = Math.pow(2, 56);
      var N92 = Math.pow(2, 63);
      module.exports = function(value) {
        return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
      };
    }
  });

  // node_modules/varint/index.js
  var require_varint = __commonJS({
    "node_modules/varint/index.js"(exports, module) {
      module.exports = {
        encode: require_encode(),
        decode: require_decode(),
        encodingLength: require_length()
      };
    }
  });

  // node_modules/@ipld/car/src/decoder-common.js
  function decodeVarint(bytes, seeker) {
    if (!bytes.length) {
      throw new Error("Unexpected end of data");
    }
    const i = import_varint2.default.decode(bytes);
    seeker.seek(
      /** @type {number} */
      import_varint2.default.decode.bytes
    );
    return i;
  }
  function decodeV2Header(bytes) {
    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    let offset = 0;
    const header = {
      version: 2,
      /** @type {[bigint, bigint]} */
      characteristics: [
        dv.getBigUint64(offset, true),
        dv.getBigUint64(offset += 8, true)
      ],
      dataOffset: Number(dv.getBigUint64(offset += 8, true)),
      dataSize: Number(dv.getBigUint64(offset += 8, true)),
      indexOffset: Number(dv.getBigUint64(offset += 8, true))
    };
    return header;
  }
  function getMultihashLength(bytes) {
    import_varint2.default.decode(bytes);
    const codeLength = (
      /** @type {number} */
      import_varint2.default.decode.bytes
    );
    const length2 = import_varint2.default.decode(bytes.subarray(import_varint2.default.decode.bytes));
    const lengthLength = (
      /** @type {number} */
      import_varint2.default.decode.bytes
    );
    const mhLength = codeLength + lengthLength + length2;
    return mhLength;
  }
  var import_varint2, CIDV0_BYTES, V2_HEADER_LENGTH;
  var init_decoder_common = __esm({
    "node_modules/@ipld/car/src/decoder-common.js"() {
      import_varint2 = __toESM(require_varint(), 1);
      CIDV0_BYTES = {
        SHA2_256: 18,
        LENGTH: 32,
        DAG_PB: 112
      };
      V2_HEADER_LENGTH = /* characteristics */
      16 + 8 + 8 + 8;
    }
  });

  // node_modules/@ipld/car/src/header-validator.js
  var Kinds, Types, CarHeader;
  var init_header_validator = __esm({
    "node_modules/@ipld/car/src/header-validator.js"() {
      Kinds = {
        Null: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => obj === null
        ),
        Int: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => Number.isInteger(obj)
        ),
        Float: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => typeof obj === "number" && Number.isFinite(obj)
        ),
        String: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => typeof obj === "string"
        ),
        Bool: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => typeof obj === "boolean"
        ),
        Bytes: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => obj instanceof Uint8Array
        ),
        Link: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => !Kinds.Null(obj) && typeof obj === "object" && obj.asCID === obj
        ),
        List: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => Array.isArray(obj)
        ),
        Map: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => !Kinds.Null(obj) && typeof obj === "object" && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)
        )
      };
      Types = {
        Int: Kinds.Int,
        "CarHeader > version": (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => Types.Int(obj)
        ),
        "CarHeader > roots (anon) > valueType (anon)": Kinds.Link,
        "CarHeader > roots (anon)": (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types["CarHeader > roots (anon) > valueType (anon)"])
        ),
        "CarHeader > roots": (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => Types["CarHeader > roots (anon)"](obj)
        ),
        CarHeader: (
          /**
           * @param {any} obj
           * @returns {boolean}
           */
          (obj) => {
            const keys = obj && Object.keys(obj);
            return Kinds.Map(obj) && ["version"].every((k) => keys.includes(k)) && Object.entries(obj).every(([name, value]) => Types["CarHeader > " + name] && Types["CarHeader > " + name](value));
          }
        )
      };
      CarHeader = Types.CarHeader;
    }
  });

  // node_modules/@ipld/car/src/buffer-decoder.js
  function readHeader(reader, strictVersion) {
    const length2 = decodeVarint(reader.upTo(8), reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR header (zero length)");
    }
    const header = reader.exactly(length2, true);
    const block = decode6(header);
    if (!CarHeader(block)) {
      throw new Error("Invalid CAR header format");
    }
    if (block.version !== 1 && block.version !== 2 || strictVersion !== void 0 && block.version !== strictVersion) {
      throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== void 0 ? ` (expected ${strictVersion})` : ""}`);
    }
    const hasRoots = Array.isArray(block.roots);
    if (block.version === 1 && !hasRoots || block.version === 2 && hasRoots) {
      throw new Error("Invalid CAR header format");
    }
    if (block.version === 1) {
      return block;
    }
    const v2Header = decodeV2Header(reader.exactly(V2_HEADER_LENGTH, true));
    reader.seek(v2Header.dataOffset - reader.pos);
    const v1Header = readHeader(reader, 1);
    return Object.assign(v1Header, v2Header);
  }
  function readCid(reader) {
    const first2 = reader.exactly(2, false);
    if (first2[0] === CIDV0_BYTES.SHA2_256 && first2[1] === CIDV0_BYTES.LENGTH) {
      const bytes2 = reader.exactly(34, true);
      const multihash2 = decode4(bytes2);
      return CID.create(0, CIDV0_BYTES.DAG_PB, multihash2);
    }
    const version = decodeVarint(reader.upTo(8), reader);
    if (version !== 1) {
      throw new Error(`Unexpected CID version (${version})`);
    }
    const codec = decodeVarint(reader.upTo(8), reader);
    const bytes = reader.exactly(getMultihashLength(reader.upTo(8)), true);
    const multihash = decode4(bytes);
    return CID.create(version, codec, multihash);
  }
  function readBlockHead(reader) {
    const start = reader.pos;
    let length2 = decodeVarint(reader.upTo(8), reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR section (zero length)");
    }
    length2 += reader.pos - start;
    const cid = readCid(reader);
    const blockLength2 = length2 - Number(reader.pos - start);
    return { cid, length: length2, blockLength: blockLength2 };
  }
  function fromBytes(bytes) {
    let reader = bytesReader(bytes);
    const header = readHeader(reader);
    if (header.version === 2) {
      const v1length = reader.pos - header.dataOffset;
      reader = limitReader(reader, header.dataSize - v1length);
    }
    const blocks = [];
    while (reader.upTo(8).length > 0) {
      const { cid, blockLength: blockLength2 } = readBlockHead(reader);
      blocks.push({ cid, bytes: reader.exactly(blockLength2, true) });
    }
    return {
      header,
      blocks
    };
  }
  function bytesReader(bytes) {
    let pos = 0;
    return {
      upTo(length2) {
        return bytes.subarray(pos, pos + Math.min(length2, bytes.length - pos));
      },
      exactly(length2, seek = false) {
        if (length2 > bytes.length - pos) {
          throw new Error("Unexpected end of data");
        }
        const out = bytes.subarray(pos, pos + length2);
        if (seek) {
          pos += length2;
        }
        return out;
      },
      seek(length2) {
        pos += length2;
      },
      get pos() {
        return pos;
      }
    };
  }
  function limitReader(reader, byteLimit) {
    let bytesRead = 0;
    return {
      upTo(length2) {
        let bytes = reader.upTo(length2);
        if (bytes.length + bytesRead > byteLimit) {
          bytes = bytes.subarray(0, byteLimit - bytesRead);
        }
        return bytes;
      },
      exactly(length2, seek = false) {
        const bytes = reader.exactly(length2, seek);
        if (bytes.length + bytesRead > byteLimit) {
          throw new Error("Unexpected end of data");
        }
        if (seek) {
          bytesRead += length2;
        }
        return bytes;
      },
      seek(length2) {
        bytesRead += length2;
        reader.seek(length2);
      },
      get pos() {
        return reader.pos;
      }
    };
  }
  var init_buffer_decoder = __esm({
    "node_modules/@ipld/car/src/buffer-decoder.js"() {
      init_src2();
      init_cid();
      init_digest();
      init_decoder_common();
      init_header_validator();
    }
  });

  // node_modules/@ipld/car/src/buffer-reader-browser.js
  var CarBufferReader;
  var init_buffer_reader_browser = __esm({
    "node_modules/@ipld/car/src/buffer-reader-browser.js"() {
      init_buffer_decoder();
      CarBufferReader = class _CarBufferReader {
        /**
         * @constructs CarBufferReader
         * @param {CarHeader|CarV2Header} header
         * @param {Block[]} blocks
         */
        constructor(header, blocks) {
          this._header = header;
          this._blocks = blocks;
          this._cids = void 0;
        }
        /**
         * @property version
         * @memberof CarBufferReader
         * @instance
         */
        get version() {
          return this._header.version;
        }
        /**
         * Get the list of roots defined by the CAR referenced by this reader. May be
         * zero or more `CID`s.
         *
         * @function
         * @memberof CarBufferReader
         * @instance
         * @returns {CID[]}
         */
        getRoots() {
          return this._header.roots;
        }
        /**
         * Check whether a given `CID` exists within the CAR referenced by this
         * reader.
         *
         * @function
         * @memberof CarBufferReader
         * @instance
         * @param {CID} key
         * @returns {boolean}
         */
        has(key) {
          return this._blocks.some((b) => b.cid.equals(key));
        }
        /**
         * Fetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR
         * referenced by this reader matching the provided `CID`. In the case where
         * the provided `CID` doesn't exist within the CAR, `undefined` will be
         * returned.
         *
         * @function
         * @memberof CarBufferReader
         * @instance
         * @param {CID} key
         * @returns {Block | undefined}
         */
        get(key) {
          return this._blocks.find((b) => b.cid.equals(key));
        }
        /**
         * Returns a `Block[]` of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within
         * the CAR referenced by this reader.
         *
         * @function
         * @memberof CarBufferReader
         * @instance
         * @returns {Block[]}
         */
        blocks() {
          return this._blocks;
        }
        /**
         * Returns a `CID[]` of the `CID`s contained within the CAR referenced by this reader.
         *
         * @function
         * @memberof CarBufferReader
         * @instance
         * @returns {CID[]}
         */
        cids() {
          if (!this._cids) {
            this._cids = this._blocks.map((b) => b.cid);
          }
          return this._cids;
        }
        /**
         * Instantiate a {@link CarBufferReader} from a `Uint8Array` blob. This performs a
         * decode fully in memory and maintains the decoded state in memory for full
         * access to the data via the `CarReader` API.
         *
         * @static
         * @memberof CarBufferReader
         * @param {Uint8Array} bytes
         * @returns {CarBufferReader}
         */
        static fromBytes(bytes) {
          if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("fromBytes() requires a Uint8Array");
          }
          const { header, blocks } = fromBytes(bytes);
          return new _CarBufferReader(header, blocks);
        }
      };
    }
  });

  // node_modules/cborg/lib/length.js
  function tokensToLength(tokens, encoders = cborEncoders2, options = defaultEncodeOptions2) {
    if (Array.isArray(tokens)) {
      let len = 0;
      for (const token of tokens) {
        len += tokensToLength(token, encoders, options);
      }
      return len;
    } else {
      const encoder = encoders[tokens.type.major];
      if (encoder.encodedSize === void 0 || typeof encoder.encodedSize !== "function") {
        throw new Error(`Encoder for ${tokens.type.name} does not have an encodedSize()`);
      }
      return encoder.encodedSize(tokens, options);
    }
  }
  var cborEncoders2, defaultEncodeOptions2;
  var init_length = __esm({
    "node_modules/cborg/lib/length.js"() {
      init_encode();
      init_jump();
      cborEncoders2 = makeCborEncoders();
      defaultEncodeOptions2 = {
        float64: false,
        quickEncodeToken
      };
    }
  });

  // node_modules/@ipld/car/src/buffer-writer.js
  var buffer_writer_exports = {};
  __export(buffer_writer_exports, {
    addBlock: () => addBlock,
    addRoot: () => addRoot,
    blockLength: () => blockLength,
    calculateHeaderLength: () => calculateHeaderLength,
    close: () => close,
    createWriter: () => createWriter,
    estimateHeaderLength: () => estimateHeaderLength,
    headerLength: () => headerLength,
    resizeHeader: () => resizeHeader
  });
  var import_varint3, CarBufferWriter, addRoot, blockLength, addBlock, close, resizeHeader, writeBytes, writeHeader, headerPreludeTokens, CID_TAG, calculateHeaderLength, headerLength, estimateHeaderLength, createWriter;
  var init_buffer_writer = __esm({
    "node_modules/@ipld/car/src/buffer-writer.js"() {
      init_src2();
      init_cborg();
      init_length();
      import_varint3 = __toESM(require_varint(), 1);
      CarBufferWriter = class {
        /**
         * @param {Uint8Array} bytes
         * @param {number} headerSize
         */
        constructor(bytes, headerSize) {
          this.bytes = bytes;
          this.byteOffset = headerSize;
          this.roots = [];
          this.headerSize = headerSize;
        }
        /**
         * Add a root to this writer, to be used to create a header when the CAR is
         * finalized with {@link CarBufferWriter.close `close()`}
         *
         * @param {CID} root
         * @param {{resize?:boolean}} [options]
         * @returns {CarBufferWriter}
         */
        addRoot(root, options) {
          addRoot(this, root, options);
          return this;
        }
        /**
         * Write a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.
         * Throws if there is not enough capacity.
         *
         * @param {Block} block - A `{ cid:CID, bytes:Uint8Array }` pair.
         * @returns {CarBufferWriter}
         */
        write(block) {
          addBlock(this, block);
          return this;
        }
        /**
         * Finalize the CAR and return it as a `Uint8Array`.
         *
         * @param {object} [options]
         * @param {boolean} [options.resize]
         * @returns {Uint8Array}
         */
        close(options) {
          return close(this, options);
        }
      };
      addRoot = (writer, root, options = {}) => {
        const { resize = false } = options;
        const { bytes, headerSize, byteOffset, roots } = writer;
        writer.roots.push(root);
        const size = headerLength(writer);
        if (size > headerSize) {
          if (size - headerSize + byteOffset < bytes.byteLength) {
            if (resize) {
              resizeHeader(writer, size);
            } else {
              roots.pop();
              throw new RangeError(`Header of size ${headerSize} has no capacity for new root ${root}.
  However there is a space in the buffer and you could call addRoot(root, { resize: root }) to resize header to make a space for this root.`);
            }
          } else {
            roots.pop();
            throw new RangeError(`Buffer has no capacity for a new root ${root}`);
          }
        }
      };
      blockLength = ({ cid, bytes }) => {
        const size = cid.bytes.byteLength + bytes.byteLength;
        return import_varint3.default.encodingLength(size) + size;
      };
      addBlock = (writer, { cid, bytes }) => {
        const byteLength = cid.bytes.byteLength + bytes.byteLength;
        const size = import_varint3.default.encode(byteLength);
        if (writer.byteOffset + size.length + byteLength > writer.bytes.byteLength) {
          throw new RangeError("Buffer has no capacity for this block");
        } else {
          writeBytes(writer, size);
          writeBytes(writer, cid.bytes);
          writeBytes(writer, bytes);
        }
      };
      close = (writer, options = {}) => {
        const { resize = false } = options;
        const { roots, bytes, byteOffset, headerSize } = writer;
        const headerBytes = encode4({ version: 1, roots });
        const varintBytes = import_varint3.default.encode(headerBytes.length);
        const size = varintBytes.length + headerBytes.byteLength;
        const offset = headerSize - size;
        if (offset === 0) {
          writeHeader(writer, varintBytes, headerBytes);
          return bytes.subarray(0, byteOffset);
        } else if (resize) {
          resizeHeader(writer, size);
          writeHeader(writer, varintBytes, headerBytes);
          return bytes.subarray(0, writer.byteOffset);
        } else {
          throw new RangeError(`Header size was overestimated.
You can use close({ resize: true }) to resize header`);
        }
      };
      resizeHeader = (writer, byteLength) => {
        const { bytes, headerSize } = writer;
        bytes.set(bytes.subarray(headerSize, writer.byteOffset), byteLength);
        writer.byteOffset += byteLength - headerSize;
        writer.headerSize = byteLength;
      };
      writeBytes = (writer, bytes) => {
        writer.bytes.set(bytes, writer.byteOffset);
        writer.byteOffset += bytes.length;
      };
      writeHeader = ({ bytes }, varint5, header) => {
        bytes.set(varint5);
        bytes.set(header, varint5.length);
      };
      headerPreludeTokens = [
        new Token(Type.map, 2),
        new Token(Type.string, "version"),
        new Token(Type.uint, 1),
        new Token(Type.string, "roots")
      ];
      CID_TAG = new Token(Type.tag, 42);
      calculateHeaderLength = (rootLengths) => {
        const tokens = [...headerPreludeTokens];
        tokens.push(new Token(Type.array, rootLengths.length));
        for (const rootLength of rootLengths) {
          tokens.push(CID_TAG);
          tokens.push(new Token(Type.bytes, { length: rootLength + 1 }));
        }
        const length2 = tokensToLength(tokens);
        return import_varint3.default.encodingLength(length2) + length2;
      };
      headerLength = ({ roots }) => calculateHeaderLength(roots.map((cid) => cid.bytes.byteLength));
      estimateHeaderLength = (rootCount, rootByteLength = 36) => calculateHeaderLength(new Array(rootCount).fill(rootByteLength));
      createWriter = (buffer2, options = {}) => {
        const {
          roots = [],
          byteOffset = 0,
          byteLength = buffer2.byteLength,
          headerSize = headerLength({ roots })
        } = options;
        const bytes = new Uint8Array(buffer2, byteOffset, byteLength);
        const writer = new CarBufferWriter(bytes, headerSize);
        for (const root of roots) {
          writer.addRoot(root);
        }
        return writer;
      };
    }
  });

  // node_modules/@ipld/car/src/indexed-reader-browser.js
  var CarIndexedReader;
  var init_indexed_reader_browser = __esm({
    "node_modules/@ipld/car/src/indexed-reader-browser.js"() {
      CarIndexedReader = class {
        static async fromFile() {
          throw new Error("Unsupported in this environment");
        }
      };
    }
  });

  // node_modules/@ipld/car/src/decoder.js
  async function readHeader2(reader, strictVersion) {
    const length2 = decodeVarint(await reader.upTo(8), reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR header (zero length)");
    }
    const header = await reader.exactly(length2, true);
    const block = decode6(header);
    if (!CarHeader(block)) {
      throw new Error("Invalid CAR header format");
    }
    if (block.version !== 1 && block.version !== 2 || strictVersion !== void 0 && block.version !== strictVersion) {
      throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== void 0 ? ` (expected ${strictVersion})` : ""}`);
    }
    const hasRoots = Array.isArray(block.roots);
    if (block.version === 1 && !hasRoots || block.version === 2 && hasRoots) {
      throw new Error("Invalid CAR header format");
    }
    if (block.version === 1) {
      return block;
    }
    const v2Header = decodeV2Header(await reader.exactly(V2_HEADER_LENGTH, true));
    reader.seek(v2Header.dataOffset - reader.pos);
    const v1Header = await readHeader2(reader, 1);
    return Object.assign(v1Header, v2Header);
  }
  async function readCid2(reader) {
    const first2 = await reader.exactly(2, false);
    if (first2[0] === CIDV0_BYTES.SHA2_256 && first2[1] === CIDV0_BYTES.LENGTH) {
      const bytes2 = await reader.exactly(34, true);
      const multihash2 = decode4(bytes2);
      return CID.create(0, CIDV0_BYTES.DAG_PB, multihash2);
    }
    const version = decodeVarint(await reader.upTo(8), reader);
    if (version !== 1) {
      throw new Error(`Unexpected CID version (${version})`);
    }
    const codec = decodeVarint(await reader.upTo(8), reader);
    const bytes = await reader.exactly(getMultihashLength(await reader.upTo(8)), true);
    const multihash = decode4(bytes);
    return CID.create(version, codec, multihash);
  }
  async function readBlockHead2(reader) {
    const start = reader.pos;
    let length2 = decodeVarint(await reader.upTo(8), reader);
    if (length2 === 0) {
      throw new Error("Invalid CAR section (zero length)");
    }
    length2 += reader.pos - start;
    const cid = await readCid2(reader);
    const blockLength2 = length2 - Number(reader.pos - start);
    return { cid, length: length2, blockLength: blockLength2 };
  }
  async function readBlock(reader) {
    const { cid, blockLength: blockLength2 } = await readBlockHead2(reader);
    const bytes = await reader.exactly(blockLength2, true);
    return { bytes, cid };
  }
  async function readBlockIndex(reader) {
    const offset = reader.pos;
    const { cid, length: length2, blockLength: blockLength2 } = await readBlockHead2(reader);
    const index = { cid, length: length2, blockLength: blockLength2, offset, blockOffset: reader.pos };
    reader.seek(index.blockLength);
    return index;
  }
  function createDecoder(reader) {
    const headerPromise = (async () => {
      const header = await readHeader2(reader);
      if (header.version === 2) {
        const v1length = reader.pos - header.dataOffset;
        reader = limitReader2(reader, header.dataSize - v1length);
      }
      return header;
    })();
    return {
      header: () => headerPromise,
      async *blocks() {
        await headerPromise;
        while ((await reader.upTo(8)).length > 0) {
          yield await readBlock(reader);
        }
      },
      async *blocksIndex() {
        await headerPromise;
        while ((await reader.upTo(8)).length > 0) {
          yield await readBlockIndex(reader);
        }
      }
    };
  }
  function bytesReader2(bytes) {
    let pos = 0;
    return {
      async upTo(length2) {
        const out = bytes.subarray(pos, pos + Math.min(length2, bytes.length - pos));
        return out;
      },
      async exactly(length2, seek = false) {
        if (length2 > bytes.length - pos) {
          throw new Error("Unexpected end of data");
        }
        const out = bytes.subarray(pos, pos + length2);
        if (seek) {
          pos += length2;
        }
        return out;
      },
      seek(length2) {
        pos += length2;
      },
      get pos() {
        return pos;
      }
    };
  }
  function chunkReader(readChunk) {
    let pos = 0;
    let have = 0;
    let offset = 0;
    let currentChunk = new Uint8Array(0);
    const read3 = async (length2) => {
      have = currentChunk.length - offset;
      const bufa = [currentChunk.subarray(offset)];
      while (have < length2) {
        const chunk = await readChunk();
        if (chunk == null) {
          break;
        }
        if (have < 0) {
          if (chunk.length > have) {
            bufa.push(chunk.subarray(-have));
          }
        } else {
          bufa.push(chunk);
        }
        have += chunk.length;
      }
      currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
      let off = 0;
      for (const b of bufa) {
        currentChunk.set(b, off);
        off += b.length;
      }
      offset = 0;
    };
    return {
      async upTo(length2) {
        if (currentChunk.length - offset < length2) {
          await read3(length2);
        }
        return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length2));
      },
      async exactly(length2, seek = false) {
        if (currentChunk.length - offset < length2) {
          await read3(length2);
        }
        if (currentChunk.length - offset < length2) {
          throw new Error("Unexpected end of data");
        }
        const out = currentChunk.subarray(offset, offset + length2);
        if (seek) {
          pos += length2;
          offset += length2;
        }
        return out;
      },
      seek(length2) {
        pos += length2;
        offset += length2;
      },
      get pos() {
        return pos;
      }
    };
  }
  function asyncIterableReader(asyncIterable) {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    async function readChunk() {
      const next = await iterator.next();
      if (next.done) {
        return null;
      }
      return next.value;
    }
    return chunkReader(readChunk);
  }
  function limitReader2(reader, byteLimit) {
    let bytesRead = 0;
    return {
      async upTo(length2) {
        let bytes = await reader.upTo(length2);
        if (bytes.length + bytesRead > byteLimit) {
          bytes = bytes.subarray(0, byteLimit - bytesRead);
        }
        return bytes;
      },
      async exactly(length2, seek = false) {
        const bytes = await reader.exactly(length2, seek);
        if (bytes.length + bytesRead > byteLimit) {
          throw new Error("Unexpected end of data");
        }
        if (seek) {
          bytesRead += length2;
        }
        return bytes;
      },
      seek(length2) {
        bytesRead += length2;
        reader.seek(length2);
      },
      get pos() {
        return reader.pos;
      }
    };
  }
  var init_decoder = __esm({
    "node_modules/@ipld/car/src/decoder.js"() {
      init_src2();
      init_cid();
      init_digest();
      init_decoder_common();
      init_header_validator();
    }
  });

  // node_modules/@ipld/car/src/indexer.js
  async function decodeIndexerComplete(reader) {
    const decoder2 = createDecoder(reader);
    const { version, roots } = await decoder2.header();
    return new CarIndexer(version, roots, decoder2.blocksIndex());
  }
  var CarIndexer;
  var init_indexer = __esm({
    "node_modules/@ipld/car/src/indexer.js"() {
      init_decoder();
      CarIndexer = class {
        /**
         * @param {number} version
         * @param {CID[]} roots
         * @param {AsyncGenerator<BlockIndex>} iterator
         */
        constructor(version, roots, iterator) {
          this._version = version;
          this._roots = roots;
          this._iterator = iterator;
        }
        get version() {
          return this._version;
        }
        /**
         * Get the list of roots defined by the CAR referenced by this indexer. May be
         * zero or more `CID`s.
         *
         * @function
         * @memberof CarIndexer
         * @instance
         * @async
         * @returns {Promise<CID[]>}
         */
        async getRoots() {
          return this._roots;
        }
        /**
         * @returns {AsyncIterator<BlockIndex>}
         */
        [Symbol.asyncIterator]() {
          return this._iterator;
        }
        /**
         * Instantiate a {@link CarIndexer} from a `Uint8Array` blob. Only the header
         * is decoded initially, the remainder is processed and emitted via the
         * iterator as it is consumed.
         *
         * @async
         * @static
         * @memberof CarIndexer
         * @param {Uint8Array} bytes
         * @returns {Promise<CarIndexer>}
         */
        static async fromBytes(bytes) {
          if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("fromBytes() requires a Uint8Array");
          }
          return decodeIndexerComplete(bytesReader2(bytes));
        }
        /**
         * Instantiate a {@link CarIndexer} from a `AsyncIterable<Uint8Array>`,
         * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
         * is decoded initially, the remainder is processed and emitted via the
         * iterator as it is consumed.
         *
         * @async
         * @static
         * @memberof CarIndexer
         * @param {AsyncIterable<Uint8Array>} asyncIterable
         * @returns {Promise<CarIndexer>}
         */
        static async fromIterable(asyncIterable) {
          if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
            throw new TypeError("fromIterable() requires an async iterable");
          }
          return decodeIndexerComplete(asyncIterableReader(asyncIterable));
        }
      };
    }
  });

  // node_modules/@ipld/car/src/iterator.js
  async function fromBytes2(bytes) {
    if (!(bytes instanceof Uint8Array)) {
      throw new TypeError("fromBytes() requires a Uint8Array");
    }
    return decodeIterator(bytesReader2(bytes));
  }
  async function fromIterable(asyncIterable) {
    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
      throw new TypeError("fromIterable() requires an async iterable");
    }
    return decodeIterator(asyncIterableReader(asyncIterable));
  }
  async function decodeIterator(reader) {
    const decoder2 = createDecoder(reader);
    const { version, roots } = await decoder2.header();
    return { version, roots, iterator: decoder2.blocks() };
  }
  var CarIteratorBase, CarBlockIterator, CarCIDIterator;
  var init_iterator = __esm({
    "node_modules/@ipld/car/src/iterator.js"() {
      init_decoder();
      CarIteratorBase = class {
        /**
         * @param {number} version
         * @param {CID[]} roots
         * @param {AsyncIterable<Block>|void} iterable
         */
        constructor(version, roots, iterable) {
          this._version = version;
          this._roots = roots;
          this._iterable = iterable;
          this._decoded = false;
        }
        get version() {
          return this._version;
        }
        /**
         * @returns {Promise<CID[]>}
         */
        async getRoots() {
          return this._roots;
        }
      };
      CarBlockIterator = class _CarBlockIterator extends CarIteratorBase {
        // inherited method
        /**
         * Get the list of roots defined by the CAR referenced by this iterator. May be
         * zero or more `CID`s.
         *
         * @function getRoots
         * @memberof CarBlockIterator
         * @instance
         * @async
         * @returns {Promise<CID[]>}
         */
        /**
         * @returns {AsyncIterator<Block>}
         */
        [Symbol.asyncIterator]() {
          if (this._decoded) {
            throw new Error("Cannot decode more than once");
          }
          if (!this._iterable) {
            throw new Error("Block iterable not found");
          }
          this._decoded = true;
          return this._iterable[Symbol.asyncIterator]();
        }
        /**
         * Instantiate a {@link CarBlockIterator} from a `Uint8Array` blob. Rather
         * than decoding the entire byte array prior to returning the iterator, as in
         * {@link CarReader.fromBytes}, only the header is decoded and the remainder
         * of the CAR is parsed as the `Block`s as yielded.
         *
         * @async
         * @static
         * @memberof CarBlockIterator
         * @param {Uint8Array} bytes
         * @returns {Promise<CarBlockIterator>}
         */
        static async fromBytes(bytes) {
          const { version, roots, iterator } = await fromBytes2(bytes);
          return new _CarBlockIterator(version, roots, iterator);
        }
        /**
         * Instantiate a {@link CarBlockIterator} from a `AsyncIterable<Uint8Array>`,
         * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
         * Rather than decoding the entire byte array prior to returning the iterator,
         * as in {@link CarReader.fromIterable}, only the header is decoded and the
         * remainder of the CAR is parsed as the `Block`s as yielded.
         *
         * @async
         * @static
         * @param {AsyncIterable<Uint8Array>} asyncIterable
         * @returns {Promise<CarBlockIterator>}
         */
        static async fromIterable(asyncIterable) {
          const { version, roots, iterator } = await fromIterable(asyncIterable);
          return new _CarBlockIterator(version, roots, iterator);
        }
      };
      CarCIDIterator = class _CarCIDIterator extends CarIteratorBase {
        // inherited method
        /**
         * Get the list of roots defined by the CAR referenced by this iterator. May be
         * zero or more `CID`s.
         *
         * @function getRoots
         * @memberof CarCIDIterator
         * @instance
         * @async
         * @returns {Promise<CID[]>}
         */
        /**
         * @returns {AsyncIterator<CID>}
         */
        [Symbol.asyncIterator]() {
          if (this._decoded) {
            throw new Error("Cannot decode more than once");
          }
          if (!this._iterable) {
            throw new Error("Block iterable not found");
          }
          this._decoded = true;
          const iterable = this._iterable[Symbol.asyncIterator]();
          return {
            async next() {
              const next = await iterable.next();
              if (next.done) {
                return next;
              }
              return { done: false, value: next.value.cid };
            }
          };
        }
        /**
         * Instantiate a {@link CarCIDIterator} from a `Uint8Array` blob. Rather
         * than decoding the entire byte array prior to returning the iterator, as in
         * {@link CarReader.fromBytes}, only the header is decoded and the remainder
         * of the CAR is parsed as the `CID`s as yielded.
         *
         * @async
         * @static
         * @memberof CarCIDIterator
         * @param {Uint8Array} bytes
         * @returns {Promise<CarCIDIterator>}
         */
        static async fromBytes(bytes) {
          const { version, roots, iterator } = await fromBytes2(bytes);
          return new _CarCIDIterator(version, roots, iterator);
        }
        /**
         * Instantiate a {@link CarCIDIterator} from a `AsyncIterable<Uint8Array>`,
         * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
         * Rather than decoding the entire byte array prior to returning the iterator,
         * as in {@link CarReader.fromIterable}, only the header is decoded and the
         * remainder of the CAR is parsed as the `CID`s as yielded.
         *
         * @async
         * @static
         * @memberof CarCIDIterator
         * @param {AsyncIterable<Uint8Array>} asyncIterable
         * @returns {Promise<CarCIDIterator>}
         */
        static async fromIterable(asyncIterable) {
          const { version, roots, iterator } = await fromIterable(asyncIterable);
          return new _CarCIDIterator(version, roots, iterator);
        }
      };
    }
  });

  // node_modules/@ipld/car/src/reader-browser.js
  async function decodeReaderComplete(reader) {
    const decoder2 = createDecoder(reader);
    const header = await decoder2.header();
    const blocks = [];
    for await (const block of decoder2.blocks()) {
      blocks.push(block);
    }
    return new CarReader(header, blocks);
  }
  var CarReader;
  var init_reader_browser = __esm({
    "node_modules/@ipld/car/src/reader-browser.js"() {
      init_decoder();
      CarReader = class {
        /**
         * @constructs CarReader
         * @param {CarHeader|CarV2Header} header
         * @param {Block[]} blocks
         */
        constructor(header, blocks) {
          this._header = header;
          this._blocks = blocks;
          this._keys = blocks.map((b) => b.cid.toString());
        }
        /**
         * @property
         * @memberof CarReader
         * @instance
         */
        get version() {
          return this._header.version;
        }
        /**
         * Get the list of roots defined by the CAR referenced by this reader. May be
         * zero or more `CID`s.
         *
         * @function
         * @memberof CarReader
         * @instance
         * @async
         * @returns {Promise<CID[]>}
         */
        async getRoots() {
          return this._header.roots;
        }
        /**
         * Check whether a given `CID` exists within the CAR referenced by this
         * reader.
         *
         * @function
         * @memberof CarReader
         * @instance
         * @async
         * @param {CID} key
         * @returns {Promise<boolean>}
         */
        async has(key) {
          return this._keys.indexOf(key.toString()) > -1;
        }
        /**
         * Fetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR
         * referenced by this reader matching the provided `CID`. In the case where
         * the provided `CID` doesn't exist within the CAR, `undefined` will be
         * returned.
         *
         * @function
         * @memberof CarReader
         * @instance
         * @async
         * @param {CID} key
         * @returns {Promise<Block | undefined>}
         */
        async get(key) {
          const index = this._keys.indexOf(key.toString());
          return index > -1 ? this._blocks[index] : void 0;
        }
        /**
         * Returns a `BlockIterator` (`AsyncIterable<Block>`) that iterates over all
         * of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within
         * the CAR referenced by this reader.
         *
         * @function
         * @memberof CarReader
         * @instance
         * @async
         * @generator
         * @returns {AsyncGenerator<Block>}
         */
        async *blocks() {
          for (const block of this._blocks) {
            yield block;
          }
        }
        /**
         * Returns a `CIDIterator` (`AsyncIterable<CID>`) that iterates over all of
         * the `CID`s contained within the CAR referenced by this reader.
         *
         * @function
         * @memberof CarReader
         * @instance
         * @async
         * @generator
         * @returns {AsyncGenerator<CID>}
         */
        async *cids() {
          for (const block of this._blocks) {
            yield block.cid;
          }
        }
        /**
         * Instantiate a {@link CarReader} from a `Uint8Array` blob. This performs a
         * decode fully in memory and maintains the decoded state in memory for full
         * access to the data via the `CarReader` API.
         *
         * @async
         * @static
         * @memberof CarReader
         * @param {Uint8Array} bytes
         * @returns {Promise<CarReader>}
         */
        static async fromBytes(bytes) {
          if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("fromBytes() requires a Uint8Array");
          }
          return decodeReaderComplete(bytesReader2(bytes));
        }
        /**
         * Instantiate a {@link CarReader} from a `AsyncIterable<Uint8Array>`, such as
         * a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
         * This performs a decode fully in memory and maintains the decoded state in
         * memory for full access to the data via the `CarReader` API.
         *
         * Care should be taken for large archives; this API may not be appropriate
         * where memory is a concern or the archive is potentially larger than the
         * amount of memory that the runtime can handle.
         *
         * @async
         * @static
         * @memberof CarReader
         * @param {AsyncIterable<Uint8Array>} asyncIterable
         * @returns {Promise<CarReader>}
         */
        static async fromIterable(asyncIterable) {
          if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
            throw new TypeError("fromIterable() requires an async iterable");
          }
          return decodeReaderComplete(asyncIterableReader(asyncIterable));
        }
      };
    }
  });

  // node_modules/@ipld/car/src/encoder.js
  function createHeader(roots) {
    const headerBytes = encode4({ version: 1, roots });
    const varintBytes = import_varint4.default.encode(headerBytes.length);
    const header = new Uint8Array(varintBytes.length + headerBytes.length);
    header.set(varintBytes, 0);
    header.set(headerBytes, varintBytes.length);
    return header;
  }
  function createEncoder(writer) {
    return {
      /**
       * @param {CID[]} roots
       * @returns {Promise<void>}
       */
      async setRoots(roots) {
        const bytes = createHeader(roots);
        await writer.write(bytes);
      },
      /**
       * @param {Block} block
       * @returns {Promise<void>}
       */
      async writeBlock(block) {
        const { cid, bytes } = block;
        await writer.write(new Uint8Array(import_varint4.default.encode(cid.bytes.length + bytes.length)));
        await writer.write(cid.bytes);
        if (bytes.length) {
          await writer.write(bytes);
        }
      },
      /**
       * @returns {Promise<void>}
       */
      async close() {
        await writer.end();
      }
    };
  }
  var import_varint4;
  var init_encoder = __esm({
    "node_modules/@ipld/car/src/encoder.js"() {
      init_src2();
      import_varint4 = __toESM(require_varint(), 1);
    }
  });

  // node_modules/@ipld/car/src/iterator-channel.js
  function noop() {
  }
  function create2() {
    const chunkQueue = [];
    let drainer = null;
    let drainerResolver = noop;
    let ended = false;
    let outWait = null;
    let outWaitResolver = noop;
    const makeDrainer = () => {
      if (!drainer) {
        drainer = new Promise((resolve) => {
          drainerResolver = () => {
            drainer = null;
            drainerResolver = noop;
            resolve();
          };
        });
      }
      return drainer;
    };
    const writer = {
      /**
       * @param {T} chunk
       * @returns {Promise<void>}
       */
      write(chunk) {
        chunkQueue.push(chunk);
        const drainer2 = makeDrainer();
        outWaitResolver();
        return drainer2;
      },
      async end() {
        ended = true;
        const drainer2 = makeDrainer();
        outWaitResolver();
        await drainer2;
      }
    };
    const iterator = {
      /** @returns {Promise<IteratorResult<T>>} */
      async next() {
        const chunk = chunkQueue.shift();
        if (chunk) {
          if (chunkQueue.length === 0) {
            drainerResolver();
          }
          return { done: false, value: chunk };
        }
        if (ended) {
          drainerResolver();
          return { done: true, value: void 0 };
        }
        if (!outWait) {
          outWait = new Promise((resolve) => {
            outWaitResolver = () => {
              outWait = null;
              outWaitResolver = noop;
              return resolve(iterator.next());
            };
          });
        }
        return outWait;
      }
    };
    return { writer, iterator };
  }
  var init_iterator_channel = __esm({
    "node_modules/@ipld/car/src/iterator-channel.js"() {
    }
  });

  // node_modules/@ipld/car/src/writer-browser.js
  function encodeWriter() {
    const iw = create2();
    const { writer, iterator } = iw;
    const encoder = createEncoder(writer);
    return { encoder, iterator };
  }
  function toRoots(roots) {
    if (roots === void 0) {
      return [];
    }
    if (!Array.isArray(roots)) {
      const cid = CID.asCID(roots);
      if (!cid) {
        throw new TypeError("roots must be a single CID or an array of CIDs");
      }
      return [cid];
    }
    const _roots = [];
    for (const root of roots) {
      const _root = CID.asCID(root);
      if (!_root) {
        throw new TypeError("roots must be a single CID or an array of CIDs");
      }
      _roots.push(_root);
    }
    return _roots;
  }
  var CarWriter, CarWriterOut;
  var init_writer_browser = __esm({
    "node_modules/@ipld/car/src/writer-browser.js"() {
      init_cid();
      init_decoder();
      init_encoder();
      init_iterator_channel();
      CarWriter = class _CarWriter {
        /**
         * @param {CID[]} roots
         * @param {CarEncoder} encoder
         */
        constructor(roots, encoder) {
          this._encoder = encoder;
          this._mutex = encoder.setRoots(roots);
          this._ended = false;
        }
        /**
         * Write a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.
         *
         * @function
         * @memberof CarWriter
         * @instance
         * @async
         * @param {Block} block - A `{ cid:CID, bytes:Uint8Array }` pair.
         * @returns {Promise<void>} The returned promise will only resolve once the
         * bytes this block generates are written to the `out` iterable.
         */
        async put(block) {
          if (!(block.bytes instanceof Uint8Array) || !block.cid) {
            throw new TypeError("Can only write {cid, bytes} objects");
          }
          if (this._ended) {
            throw new Error("Already closed");
          }
          const cid = CID.asCID(block.cid);
          if (!cid) {
            throw new TypeError("Can only write {cid, bytes} objects");
          }
          this._mutex = this._mutex.then(() => this._encoder.writeBlock({ cid, bytes: block.bytes }));
          return this._mutex;
        }
        /**
         * Finalise the CAR archive and signal that the `out` iterable should end once
         * any remaining bytes are written.
         *
         * @function
         * @memberof CarWriter
         * @instance
         * @async
         * @returns {Promise<void>}
         */
        async close() {
          if (this._ended) {
            throw new Error("Already closed");
          }
          await this._mutex;
          this._ended = true;
          return this._encoder.close();
        }
        /**
         * Create a new CAR writer "channel" which consists of a
         * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.
         *
         * @async
         * @static
         * @memberof CarWriter
         * @param {CID[] | CID | void} roots
         * @returns {WriterChannel} The channel takes the form of
         * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.
         */
        static create(roots) {
          roots = toRoots(roots);
          const { encoder, iterator } = encodeWriter();
          const writer = new _CarWriter(roots, encoder);
          const out = new CarWriterOut(iterator);
          return { writer, out };
        }
        /**
         * Create a new CAR appender "channel" which consists of a
         * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.
         * This appender does not consider roots and does not produce a CAR header.
         * It is designed to append blocks to an _existing_ CAR archive. It is
         * expected that `out` will be concatenated onto the end of an existing
         * archive that already has a properly formatted header.
         *
         * @async
         * @static
         * @memberof CarWriter
         * @returns {WriterChannel} The channel takes the form of
         * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.
         */
        static createAppender() {
          const { encoder, iterator } = encodeWriter();
          encoder.setRoots = () => Promise.resolve();
          const writer = new _CarWriter([], encoder);
          const out = new CarWriterOut(iterator);
          return { writer, out };
        }
        /**
         * Update the list of roots in the header of an existing CAR as represented
         * in a Uint8Array.
         *
         * This operation is an _overwrite_, the total length of the CAR will not be
         * modified. A rejection will occur if the new header will not be the same
         * length as the existing header, in which case the CAR will not be modified.
         * It is the responsibility of the user to ensure that the roots being
         * replaced encode as the same length as the new roots.
         *
         * The byte array passed in an argument will be modified and also returned
         * upon successful modification.
         *
         * @async
         * @static
         * @memberof CarWriter
         * @param {Uint8Array} bytes
         * @param {CID[]} roots - A new list of roots to replace the existing list in
         * the CAR header. The new header must take up the same number of bytes as the
         * existing header, so the roots should collectively be the same byte length
         * as the existing roots.
         * @returns {Promise<Uint8Array>}
         */
        static async updateRootsInBytes(bytes, roots) {
          const reader = bytesReader2(bytes);
          await readHeader2(reader);
          const newHeader = createHeader(roots);
          if (Number(reader.pos) !== newHeader.length) {
            throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`);
          }
          bytes.set(newHeader, 0);
          return bytes;
        }
      };
      CarWriterOut = class {
        /**
         * @param {AsyncIterator<Uint8Array>} iterator
         */
        constructor(iterator) {
          this._iterator = iterator;
        }
        [Symbol.asyncIterator]() {
          if (this._iterating) {
            throw new Error("Multiple iterator not supported");
          }
          this._iterating = true;
          return this._iterator;
        }
      };
    }
  });

  // node_modules/@ipld/car/src/index-browser.js
  var index_browser_exports = {};
  __export(index_browser_exports, {
    CarBlockIterator: () => CarBlockIterator,
    CarBufferReader: () => CarBufferReader,
    CarBufferWriter: () => buffer_writer_exports,
    CarCIDIterator: () => CarCIDIterator,
    CarIndexedReader: () => CarIndexedReader,
    CarIndexer: () => CarIndexer,
    CarReader: () => CarReader,
    CarWriter: () => CarWriter
  });
  var init_index_browser = __esm({
    "node_modules/@ipld/car/src/index-browser.js"() {
      init_buffer_reader_browser();
      init_buffer_writer();
      init_indexed_reader_browser();
      init_indexer();
      init_iterator();
      init_reader_browser();
      init_writer_browser();
    }
  });

  // node_modules/cbor-x/decode.js
  function checkedRead() {
    try {
      let result = read2();
      if (bundledStrings) {
        if (position >= bundledStrings.postBundlePosition) {
          let error = new Error("Unexpected bundle position");
          error.incomplete = true;
          throw error;
        }
        position = bundledStrings.postBundlePosition;
        bundledStrings = null;
      }
      if (position == srcEnd) {
        currentStructures = null;
        src2 = null;
        if (referenceMap)
          referenceMap = null;
      } else if (position > srcEnd) {
        let error = new Error("Unexpected end of CBOR data");
        error.incomplete = true;
        throw error;
      } else if (!sequentialMode) {
        throw new Error("Data read, but end of buffer not reached");
      }
      return result;
    } catch (error) {
      clearSource();
      if (error instanceof RangeError || error.message.startsWith("Unexpected end of buffer")) {
        error.incomplete = true;
      }
      throw error;
    }
  }
  function read2() {
    let token = src2[position++];
    let majorType = token >> 5;
    token = token & 31;
    if (token > 23) {
      switch (token) {
        case 24:
          token = src2[position++];
          break;
        case 25:
          if (majorType == 7) {
            return getFloat16();
          }
          token = dataView2.getUint16(position);
          position += 2;
          break;
        case 26:
          if (majorType == 7) {
            let value = dataView2.getFloat32(position);
            if (currentDecoder.useFloat32 > 2) {
              let multiplier = mult10[(src2[position] & 127) << 1 | src2[position + 1] >> 7];
              position += 4;
              return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
            }
            position += 4;
            return value;
          }
          token = dataView2.getUint32(position);
          position += 4;
          break;
        case 27:
          if (majorType == 7) {
            let value = dataView2.getFloat64(position);
            position += 8;
            return value;
          }
          if (majorType > 1) {
            if (dataView2.getUint32(position) > 0)
              throw new Error("JavaScript does not support arrays, maps, or strings with length over 4294967295");
            token = dataView2.getUint32(position + 4);
          } else if (currentDecoder.int64AsNumber) {
            token = dataView2.getUint32(position) * 4294967296;
            token += dataView2.getUint32(position + 4);
          } else
            token = dataView2.getBigUint64(position);
          position += 8;
          break;
        case 31:
          switch (majorType) {
            case 2:
            case 3:
              throw new Error("Indefinite length not supported for byte or text strings");
            case 4:
              let array = [];
              let value, i = 0;
              while ((value = read2()) != STOP_CODE) {
                array[i++] = value;
              }
              return majorType == 4 ? array : majorType == 3 ? array.join("") : Buffer.concat(array);
            case 5:
              let key;
              if (currentDecoder.mapsAsObjects) {
                let object = {};
                if (currentDecoder.keyMap)
                  while ((key = read2()) != STOP_CODE)
                    object[safeKey(currentDecoder.decodeKey(key))] = read2();
                else
                  while ((key = read2()) != STOP_CODE)
                    object[safeKey(key)] = read2();
                return object;
              } else {
                if (restoreMapsAsObject) {
                  currentDecoder.mapsAsObjects = true;
                  restoreMapsAsObject = false;
                }
                let map = /* @__PURE__ */ new Map();
                if (currentDecoder.keyMap)
                  while ((key = read2()) != STOP_CODE)
                    map.set(currentDecoder.decodeKey(key), read2());
                else
                  while ((key = read2()) != STOP_CODE)
                    map.set(key, read2());
                return map;
              }
            case 7:
              return STOP_CODE;
            default:
              throw new Error("Invalid major type for indefinite length " + majorType);
          }
        default:
          throw new Error("Unknown token " + token);
      }
    }
    switch (majorType) {
      case 0:
        return token;
      case 1:
        return ~token;
      case 2:
        return readBin(token);
      case 3:
        if (srcStringEnd >= position) {
          return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);
        }
        if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {
          let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);
          if (string != null)
            return string;
        }
        return readFixedString(token);
      case 4:
        let array = new Array(token);
        for (let i = 0; i < token; i++)
          array[i] = read2();
        return array;
      case 5:
        if (currentDecoder.mapsAsObjects) {
          let object = {};
          if (currentDecoder.keyMap)
            for (let i = 0; i < token; i++)
              object[safeKey(currentDecoder.decodeKey(read2()))] = read2();
          else
            for (let i = 0; i < token; i++)
              object[safeKey(read2())] = read2();
          return object;
        } else {
          if (restoreMapsAsObject) {
            currentDecoder.mapsAsObjects = true;
            restoreMapsAsObject = false;
          }
          let map = /* @__PURE__ */ new Map();
          if (currentDecoder.keyMap)
            for (let i = 0; i < token; i++)
              map.set(currentDecoder.decodeKey(read2()), read2());
          else
            for (let i = 0; i < token; i++)
              map.set(read2(), read2());
          return map;
        }
      case 6:
        if (token >= BUNDLED_STRINGS_ID) {
          let structure = currentStructures[token & 8191];
          if (structure) {
            if (!structure.read)
              structure.read = createStructureReader(structure);
            return structure.read();
          }
          if (token < 65536) {
            if (token == RECORD_INLINE_ID) {
              let length2 = readJustLength();
              let id = read2();
              let structure2 = read2();
              recordDefinition(id, structure2);
              let object = {};
              if (currentDecoder.keyMap)
                for (let i = 2; i < length2; i++) {
                  let key = currentDecoder.decodeKey(structure2[i - 2]);
                  object[safeKey(key)] = read2();
                }
              else
                for (let i = 2; i < length2; i++) {
                  let key = structure2[i - 2];
                  object[safeKey(key)] = read2();
                }
              return object;
            } else if (token == RECORD_DEFINITIONS_ID) {
              let length2 = readJustLength();
              let id = read2();
              for (let i = 2; i < length2; i++) {
                recordDefinition(id++, read2());
              }
              return read2();
            } else if (token == BUNDLED_STRINGS_ID) {
              return readBundleExt();
            }
            if (currentDecoder.getShared) {
              loadShared();
              structure = currentStructures[token & 8191];
              if (structure) {
                if (!structure.read)
                  structure.read = createStructureReader(structure);
                return structure.read();
              }
            }
          }
        }
        let extension = currentExtensions[token];
        if (extension) {
          if (extension.handlesRead)
            return extension(read2);
          else
            return extension(read2());
        } else {
          let input = read2();
          for (let i = 0; i < currentExtensionRanges.length; i++) {
            let value = currentExtensionRanges[i](token, input);
            if (value !== void 0)
              return value;
          }
          return new Tag(input, token);
        }
      case 7:
        switch (token) {
          case 20:
            return false;
          case 21:
            return true;
          case 22:
            return null;
          case 23:
            return;
          case 31:
          default:
            let packedValue = (packedValues || getPackedValues())[token];
            if (packedValue !== void 0)
              return packedValue;
            throw new Error("Unknown token " + token);
        }
      default:
        if (isNaN(token)) {
          let error = new Error("Unexpected end of CBOR data");
          error.incomplete = true;
          throw error;
        }
        throw new Error("Unknown CBOR token " + token);
    }
  }
  function createStructureReader(structure) {
    function readObject() {
      let length2 = src2[position++];
      length2 = length2 & 31;
      if (length2 > 23) {
        switch (length2) {
          case 24:
            length2 = src2[position++];
            break;
          case 25:
            length2 = dataView2.getUint16(position);
            position += 2;
            break;
          case 26:
            length2 = dataView2.getUint32(position);
            position += 4;
            break;
          default:
            throw new Error("Expected array header, but got " + src2[position - 1]);
        }
      }
      let compiledReader = this.compiledReader;
      while (compiledReader) {
        if (compiledReader.propertyCount === length2)
          return compiledReader(read2);
        compiledReader = compiledReader.next;
      }
      if (this.slowReads++ >= inlineObjectReadThreshold) {
        let array = this.length == length2 ? this : this.slice(0, length2);
        compiledReader = currentDecoder.keyMap ? new Function("r", "return {" + array.map((k) => currentDecoder.decodeKey(k)).map((k) => validName.test(k) ? safeKey(k) + ":r()" : "[" + JSON.stringify(k) + "]:r()").join(",") + "}") : new Function("r", "return {" + array.map((key) => validName.test(key) ? safeKey(key) + ":r()" : "[" + JSON.stringify(key) + "]:r()").join(",") + "}");
        if (this.compiledReader)
          compiledReader.next = this.compiledReader;
        compiledReader.propertyCount = length2;
        this.compiledReader = compiledReader;
        return compiledReader(read2);
      }
      let object = {};
      if (currentDecoder.keyMap)
        for (let i = 0; i < length2; i++)
          object[safeKey(currentDecoder.decodeKey(this[i]))] = read2();
      else
        for (let i = 0; i < length2; i++) {
          object[safeKey(this[i])] = read2();
        }
      return object;
    }
    structure.slowReads = 0;
    return readObject;
  }
  function safeKey(key) {
    return key === "__proto__" ? "__proto_" : key;
  }
  function readStringJS(length2) {
    let result;
    if (length2 < 16) {
      if (result = shortStringInJS(length2))
        return result;
    }
    if (length2 > 64 && decoder)
      return decoder.decode(src2.subarray(position, position += length2));
    const end = position + length2;
    const units = [];
    result = "";
    while (position < end) {
      const byte1 = src2[position++];
      if ((byte1 & 128) === 0) {
        units.push(byte1);
      } else if ((byte1 & 224) === 192) {
        const byte2 = src2[position++] & 63;
        units.push((byte1 & 31) << 6 | byte2);
      } else if ((byte1 & 240) === 224) {
        const byte2 = src2[position++] & 63;
        const byte3 = src2[position++] & 63;
        units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
      } else if ((byte1 & 248) === 240) {
        const byte2 = src2[position++] & 63;
        const byte3 = src2[position++] & 63;
        const byte4 = src2[position++] & 63;
        let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
        if (unit > 65535) {
          unit -= 65536;
          units.push(unit >>> 10 & 1023 | 55296);
          unit = 56320 | unit & 1023;
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }
      if (units.length >= 4096) {
        result += fromCharCode.apply(String, units);
        units.length = 0;
      }
    }
    if (units.length > 0) {
      result += fromCharCode.apply(String, units);
    }
    return result;
  }
  function longStringInJS(length2) {
    let start = position;
    let bytes = new Array(length2);
    for (let i = 0; i < length2; i++) {
      const byte = src2[position++];
      if ((byte & 128) > 0) {
        position = start;
        return;
      }
      bytes[i] = byte;
    }
    return fromCharCode.apply(String, bytes);
  }
  function shortStringInJS(length2) {
    if (length2 < 4) {
      if (length2 < 2) {
        if (length2 === 0)
          return "";
        else {
          let a = src2[position++];
          if ((a & 128) > 1) {
            position -= 1;
            return;
          }
          return fromCharCode(a);
        }
      } else {
        let a = src2[position++];
        let b = src2[position++];
        if ((a & 128) > 0 || (b & 128) > 0) {
          position -= 2;
          return;
        }
        if (length2 < 3)
          return fromCharCode(a, b);
        let c = src2[position++];
        if ((c & 128) > 0) {
          position -= 3;
          return;
        }
        return fromCharCode(a, b, c);
      }
    } else {
      let a = src2[position++];
      let b = src2[position++];
      let c = src2[position++];
      let d = src2[position++];
      if ((a & 128) > 0 || (b & 128) > 0 || (c & 128) > 0 || (d & 128) > 0) {
        position -= 4;
        return;
      }
      if (length2 < 6) {
        if (length2 === 4)
          return fromCharCode(a, b, c, d);
        else {
          let e = src2[position++];
          if ((e & 128) > 0) {
            position -= 5;
            return;
          }
          return fromCharCode(a, b, c, d, e);
        }
      } else if (length2 < 8) {
        let e = src2[position++];
        let f = src2[position++];
        if ((e & 128) > 0 || (f & 128) > 0) {
          position -= 6;
          return;
        }
        if (length2 < 7)
          return fromCharCode(a, b, c, d, e, f);
        let g = src2[position++];
        if ((g & 128) > 0) {
          position -= 7;
          return;
        }
        return fromCharCode(a, b, c, d, e, f, g);
      } else {
        let e = src2[position++];
        let f = src2[position++];
        let g = src2[position++];
        let h = src2[position++];
        if ((e & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
          position -= 8;
          return;
        }
        if (length2 < 10) {
          if (length2 === 8)
            return fromCharCode(a, b, c, d, e, f, g, h);
          else {
            let i = src2[position++];
            if ((i & 128) > 0) {
              position -= 9;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i);
          }
        } else if (length2 < 12) {
          let i = src2[position++];
          let j = src2[position++];
          if ((i & 128) > 0 || (j & 128) > 0) {
            position -= 10;
            return;
          }
          if (length2 < 11)
            return fromCharCode(a, b, c, d, e, f, g, h, i, j);
          let k = src2[position++];
          if ((k & 128) > 0) {
            position -= 11;
            return;
          }
          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);
        } else {
          let i = src2[position++];
          let j = src2[position++];
          let k = src2[position++];
          let l = src2[position++];
          if ((i & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
            position -= 12;
            return;
          }
          if (length2 < 14) {
            if (length2 === 12)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);
            else {
              let m = src2[position++];
              if ((m & 128) > 0) {
                position -= 13;
                return;
              }
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);
            }
          } else {
            let m = src2[position++];
            let n = src2[position++];
            if ((m & 128) > 0 || (n & 128) > 0) {
              position -= 14;
              return;
            }
            if (length2 < 15)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            let o = src2[position++];
            if ((o & 128) > 0) {
              position -= 15;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
          }
        }
      }
    }
  }
  function readBin(length2) {
    return currentDecoder.copyBuffers ? (
      // specifically use the copying slice (not the node one)
      Uint8Array.prototype.slice.call(src2, position, position += length2)
    ) : src2.subarray(position, position += length2);
  }
  function getFloat16() {
    let byte0 = src2[position++];
    let byte1 = src2[position++];
    let exponent = (byte0 & 127) >> 2;
    if (exponent === 31) {
      if (byte1 || byte0 & 3)
        return NaN;
      return byte0 & 128 ? -Infinity : Infinity;
    }
    if (exponent === 0) {
      let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);
      return byte0 & 128 ? -abs : abs;
    }
    u8Array[3] = byte0 & 128 | // sign bit
    (exponent >> 1) + 56;
    u8Array[2] = (byte0 & 7) << 5 | // last exponent bit and first two mantissa bits
    byte1 >> 3;
    u8Array[1] = byte1 << 5;
    u8Array[0] = 0;
    return f32Array[0];
  }
  function combine(a, b) {
    if (typeof a === "string")
      return a + b;
    if (a instanceof Array)
      return a.concat(b);
    return Object.assign({}, a, b);
  }
  function getPackedValues() {
    if (!packedValues) {
      if (currentDecoder.getShared)
        loadShared();
      else
        throw new Error("No packed values available");
    }
    return packedValues;
  }
  function registerTypedArray(TypedArray, tag) {
    let dvMethod = "get" + TypedArray.name.slice(0, -5);
    let bytesPerElement;
    if (typeof TypedArray === "function")
      bytesPerElement = TypedArray.BYTES_PER_ELEMENT;
    else
      TypedArray = null;
    for (let littleEndian = 0; littleEndian < 2; littleEndian++) {
      if (!littleEndian && bytesPerElement == 1)
        continue;
      let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;
      currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        return new TypedArray(Uint8Array.prototype.slice.call(buffer2, 0).buffer);
      } : (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        let dv = new DataView(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength);
        let elements = buffer2.length >> sizeShift;
        let ta = new TypedArray(elements);
        let method = dv[dvMethod];
        for (let i = 0; i < elements; i++) {
          ta[i] = method.call(dv, i << sizeShift, littleEndian);
        }
        return ta;
      };
    }
  }
  function readBundleExt() {
    let length2 = readJustLength();
    let bundlePosition = position + read2();
    for (let i = 2; i < length2; i++) {
      let bundleLength = readJustLength();
      position += bundleLength;
    }
    let dataPosition = position;
    position = bundlePosition;
    bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];
    bundledStrings.position0 = 0;
    bundledStrings.position1 = 0;
    bundledStrings.postBundlePosition = position;
    position = dataPosition;
    return read2();
  }
  function readJustLength() {
    let token = src2[position++] & 31;
    if (token > 23) {
      switch (token) {
        case 24:
          token = src2[position++];
          break;
        case 25:
          token = dataView2.getUint16(position);
          position += 2;
          break;
        case 26:
          token = dataView2.getUint32(position);
          position += 4;
          break;
      }
    }
    return token;
  }
  function loadShared() {
    if (currentDecoder.getShared) {
      let sharedData = saveState(() => {
        src2 = null;
        return currentDecoder.getShared();
      }) || {};
      let updatedStructures = sharedData.structures || [];
      currentDecoder.sharedVersion = sharedData.version;
      packedValues = currentDecoder.sharedValues = sharedData.packedValues;
      if (currentStructures === true)
        currentDecoder.structures = currentStructures = updatedStructures;
      else
        currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));
    }
  }
  function saveState(callback) {
    let savedSrcEnd = srcEnd;
    let savedPosition = position;
    let savedStringPosition = stringPosition;
    let savedSrcStringStart = srcStringStart;
    let savedSrcStringEnd = srcStringEnd;
    let savedSrcString = srcString;
    let savedStrings = strings;
    let savedReferenceMap = referenceMap;
    let savedBundledStrings = bundledStrings;
    let savedSrc = new Uint8Array(src2.slice(0, srcEnd));
    let savedStructures = currentStructures;
    let savedDecoder = currentDecoder;
    let savedSequentialMode = sequentialMode;
    let value = callback();
    srcEnd = savedSrcEnd;
    position = savedPosition;
    stringPosition = savedStringPosition;
    srcStringStart = savedSrcStringStart;
    srcStringEnd = savedSrcStringEnd;
    srcString = savedSrcString;
    strings = savedStrings;
    referenceMap = savedReferenceMap;
    bundledStrings = savedBundledStrings;
    src2 = savedSrc;
    sequentialMode = savedSequentialMode;
    currentStructures = savedStructures;
    currentDecoder = savedDecoder;
    dataView2 = new DataView(src2.buffer, src2.byteOffset, src2.byteLength);
    return value;
  }
  function clearSource() {
    src2 = null;
    referenceMap = null;
    currentStructures = null;
  }
  function addExtension(extension) {
    currentExtensions[extension.tag] = extension.decode;
  }
  function roundFloat32(float32Number) {
    f32Array[0] = float32Number;
    let multiplier = mult10[(u8Array[3] & 127) << 1 | u8Array[2] >> 7];
    return (multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5) >> 0) / multiplier;
  }
  var decoder, src2, srcEnd, position, EMPTY_ARRAY, LEGACY_RECORD_INLINE_ID, RECORD_DEFINITIONS_ID, RECORD_INLINE_ID, BUNDLED_STRINGS_ID, PACKED_REFERENCE_TAG_ID, STOP_CODE, strings, stringPosition, currentDecoder, currentStructures, srcString, srcStringStart, srcStringEnd, bundledStrings, referenceMap, currentExtensions, currentExtensionRanges, packedValues, dataView2, restoreMapsAsObject, defaultOptions, sequentialMode, inlineObjectReadThreshold, Decoder2, validName, readFixedString, isNativeAccelerationEnabled, fromCharCode, f32Array, u8Array, keyCache, Tag, recordDefinition, glbl, packedTable, SHARED_DATA_TAG_ID, isLittleEndianMachine, typedArrays, typedArrayTags, mult10, defaultDecoder, decode7, decodeMultiple, FLOAT32_OPTIONS;
  var init_decode2 = __esm({
    "node_modules/cbor-x/decode.js"() {
      try {
        decoder = new TextDecoder();
      } catch (error) {
      }
      position = 0;
      EMPTY_ARRAY = [];
      LEGACY_RECORD_INLINE_ID = 105;
      RECORD_DEFINITIONS_ID = 57342;
      RECORD_INLINE_ID = 57343;
      BUNDLED_STRINGS_ID = 57337;
      PACKED_REFERENCE_TAG_ID = 6;
      STOP_CODE = {};
      strings = EMPTY_ARRAY;
      stringPosition = 0;
      currentDecoder = {};
      srcStringStart = 0;
      srcStringEnd = 0;
      currentExtensions = [];
      currentExtensionRanges = [];
      defaultOptions = {
        useRecords: false,
        mapsAsObjects: true
      };
      sequentialMode = false;
      inlineObjectReadThreshold = 2;
      try {
        new Function("");
      } catch (error) {
        inlineObjectReadThreshold = Infinity;
      }
      Decoder2 = class _Decoder {
        constructor(options) {
          if (options) {
            if ((options.keyMap || options._keyMap) && !options.useRecords) {
              options.useRecords = false;
              options.mapsAsObjects = true;
            }
            if (options.useRecords === false && options.mapsAsObjects === void 0)
              options.mapsAsObjects = true;
            if (options.getStructures)
              options.getShared = options.getStructures;
            if (options.getShared && !options.structures)
              (options.structures = []).uninitialized = true;
            if (options.keyMap) {
              this.mapKey = /* @__PURE__ */ new Map();
              for (let [k, v] of Object.entries(options.keyMap))
                this.mapKey.set(v, k);
            }
          }
          Object.assign(this, options);
        }
        /*
        decodeKey(key) {
        	return this.keyMap
        		? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key
        		: key
        }
        */
        decodeKey(key) {
          return this.keyMap ? this.mapKey.get(key) || key : key;
        }
        encodeKey(key) {
          return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
        }
        encodeKeys(rec) {
          if (!this._keyMap)
            return rec;
          let map = /* @__PURE__ */ new Map();
          for (let [k, v] of Object.entries(rec))
            map.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
          return map;
        }
        decodeKeys(map) {
          if (!this._keyMap || map.constructor.name != "Map")
            return map;
          if (!this._mapKey) {
            this._mapKey = /* @__PURE__ */ new Map();
            for (let [k, v] of Object.entries(this._keyMap))
              this._mapKey.set(v, k);
          }
          let res = {};
          map.forEach((v, k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] = v);
          return res;
        }
        mapDecode(source, end) {
          let res = this.decode(source);
          if (this._keyMap) {
            switch (res.constructor.name) {
              case "Array":
                return res.map((r) => this.decodeKeys(r));
            }
          }
          return res;
        }
        decode(source, end) {
          if (src2) {
            return saveState(() => {
              clearSource();
              return this ? this.decode(source, end) : _Decoder.prototype.decode.call(defaultOptions, source, end);
            });
          }
          srcEnd = end > -1 ? end : source.length;
          position = 0;
          stringPosition = 0;
          srcStringEnd = 0;
          srcString = null;
          strings = EMPTY_ARRAY;
          bundledStrings = null;
          src2 = source;
          try {
            dataView2 = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
          } catch (error) {
            src2 = null;
            if (source instanceof Uint8Array)
              throw error;
            throw new Error("Source must be a Uint8Array or Buffer but was a " + (source && typeof source == "object" ? source.constructor.name : typeof source));
          }
          if (this instanceof _Decoder) {
            currentDecoder = this;
            packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
            if (this.structures) {
              currentStructures = this.structures;
              return checkedRead();
            } else if (!currentStructures || currentStructures.length > 0) {
              currentStructures = [];
            }
          } else {
            currentDecoder = defaultOptions;
            if (!currentStructures || currentStructures.length > 0)
              currentStructures = [];
            packedValues = null;
          }
          return checkedRead();
        }
        decodeMultiple(source, forEach) {
          let values, lastPosition = 0;
          try {
            let size = source.length;
            sequentialMode = true;
            let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
            if (forEach) {
              if (forEach(value) === false) {
                return;
              }
              while (position < size) {
                lastPosition = position;
                if (forEach(checkedRead()) === false) {
                  return;
                }
              }
            } else {
              values = [value];
              while (position < size) {
                lastPosition = position;
                values.push(checkedRead());
              }
              return values;
            }
          } catch (error) {
            error.lastPosition = lastPosition;
            error.values = values;
            throw error;
          } finally {
            sequentialMode = false;
            clearSource();
          }
        }
      };
      validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
      readFixedString = readStringJS;
      isNativeAccelerationEnabled = false;
      fromCharCode = String.fromCharCode;
      f32Array = new Float32Array(1);
      u8Array = new Uint8Array(f32Array.buffer, 0, 4);
      keyCache = new Array(4096);
      Tag = class {
        constructor(value, tag) {
          this.value = value;
          this.tag = tag;
        }
      };
      currentExtensions[0] = (dateString) => {
        return new Date(dateString);
      };
      currentExtensions[1] = (epochSec) => {
        return new Date(Math.round(epochSec * 1e3));
      };
      currentExtensions[2] = (buffer2) => {
        let value = BigInt(0);
        for (let i = 0, l = buffer2.byteLength; i < l; i++) {
          value = BigInt(buffer2[i]) + value << BigInt(8);
        }
        return value;
      };
      currentExtensions[3] = (buffer2) => {
        return BigInt(-1) - currentExtensions[2](buffer2);
      };
      currentExtensions[4] = (fraction) => {
        return +(fraction[1] + "e" + fraction[0]);
      };
      currentExtensions[5] = (fraction) => {
        return fraction[1] * Math.exp(fraction[0] * Math.log(2));
      };
      recordDefinition = (id, structure) => {
        id = id - 57344;
        let existingStructure = currentStructures[id];
        if (existingStructure && existingStructure.isShared) {
          (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
        }
        currentStructures[id] = structure;
        structure.read = createStructureReader(structure);
      };
      currentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {
        let length2 = data.length;
        let structure = data[1];
        recordDefinition(data[0], structure);
        let object = {};
        for (let i = 2; i < length2; i++) {
          let key = structure[i - 2];
          object[safeKey(key)] = data[i];
        }
        return object;
      };
      currentExtensions[14] = (value) => {
        if (bundledStrings)
          return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);
        return new Tag(value, 14);
      };
      currentExtensions[15] = (value) => {
        if (bundledStrings)
          return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
        return new Tag(value, 15);
      };
      glbl = { Error, RegExp };
      currentExtensions[27] = (data) => {
        return (glbl[data[0]] || Error)(data[1], data[2]);
      };
      packedTable = (read3) => {
        if (src2[position++] != 132)
          throw new Error("Packed values structure must be followed by a 4 element array");
        let newPackedValues = read3();
        packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
        packedValues.prefixes = read3();
        packedValues.suffixes = read3();
        return read3();
      };
      packedTable.handlesRead = true;
      currentExtensions[51] = packedTable;
      currentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => {
        if (!packedValues) {
          if (currentDecoder.getShared)
            loadShared();
          else
            return new Tag(data, PACKED_REFERENCE_TAG_ID);
        }
        if (typeof data == "number")
          return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
        throw new Error("No support for non-integer packed references yet");
      };
      currentExtensions[28] = (read3) => {
        if (!referenceMap) {
          referenceMap = /* @__PURE__ */ new Map();
          referenceMap.id = 0;
        }
        let id = referenceMap.id++;
        let token = src2[position];
        let target2;
        if (token >> 5 == 4)
          target2 = [];
        else
          target2 = {};
        let refEntry = { target: target2 };
        referenceMap.set(id, refEntry);
        let targetProperties = read3();
        if (refEntry.used)
          return Object.assign(target2, targetProperties);
        refEntry.target = targetProperties;
        return targetProperties;
      };
      currentExtensions[28].handlesRead = true;
      currentExtensions[29] = (id) => {
        let refEntry = referenceMap.get(id);
        refEntry.used = true;
        return refEntry.target;
      };
      currentExtensions[258] = (array) => new Set(array);
      (currentExtensions[259] = (read3) => {
        if (currentDecoder.mapsAsObjects) {
          currentDecoder.mapsAsObjects = false;
          restoreMapsAsObject = true;
        }
        return read3();
      }).handlesRead = true;
      SHARED_DATA_TAG_ID = 1399353956;
      currentExtensionRanges.push((tag, input) => {
        if (tag >= 225 && tag <= 255)
          return combine(getPackedValues().prefixes[tag - 224], input);
        if (tag >= 28704 && tag <= 32767)
          return combine(getPackedValues().prefixes[tag - 28672], input);
        if (tag >= 1879052288 && tag <= 2147483647)
          return combine(getPackedValues().prefixes[tag - 1879048192], input);
        if (tag >= 216 && tag <= 223)
          return combine(input, getPackedValues().suffixes[tag - 216]);
        if (tag >= 27647 && tag <= 28671)
          return combine(input, getPackedValues().suffixes[tag - 27639]);
        if (tag >= 1811940352 && tag <= 1879048191)
          return combine(input, getPackedValues().suffixes[tag - 1811939328]);
        if (tag == SHARED_DATA_TAG_ID) {
          return {
            packedValues,
            structures: currentStructures.slice(0),
            version: input
          };
        }
        if (tag == 55799)
          return input;
      });
      isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
      typedArrays = [
        Uint8Array,
        Uint8ClampedArray,
        Uint16Array,
        Uint32Array,
        typeof BigUint64Array == "undefined" ? { name: "BigUint64Array" } : BigUint64Array,
        Int8Array,
        Int16Array,
        Int32Array,
        typeof BigInt64Array == "undefined" ? { name: "BigInt64Array" } : BigInt64Array,
        Float32Array,
        Float64Array
      ];
      typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86];
      for (let i = 0; i < typedArrays.length; i++) {
        registerTypedArray(typedArrays[i], typedArrayTags[i]);
      }
      mult10 = new Array(147);
      for (let i = 0; i < 256; i++) {
        mult10[i] = +("1e" + Math.floor(45.15 - i * 0.30103));
      }
      defaultDecoder = new Decoder2({ useRecords: false });
      decode7 = defaultDecoder.decode;
      decodeMultiple = defaultDecoder.decodeMultiple;
      FLOAT32_OPTIONS = {
        NEVER: 0,
        ALWAYS: 1,
        DECIMAL_ROUND: 3,
        DECIMAL_FIT: 4
      };
    }
  });

  // node_modules/cbor-x/encode.js
  function writeEntityLength(length2, majorValue) {
    if (length2 < 24)
      target[position2++] = majorValue | length2;
    else if (length2 < 256) {
      target[position2++] = majorValue | 24;
      target[position2++] = length2;
    } else if (length2 < 65536) {
      target[position2++] = majorValue | 25;
      target[position2++] = length2 >> 8;
      target[position2++] = length2 & 255;
    } else {
      target[position2++] = majorValue | 26;
      targetView.setUint32(position2, length2);
      position2 += 4;
    }
  }
  function writeArrayHeader(length2) {
    if (length2 < 24)
      target[position2++] = 128 | length2;
    else if (length2 < 256) {
      target[position2++] = 152;
      target[position2++] = length2;
    } else if (length2 < 65536) {
      target[position2++] = 153;
      target[position2++] = length2 >> 8;
      target[position2++] = length2 & 255;
    } else {
      target[position2++] = 154;
      targetView.setUint32(position2, length2);
      position2 += 4;
    }
  }
  function isBlob(object) {
    if (object instanceof BlobConstructor)
      return true;
    let tag = object[Symbol.toStringTag];
    return tag === "Blob" || tag === "File";
  }
  function findRepetitiveStrings(value, packedValues2) {
    switch (typeof value) {
      case "string":
        if (value.length > 3) {
          if (packedValues2.objectMap[value] > -1 || packedValues2.values.length >= packedValues2.maxValues)
            return;
          let packedStatus = packedValues2.get(value);
          if (packedStatus) {
            if (++packedStatus.count == 2) {
              packedValues2.values.push(value);
            }
          } else {
            packedValues2.set(value, {
              count: 1
            });
            if (packedValues2.samplingPackedValues) {
              let status = packedValues2.samplingPackedValues.get(value);
              if (status)
                status.count++;
              else
                packedValues2.samplingPackedValues.set(value, {
                  count: 1
                });
            }
          }
        }
        break;
      case "object":
        if (value) {
          if (value instanceof Array) {
            for (let i = 0, l = value.length; i < l; i++) {
              findRepetitiveStrings(value[i], packedValues2);
            }
          } else {
            let includeKeys = !packedValues2.encoder.useRecords;
            for (var key in value) {
              if (value.hasOwnProperty(key)) {
                if (includeKeys)
                  findRepetitiveStrings(key, packedValues2);
                findRepetitiveStrings(value[key], packedValues2);
              }
            }
          }
        }
        break;
      case "function":
        console.log(value);
    }
  }
  function typedArrayEncoder(tag, size) {
    if (!isLittleEndianMachine2 && size > 1)
      tag -= 4;
    return {
      tag,
      encode: function writeExtBuffer(typedArray, encode6) {
        let length2 = typedArray.byteLength;
        let offset = typedArray.byteOffset || 0;
        let buffer2 = typedArray.buffer || typedArray;
        encode6(hasNodeBuffer ? Buffer2.from(buffer2, offset, length2) : new Uint8Array(buffer2, offset, length2));
      }
    };
  }
  function writeBuffer(buffer2, makeRoom) {
    let length2 = buffer2.byteLength;
    if (length2 < 24) {
      target[position2++] = 64 + length2;
    } else if (length2 < 256) {
      target[position2++] = 88;
      target[position2++] = length2;
    } else if (length2 < 65536) {
      target[position2++] = 89;
      target[position2++] = length2 >> 8;
      target[position2++] = length2 & 255;
    } else {
      target[position2++] = 90;
      targetView.setUint32(position2, length2);
      position2 += 4;
    }
    if (position2 + length2 >= target.length) {
      makeRoom(position2 + length2);
    }
    target.set(buffer2.buffer ? buffer2 : new Uint8Array(buffer2), position2);
    position2 += length2;
  }
  function insertIds(serialized, idsToInsert) {
    let nextId;
    let distanceToMove = idsToInsert.length * 2;
    let lastEnd = serialized.length - distanceToMove;
    idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
    for (let id = 0; id < idsToInsert.length; id++) {
      let referee = idsToInsert[id];
      referee.id = id;
      for (let position3 of referee.references) {
        serialized[position3++] = id >> 8;
        serialized[position3] = id & 255;
      }
    }
    while (nextId = idsToInsert.pop()) {
      let offset = nextId.offset;
      serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
      distanceToMove -= 2;
      let position3 = offset + distanceToMove;
      serialized[position3++] = 216;
      serialized[position3++] = 28;
      lastEnd = offset;
    }
    return serialized;
  }
  function writeBundles(start, encode6) {
    targetView.setUint32(bundledStrings2.position + start, position2 - bundledStrings2.position - start + 1);
    let writeStrings = bundledStrings2;
    bundledStrings2 = null;
    encode6(writeStrings[0]);
    encode6(writeStrings[1]);
  }
  function addExtension2(extension) {
    if (extension.Class) {
      if (!extension.encode)
        throw new Error("Extension has no encode function");
      extensionClasses.unshift(extension.Class);
      extensions.unshift(extension);
    }
    addExtension(extension);
  }
  var textEncoder2, extensions, extensionClasses, Buffer2, hasNodeBuffer, ByteArrayAllocate, ByteArray, MAX_STRUCTURES, MAX_BUFFER_SIZE, throwOnIterable, target, targetView, position2, safeEnd, bundledStrings2, MAX_BUNDLE_SIZE, hasNonLatin, RECORD_SYMBOL, Encoder2, SharedData, BlobConstructor, isLittleEndianMachine2, defaultEncoder, encode5, encodeAsIterable, encodeAsAsyncIterable, NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT, REUSE_BUFFER_MODE, RESET_BUFFER_MODE, THROW_ON_ITERABLE;
  var init_encode2 = __esm({
    "node_modules/cbor-x/encode.js"() {
      init_decode2();
      init_decode2();
      init_decode2();
      try {
        textEncoder2 = new TextEncoder();
      } catch (error) {
      }
      Buffer2 = typeof globalThis === "object" && globalThis.Buffer;
      hasNodeBuffer = typeof Buffer2 !== "undefined";
      ByteArrayAllocate = hasNodeBuffer ? Buffer2.allocUnsafeSlow : Uint8Array;
      ByteArray = hasNodeBuffer ? Buffer2 : Uint8Array;
      MAX_STRUCTURES = 256;
      MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
      position2 = 0;
      bundledStrings2 = null;
      MAX_BUNDLE_SIZE = 61440;
      hasNonLatin = /[\u0080-\uFFFF]/;
      RECORD_SYMBOL = Symbol("record-id");
      Encoder2 = class extends Decoder2 {
        constructor(options) {
          super(options);
          this.offset = 0;
          let typeBuffer;
          let start;
          let sharedStructures;
          let hasSharedUpdate;
          let structures;
          let referenceMap2;
          options = options || {};
          let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position3, maxBytes) {
            return target.utf8Write(string, position3, maxBytes);
          } : textEncoder2 && textEncoder2.encodeInto ? function(string, position3) {
            return textEncoder2.encodeInto(string, target.subarray(position3)).written;
          } : false;
          let encoder = this;
          let hasSharedStructures = options.structures || options.saveStructures;
          let maxSharedStructures = options.maxSharedStructures;
          if (maxSharedStructures == null)
            maxSharedStructures = hasSharedStructures ? 128 : 0;
          if (maxSharedStructures > 8190)
            throw new Error("Maximum maxSharedStructure is 8190");
          let isSequential = options.sequential;
          if (isSequential) {
            maxSharedStructures = 0;
          }
          if (!this.structures)
            this.structures = [];
          if (this.saveStructures)
            this.saveShared = this.saveStructures;
          let samplingPackedValues, packedObjectMap2, sharedValues = options.sharedValues;
          let sharedPackedObjectMap2;
          if (sharedValues) {
            sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
            for (let i = 0, l = sharedValues.length; i < l; i++) {
              sharedPackedObjectMap2[sharedValues[i]] = i;
            }
          }
          let recordIdsToRemove = [];
          let transitionsCount = 0;
          let serializationsSinceTransitionRebuild = 0;
          this.mapEncode = function(value, encodeOptions2) {
            if (this._keyMap && !this._mapped) {
              switch (value.constructor.name) {
                case "Array":
                  value = value.map((r) => this.encodeKeys(r));
                  break;
              }
            }
            return this.encode(value, encodeOptions2);
          };
          this.encode = function(value, encodeOptions2) {
            if (!target) {
              target = new ByteArrayAllocate(8192);
              targetView = new DataView(target.buffer, 0, 8192);
              position2 = 0;
            }
            safeEnd = target.length - 10;
            if (safeEnd - position2 < 2048) {
              target = new ByteArrayAllocate(target.length);
              targetView = new DataView(target.buffer, 0, target.length);
              safeEnd = target.length - 10;
              position2 = 0;
            } else if (encodeOptions2 === REUSE_BUFFER_MODE)
              position2 = position2 + 7 & 2147483640;
            start = position2;
            if (encoder.useSelfDescribedHeader) {
              targetView.setUint32(position2, 3654940416);
              position2 += 3;
            }
            referenceMap2 = encoder.structuredClone ? /* @__PURE__ */ new Map() : null;
            if (encoder.bundleStrings && typeof value !== "string") {
              bundledStrings2 = [];
              bundledStrings2.size = Infinity;
            } else
              bundledStrings2 = null;
            sharedStructures = encoder.structures;
            if (sharedStructures) {
              if (sharedStructures.uninitialized) {
                let sharedData = encoder.getShared() || {};
                encoder.structures = sharedStructures = sharedData.structures || [];
                encoder.sharedVersion = sharedData.version;
                let sharedValues2 = encoder.sharedValues = sharedData.packedValues;
                if (sharedValues2) {
                  sharedPackedObjectMap2 = {};
                  for (let i = 0, l = sharedValues2.length; i < l; i++)
                    sharedPackedObjectMap2[sharedValues2[i]] = i;
                }
              }
              let sharedStructuresLength = sharedStructures.length;
              if (sharedStructuresLength > maxSharedStructures && !isSequential)
                sharedStructuresLength = maxSharedStructures;
              if (!sharedStructures.transitions) {
                sharedStructures.transitions = /* @__PURE__ */ Object.create(null);
                for (let i = 0; i < sharedStructuresLength; i++) {
                  let keys = sharedStructures[i];
                  if (!keys)
                    continue;
                  let nextTransition, transition = sharedStructures.transitions;
                  for (let j = 0, l = keys.length; j < l; j++) {
                    if (transition[RECORD_SYMBOL] === void 0)
                      transition[RECORD_SYMBOL] = i;
                    let key = keys[j];
                    nextTransition = transition[key];
                    if (!nextTransition) {
                      nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                    }
                    transition = nextTransition;
                  }
                  transition[RECORD_SYMBOL] = i | 1048576;
                }
              }
              if (!isSequential)
                sharedStructures.nextId = sharedStructuresLength;
            }
            if (hasSharedUpdate)
              hasSharedUpdate = false;
            structures = sharedStructures || [];
            packedObjectMap2 = sharedPackedObjectMap2;
            if (options.pack) {
              let packedValues2 = /* @__PURE__ */ new Map();
              packedValues2.values = [];
              packedValues2.encoder = encoder;
              packedValues2.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap2 ? 16 : Infinity);
              packedValues2.objectMap = sharedPackedObjectMap2 || false;
              packedValues2.samplingPackedValues = samplingPackedValues;
              findRepetitiveStrings(value, packedValues2);
              if (packedValues2.values.length > 0) {
                target[position2++] = 216;
                target[position2++] = 51;
                writeArrayHeader(4);
                let valuesArray = packedValues2.values;
                encode6(valuesArray);
                writeArrayHeader(0);
                writeArrayHeader(0);
                packedObjectMap2 = Object.create(sharedPackedObjectMap2 || null);
                for (let i = 0, l = valuesArray.length; i < l; i++) {
                  packedObjectMap2[valuesArray[i]] = i;
                }
              }
            }
            throwOnIterable = encodeOptions2 & THROW_ON_ITERABLE;
            try {
              if (throwOnIterable)
                return;
              encode6(value);
              if (bundledStrings2) {
                writeBundles(start, encode6);
              }
              encoder.offset = position2;
              if (referenceMap2 && referenceMap2.idsToInsert) {
                position2 += referenceMap2.idsToInsert.length * 2;
                if (position2 > safeEnd)
                  makeRoom(position2);
                encoder.offset = position2;
                let serialized = insertIds(target.subarray(start, position2), referenceMap2.idsToInsert);
                referenceMap2 = null;
                return serialized;
              }
              if (encodeOptions2 & REUSE_BUFFER_MODE) {
                target.start = start;
                target.end = position2;
                return target;
              }
              return target.subarray(start, position2);
            } finally {
              if (sharedStructures) {
                if (serializationsSinceTransitionRebuild < 10)
                  serializationsSinceTransitionRebuild++;
                if (sharedStructures.length > maxSharedStructures)
                  sharedStructures.length = maxSharedStructures;
                if (transitionsCount > 1e4) {
                  sharedStructures.transitions = null;
                  serializationsSinceTransitionRebuild = 0;
                  transitionsCount = 0;
                  if (recordIdsToRemove.length > 0)
                    recordIdsToRemove = [];
                } else if (recordIdsToRemove.length > 0 && !isSequential) {
                  for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
                    recordIdsToRemove[i][RECORD_SYMBOL] = void 0;
                  }
                  recordIdsToRemove = [];
                }
              }
              if (hasSharedUpdate && encoder.saveShared) {
                if (encoder.structures.length > maxSharedStructures) {
                  encoder.structures = encoder.structures.slice(0, maxSharedStructures);
                }
                let returnBuffer = target.subarray(start, position2);
                if (encoder.updateSharedData() === false)
                  return encoder.encode(value);
                return returnBuffer;
              }
              if (encodeOptions2 & RESET_BUFFER_MODE)
                position2 = start;
            }
          };
          this.findCommonStringsToPack = () => {
            samplingPackedValues = /* @__PURE__ */ new Map();
            if (!sharedPackedObjectMap2)
              sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
            return (options2) => {
              let threshold = options2 && options2.threshold || 4;
              let position3 = this.pack ? options2.maxPrivatePackedValues || 16 : 0;
              if (!sharedValues)
                sharedValues = this.sharedValues = [];
              for (let [key, status] of samplingPackedValues) {
                if (status.count > threshold) {
                  sharedPackedObjectMap2[key] = position3++;
                  sharedValues.push(key);
                  hasSharedUpdate = true;
                }
              }
              while (this.saveShared && this.updateSharedData() === false) {
              }
              samplingPackedValues = null;
            };
          };
          const encode6 = (value) => {
            if (position2 > safeEnd)
              target = makeRoom(position2);
            var type = typeof value;
            var length2;
            if (type === "string") {
              if (packedObjectMap2) {
                let packedPosition = packedObjectMap2[value];
                if (packedPosition >= 0) {
                  if (packedPosition < 16)
                    target[position2++] = packedPosition + 224;
                  else {
                    target[position2++] = 198;
                    if (packedPosition & 1)
                      encode6(15 - packedPosition >> 1);
                    else
                      encode6(packedPosition - 16 >> 1);
                  }
                  return;
                } else if (samplingPackedValues && !options.pack) {
                  let status = samplingPackedValues.get(value);
                  if (status)
                    status.count++;
                  else
                    samplingPackedValues.set(value, {
                      count: 1
                    });
                }
              }
              let strLength = value.length;
              if (bundledStrings2 && strLength >= 4 && strLength < 1024) {
                if ((bundledStrings2.size += strLength) > MAX_BUNDLE_SIZE) {
                  let extStart;
                  let maxBytes2 = (bundledStrings2[0] ? bundledStrings2[0].length * 3 + bundledStrings2[1].length : 0) + 10;
                  if (position2 + maxBytes2 > safeEnd)
                    target = makeRoom(position2 + maxBytes2);
                  target[position2++] = 217;
                  target[position2++] = 223;
                  target[position2++] = 249;
                  target[position2++] = bundledStrings2.position ? 132 : 130;
                  target[position2++] = 26;
                  extStart = position2 - start;
                  position2 += 4;
                  if (bundledStrings2.position) {
                    writeBundles(start, encode6);
                  }
                  bundledStrings2 = ["", ""];
                  bundledStrings2.size = 0;
                  bundledStrings2.position = extStart;
                }
                let twoByte = hasNonLatin.test(value);
                bundledStrings2[twoByte ? 0 : 1] += value;
                target[position2++] = twoByte ? 206 : 207;
                encode6(strLength);
                return;
              }
              let headerSize;
              if (strLength < 32) {
                headerSize = 1;
              } else if (strLength < 256) {
                headerSize = 2;
              } else if (strLength < 65536) {
                headerSize = 3;
              } else {
                headerSize = 5;
              }
              let maxBytes = strLength * 3;
              if (position2 + maxBytes > safeEnd)
                target = makeRoom(position2 + maxBytes);
              if (strLength < 64 || !encodeUtf8) {
                let i, c1, c2, strPosition = position2 + headerSize;
                for (i = 0; i < strLength; i++) {
                  c1 = value.charCodeAt(i);
                  if (c1 < 128) {
                    target[strPosition++] = c1;
                  } else if (c1 < 2048) {
                    target[strPosition++] = c1 >> 6 | 192;
                    target[strPosition++] = c1 & 63 | 128;
                  } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i + 1)) & 64512) === 56320) {
                    c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
                    i++;
                    target[strPosition++] = c1 >> 18 | 240;
                    target[strPosition++] = c1 >> 12 & 63 | 128;
                    target[strPosition++] = c1 >> 6 & 63 | 128;
                    target[strPosition++] = c1 & 63 | 128;
                  } else {
                    target[strPosition++] = c1 >> 12 | 224;
                    target[strPosition++] = c1 >> 6 & 63 | 128;
                    target[strPosition++] = c1 & 63 | 128;
                  }
                }
                length2 = strPosition - position2 - headerSize;
              } else {
                length2 = encodeUtf8(value, position2 + headerSize, maxBytes);
              }
              if (length2 < 24) {
                target[position2++] = 96 | length2;
              } else if (length2 < 256) {
                if (headerSize < 2) {
                  target.copyWithin(position2 + 2, position2 + 1, position2 + 1 + length2);
                }
                target[position2++] = 120;
                target[position2++] = length2;
              } else if (length2 < 65536) {
                if (headerSize < 3) {
                  target.copyWithin(position2 + 3, position2 + 2, position2 + 2 + length2);
                }
                target[position2++] = 121;
                target[position2++] = length2 >> 8;
                target[position2++] = length2 & 255;
              } else {
                if (headerSize < 5) {
                  target.copyWithin(position2 + 5, position2 + 3, position2 + 3 + length2);
                }
                target[position2++] = 122;
                targetView.setUint32(position2, length2);
                position2 += 4;
              }
              position2 += length2;
            } else if (type === "number") {
              if (!this.alwaysUseFloat && value >>> 0 === value) {
                if (value < 24) {
                  target[position2++] = value;
                } else if (value < 256) {
                  target[position2++] = 24;
                  target[position2++] = value;
                } else if (value < 65536) {
                  target[position2++] = 25;
                  target[position2++] = value >> 8;
                  target[position2++] = value & 255;
                } else {
                  target[position2++] = 26;
                  targetView.setUint32(position2, value);
                  position2 += 4;
                }
              } else if (!this.alwaysUseFloat && value >> 0 === value) {
                if (value >= -24) {
                  target[position2++] = 31 - value;
                } else if (value >= -256) {
                  target[position2++] = 56;
                  target[position2++] = ~value;
                } else if (value >= -65536) {
                  target[position2++] = 57;
                  targetView.setUint16(position2, ~value);
                  position2 += 2;
                } else {
                  target[position2++] = 58;
                  targetView.setUint32(position2, ~value);
                  position2 += 4;
                }
              } else {
                let useFloat32;
                if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
                  target[position2++] = 250;
                  targetView.setFloat32(position2, value);
                  let xShifted;
                  if (useFloat32 < 4 || // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
                  (xShifted = value * mult10[(target[position2] & 127) << 1 | target[position2 + 1] >> 7]) >> 0 === xShifted) {
                    position2 += 4;
                    return;
                  } else
                    position2--;
                }
                target[position2++] = 251;
                targetView.setFloat64(position2, value);
                position2 += 8;
              }
            } else if (type === "object") {
              if (!value)
                target[position2++] = 246;
              else {
                if (referenceMap2) {
                  let referee = referenceMap2.get(value);
                  if (referee) {
                    target[position2++] = 216;
                    target[position2++] = 29;
                    target[position2++] = 25;
                    if (!referee.references) {
                      let idsToInsert = referenceMap2.idsToInsert || (referenceMap2.idsToInsert = []);
                      referee.references = [];
                      idsToInsert.push(referee);
                    }
                    referee.references.push(position2 - start);
                    position2 += 2;
                    return;
                  } else
                    referenceMap2.set(value, { offset: position2 - start });
                }
                let constructor = value.constructor;
                if (constructor === Object) {
                  writeObject(value, true);
                } else if (constructor === Array) {
                  length2 = value.length;
                  if (length2 < 24) {
                    target[position2++] = 128 | length2;
                  } else {
                    writeArrayHeader(length2);
                  }
                  for (let i = 0; i < length2; i++) {
                    encode6(value[i]);
                  }
                } else if (constructor === Map) {
                  if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
                    target[position2++] = 217;
                    target[position2++] = 1;
                    target[position2++] = 3;
                  }
                  length2 = value.size;
                  if (length2 < 24) {
                    target[position2++] = 160 | length2;
                  } else if (length2 < 256) {
                    target[position2++] = 184;
                    target[position2++] = length2;
                  } else if (length2 < 65536) {
                    target[position2++] = 185;
                    target[position2++] = length2 >> 8;
                    target[position2++] = length2 & 255;
                  } else {
                    target[position2++] = 186;
                    targetView.setUint32(position2, length2);
                    position2 += 4;
                  }
                  if (encoder.keyMap) {
                    for (let [key, entryValue] of value) {
                      encode6(encoder.encodeKey(key));
                      encode6(entryValue);
                    }
                  } else {
                    for (let [key, entryValue] of value) {
                      encode6(key);
                      encode6(entryValue);
                    }
                  }
                } else {
                  for (let i = 0, l = extensions.length; i < l; i++) {
                    let extensionClass = extensionClasses[i];
                    if (value instanceof extensionClass) {
                      let extension = extensions[i];
                      let tag = extension.tag;
                      if (tag == void 0)
                        tag = extension.getTag && extension.getTag.call(this, value);
                      if (tag < 24) {
                        target[position2++] = 192 | tag;
                      } else if (tag < 256) {
                        target[position2++] = 216;
                        target[position2++] = tag;
                      } else if (tag < 65536) {
                        target[position2++] = 217;
                        target[position2++] = tag >> 8;
                        target[position2++] = tag & 255;
                      } else if (tag > -1) {
                        target[position2++] = 218;
                        targetView.setUint32(position2, tag);
                        position2 += 4;
                      }
                      extension.encode.call(this, value, encode6, makeRoom);
                      return;
                    }
                  }
                  if (value[Symbol.iterator]) {
                    if (throwOnIterable) {
                      let error = new Error("Iterable should be serialized as iterator");
                      error.iteratorNotHandled = true;
                      throw error;
                    }
                    target[position2++] = 159;
                    for (let entry of value) {
                      encode6(entry);
                    }
                    target[position2++] = 255;
                    return;
                  }
                  if (value[Symbol.asyncIterator] || isBlob(value)) {
                    let error = new Error("Iterable/blob should be serialized as iterator");
                    error.iteratorNotHandled = true;
                    throw error;
                  }
                  if (this.useToJSON && value.toJSON) {
                    const json = value.toJSON();
                    if (json !== value)
                      return encode6(json);
                  }
                  writeObject(value, !value.hasOwnProperty);
                }
              }
            } else if (type === "boolean") {
              target[position2++] = value ? 245 : 244;
            } else if (type === "bigint") {
              if (value < BigInt(1) << BigInt(64) && value >= 0) {
                target[position2++] = 27;
                targetView.setBigUint64(position2, value);
              } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
                target[position2++] = 59;
                targetView.setBigUint64(position2, -value - BigInt(1));
              } else {
                if (this.largeBigIntToFloat) {
                  target[position2++] = 251;
                  targetView.setFloat64(position2, Number(value));
                } else {
                  throw new RangeError(value + " was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64");
                }
              }
              position2 += 8;
            } else if (type === "undefined") {
              target[position2++] = 247;
            } else {
              throw new Error("Unknown type: " + type);
            }
          };
          const writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {
            let keys = Object.keys(object);
            let vals = Object.values(object);
            let length2 = keys.length;
            if (length2 < 24) {
              target[position2++] = 160 | length2;
            } else if (length2 < 256) {
              target[position2++] = 184;
              target[position2++] = length2;
            } else if (length2 < 65536) {
              target[position2++] = 185;
              target[position2++] = length2 >> 8;
              target[position2++] = length2 & 255;
            } else {
              target[position2++] = 186;
              targetView.setUint32(position2, length2);
              position2 += 4;
            }
            let key;
            if (encoder.keyMap) {
              for (let i = 0; i < length2; i++) {
                encode6(encoder.encodeKey(keys[i]));
                encode6(vals[i]);
              }
            } else {
              for (let i = 0; i < length2; i++) {
                encode6(keys[i]);
                encode6(vals[i]);
              }
            }
          } : (object, safePrototype) => {
            target[position2++] = 185;
            let objectOffset = position2 - start;
            position2 += 2;
            let size = 0;
            if (encoder.keyMap) {
              for (let key in object)
                if (safePrototype || object.hasOwnProperty(key)) {
                  encode6(encoder.encodeKey(key));
                  encode6(object[key]);
                  size++;
                }
            } else {
              for (let key in object)
                if (safePrototype || object.hasOwnProperty(key)) {
                  encode6(key);
                  encode6(object[key]);
                  size++;
                }
            }
            target[objectOffset++ + start] = size >> 8;
            target[objectOffset + start] = size & 255;
          } : (object, safePrototype) => {
            let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
            let newTransitions = 0;
            let length2 = 0;
            let parentRecordId;
            let keys;
            if (this.keyMap) {
              keys = Object.keys(object).map((k) => this.encodeKey(k));
              length2 = keys.length;
              for (let i = 0; i < length2; i++) {
                let key = keys[i];
                nextTransition = transition[key];
                if (!nextTransition) {
                  nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                  newTransitions++;
                }
                transition = nextTransition;
              }
            } else {
              for (let key in object)
                if (safePrototype || object.hasOwnProperty(key)) {
                  nextTransition = transition[key];
                  if (!nextTransition) {
                    if (transition[RECORD_SYMBOL] & 1048576) {
                      parentRecordId = transition[RECORD_SYMBOL] & 65535;
                    }
                    nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                    newTransitions++;
                  }
                  transition = nextTransition;
                  length2++;
                }
            }
            let recordId = transition[RECORD_SYMBOL];
            if (recordId !== void 0) {
              recordId &= 65535;
              target[position2++] = 217;
              target[position2++] = recordId >> 8 | 224;
              target[position2++] = recordId & 255;
            } else {
              if (!keys)
                keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
              if (parentRecordId === void 0) {
                recordId = structures.nextId++;
                if (!recordId) {
                  recordId = 0;
                  structures.nextId = 1;
                }
                if (recordId >= MAX_STRUCTURES) {
                  structures.nextId = (recordId = maxSharedStructures) + 1;
                }
              } else {
                recordId = parentRecordId;
              }
              structures[recordId] = keys;
              if (recordId < maxSharedStructures) {
                target[position2++] = 217;
                target[position2++] = recordId >> 8 | 224;
                target[position2++] = recordId & 255;
                transition = structures.transitions;
                for (let i = 0; i < length2; i++) {
                  if (transition[RECORD_SYMBOL] === void 0 || transition[RECORD_SYMBOL] & 1048576)
                    transition[RECORD_SYMBOL] = recordId;
                  transition = transition[keys[i]];
                }
                transition[RECORD_SYMBOL] = recordId | 1048576;
                hasSharedUpdate = true;
              } else {
                transition[RECORD_SYMBOL] = recordId;
                targetView.setUint32(position2, 3655335680);
                position2 += 3;
                if (newTransitions)
                  transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
                if (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)
                  recordIdsToRemove.shift()[RECORD_SYMBOL] = void 0;
                recordIdsToRemove.push(transition);
                writeArrayHeader(length2 + 2);
                encode6(57344 + recordId);
                encode6(keys);
                if (safePrototype === null)
                  return;
                for (let key in object)
                  if (safePrototype || object.hasOwnProperty(key))
                    encode6(object[key]);
                return;
              }
            }
            if (length2 < 24) {
              target[position2++] = 128 | length2;
            } else {
              writeArrayHeader(length2);
            }
            if (safePrototype === null)
              return;
            for (let key in object)
              if (safePrototype || object.hasOwnProperty(key))
                encode6(object[key]);
          };
          const makeRoom = (end) => {
            let newSize;
            if (end > 16777216) {
              if (end - start > MAX_BUFFER_SIZE)
                throw new Error("Encoded buffer would be larger than maximum buffer size");
              newSize = Math.min(
                MAX_BUFFER_SIZE,
                Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096
              );
            } else
              newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
            let newBuffer = new ByteArrayAllocate(newSize);
            targetView = new DataView(newBuffer.buffer, 0, newSize);
            if (target.copy)
              target.copy(newBuffer, 0, start, end);
            else
              newBuffer.set(target.slice(start, end));
            position2 -= start;
            start = 0;
            safeEnd = newBuffer.length - 10;
            return target = newBuffer;
          };
          let chunkThreshold = 100;
          let continuedChunkThreshold = 1e3;
          this.encodeAsIterable = function(value, options2) {
            return startEncoding(value, options2, encodeObjectAsIterable);
          };
          this.encodeAsAsyncIterable = function(value, options2) {
            return startEncoding(value, options2, encodeObjectAsAsyncIterable);
          };
          function* encodeObjectAsIterable(object, iterateProperties, finalIterable) {
            let constructor = object.constructor;
            if (constructor === Object) {
              let useRecords = encoder.useRecords !== false;
              if (useRecords)
                writeObject(object, null);
              else
                writeEntityLength(Object.keys(object).length, 160);
              for (let key in object) {
                let value = object[key];
                if (!useRecords)
                  encode6(key);
                if (value && typeof value === "object") {
                  if (iterateProperties[key])
                    yield* encodeObjectAsIterable(value, iterateProperties[key]);
                  else
                    yield* tryEncode(value, iterateProperties, key);
                } else
                  encode6(value);
              }
            } else if (constructor === Array) {
              let length2 = object.length;
              writeArrayHeader(length2);
              for (let i = 0; i < length2; i++) {
                let value = object[i];
                if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
                  if (iterateProperties.element)
                    yield* encodeObjectAsIterable(value, iterateProperties.element);
                  else
                    yield* tryEncode(value, iterateProperties, "element");
                } else
                  encode6(value);
              }
            } else if (object[Symbol.iterator]) {
              target[position2++] = 159;
              for (let value of object) {
                if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
                  if (iterateProperties.element)
                    yield* encodeObjectAsIterable(value, iterateProperties.element);
                  else
                    yield* tryEncode(value, iterateProperties, "element");
                } else
                  encode6(value);
              }
              target[position2++] = 255;
            } else if (isBlob(object)) {
              writeEntityLength(object.size, 64);
              yield target.subarray(start, position2);
              yield object;
              restartEncoding();
            } else if (object[Symbol.asyncIterator]) {
              target[position2++] = 159;
              yield target.subarray(start, position2);
              yield object;
              restartEncoding();
              target[position2++] = 255;
            } else {
              encode6(object);
            }
            if (finalIterable && position2 > start)
              yield target.subarray(start, position2);
            else if (position2 - start > chunkThreshold) {
              yield target.subarray(start, position2);
              restartEncoding();
            }
          }
          function* tryEncode(value, iterateProperties, key) {
            let restart = position2 - start;
            try {
              encode6(value);
              if (position2 - start > chunkThreshold) {
                yield target.subarray(start, position2);
                restartEncoding();
              }
            } catch (error) {
              if (error.iteratorNotHandled) {
                iterateProperties[key] = {};
                position2 = start + restart;
                yield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);
              } else
                throw error;
            }
          }
          function restartEncoding() {
            chunkThreshold = continuedChunkThreshold;
            encoder.encode(null, THROW_ON_ITERABLE);
          }
          function startEncoding(value, options2, encodeIterable) {
            if (options2 && options2.chunkThreshold)
              chunkThreshold = continuedChunkThreshold = options2.chunkThreshold;
            else
              chunkThreshold = 100;
            if (value && typeof value === "object") {
              encoder.encode(null, THROW_ON_ITERABLE);
              return encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);
            }
            return [encoder.encode(value)];
          }
          async function* encodeObjectAsAsyncIterable(value, iterateProperties) {
            for (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {
              let constructor = encodedValue.constructor;
              if (constructor === ByteArray || constructor === Uint8Array)
                yield encodedValue;
              else if (isBlob(encodedValue)) {
                let reader = encodedValue.stream().getReader();
                let next;
                while (!(next = await reader.read()).done) {
                  yield next.value;
                }
              } else if (encodedValue[Symbol.asyncIterator]) {
                for await (let asyncValue of encodedValue) {
                  restartEncoding();
                  if (asyncValue)
                    yield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));
                  else
                    yield encoder.encode(asyncValue);
                }
              } else {
                yield encodedValue;
              }
            }
          }
        }
        useBuffer(buffer2) {
          target = buffer2;
          targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
          position2 = 0;
        }
        clearSharedData() {
          if (this.structures)
            this.structures = [];
          if (this.sharedValues)
            this.sharedValues = void 0;
        }
        updateSharedData() {
          let lastVersion = this.sharedVersion || 0;
          this.sharedVersion = lastVersion + 1;
          let structuresCopy = this.structures.slice(0);
          let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
          let saveResults = this.saveShared(
            sharedData,
            (existingShared) => (existingShared && existingShared.version || 0) == lastVersion
          );
          if (saveResults === false) {
            sharedData = this.getShared() || {};
            this.structures = sharedData.structures || [];
            this.sharedValues = sharedData.packedValues;
            this.sharedVersion = sharedData.version;
            this.structures.nextId = this.structures.length;
          } else {
            structuresCopy.forEach((structure, i) => this.structures[i] = structure);
          }
          return saveResults;
        }
      };
      SharedData = class {
        constructor(structures, values, version) {
          this.structures = structures;
          this.packedValues = values;
          this.version = version;
        }
      };
      BlobConstructor = typeof Blob === "undefined" ? function() {
      } : Blob;
      isLittleEndianMachine2 = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
      extensionClasses = [
        Date,
        Set,
        Error,
        RegExp,
        Tag,
        ArrayBuffer,
        Uint8Array,
        Uint8ClampedArray,
        Uint16Array,
        Uint32Array,
        typeof BigUint64Array == "undefined" ? function() {
        } : BigUint64Array,
        Int8Array,
        Int16Array,
        Int32Array,
        typeof BigInt64Array == "undefined" ? function() {
        } : BigInt64Array,
        Float32Array,
        Float64Array,
        SharedData
      ];
      extensions = [
        {
          // Date
          tag: 1,
          encode(date, encode6) {
            let seconds = date.getTime() / 1e3;
            if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
              target[position2++] = 26;
              targetView.setUint32(position2, seconds);
              position2 += 4;
            } else {
              target[position2++] = 251;
              targetView.setFloat64(position2, seconds);
              position2 += 8;
            }
          }
        },
        {
          // Set
          tag: 258,
          // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
          encode(set, encode6) {
            let array = Array.from(set);
            encode6(array);
          }
        },
        {
          // Error
          tag: 27,
          // http://cbor.schmorp.de/generic-object
          encode(error, encode6) {
            encode6([error.name, error.message]);
          }
        },
        {
          // RegExp
          tag: 27,
          // http://cbor.schmorp.de/generic-object
          encode(regex, encode6) {
            encode6(["RegExp", regex.source, regex.flags]);
          }
        },
        {
          // Tag
          getTag(tag) {
            return tag.tag;
          },
          encode(tag, encode6) {
            encode6(tag.value);
          }
        },
        {
          // ArrayBuffer
          encode(arrayBuffer, encode6, makeRoom) {
            writeBuffer(arrayBuffer, makeRoom);
          }
        },
        {
          // Uint8Array
          getTag(typedArray) {
            if (typedArray.constructor === Uint8Array) {
              if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)
                return 64;
            }
          },
          encode(typedArray, encode6, makeRoom) {
            writeBuffer(typedArray, makeRoom);
          }
        },
        typedArrayEncoder(68, 1),
        typedArrayEncoder(69, 2),
        typedArrayEncoder(70, 4),
        typedArrayEncoder(71, 8),
        typedArrayEncoder(72, 1),
        typedArrayEncoder(77, 2),
        typedArrayEncoder(78, 4),
        typedArrayEncoder(79, 8),
        typedArrayEncoder(85, 4),
        typedArrayEncoder(86, 8),
        {
          encode(sharedData, encode6) {
            let packedValues2 = sharedData.packedValues || [];
            let sharedStructures = sharedData.structures || [];
            if (packedValues2.values.length > 0) {
              target[position2++] = 216;
              target[position2++] = 51;
              writeArrayHeader(4);
              let valuesArray = packedValues2.values;
              encode6(valuesArray);
              writeArrayHeader(0);
              writeArrayHeader(0);
              packedObjectMap = Object.create(sharedPackedObjectMap || null);
              for (let i = 0, l = valuesArray.length; i < l; i++) {
                packedObjectMap[valuesArray[i]] = i;
              }
            }
            if (sharedStructures) {
              targetView.setUint32(position2, 3655335424);
              position2 += 3;
              let definitions = sharedStructures.slice(0);
              definitions.unshift(57344);
              definitions.push(new Tag(sharedData.version, 1399353956));
              encode6(definitions);
            } else
              encode6(new Tag(sharedData.version, 1399353956));
          }
        }
      ];
      defaultEncoder = new Encoder2({ useRecords: false });
      encode5 = defaultEncoder.encode;
      encodeAsIterable = defaultEncoder.encodeAsIterable;
      encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable;
      ({ NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS);
      REUSE_BUFFER_MODE = 512;
      RESET_BUFFER_MODE = 1024;
      THROW_ON_ITERABLE = 2048;
    }
  });

  // node_modules/cbor-x/iterators.js
  function encodeIter(objectIterator, options = {}) {
    if (!objectIterator || typeof objectIterator !== "object") {
      throw new Error("first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable");
    } else if (typeof objectIterator[Symbol.iterator] === "function") {
      return encodeIterSync(objectIterator, options);
    } else if (typeof objectIterator.then === "function" || typeof objectIterator[Symbol.asyncIterator] === "function") {
      return encodeIterAsync(objectIterator, options);
    } else {
      throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise");
    }
  }
  function* encodeIterSync(objectIterator, options) {
    const encoder = new Encoder2(options);
    for (const value of objectIterator) {
      yield encoder.encode(value);
    }
  }
  async function* encodeIterAsync(objectIterator, options) {
    const encoder = new Encoder2(options);
    for await (const value of objectIterator) {
      yield encoder.encode(value);
    }
  }
  function decodeIter(bufferIterator, options = {}) {
    if (!bufferIterator || typeof bufferIterator !== "object") {
      throw new Error("first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise");
    }
    const decoder2 = new Decoder2(options);
    let incomplete;
    const parser = (chunk) => {
      let yields;
      if (incomplete) {
        chunk = Buffer.concat([incomplete, chunk]);
        incomplete = void 0;
      }
      try {
        yields = decoder2.decodeMultiple(chunk);
      } catch (err) {
        if (err.incomplete) {
          incomplete = chunk.slice(err.lastPosition);
          yields = err.values;
        } else {
          throw err;
        }
      }
      return yields;
    };
    if (typeof bufferIterator[Symbol.iterator] === "function") {
      return function* iter() {
        for (const value of bufferIterator) {
          yield* parser(value);
        }
      }();
    } else if (typeof bufferIterator[Symbol.asyncIterator] === "function") {
      return async function* iter() {
        for await (const value of bufferIterator) {
          yield* parser(value);
        }
      }();
    }
  }
  var init_iterators = __esm({
    "node_modules/cbor-x/iterators.js"() {
      init_encode2();
      init_decode2();
    }
  });

  // node_modules/cbor-x/index.js
  var cbor_x_exports = {};
  __export(cbor_x_exports, {
    ALWAYS: () => ALWAYS,
    DECIMAL_FIT: () => DECIMAL_FIT,
    DECIMAL_ROUND: () => DECIMAL_ROUND,
    Decoder: () => Decoder2,
    Encoder: () => Encoder2,
    FLOAT32_OPTIONS: () => FLOAT32_OPTIONS,
    NEVER: () => NEVER,
    REUSE_BUFFER_MODE: () => REUSE_BUFFER_MODE,
    Tag: () => Tag,
    addExtension: () => addExtension2,
    clearSource: () => clearSource,
    decode: () => decode7,
    decodeIter: () => decodeIter,
    decodeMultiple: () => decodeMultiple,
    encode: () => encode5,
    encodeAsAsyncIterable: () => encodeAsAsyncIterable,
    encodeAsIterable: () => encodeAsIterable,
    encodeIter: () => encodeIter,
    isNativeAccelerationEnabled: () => isNativeAccelerationEnabled,
    roundFloat32: () => roundFloat32
  });
  var init_cbor_x = __esm({
    "node_modules/cbor-x/index.js"() {
      init_encode2();
      init_decode2();
      init_iterators();
    }
  });

  // lib/lib.js
  var require_lib = __commonJS({
    "lib/lib.js"(exports, module) {
      init_src();
      init_three_module();
      init_stats_module();
      init_OrbitControls();
      init_MapControls();
      init_troika_three_text_esm();
      if (typeof atlas === "function") {
        if (atlas.imports)
          exportToGlobal(atlas.imports);
        else
          atlas.imports = exportToGlobal({});
      } else if (typeof window !== "undefined") {
        if (window.imports)
          exportToGlobal(window.imports);
        else
          window.imports = exportToGlobal({});
      } else if (typeof global !== "undefined") {
        if (global.imports)
          exportToGlobal(global.imports);
        else
          global.imports = exportToGlobal({});
      }
      if (typeof module !== "undefined")
        exportToGlobal(module.exports || (module.exports = {}));
      function exportToGlobal(exports2) {
        exports2["@atproto/api"] = require_dist();
        exports2["@ipld/car"] = (init_index_browser(), __toCommonJS(index_browser_exports));
        exports2["cbor-x"] = (init_cbor_x(), __toCommonJS(cbor_x_exports));
        exports2["multiformats"] = { CID };
        if (typeof window !== "undefined" || typeof importScripts !== "undefined") {
          exports2["three"] = three_module_exports;
          exports2["three/addons/libs/stats.module.js"] = stats_module_default;
          exports2["three/addons/controls/OrbitControls.js"] = OrbitControls;
          exports2["three/addons/controls/MapControls.js"] = MapControls;
          exports2["troika-three-text"] = troika_three_text_esm_exports;
        } else {
          exports2["three"] = three_module_exports;
        }
        if (!exportToGlobal.__logOnce) {
          exportToGlobal.__logOnce = true;
          console.log("libraries ", Object.keys(exports2));
        }
        return exports2;
      }
    }
  });
  require_lib();
})();
/*! Bundled license information:

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2023 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

troika-three-text/dist/troika-three-text.esm.js:
  (*!
  Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.
  Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE
  *)
  (*!
  Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate
  (https://github.com/101arrowz/fflate) for use in Troika text rendering. 
  Original licenses apply: 
  - fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)
  - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)
  *)
  (*!
  Custom bundle of @unicode-font-resolver/client v1.0.0 (https://github.com/lojjic/unicode-font-resolver)
  for use in Troika text rendering. 
  Original MIT license applies
  *)
*/
